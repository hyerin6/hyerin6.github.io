<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hyerin Blog</title>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>코딩테스트 공간, 시간 복잡도 어림잡기</title>
        <description>&lt;h2 id=&quot;시간-복잡도&quot;&gt;시간 복잡도&lt;/h2&gt;
&lt;p&gt;실제 코딩 테스트 문제의 시간 제한은 1~5초 가량이며,    &lt;br /&gt;
보통 연산 횟수가 10억을 넘어가도록 작성하면 오답 판정 받을 수 있음에 주의해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;시간-제한이-1초인-문제의-경우&quot;&gt;시간 제한이 1초인 문제의 경우&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;N의 범위가 500: 시간 복잡도가 O(N³) 알고리즘을 설계하면 문제를 풀 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;N의 범위가 2,000: 시간 복잡도가 O(N²) 알고리즘을 설계하면 문제를 풀 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;N의 범위가 100,000: 시간 복잡도가 O(NlogN) 알고리즘을 설계하면 문제를 풀 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;N의 범위가 10,000,000: 시간 복잡도가 O(N) 알고리즘을 설계하면 문제를 풀 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;공간-복잡도&quot;&gt;공간 복잡도&lt;/h2&gt;
&lt;p&gt;공간 복잡도를 표기할 때도 빅오 표기법을 이용한다. 일반적으로 메모리 사용량 기준은 MB 단위로 제시된다.&lt;/p&gt;

&lt;p&gt;정수형 자료형인 int를 기준으로 배열 크기에 따른 메모리 사용량은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;int a[1000]: 4KB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;int a[1000000]: 4MB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;int a[2000][2000]: 16MB&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-int-long-범위&quot;&gt;Java int, long 범위&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;종류&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설명&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;저장 공간&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;값의 범위 (최소값~최대값)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;부호 있는 정수&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32 bits&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-2147483648 ~ 2147483647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;long&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;부호 있는 정수&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;64 bits&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-9223372036854775808 ~ 9223372036854775807&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 07 Jan 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-01-07/time/</link>
        <guid isPermaLink="true">http://localhost:4000/2022-01-07/time/</guid>
      </item>
    
      <item>
        <title>lambda 와 effectively final</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;effectively-final-이란&quot;&gt;Effectively final 이란?&lt;/h1&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A non-final local variable or method parameter whose value is never changed 
after initialization is known as effectively final.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Java 8 에 추가된 syntactic sugar 일종으로, 초기화 된 이후 값이 한번도 변경되지 않았다면 effectively final 이라고 할 수 있다.  &lt;br /&gt;
effectively final 변수는 final 키워드가 붙어있지 않았지만 final 키워드를 붙힌 것과 동일하게 컴파일러에서 처리한다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;의미상 final 하다&lt;/code&gt; 라고 생각하는 사람들이 많다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;java 7 에서는 anonymous class 가 외부지역변수 가 final 인 경우에만 접근이 가능했기에 항상 final 키워드를 추가해줘야 했다.   &lt;br /&gt;
java 8 에서는 effectively final 인 경우에도 접근이 가능하게 바뀌어 조건을 만족한다면 final 키워드를 생략할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Java 7&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plusOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Java 8&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Effectively final&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plusOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Java 8&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Effectively final&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;람다에서-사용되는-지역-변수가-final-혹은-effectively-final-이어야-하는-이유&quot;&gt;람다에서 사용되는 지역 변수가 final 혹은 effectively final 이어야 하는 이유&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;람다식에서 참조하는 외부 변수는 final 혹은 effectively final이어야 한다.&lt;/code&gt;가 100% 맞는 말은 아니다.       &lt;br /&gt;
외부 변수는 지역변수, 인스턴스 변수, 클래스 변수가 모두 포함될 수 있는데    &lt;br /&gt;
인스턴스 변수나 클래스 변수는 final 혹은 effective final 하지 않아도 람다식에서 사용할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    
    
&lt;span class=&quot;c1&quot;&gt;// Error, 외부 지역변수는 final 혹은 effectively final 이어야 람다식에서 사용할 수 있다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByLocalVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;localNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;// OK, 값을 변경하더라도 문제 없다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByInstanceVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// OK, 값을 변경하더라도 문제 없다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByStaticVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;람다식에서 사용되는 지역 변수가 final 혹은 effective final이어야 하는 이유를 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;capturing-lambda--non-capturing-lambda&quot;&gt;Capturing lambda &amp;amp; Non-Capturing lambda&lt;/h1&gt;
&lt;p&gt;람다식에는 2가지 타입이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Capturing lambda
    &lt;ul&gt;
      &lt;li&gt;Local Capturing lambda&lt;/li&gt;
      &lt;li&gt;Non-Local Capturing lambda&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Non-Capturing lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;capturing-lambda&quot;&gt;Capturing lambda&lt;/h3&gt;
&lt;p&gt;외부 변수를 이용하는 람다식을 의미한다. &lt;br /&gt;
  외부 변수는 지역변수, 인스턴스 변수, 클래스 변수를 모두 포함한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CapturingLambda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-capturing-lambda&quot;&gt;Non-Capturing lambda&lt;/h3&gt;
&lt;p&gt;외부 변수를 이용하지 않는 람다식을 의미한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NonCapturingLambda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NonCapturingLambda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Capturing lambda는 다시 local capturing lambda와 non-local capturing lambda로 구분할 수 있다.    &lt;br /&gt;
local과 non-local을 구분하는 이유는 지역 변수가 가지는 특징으로 인해 내부 동작 방식이 다르기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;local-capturing-lambda&quot;&gt;Local Capturing lambda&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByLocalVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;외부 변수로 지역 변수를 이용하는 람다식을 의미한다.  &lt;br /&gt;
다음과 같은 특징이 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1) 람다식에서 사용되는 일부 지역 변수는 복사본이다. 
(2) final 혹은 effectively final인 지역 변수만 람다식에서 사용할 수 있다. 
(3) 복사된 지역 변수 값은 람다식 내부에서도 변경할 수 없다. 즉 final 변수로 다뤄야 한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 특징이 생긴 이유를 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-람다식에서-사용되는-외부-지역변수는-복사본이다&quot;&gt;1. 람다식에서 사용되는 외부 지역변수는 복사본이다.&lt;/h4&gt;
&lt;p&gt;람다식에서는 외부 지역변수를 그대로 사용하지 못하고 복사본을 사용하는 이유는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;지역 변수는 스택 영역에 생성된다. 따라서 지역 변수가 선언된 block이 끝나면 스택에서 제거된다.  &lt;br /&gt;
→ 메소드 내 지역 변수를 참조하는 람다식을 리턴하는 메소드가 있을 경우, 메소드 block이 끝나면  &lt;br /&gt;
지역 변수가 스택에서 제거되므로 추후에 람다식이 수행될 때 참조할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지역 변수를 관리하는 스레드와 람다식이 실행되는 스레드가 다를 수 있다.  &lt;br /&gt;
→ 스택은 각 스레드의 고유의 공간이고, 스레드끼리 공유되지 않기 때문에     &lt;br /&gt;
마찬가지로 람다식이 수해오딜 때 값을 참조할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 이유로 인해 람다식에서는 외부 지역 변수를 직접 참조하지 않고 복사본을 전달받아 사용하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-final-혹은-effectively-final인-지역-변수만-람다식에서-사용할-수-있다&quot;&gt;2. final 혹은 effectively final인 지역 변수만 람다식에서 사용할 수 있다.&lt;/h4&gt;
&lt;p&gt;만약 참조하고자 하는 지역 변수가 final 혹은 effectively final이 아닐 경우 &lt;br /&gt;
즉 변경이 가능할 경우 어떤 문제가 발생할까?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executelocalVariableInMultiThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// do operation&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;shouldRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;람다식이 어떤 스레드에서 수행될지는 미리 알 수 없다.   &lt;br /&gt;
이 얘기는 곧 외부 지역 변수를 다루는 스레드와 람다식이 수행되는 스레드가 다를 수 있다는 의미이다. &lt;br /&gt;
지역 변수 값(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldRun&lt;/code&gt;)을 제어하는 스레드 A, 람다식이 수행되는 스레드 B가 있다고 가정해보자.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;스레드 B의 shouldRun 값이 가장 최신 값으로 복사되어 전달 됐는지 확신할 수 없다. 
shouldRun은 변경이 가능한 지역 변수이고, 지역 변수를 스레드 간에 sync 해주는 것이 불가능하기 때문이다. 

지역 변수는 스레드 A의 스택 영역에 존재하기 때문에 다른 스레드에서 접근이 불가능하다. 
volatile과 같은 키워드가 로컬 변수에서 사용될 수 없는 이유도 이와 같다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;값이 보장되지 않는다면 매번 다른 결과가 도출될 수 있다.   &lt;br /&gt;
이러한 이유로 인해 외부 지역 변수는 전달되는 복사본이 변경되지 않은      &lt;br /&gt;
최신 값이라는 것을 보장하기 위해 final 혹은 effectively final이어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3--복사된-지역-변수-값은-람다식-내부에서도-변경할-수-없다-즉-final-변수로-다뤄야-한다&quot;&gt;3.  복사된 지역 변수 값은 람다식 내부에서도 변경할 수 없다. 즉 final 변수로 다뤄야 한다.&lt;/h4&gt;
&lt;p&gt;이미 복사된 값이므로 변경해도 문제가 없는거 아닐까? &lt;strong&gt;아니다.&lt;/strong&gt;   &lt;br /&gt;
복사될 값의 변조를 막아 최신 값임을 보장하기 위해 final 제약을 걸었는데 람다식 내부에서 변경이 가능할 경우 다시 제자리로 돌아온다.&lt;/p&gt;

&lt;p&gt;또한 컴파일 된 람다식은 static 메소드 형태로 변경이 되는데 이때 복사된 값이 파라미터로 전달되므로 &lt;br /&gt;
마찬가지로 스택 영역에 존재하기 때문에 sync를 해주는 것도 불가능하다. &lt;br /&gt;
따라서 람다식 내부에서도 값이 변경 되어서는 안된다.&lt;/p&gt;

&lt;p&gt;컴파일러 레벨에서 앞, 뒤로 final 제약을 걸어줌으로써 멀티 스레드 환경에서 대응하기 어려운 이슈를 미연에 방지한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;non---local-capturing-lambda&quot;&gt;Non - local capturing lambda&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByInstanceVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPlusByStaticVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Addable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addableImple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;외부 변수로 인스턴스 변수 혹은 클래스 변수를 이용하는 람다식을 의미한다.   &lt;br /&gt;
local capturing lambda와 다르게 final 제약 조건이 없고 외부 변수 값도 복사하지 않는다.&lt;/p&gt;

&lt;p&gt;이유는 인스턴스 변수나 클래스 변수를 저장하고 있는 메모리 영역은 공통 영역이고  &lt;br /&gt;
값이 메모리에서 바로 회수되지 않기 때문에 람다식에서 바로 참조가 가능하다.  &lt;br /&gt;
따라서 복사 과정이 불필요하고 참조 시 최신 값 임을 보장할 수 있다. &lt;br /&gt;
단, 멀티 스레드 환경일 경우 volatile, synchronized 등을 이용하여 sync를 맞춰주는 작업을 잊어서는 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;람다식에서 외부 지역 변수를 이용할 경우 final 혹은 effectively final 이어야 하는 이유는 지역 변수가 스택에 저장되기 때문에 람다식에서 값을 바로 참조하는 것에 제약이 있어 복사된 값을 이용하게 되는데, 이때 멀티 쓰레드 환경에서 복사 될/복사된 값이 변경 가능 할 경우 이로 인한 동시성 이슈를 대응할 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/java-effectively-final&quot;&gt;https://www.baeldung.com/java-effectively-final&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/java-lambda-effectively-final-local-variables&quot;&gt;https://www.baeldung.com/java-lambda-effectively-final-local-variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/how-lambdas-and-anonymous-inner-classesaic-work&quot;&gt;https://dzone.com/articles/how-lambdas-and-anonymous-inner-classesaic-work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-12-28/lambda/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-12-28/lambda/</guid>
      </item>
    
      <item>
        <title>HttpMessageNotReadableException 해결하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;로깅-기능-개발&quot;&gt;로깅 기능 개발&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-22/log-slack/&quot;&gt;로깅 기능 개발&lt;/a&gt; 과정을 포스팅한 적이 있다.   &lt;br /&gt;
로그를 남기기 위해 request를 읽어야 했는데         &lt;br /&gt;
왜 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentCachingRequestWrapper&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentCachingResponseWrapper&lt;/code&gt;를 사용해서 읽었을까?&lt;/p&gt;

&lt;p&gt;request를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getInputStream()&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getReader()&lt;/code&gt;로 두번 읽으면 다음과 같은 exception이 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getInputStream()&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getReader()&lt;/code&gt;는 두 번 읽어서 처리할 수 없게 되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;800&quot; src=&quot;https://user-images.githubusercontent.com/33855307/147201425-be3fbd60-22d0-4bbe-ad6f-7c662b83dc93.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링의 유틸 클래스인 ContentCachingRequestWrapper 를 사용한 이유이다.   &lt;br /&gt;
ContentCachingRequestWrapper는 입력 스트림 과 리더 에서 읽은 모든 내용을 캐싱한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/44&quot;&gt;https://meetup.toast.com/posts/44&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-12-23/request/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-12-23/request/</guid>
      </item>
    
      <item>
        <title>정렬</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;선택-정렬&quot;&gt;선택 정렬&lt;/h2&gt;
&lt;p&gt;가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고,    &lt;br /&gt;
그다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정을 반복하면 어떨까?&lt;/p&gt;

&lt;p&gt;가장 원시적인 방법으로 매번 가장 작은 것을 선택한다는 의미에서 선택 정렬 알고리즘이라고 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectionSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 아직 정렬되지 않은 부분에서 가장 작은 요소의 인덱스를 기록한다. &lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 아직 정렬되지 않은 부분의 첫 요소와 가장 작은 요소의 자리를 바꾼다.&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;선택 정렬은 N-1번 만큼 가장 작은 수를 찾아 맨 앞으로 보내야 한다.   &lt;br /&gt;
선택 정렬의 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;선택 정렬은 기본 정렬 라이브러리를 포함해 다른 알고리즘과 비교했을 때 매우 비효율적이다.  &lt;br /&gt;
다만 특정 리스트에서 가장 작은 데이터를 찾는 일에서 선택 정렬 소스코드가 필요할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;삽입-정렬&quot;&gt;삽입 정렬&lt;/h2&gt;
&lt;p&gt;삽입 정렬을 느린 편이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터를 하나씩 확인하며, 각 데이터를 적절한 위치에 삽입하면?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;삽입 정렬은 필요할 때만 위치를 바꾸므로 데이터가 거의 정렬되어 있을 때 훨씬 효율적이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertionSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 삽입할 값 보관&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 뒤로 이동&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
			    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 값 삽입&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;퀵-정렬&quot;&gt;퀵 정렬&lt;/h2&gt;
&lt;p&gt;퀵 정렬과 병합 정렬은 대부분의 프로그래밍 언어에서 정렬 라이브러리의 근간이 되는 알고리즘이기도 하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸면 어떨까?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;퀵 정렬은 기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작한다.  &lt;br /&gt;
퀵 정렬에서는 pivot이라는 기준 값이 사용된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
			&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 배열 나누기&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 1구역 정렬&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 2구역 정렬&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;계수-정렬--기수-정렬&quot;&gt;계수 정렬 &amp;amp; 기수 정렬&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-01-20/countingSort/&quot;&gt;https://hyerin6.github.io/2021-01-20/countingSort/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-두-배열의-원소-교체&quot;&gt;문제: 두 배열의 원소 교체&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;문제)&lt;/strong&gt;&lt;br /&gt;
두 배열 A, B를 가지고 있다. 두 배열은 N개의 원소로 구성되어 있으며 배열의 원소는 모두 자연수이다.  &lt;br /&gt;
최대 K번 바꿔치기 연산을 수행할 수 있는데 바꿔치기 연산이란   &lt;br /&gt;
배열 A에 있는 원소 하나와 배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것을 말한다.   &lt;br /&gt;
최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Input]
5 3 
1 2 5 4 3 
5 5 6 6 5

[Output]
26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이-코드&quot;&gt;풀이 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 배열 A는 오름차순 정렬 수행&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 배열 B는 내림차순 정렬 수행&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reverseOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 첫 번째 인덱스부터 확인하며, 두 배열의 원소를 최대 K번 비교&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// A의 원소가 B의 원소보다 작은 경우&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// 두 원소를 교체&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// A의 원소가 B의 원소보다 크거나 같을 때, 반복문을 탈출&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 배열 A의 모든 원소의 합을 출력&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-12-19/sort/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-12-19/sort/</guid>
      </item>
    
      <item>
        <title>Dynamic Programming</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다이나믹-프로그래밍&quot;&gt;다이나믹 프로그래밍&lt;/h2&gt;
&lt;p&gt;메모리 공간을 약간 더 사용하면 연산 속도를 비약적으로 증가시킬 수 있는 방법이 있다.      &lt;br /&gt;
대표적인 방법이 다이나믹 프로그래밍 기법으로 동적 게획법이라고 표현하기도 한다.&lt;/p&gt;

&lt;p&gt;다이나믹 프로그래밍으로 해결할 수 있는 대표적인 예시로 피보나치 수열이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;n번째 피보나치 수 = (n-1)번째 피보나치 수 + (n-2)번째 피보나치 수&lt;/li&gt;
  &lt;li&gt;단 1번째, 2번째 피보나치 수 = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 식을 프로그래밍으로 표현하려면 재귀 함수를 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fibo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fibo(n)&lt;/code&gt; 함수에서 n이 커지면 커질수록 수행 시간이 기하급수적으로 늘어나기 때문에 심각한 문제가 생길 수 있다.     &lt;br /&gt;
호출되는 함수를 생각해보면 동일한 함수가 반복적으로 호촐되는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이러한 문제는 다이나믹 프로그래밍을 사용하면 효율적으로 해결할 수 있다.   &lt;br /&gt;
다만 항상 사용할 수는 없고 다음 조건을 만족할 때 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 큰 문제를 작은 문제로 나눌 수 있다. 
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제를 메모제이션 기법을 사용해 해결할 수 있다.  &lt;br /&gt;
한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d = [0] * 100 

def fibo(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]
    
print(fibo(99))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;탑다운top-down--보텀업bottom-up-방식&quot;&gt;탑다운(top-down) &amp;amp; 보텀업(bottom-up) 방식&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;탑다운 방식(메모제이션): 재귀 함수를 이용해 큰 문제를 해결하기 위해 작은 문제를 호출하는 것&lt;/li&gt;
  &lt;li&gt;보텀업 방식: 반복문을 이용해 작은 문제를 차근차근 답을 도출하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-1로-만들기&quot;&gt;문제: 1로 만들기&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146565704-a9e89a34-be16-4f3d-abd7-8f46f886ed99.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;점화식: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min(Ai-1, Ai/2, Ai/3, Ai/5) + 1&lt;/code&gt;&lt;br /&gt;
1을 더해주는 이유는 함수의 호출 횟수를 구해야 하기 때문이다.   &lt;br /&gt;
1을 빼는 연산을 제외하고 해당 수로 나누어떨어질 때만 더 작은 수를 비교하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이-코드&quot;&gt;풀이 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-개미-전사&quot;&gt;문제: 개미 전사&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146627198-dd956cc2-82db-4992-af11-eec82fe2233c.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;i번째 식량창고에 대해서 털지 안털지의 여부를 결정할 때, 2가지 경우만 비교하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;450&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146627546-d33680ee-cbc7-49df-b656-6bce465b4efe.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-1&lt;/code&gt;번째 식량창고를 털기로 결정한 경우 현재의 식량창고를 털 수 없다.    &lt;br /&gt;
(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-2&lt;/code&gt;번째 식량창고를 텅ㅇ기로 결정한 경우 현재의 식량창고를 털 수 있다.&lt;/p&gt;

&lt;p&gt;한 칸 이상 떨어진 식량창고는 항상 털 수 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-3&lt;/code&gt;번째 이하의 식량창고에 대해서는 고려할 필요가 없다.&lt;/p&gt;

&lt;p&gt;더 많은 식량을 털 수 있는 경우를 선택하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이-코드-1&quot;&gt;풀이 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-바닥-공사&quot;&gt;문제: 바닥 공사&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146627655-ac9eb75f-c2da-4fcc-b0af-b48168515511.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;500&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146628315-0200f66d-0057-4bca-b004-b51be3674350.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이-코드-2&quot;&gt;풀이 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;796796&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-효율적인-화폐-구성&quot;&gt;문제: 효율적인 화폐 구성&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/33855307/146628377-ea19dbe8-0dd3-481e-bc79-3be41ea71d1f.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;화폐 단위가 큰 단위가 작은 단위의 배수가 아니기 때문에      &lt;br /&gt;
매번 가장 큰 화폐 단위로부터 처리하는 방법으로는 해결할 수 없고 다이나믹 프로그래밍을 이용해야 한다.&lt;/p&gt;

&lt;p&gt;금액 i를 만들 수 있는 최소한의 화폐 개수를 ai, 화폐의 단위를 k라고 했을 때     &lt;br /&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ai-k&lt;/code&gt;는 금액 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i-k&lt;/code&gt;를 만들 수 있는 최소한의 화폐 개수를 의미)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ai-k&lt;/code&gt;를 만드는 방법이 존재하는 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ai = min(ai, ai-k + 1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ai-k&lt;/code&gt;를 만드는 방법이 존재하지 않는 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ai = 10001&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이-코드-3&quot;&gt;풀이 코드&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-12-17/dp/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-12-17/dp/</guid>
      </item>
    
      <item>
        <title>ES에 데이터 적재 후 검색해보기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ES 적용이 얼마나 성능을 개선시키는지 확인해보기 위해 약 50만개의 영화 관련 데이터를 &lt;br /&gt;
DB와 ES 클러스터에 채우고 검색 결과를 비교해봤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;영화 관련 데이터이기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;영화&lt;/code&gt; 키워드가 압도적으로 많아 다른 키워드에 비해 시간이 더 소요된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db-vs-shard1-vs-shard8-vs-shard8-replica1&quot;&gt;DB vs shard1 vs shard8 vs shard8 replica1&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;550&quot; src=&quot;https://user-images.githubusercontent.com/33855307/141730738-9aa51674-92bb-4245-bf73-2eb0c3d4b4d3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;shard8, replica1 으로 구성했을 때 가장 많이 개선된 결과를 얻을 수 있었다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;shard가 1개인 경우 DB 보다 성능이 안나올 수도 있다.&lt;/li&gt;
  &lt;li&gt;키워드로 검색되는 문서의 개수가 많은 경우 DB가 성능이 더 좋을 수 있다.&lt;/li&gt;
  &lt;li&gt;노드, 샤드가 여러개 늘어날수록 경우 성능이 개선됨&lt;/li&gt;
  &lt;li&gt;매칭되는 문서 개수가 적은 겨우 ES가 더 빠른 검색 성능을 보임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elasticsearch&quot;&gt;ElasticSearch&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;550&quot; src=&quot;https://user-images.githubusercontent.com/33855307/145706629-b235a1d8-77f9-4c1f-bd2c-a95c7c9a3482.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;클러스터&quot;&gt;클러스터&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1개 이상의 노드로 구성된 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하나 이상의 노드(=서버)가 모인 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클러스터를 통해, 데이터를 저장하고, 색인 및 검색 기능을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;노드&quot;&gt;노드&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클러스터에 포함되는 단일 서버&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터를 저장하고 클러스터의 색인, 검색 기능에 참여한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;인덱스색인-index&quot;&gt;인덱스(색인, index)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스 = 데이터 저장 공간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1개 노드에 여러 개 인덱스 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1개 인덱스는 여러 개 노드에 분산 저장되어 관리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1개 인덱스는 1개 타입 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;elasticsearch의 index 생성 시 기본 구조: 5개의 primary shard + 1개의 replica shard&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;타입유형&quot;&gt;타입(유형)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 색인에서 하나 이상의 타입을 정의할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DB의 table과 대응된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;도큐먼트&quot;&gt;도큐먼트&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;색인화 할 수 있는 기본 정보 단위이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예를 들어 어떠한 단일 제품, 단일 고객, 단일 주문에 대한 도큐먼트가 각각 존재할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 문서는 JSON 형식이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shard-and-replica&quot;&gt;Shard and Replica&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;색인은 방대한 양의 데이터를 저장할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터가 단일 노드의 하드웨어 한도를 초과할 수도 있다. (수용하지 못하거나 느려지는 등의 문제 발생)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elasticsearch에서는 이러한 문제를 해결하기 위해, 샤드(Shard)라는 조각으로 색인을 분할하는 기능을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replication은 샤드를 완전히 복사하면서 진행이 되고,     &lt;br /&gt;
복사된 샤드를 replica shard 기존 샤드를 primary shard라고 부른다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;replica 샤드는 primary 샤드와 반드시 다른 노드에 저장해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;replication은 인덱스의 처리량(throughput)을 높이는 역할도 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sharding이 query parallelization을 해주는 덕분에   &lt;br /&gt;
검색 쿼리를 여러 샤드에서 동시에 실행할 수 있으며 성능 및 처리량을 향상시킨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sharding을 통해 수많은 데이터를 하나의 인덱스 내 저장 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sharding은 노드, 클러스터 레벨이 아닌 인덱스 레벨에서 시행되는데     &lt;br /&gt;
 이는 각각의 인덱스가 포함하는 document들의 개수가 다르기 때문이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Dec 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-12-12/es-search/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-12-12/es-search/</guid>
      </item>
    
      <item>
        <title>Java 11을 사용하는 이유</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Java 8에서는 기존 버전들과 비교해서 가장 큰 변화가 있었다. 간략하게 정리하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;스트림 API&lt;/li&gt;
  &lt;li&gt;메서드에 코드를 전달하는 기법(메서드 레퍼런스와 람다)&lt;/li&gt;
  &lt;li&gt;인터페이스의 디폴트 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 8을 공부하고 써오다가 Java 11로 변환한 이유를 정리해보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-람다-파라미터를-위한-지역변수-표현&quot;&gt;1. 람다 파라미터를 위한 지역변수 표현&lt;/h2&gt;
&lt;p&gt;Java 10에서 var 구문이 생겼다. &lt;br /&gt;
Java 11에서는 람다 파라미터에서 좀 더 명시적으로 var를 사용할 수 있게 되었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Java 8에 등장했으나 Java 10에서 사라졌다가 Java 11에서 복귀&lt;/li&gt;
  &lt;li&gt;람다는 타입을 스킵할 수 있는데 이걸 사용하는 이유는, 1@Nullable1 등의 어노테이션을 사용하기 위해 타입을 명시해야 할 때&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; 를 사용하려면 괄호를 써야하며 모든 파라미터에 사용해야 하고 다른 타입과 혼용하거나 일부 스킵은 불가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-http-client-standard&quot;&gt;2. HTTP Client (Standard)&lt;/h2&gt;
&lt;p&gt;Non-Blocking request and response 지원 (with CompletableFuture)&lt;br /&gt;
Backpressure 지원(java.util.concurrent.Flow 패키지를 통해 Rx Flow를 구현체에 적용)&lt;br /&gt;
Factory method 형태로 지원&lt;br /&gt;
HTTP/2 지원&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;spring5에서는 Rest Client에 RestTemplate 대신해 WebClient를 사용하여 비동기 구현을 할 수 있다.&lt;br /&gt;
기존 멀티스레드 방식을 버리고 Reactor(WebFlux)와 함께 스프링 기반 웹서비스를 구현할 경우, &lt;br /&gt;
그에 따른 성능과 효율 향상은 어마어마하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-모듈&quot;&gt;3. 모듈&lt;/h2&gt;
&lt;p&gt;모듈을 통해 애플리케이션에 필요한 구성 요소만 포함하는 런타임 구성을 사용자 지정할 수 있다.   &lt;br /&gt;
이 사용자 지정은 &lt;strong&gt;메모리 공간을 더 적게 사용&lt;/strong&gt;하며 애플리케이션이 jlink를 사용하여  &lt;br /&gt;
배포용 사용자 지정 런타임에 정적으로 연결될 수 있게 해준다. &lt;br /&gt;
메모리 공간을 적게 사용하면 특히 &lt;strong&gt;마이크로서비스 아키텍처에서 유용&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;p&gt;내부적으로 JVM은 모듈을 활용하여 클래스 로딩을 보다 효율적으로 만들 수 있다.   &lt;br /&gt;
그 결과 &lt;strong&gt;런타임이 더 작아지고, 더 가벼워져서 더 빠르게 시작&lt;/strong&gt;할 수 있습니다.     &lt;br /&gt;
모듈은 클래스에 필요한 구성 요소를 인코딩하기 때문에 &lt;br /&gt;
JVM에서 애플리케이션 성능을 개선하기 위해 사용하는 &lt;br /&gt;
최적화 기법의 효과가 더 좋아질 수 있다.&lt;/p&gt;

&lt;p&gt;프로그래머의 경우 모듈은 모듈이 내보내는 패키지와 필요한 구성 요소를 명시적으로 선언하고 &lt;br /&gt;
반사적 액세스를 제한하여 &lt;strong&gt;강력한 캡슐화를 적용&lt;/strong&gt;하는 데 도움이 된다.   &lt;br /&gt;
이 캡슐화 수준을 사용하면 애플리케이션을 더 안전하고 쉽게 유지 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-프로파일링-및-진단&quot;&gt;4. 프로파일링 및 진단&lt;/h2&gt;

&lt;h4 id=&quot;java-flight-recorder&quot;&gt;Java Flight Recorder&lt;/h4&gt;
&lt;p&gt;JFR(Java Flight Recorder)은 실행 중인 Java 애플리케이션에서 진단 및 프로파일링 데이터를 수집한다.   &lt;br /&gt;
JFR 및 JMC는 Java 8에서 상용 기능이지만 Java 11에서는 둘 다 오픈 소스이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;java-mission-control&quot;&gt;Java Mission Control&lt;/h4&gt;
&lt;p&gt;JMC(Java Mission Control)는 JFR(Java Flight Recorder)에서   &lt;br /&gt;
수집한 데이터를 그래픽으로 표시하고 Java에서는 오픈 소스로 제공된다.       &lt;br /&gt;
JFR 및 JMC를 사용하면 메모리 누수, GC 오버헤드, 핫 메서드, &lt;br /&gt;
스레드 병목 상태 및 I/O 블로킹과 같은 런타임 문제를 진단할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;통합-로깅&quot;&gt;통합 로깅&lt;/h4&gt;
&lt;p&gt;Java 11에는 JVM의 모든 구성 요소에 대한 일반적인 로깅 시스템이 있다.     &lt;br /&gt;
이 세분화된 로깅은 JVM 충돌에 대한 근본 원인 분석을 수행하고    &lt;br /&gt;
프로덕션 환경에서 성능 문제를 진단하는 데 유용하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;오버헤드가-낮은-힙-프로파일링&quot;&gt;오버헤드가 낮은 힙 프로파일링&lt;/h4&gt;
&lt;p&gt;Java 힙 할당을 샘플링하는 데 사용할 수 있는 새 API가    &lt;br /&gt;
JVMTI(Java Virtual Machine Tool Interface)에 추가되었다.   &lt;br /&gt;
JFR 구현에서는 할당이 누락될 수도 있다.   &lt;br /&gt;
반면 Java 11의 힙 샘플링은 라이브 개체와 데드 개체 모두에 대한 정보를 제공할 수 있다.    &lt;br /&gt;
APM(애플리케이션 성능 모니터링) 공급업체가 이 새로운 기능을 활용하기 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;stackwalker&quot;&gt;StackWalker&lt;/h4&gt;
&lt;p&gt;현재 스레드의 스택에 대한 스냅샷 가져오기는 로깅할 때 주로 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-garbage-수집&quot;&gt;5. Garbage 수집&lt;/h2&gt;
&lt;p&gt;Java 11에서 사용할 수 있는 가비지 수집기는 직렬, 병렬, 가비지 우선 및 엡실론(Epsilon)이다.   &lt;br /&gt;
Java 11의 기본 가비지 수집기는 G1GC(가비지 우선 가비지 수집기)이다.&lt;/p&gt;

&lt;p&gt;ZGC는 일시 중지 시간을 10ms 미만으로 유지하려고 하는 대기 시간이 짧은 동시 수집기이다.    &lt;br /&gt;
ZGC는 Java 11에서 실험적 기능으로 사용할 수 있다.   &lt;br /&gt;
CMS(Concurrent Mark and Sweep) 수집기는 사용할 수 있지만 Java 9 이후에는 사용되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;epsilon엡실론&quot;&gt;Epsilon(엡실론)&lt;/h4&gt;
&lt;p&gt;엡실론 가비지 수집기는 할당을 처리하지만 메모리를 회수하지는 않는다.  &lt;br /&gt;
힙이 소진되면 JVM이 종료된다.  &lt;br /&gt;
엡실론은 수명이 짧은 서비스와 가비지를 사용하지 않는 것으로 알려진 애플리케이션에 유용하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;docker-컨테이너의-향상된-기능&quot;&gt;Docker 컨테이너의 향상된 기능&lt;/h4&gt;
&lt;p&gt;Java 10 이전에 컨테이너에 설정된 메모리 및 CPU 제약 조건은 JVM에서 인식되지 않았다. &lt;br /&gt;
예를 들어 Java 8에서 JVM은 최대 힙 크기의 기본값을 기본 호스트의 실제 메모리의 ¼로 설정한다.  &lt;br /&gt;
Java 10부터 JVM은 컨테이너 제어 그룹(cgroup)에 의해 설정된 제약 조건을 사용하여 메모리 및 CPU 제한을 설정한다. &lt;br /&gt;
예를 들어 기본 최대 힙 크기는 컨테이너의 메모리 제한의 ¼이다. (예: -m2G의 경우 500MB)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;다중-릴리스-jar-파일&quot;&gt;다중 릴리스 jar 파일&lt;/h4&gt;
&lt;p&gt;Java 11에서 클래스 파일의 여러 Java 릴리스별 버전을 포함하는 jar 파일을 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-성능-향상&quot;&gt;6. 성능 향상&lt;/h2&gt;
&lt;h4 id=&quot;jvm-성능-향상&quot;&gt;JVM 성능 향상&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Segmented Code Cache: 코드 캐시를 고유 세그먼트로 나눈다.   &lt;br /&gt;
이는 JVM 메모리 공간을 효율적으로 제어하고 컴파일된 메서드의 검색시간을 단축하고 &lt;br /&gt;
코드 캐시의 조각화를 줄여 성능을 향상시킨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compact Strings: 문자열을 저장하는 데 필요한 공간이 효율적으로 변경되었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Class-Data Sharing: 클래스-데이터 공유는 보관된 클래스가 런타임 시 메모리에 매핑될 수 있게 하여 시작 시간을 줄여준다.   &lt;br /&gt;
애플리케이션 클래스-데이터 공유는 애플리케이션 클래스를 CDS 보관함에 배치할 수 있도록 하여 클래스-데이터 공유를 확장한다.    &lt;br /&gt;
여러 JVM이 동일한 보관 파일을 공유하는 경우 메모리가 저장되고 전체 시스템 응답 시간이 단축된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Thread-Local Handshakes: 글로벌 VM 세이프포인트를 수행하지 않고 스레드에 대한 콜백을 실행하여 
VM이 글로벌 세이프포인트의 수를 줄여 대기 시간을 단축할 수 있게 해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lazy Allocation of Compiler Threads: VM은 단계별 컴파일 모드에서 다량의 컴파일러 스레드를 시작한다. &lt;br /&gt;
이 모드는 CPU가 여러 개 있는 시스템에서 기본값이다. 이러한 스레드는 사용 가능한 메모리 또는 컴파일 요청 수에 관계없이 생성된다. &lt;br /&gt;
스레드는 유휴 상태일 때(거의 모든 시간) 메모리를 사용하므로 리소스를 비효율적으로 사용한다. &lt;br /&gt;
이 문제를 해결하기 위해 시작 시 각 유형의 컴파일러 스레드를 하나씩만 시작하도록 구현이 변경되었다.
추가 스레드를 시작하고 사용하지 않는 스레드를 종료하는 것은 동적으로 처리된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;핵심-라이브러리-성능-향상&quot;&gt;핵심 라이브러리 성능 향상&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Variable Handles: 표준을 정의한다는 것은 개체 필드 및 배열 요소, 메모리 정렬의 세부적인 제어를 위한 표준 펜스 작업 세트, &lt;br /&gt;
참조된 개체의 강력한 연결성을 유지하기 위한 표준 연결성 펜스 작업에 대한 다양한  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent.atomic&lt;/code&gt; 및 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sun.misc.Unsafe&lt;/code&gt; 작업의 동급 요소를 호출하는 것을 의미한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Convenience Factory Methods for Collections: 소량의 요소를 사용하여 컬렉션 및 맵 인스턴스를 &lt;br /&gt;
편리하게 만들 수 있게 해주는 라이브러리 API를 정의한다. &lt;br /&gt;
컬렉션 인터페이스에서 간결하고 수정할 수 없는 컬렉션 인스턴스를 만드는 고정 팩터리 메서드이다.   &lt;br /&gt;
이러한 인스턴스는 본질적으로 더 효율적이다. API는 조밀하게 표시되고 래퍼 클래스가 없는 컬렉션을 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spin-Wait Hints: Java에서 스핀 루프에 있음을 런타임 시스템에 암시할 수 있게 해주는 API를 제공한다. &lt;br /&gt;
특정 하드웨어 플랫폼은 스레드가 바쁜 대기(busy-wait) 상태라고 소프트웨어가 알려주면 이점을 얻을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP Client(Standard): HTTP/2 및 WebSocket을 구현하고 레거시 HttpURLConnection API를 대체할 수 있는 새로운 HTTP 클라이언트 API를 제공한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-nest-based-access-control&quot;&gt;7. Nest-Based Access Control&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nest1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nest1Var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nest2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nest2Var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 Nested class의 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nest1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nest2&lt;/code&gt;는 모두 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nestmate&lt;/code&gt;이다.  &lt;br /&gt;
기존 JVM 상에서는 nestmate끼리 private 멤버 변수를 접근하려면 컴파일러가 중간에 bridge method를 만들어야 했다. &lt;br /&gt;
따라서, reflection을 사용하여 nestmate class의 private 멤버 변수에 접근하려고 하면, &lt;br /&gt;
llegalAccessException이 발생한다.&lt;/p&gt;

&lt;p&gt;이러한 모순을 해결하고자, 새로운 ‘nest’라는 class file 개념을 도입해 하나의 중첩 클래스이지만 &lt;br /&gt;
서로 다른 클래스파일로 분리하여 bridge method의 도움 없이도 서로의 private 멤버에 접근할 수 있도록 하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/java/openjdk/reasons-to-move-to-java-11?toc=/azure/developer/java/fundamentals/toc.json&amp;amp;bc=/azure/developer/breadcrumb/toc.json&quot;&gt;microsoft Java 11 이상으로 이동 하는 이유&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-26/java11/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-26/java11/</guid>
      </item>
    
      <item>
        <title>Kafka 사용 이유</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SNS 글 작성 요청을 누락시키지 않기 위해 RabbitMQ를 사용했었다.&lt;/p&gt;

&lt;p&gt;➡️ &lt;a href=&quot;https://hyerin6.github.io/2021-11-08/rabbitmq/&quot;&gt;Message Queue(RabbitMQ) 포스팅 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;많은 기업에서 Kafka를 사용하고, RabbitMQ 보단 카프카가 빠르다는 이야기를 많이 들었는데&lt;/p&gt;

&lt;p&gt;왜 Kafka를 선호하는지 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메시지큐&quot;&gt;메시지큐&lt;/h2&gt;
&lt;p&gt;Kafka는 메시지큐이다. 메시지큐는 이전 포스팅에서 자세히 알아봤었는데 요청을 한곳에 모으고 필요한 주체가 가져가 처리하는 것으로 이해할 수 있다. &lt;br /&gt;
RabbitMQ, Kafka, Memcache 등 다수의 제품들의 기본 기능이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;메시지-큐의-장점&quot;&gt;메시지 큐의 장점&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;비동기(Asynchronous): Queue에 넣기 때문에 나중에 처리할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비동조(Decoupling): 애츨리케이션과 분리할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;탄력성(Resilience): 일부가 실패 시 전체에 영향을 받지 않습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;과잉(Redundancy): 실패할 경우 재실행 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보증(Guarantees): 작업이 처리된걸 확인할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;확장성(Scalable): 다수의 프로세스들이 큐에 메시지를 보낼 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;메시지-큐-사용&quot;&gt;메시지 큐 사용&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;다른 곳의 API로 부터 데이터 송수신이 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다양한 애플리케이션에서 비동기 통신을 할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이메일 발송 및 문서 업로드가 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;많은 양의 프로세스들을 처리할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kafka-vs-rabbitmq&quot;&gt;Kafka vs RabbitMQ&lt;/h2&gt;
&lt;p&gt;다양한 메시지큐가 있는데 용도와 환경에 따라 선택할 수 있어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;rabbitmq&quot;&gt;RabbitMQ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구성이 쉽다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유연한 라우팅이 가능하면 관리 UI 가 편리하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제품 성숙도가 높다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개방형 프로토콜을 위한 AMQP 를 구현 위해 개발&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필요에 따라 동기/비동기식이 가능함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;소비자중심의 설계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;20k/sec 처리를 보장&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apache-kafka&quot;&gt;Apache Kafka&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구독방식의 비동기식 구성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;고성능 고가용성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;분산처리에 효과적으로 설계 됨.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생산자 중심의 설계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;범용 메세징 시스템에서 제공되는 다양한 기능은 제공되지 않음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;100k/sec 처리를 보장&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/143554810-dc1f74fe-9066-496b-9f90-0d6a2b721e93.png&quot; alt=&quot;스크린샷 2021-11-26 오후 6 01 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;Kafka와 RabbitMQ은 다른 점이 꽤 있다.&lt;/p&gt;

&lt;p&gt;내가 개발 중인 SNS 프로젝트에서는 실제로 운영되는 대용량 트래픽을 받는 게 아니라 학습이 목적이었기 때문에
내가 설정한 스트레스 테스트 시나리오의 수준을 감당하면 된다.
RabbitMQ 사용이 적절했던 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카프카 기본 개념: &lt;a href=&quot;https://ellune.tistory.com/22?category=769027&quot;&gt;https://ellune.tistory.com/22?category=769027&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;카프카 사용법: &lt;a href=&quot;https://ellune.tistory.com/48?category=769027&quot;&gt;https://ellune.tistory.com/48?category=769027&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-26/kafka/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-26/kafka/</guid>
      </item>
    
      <item>
        <title>분할 정복이란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;분할정복법이란&quot;&gt;분할정복법이란?&lt;/h2&gt;
&lt;p&gt;주어진 문제를 작은 사례로 나누고(divide) 각각의 작은 문제들을 해결하여 정복(conquer)하는 방법이다.&lt;/p&gt;

&lt;p&gt;작은 사례의 해답을 바로 얻을 수 있으면 해를 구하고 아니면 더 작은 사례로 나눈다.&lt;/p&gt;

&lt;p&gt;해를 구할 수 있을 만큼 충분히 작은 사례로 나눠서 해결하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 문제 사례를 하나 이상의 작은 사례로 분할 
2. 작은 사례들을 각각 정복한다. (재귀)
3. 필요하다면, 작은 사례에 대한 해답을 통합하여 원하는 해답을 구한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;장단점&quot;&gt;장단점&lt;/h2&gt;

&lt;h4 id=&quot;장점&quot;&gt;장점&lt;/h4&gt;

&lt;p&gt;문제를 나눔으로써 어려운 문제를 해결한다.&lt;/p&gt;

&lt;p&gt;문제를 나누어 해결한다는 특징상 병렬적으로 문제를 해결하느 데 큰 강점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;단점&quot;&gt;단점&lt;/h4&gt;

&lt;p&gt;함수를 재귀적으로 호출한다는 점에서 함수 호출로 인한 오버헤드가 발생하며,&lt;/p&gt;

&lt;p&gt;스택에 다영한 데이터를 보관하고 있어야 하므로 스택오버플로우가 발생하거나 과도한 메모리를 사용하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-종이의-개수&quot;&gt;문제: &lt;a href=&quot;https://www.acmicpc.net/problem/1780&quot;&gt;종이의 개수&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;N(1 ≤ N ≤ 37, N은 3k 꼴)의 범위가 문제를 나누는 기준이 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-하노이-탑-이동-순서&quot;&gt;문제: &lt;a href=&quot;https://www.acmicpc.net/problem/11729&quot;&gt;하노이 탑 이동 순서&lt;/a&gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// N-1 개의 원판을 목적지가 아닌 곳으로 옮긴다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 제일 큰 원판을 목표 타워로 옮긴다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 서브 타워로 옮겨놨던 원판을 목적지로 옮긴다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-쿼드트리&quot;&gt;문제: &lt;a href=&quot;https://www.acmicpc.net/problem/1992&quot;&gt;쿼드트리&lt;/a&gt;&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 왼쪽 위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래 순서가 정해져있음&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-18/divide-conquer/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-18/divide-conquer/</guid>
      </item>
    
      <item>
        <title>액티브 유저 3억명 이상인 SNS를 개발한다면?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SNS 프로젝트는 현재 다음과 같은 서버 구조를 갖고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;826&quot; alt=&quot;스크린샷 2021-11-17 오후 3 23 18&quot; src=&quot;https://user-images.githubusercontent.com/33855307/142145906-0e473d16-7969-4f26-89ea-c33a23ef4936.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메시지큐, 캐싱, 로드밸런싱 등 성능 개선을 위해 노력했고 실제로 성능이 개선되기는 했으나&lt;/p&gt;

&lt;p&gt;프리티어로 구성한 서버라 한계가 있었고 특히 좋아요, 타임라인 기능 개선이 쉽지 않았다.&lt;/p&gt;

&lt;p&gt;실제로 3억명 이상의 액티브 유저를 보유한 트위터의 타임라인 시스템을 알아보고&lt;/p&gt;

&lt;p&gt;현재 프로젝트에 적용해볼 수 있는 부분이 있다면 학습해보고 적용해보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sns-특징&quot;&gt;SNS 특징&lt;/h2&gt;

&lt;p&gt;트위터는 다음과 같은 통계를 내고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;액티브 유저 3억명 이상&lt;/li&gt;
  &lt;li&gt;초당 600개 이상의 트윗 생성, 초당 60만건 이상의 조회 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 통계는 트위터 기준이지만 대부분 SNS는 다음과 같은 특징을 갖고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;읽기 요청이 엄청나다.&lt;/li&gt;
  &lt;li&gt;Eventually Consistent(언젠가는 동기화됨을 보장) 특성이 있기 때문에 약간의 딜레이는 허용한다.&lt;/li&gt;
  &lt;li&gt;데이터 저장소 비용을 최적화해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;쓰기 요청은 메시지큐를 적용했기 때문에 약간의 딜레이가 있을 수 있지만&lt;/p&gt;

&lt;p&gt;데이터가 유실되지 않고 많은 요청을 받을 수 있게 개선된 상태이다.&lt;/p&gt;

&lt;p&gt;문제는 읽기 요청이다. 캐싱을 적용하긴 했지만 읽기 요청이 엄청나기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;팔로워-수에-따른-타임라인-구현&quot;&gt;팔로워 수에 따른 타임라인 구현&lt;/h2&gt;

&lt;p&gt;트위터는 새로운 트윗을 작성한 트위터의 팔로워 수에 따라 타임라인 캐시를 만드는 방식이 다르다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;826&quot; src=&quot;https://user-images.githubusercontent.com/33855307/142159942-733c3fff-ef39-471f-b4e3-fa96b51f26c5.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출처: &lt;a href=&quot;https://medium.com/@narengowda/system-design-for-twitter-e737284afc95&quot;&gt;https://medium.com/@narengowda/system-design-for-twitter-e737284afc95&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-팔로우-수가-많은-셀럽&quot;&gt;1) 팔로우 수가 많은 셀럽&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;826&quot; src=&quot;https://user-images.githubusercontent.com/33855307/142160332-b5eefab8-0d34-44ef-9e0c-29ffcf9d56fe.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;유명 트윗터인 경우 팔로워가 8000만명이 넘는 경우도 있다고 한다.&lt;/p&gt;

&lt;p&gt;위 사진은 많은 팔로워 수로 유명한 배우의 SNS이다.&lt;/p&gt;

&lt;p&gt;2,361만명으로 이 경우, 팬아웃 방식을 사용하는 것은 시스템 부담이 있다.&lt;/p&gt;

&lt;p&gt;이 경우, 타임라인 조회 요청 시, 일반 타임라인 캐시에 유명 트윗터의 트윗을 합쳐주는 방식을 사용해야한다.&lt;/p&gt;

&lt;p&gt;현재 프로젝트에서도 사용하는 방식이다.&lt;/p&gt;

&lt;p&gt;쿼리는 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT 
        * 
    
FROM 
        post
        JOIN USER ON post.user_id = user.id 
        JOIN follows ON follows.following_id = user.id 
    
WHERE 
        follows.follower_id = user_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RDB에서 데이터를 조회한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-일반-팔로워&quot;&gt;2) 일반 팔로워&lt;/h3&gt;

&lt;p&gt;매번 Post 테이블을 search하기엔 부담되기 때문에 일반 사용자들의&lt;/p&gt;

&lt;p&gt;트위터 쓰기 요청이 들어오면, 팔로워의 타임라인 캐시에 새로운 트윗 아이디를 추가해주는 방식이다.&lt;/p&gt;

&lt;p&gt;이를 fan-out 방법이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 사용자가 게시글 작성을 요청한다. 
2. 게시글 요청은 로드밸런싱을 통해 서버로 전달된다. 
3. 서버는 DB와 Cache 저장소에 해당 데이터를 저장한다. 
4. 서버는 cache 저장소에서 해당 유저를 팔로우 한 사람의 유저 정보들을 가져 온다.
5. 해당(팔로우한 유저들) 유저들의 in-memory(Redis)에 해당 데이터를 저장한다.
6. 트윗을 작성한 유저를 팔로우한 유저들은 타임라인에서 해당 트윗을 볼 수있다.


* 모든 팔로우 유저의 in-memory에 데이터를 저장하지 않고 
2주내로 접속한 액티브 유저들의 타임라인에만 저장한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;타임라인 조회 시 DB를 접근할 필요 없이 해당 유저의 in memory 데이터에서 타임라인 데이터를 가져오면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대용량 트래픽을 감당하는 시스템에 대해 알아봤다.&lt;/p&gt;

&lt;p&gt;현재 개발중인 SNS 프로젝트에서 사용자를 이렇게 구분할 수 없어서 DB에서 조회한 데이터를&lt;/p&gt;

&lt;p&gt;캐싱처리해서 DB에 읽기 요청을 최대한 줄이는 방법으로 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;좋아요-기능&quot;&gt;좋아요 기능&lt;/h2&gt;

&lt;p&gt;현재 많은 SNS에서 좋아요 수를 보여주는 기능을 없애는 분위기지만 좋아요 기능은 아직 남아있다.&lt;/p&gt;

&lt;p&gt;좋아요를 요청하고 취소하는 작업은 자주 발생하기 때문에 개선할 부분이라고 생각하고 개선 방법을 찾아봤다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;826&quot; src=&quot;https://user-images.githubusercontent.com/33855307/142199917-2773984e-7c14-4406-9c15-373e2bef2b70.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가장 유명한 방법은 Redis의 Set을 이용해 중복 검사를 따로 하지 않고&lt;/p&gt;

&lt;p&gt;RDB에는 Spring Batch를 이용하여 bulk insert로 데이터를 저장하는 것이다.&lt;/p&gt;

&lt;p&gt;redis와 spring batch를 학습해보고 적용해보면 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/garimoo/%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A0%88%EB%94%94%EC%8A%A4-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-02-f1029893e263&quot;&gt;개발자를 위한 레디스 튜토리얼 02&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/garimoo/%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A0%88%EB%94%94%EC%8A%A4-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-04-17256c55493d&quot;&gt;개발자를 위한 레디스 튜토리얼 04&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@narengowda/system-design-for-twitter-e737284afc95&quot;&gt;System design for Twitter&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/mariano/raffi-krikorian-twitter-timelines-at-scale/10-TimelineServiceWrite_APIFanoutRedisRedisTimelineCacheRedisTweetyPieGizmoduck&quot;&gt;Timeline Service Write API Fanout&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wYk0xPP_P_8&quot;&gt;Twitter system design, twitter Software architecture, twitter interview questions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/@Pinterest_Engineering/building-a-follower-model-from-scratch-b51a08c5b54e&quot;&gt;Building a follower model from scratch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-17/sns/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-17/sns/</guid>
      </item>
    
      <item>
        <title>이진탐색이란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;순차-탐색&quot;&gt;순차 탐색&lt;/h2&gt;

&lt;p&gt;순차 탐색은 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법이다.&lt;/p&gt;

&lt;p&gt;보통 정렬되지 않은 리스트에서 데이터를 찾아야할 때 사용한다.&lt;/p&gt;

&lt;p&gt;데이터가 아무리 많아도 시간이 충분하면 원하는 원소를 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;데이터 개수가 N개일 때 최악의 시간 복잡도는 O(N)이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이진-탐색-반으로-쪼개면서-탐색&quot;&gt;이진 탐색: 반으로 쪼개면서 탐색&lt;/h2&gt;

&lt;p&gt;이진 탐색은 배열 내부의 데이터가 정렬되어 있어야만 사용할 수 있는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;데이터가 무작위일 때는 사용할 수 없지만, 이미 정렬된 데이터는 빠르게 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;이진 탐색은 위치를 나타내는 변수 3개를 이용하는데 시작점, 끝점, 중간점을 기준으로&lt;/p&gt;

&lt;p&gt;반복적으로 데이터를 비교해서 원하는 데이터를 찾는 게 이진 탐색 과정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코딩-테스트에서의-이진-탐색&quot;&gt;코딩 테스트에서의 이진 탐색&lt;/h2&gt;

&lt;p&gt;이진 탐색 코드는 쉬워보이지만 문제를 풀어보면 구현이 까다로울 수 있다.&lt;/p&gt;

&lt;p&gt;이진 탐색의 원리는 다른 알고리즘에서도 폭넓게 적용되는 원리와 유사하기 때문에 매우 중요하다.&lt;/p&gt;

&lt;p&gt;또 높은 난이도의 문제에서 여러 알고리즘과 함께 사용되기도 한다.&lt;/p&gt;

&lt;p&gt;탐색 범위가 큰 상황에서 (2,000만 이상) 이진 탐색으로 접근해보길 권한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예제-문제1-부품-찾기&quot;&gt;예제 문제1: 부품 찾기&lt;/h2&gt;

&lt;p&gt;전자 매장에 부품이 N개 있다.&lt;/p&gt;

&lt;p&gt;각 부품은 정수 형태의 고유한 번호가 있다.&lt;/p&gt;

&lt;p&gt;손님이 M개 종류의 부품을 대량으로 구매하겠다며 당일 날 견적서를 요청했다.&lt;/p&gt;

&lt;p&gt;손님이 문의한 부품 M개 종류를 모두 확인해서 견적서를 작성해야 한다.&lt;/p&gt;

&lt;p&gt;이때 가게 안에 부품이 모두 있는지 확인하는 프로그램을 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;N = 5
[8, 3, 7, 9, 2]

M = 3
[5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 봤던 이진 탐색 코드를 그대로 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EB%B6%80%ED%92%88%EC%B0%BE%EA%B8%B0.java&quot;&gt;전체 코드 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 문제는 이진 탐색 말고도 계수 정렬의 개념을 이용해서 문제를 풀 수도 있다.&lt;/p&gt;

&lt;p&gt;또는 단순하게 Set 자료형을 이용해서 해결할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예제-문제2-떡볶이-떡-만들기&quot;&gt;예제 문제2: 떡볶이 떡 만들기&lt;/h2&gt;

&lt;p&gt;오늘은 떡볶이 떡을 만드는 날이다. 떡의 길이가 일정하지 않다.&lt;/p&gt;

&lt;p&gt;대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰준다.&lt;/p&gt;

&lt;p&gt;절단기 높이(H)를 지정하면 줄지어진 떡을 한 번에 전달한다.&lt;/p&gt;

&lt;p&gt;높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않는다.&lt;/p&gt;

&lt;p&gt;N: 떡의 개수, M: 손님이 요청한 최소한의 떡의 길이&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;N: 4 
M: 6
19 15 10 17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[19, 15, 10, 17]&lt;/code&gt; 높이의 떡이 나란히 있다. 절단기 높이를 15로 지정하면&lt;/p&gt;

&lt;p&gt;자른 뒤 떡의 높이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[15, 15, 10, 15]&lt;/code&gt;가 될 것이다.&lt;/p&gt;

&lt;p&gt;잘린 떡의 길이는 차례대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4, 0, 0, 2]&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;손님은 6cm 만큼의 길이를 가져간다.&lt;/p&gt;

&lt;p&gt;손님이 왔을 때 요청한 총 길이가 M일 때 적어도 M 만큼의 떡을 얻기 위해&lt;/p&gt;

&lt;p&gt;절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하라.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 전형적인 이진 탐색 문제이다.&lt;/p&gt;

&lt;p&gt;‘원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제’에 주로 사용한다.&lt;/p&gt;

&lt;p&gt;예를 들어 범위 내에서 조건을 만족하는 가장 큰 값을 찾으라는 최적화 문제라면&lt;/p&gt;

&lt;p&gt;이진 탐색으로 결정 문제를 해결하면서 범위를 좁혀갈 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 적절한 높이를 찾을 때까지 절단기의 높이 H를 반복해서 조정하면 된다.&lt;/p&gt;

&lt;p&gt;범위를 좁힐 때는 이진 탐색의 원리를 이용해 절반씩 탐색 범위를 좁혀나가면 된다.&lt;/p&gt;

&lt;p&gt;시작은 다음과 같이 지정하여 시작한다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;시작점: 0
끝점: 19
중간점: 9

잘린 떡의 길이: [10, 6, 1, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EB%96%A1%EB%B3%B6%EC%9D%B4.java&quot;&gt;전체 코드 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;연습-문제&quot;&gt;연습 문제&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1654&quot;&gt;랜선 자르기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2110&quot;&gt;공유기 설치&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11662&quot;&gt;민호와 강호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-16/binary-search/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-16/binary-search/</guid>
      </item>
    
      <item>
        <title>이분그래프란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이분 그래프란 모든 꼭짓점을 빨강과 파랑으로 색칠하되,&lt;/p&gt;

&lt;p&gt;모든 변이 빨강과 파랑 꼭짓점을 포함하도록 색칠할 수 있는 그래프이다.&lt;/p&gt;

&lt;p&gt;따라서 왼쪽 그래프는 이분 그래프이고 오른쪽은 이분 그래프가 아니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/141643915-b068310b-669d-4472-8c88-fbe12f8cff66.png&quot; alt=&quot;스크린샷 2021-11-13 오후 9 31 08&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이분-그래프-판별&quot;&gt;이분 그래프 판별&lt;/h2&gt;

&lt;p&gt;이분 그래프인지 확인하는 방법은 다음과 같은 절차로 진행된다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 모든 정점을 방문했는가?

YES &amp;gt;&amp;gt;️ 2.YES 출력 

NO  &amp;gt;&amp;gt;️ 3. 방문하지 않은 정점을 한 곳 방문하고 빨간색으로 칠한다. 
         queue에 해당 정점을 push 
   
4. queue에서 하나의 정점을 꺼내고 그 정점과 연결된 모든 정점을 가져온다. 
    4-1. 연결된 정점이 이미 방문한 적이 있다면 연결된 정점과 현재 정점의 색을 비교, 같으면 NO 
    4-2. 연결된 정점을 방문한 적이 없다면 현재 정점과 다른 색을 칠하고 queue에 넣는다. 
    4-3. queue에 아무것도 없을때까지 4-1 과정을 반복한다. 
    
5. 1번부터 반복한다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;코드&quot;&gt;코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 임의의 노드 방문&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// 이미 방문했는데 같은 색이라면 NO&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인접한 노드들을 check 해야하므로 Queue를 사용한 BFS로 탐색한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예제&quot;&gt;예제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1707&quot;&gt;https://www.acmicpc.net/problem/1707&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/parts/12486&quot;&gt;https://programmers.co.kr/learn/courses/30/parts/12486&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-13/bipartite-graph/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-13/bipartite-graph/</guid>
      </item>
    
      <item>
        <title>Redis Cache 이용한 성능 개선</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CQRS와 Message Queue에 대해서 알아보면서&lt;/p&gt;

&lt;p&gt;RabbitMQ를 이용해 요청에 대한 성능을 개선했었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-11-08/rabbitmq/&quot;&gt;https://hyerin6.github.io/2021-11-08/rabbitmq/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이후 SNS 특성상 Insert 요청보다 Read 요청이 훨씬 많기 때문에&lt;/p&gt;

&lt;p&gt;어떻게 Cache를 적용할지 많은 고민을 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특히 타임라인 조회는 내가 팔로우하고 있는 사용자들이 작성한 게시글을 조회하는 것이기 때문에&lt;/p&gt;

&lt;p&gt;User, Post, Follow 테이블이 전부 관련되어 있고 N+1 문제 등을 해결하면서&lt;/p&gt;

&lt;p&gt;Join 연산으로 타임라인을 조회하기로 결정했기 때문에 Cache를 적용하는게 적합한지 의문이었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 데이터의 변경이 적고 조회가 많은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;특정 게시글 1개 조회&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;특정 사용자의 게시글 목록&lt;/code&gt;에 적용했고&lt;/p&gt;

&lt;p&gt;팔로우 목록, 댓글, 타임라인 조회에도 캐싱을 적용해 놓은 상태지만&lt;/p&gt;

&lt;p&gt;테스트를 해보면서 캐싱하는게 적절한지 확인해 볼 필요가 있을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-redis-cache-적용&quot;&gt;Spring Boot Redis Cache 적용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JWT 토큰을 redis에 저장하고 있었기 때문에 session과 cache로 분리하여 설정했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RedisConfig&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${spring.redis.session.port}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${spring.redis.session.host}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${spring.redis.session.password}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;RedisStandaloneConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redisTemplate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringRedisTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;StringRedisTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringRedisTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringRedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;stringRedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringRedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lettuce는 Netty (비동기 이벤트 기반 고성능 네트워크 프레임워크) 기반의 Redis 클라이언트이다.&lt;/p&gt;

&lt;p&gt;비동기로 요청을 처리하기 때문에 Jedis에 비해 몇배 이상의 성능과 하드웨어 자원 절약이 가능하다.&lt;/p&gt;

&lt;p&gt;자세한 정보는 이 블로그에 정리되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/418&quot;&gt;https://jojoldu.tistory.com/418&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CacheConfig&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableCaching&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${spring.redis.cache.host}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${spring.redis.cache.port}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redisCacheConnectionFactory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisCacheConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;redisPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CacheManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;redisCacheConnectionFactory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;RedisCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RedisCacheManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisCacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RedisCacheManagerBuilder&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;RedisCacheConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisCacheConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultCacheConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serializeKeysWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RedisSerializationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SerializationPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serializeValuesWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;RedisSerializationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SerializationPair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GenericJackson2JsonRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entryTtl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofMinutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cacheDefaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;PolymorphicTypeValidator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicPolymorphicTypeValidator&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowIfSubType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SerializationFeature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WRITE_DATES_AS_TIMESTAMPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaTimeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activateDefaultTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DefaultTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NON_FINAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ObjectMapper는 LocalDateTime 직렬화/역직렬화를 위해 추가한 bean이다.&lt;/p&gt;

&lt;p&gt;모듈은 ObjectMapper에게 LocalDateTime으로 작업하는 방법을 가르치고,&lt;/p&gt;

&lt;p&gt;매개변수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WRITE_DATES_AS_TIMESTAMPS&lt;/code&gt;는 JSON에서 LocalDateTime을 문자열로 표시하도록한다.&lt;/p&gt;

&lt;p&gt;스프링 부트를 사용하면 ObjectMapper는 Bean 형태로 주입하여 제공한다.&lt;/p&gt;

&lt;p&gt;이 설정이 없으면 다음 링크에서 말하는 에러와 동일한 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/27952472/serialize-deserialize-java-8-java-time-with-jackson-json-mapper&quot;&gt;https://stackoverflow.com/questions/27952472/serialize-deserialize-java-8-java-time-with-jackson-json-mapper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PostSerevice&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 데이터를 조회할 때 레디스 캐시에 저장된다. &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 데이터 변경이 있을 때 캐시가 삭제된다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@CacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModifyPostRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redis에-캐싱되는지-확인&quot;&gt;Redis에 캐싱되는지 확인&lt;/h3&gt;

&lt;p&gt;redis-cli에 접속해서 확인해본 결과 원하는대로 캐싱되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/141317412-c51aa74a-98c4-450e-80d6-d25ba791e39a.png&quot; alt=&quot;스크린샷 2021-11-11 오후 7 22 47&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 redis에 데이터가 들어간걸 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;캐시-적용-전후-조회-시간-차이&quot;&gt;캐시 적용 전후 조회 시간 차이&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DB에서 조회&lt;/strong&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/141317840-f1a1a5c2-b6ca-4de8-8cd1-37575b28cd0f.png&quot; alt=&quot;스크린샷 2021-11-11 오후 7 25 28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐싱된 데이터 조회&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/141317831-04f4fedd-4f1c-4181-abb7-bd16f68ac9b1.png&quot; alt=&quot;스크린샷 2021-11-11 오후 7 25 47&quot; /&gt;&lt;/p&gt;

&lt;p&gt;postman으로 테스트해본 결과 조회하는데 소요되는 시간이 개선된 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-11/cache/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-11/cache/</guid>
      </item>
    
      <item>
        <title>BFS &amp; DFS</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;basic&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;탐색: 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정&lt;/li&gt;
  &lt;li&gt;스택: 선입후출&lt;/li&gt;
  &lt;li&gt;큐: 선입선출&lt;/li&gt;
  &lt;li&gt;재귀함수: 자기 자신을 호출하는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dfs깊이-우선-탐색&quot;&gt;DFS(깊이 우선 탐색)&lt;/h2&gt;

&lt;p&gt;그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;주로 재귀함수로 구현한다.&lt;/p&gt;

&lt;p&gt;그래프는 크게 2가지 방식으로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인접 행렬: 2차원 배열로 그래프의 연결 관계를 표현하는 방식&lt;/li&gt;
  &lt;li&gt;인접 리스트: 리스트로 그래프의 연결 관계를 표현하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;DFS는 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후,&lt;/p&gt;

&lt;p&gt;다시 돌아가 다른 경로로 탐색하는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;DFS는 스택 자료구조를 이용하며 구체적인 동작은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다. 
2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 
3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bfs너비-우선-탐색&quot;&gt;BFS(너비 우선 탐색)&lt;/h2&gt;
&lt;p&gt;가까운 노드부터 탐색하는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;인접한 노드를 반복적으로 큐에 넣어 먼저 들어온 것이 먼저 나가는 선입선출 구조를 이용해&lt;/p&gt;

&lt;p&gt;가까운 노드부터 탐색을 진행하는 방식이다.&lt;/p&gt;

&lt;p&gt;정확한 동작 방식은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다. 
2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다. 
3. 2번 과정을 더 이상 수행할 수 없을 때까지 반복한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dfs-예제&quot;&gt;DFS 예제&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2667&quot;&gt;백준 2667번 단지번호붙이기&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aparts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apartNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bfs-예제&quot;&gt;BFS 예제&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2146&quot;&gt;백준 2146번 다리 만들기&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentLandNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentLandNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;isVisited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//다른 섬&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-10/graph/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-10/graph/</guid>
      </item>
    
      <item>
        <title>타임라인 querydsl로 구현</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타임라인을 구현하며 작성한 게시글&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-14/timeline/&quot;&gt;No Offset Paging 구현&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-17/jpa-join/&quot;&gt;JPA JOIN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-08-02/querydsl/&quot;&gt;QueryDsl 개념 &amp;amp; 사용법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;querydsl을-사용하기로한-이유&quot;&gt;querydsl을 사용하기로한 이유&lt;/h2&gt;

&lt;p&gt;처음에 내가 팔로우한 사용자들이 작성한 게시글을 조회(타임라인 조회) 기능을 구현할 때&lt;/p&gt;

&lt;p&gt;다음과 같이 JPQL을 직접 작성했었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT p&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; FROM Post p&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; JOIN Follow f ON p.user.id = f.following.id&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; WHERE f.follower.id = :userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByJoinFollow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT p&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; FROM Post p&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; JOIN Follow f ON p.user.id = f.following.id&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; WHERE f.follower.id = :userId&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; AND p.id &amp;lt; :lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByJoinFollowAndLastIdLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPostId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이미 완성한 쿼리고 테스트를 거치며 조회가 되는지 확인했기 때문에&lt;/p&gt;

&lt;p&gt;빠르게 이해할 수 있는 코드지만, JPQL을 완성하기 전에&lt;/p&gt;

&lt;p&gt;N+1 문제, 불필요한 조회 등 많은 문제를 만났었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아직도 문제가 남아있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type-check 불가능&lt;/li&gt;
  &lt;li&gt;실수가 있어도 컴파일 시점에 알 수 있는 방법이 없다.&lt;/li&gt;
  &lt;li&gt;해당 로직 실행 전까지 작동여부 확인을 할 수 없고 해당 쿼리 실행 시점에 오류가 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;querydsl을 사용하면 위 문제들이 해결된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;querydsl-사용&quot;&gt;querydsl 사용&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimelineRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPAQueryFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByJoinFollow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPostId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;QueryResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryFactory&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqFollowing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;following&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPostId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqFollower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPageSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooleanExpression&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eqFollowing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QUser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooleanExpression&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eqFollower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;follower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 코드를 보면 querydsl의 Custom Repository를 사용하지 않았다.&lt;/p&gt;

&lt;p&gt;보통 Querydsl을 사용할 때 다음 파일들을 작성한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JpaRepository와 CustomRepository를 확장(extends)한 Repository Interface&lt;/li&gt;
  &lt;li&gt;Querydsl을 사용하는 메소드 시그니처를 정의하는 RepositoryCustom Inteface&lt;/li&gt;
  &lt;li&gt;실제로 Querydsl을 사용하여 CustomRepository를 구현하는 RepositoryImpl Class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140930827-aa14623a-4070-4434-85fd-fe24a4f7dff5.png&quot; alt=&quot;whwhfen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자세한 설명은 &lt;a href=&quot;https://jojoldu.tistory.com/372&quot;&gt;jojoldu - Spring Boot Data Jpa 프로젝트에 Querydsl 적용하기&lt;/a&gt; 에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2020년 우아한테크콘서트에서 JPAQueryFactory만 있다면 Querydsl을 사용할 수 있다는 것을 발표했고&lt;/p&gt;

&lt;p&gt;타임라인 구현에 적합한 방법인 것이라 판단하여 Custom Repository를 만들지 않고 JPAQueryFactory만 주입받아 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-repository를-제거해도-될까&quot;&gt;Custom Repository를 제거해도 될까?&lt;/h2&gt;

&lt;p&gt;이 방법의 단점은 상속으로 얻는 이점이 사라진다는 것이다.&lt;/p&gt;

&lt;p&gt;기본 repository와 Custom repository의 메소드를 하나의 인터페이스로 참조하며 사용할 수 없게 된다.&lt;/p&gt;

&lt;p&gt;1개의 엔티티에 접근하기 위해 다수의 repository 인스턴스를 만들게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 특정 상황에서만 이 상속 구조를 제거해야 한다.&lt;/p&gt;

&lt;p&gt;어떤 기능을 구현하기 위해 다양한 엔티티를 Join하여 함께 참조해야 하는데,&lt;/p&gt;

&lt;p&gt;이걸 A엔티티 Repository의 역할로 봐야할지, B엔티티 Repository의 역할로 봐야할지 애매모호한 상황이 발생하는데&lt;/p&gt;

&lt;p&gt;이런 경우 특정 엔티티를 메인으로 하지 않는 기능이기 때문에, 위처럼 JPAQueryFactory만 주입받아 사용하는 Repository를 사용하면 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-09/querydsl/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-09/querydsl/</guid>
      </item>
    
      <item>
        <title>RabbitMQ를 이용한 SNS 글쓰기 성능 개선</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;톰캣은-사용자의-요청을-어떻게-처리할까&quot;&gt;톰캣은 사용자의 요청을 어떻게 처리할까?&lt;/h2&gt;
&lt;p&gt;사용자의 요청은 우선 큐에 들어가고 큐에 들어간 요청이 늘고있는 스레드가 있다면&lt;/p&gt;

&lt;p&gt;그 스레드에 할당되어 처리된다.&lt;/p&gt;

&lt;p&gt;톰캣 기본 설정은 큐 사이즈는 100, 스레드 사이즈는 200이다.&lt;/p&gt;

&lt;p&gt;모든 스레드가 사용 중이면 새로운 요청이 들어왔을 때 그 요청은 큐에서 대기하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;큐 사이즈를 모두 채우고 나서도 계속 요청이 들어오면 그 요청들은 버려진다.&lt;/p&gt;

&lt;p&gt;큐에 들어온 요청도 30초가 지나면 타임아웃 처리된다. (기본설정이 30초)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 이 기본 설정들을 변경할 수 있지만 결과적으로 해결 방법이 되는 것은 아니다.&lt;/p&gt;

&lt;p&gt;실제 처리 속도를 올리지 않으면 결국 요청이 큐에 쌓일 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;message-queue&quot;&gt;Message Queue&lt;/h2&gt;

&lt;p&gt;이전 게시글에서 CQRS 구현 방법에 대해 알아보면서 메시징 수단을 이용해 DB에 반영할 데이터를 전달할 수 있다고 했다.&lt;/p&gt;

&lt;p&gt;여기서 메시징 수단이 바로 Message Queue이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Producer: 메시지를 큐에 전송&lt;/li&gt;
  &lt;li&gt;Consumer: 큐의 메시지를 처리하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MQ 사용 목적은 비동기로 요청을 처리하고 큐에 저장하여 Consumer의 명목을 줄이는 것에 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rabbitmq&quot;&gt;RabbitMQ&lt;/h2&gt;

&lt;p&gt;RabbitMQ는 AMQP(Advanced Message Queueing Protocol)을 구현한 오픈소스 메세지 브로커(중개자)이다.&lt;/p&gt;

&lt;p&gt;Rabbit MQ는 데이터를 일단 어딘가에 쌓아두고 나중에 비동기적으로 적절한 처리를 하고 싶은 경우를 위한 데이터 저장소이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140751170-e6d716cd-8c6a-4df3-b711-379b295c8740.png&quot; alt=&quot;엠큐&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 이미지가 AMQP을 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;예) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;업무 내용을 분류해서 메신저로 보내주시면 처리 후에 결과 알려드리겠습니다.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Publisher: ‘다른 직원들’&lt;/li&gt;
  &lt;li&gt;Exchange: ‘분류해서’&lt;/li&gt;
  &lt;li&gt;binding: ‘보내주시면’&lt;/li&gt;
  &lt;li&gt;Queue: ‘메신저’&lt;/li&gt;
  &lt;li&gt;Consumer: ‘처리 후에 알려드리겠습니다.’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;message와-queue-보존&quot;&gt;Message와 Queue 보존&lt;/h2&gt;

&lt;p&gt;메시징이 일시적으로 문제가 발생하게 되면 쿼리 디비를 반영해야 할 데이터가 유실될 수 있다고 한다.&lt;/p&gt;

&lt;p&gt;RabbitMQ가 종료되면 Queue와 안에있는 message는 모두 제거된다.&lt;/p&gt;

&lt;p&gt;하지만 Queue를 선언할 때 durable 속성을 true로 설정하면 RabbitMQ가 종료된 후 다시 시작될 때 해당 Queue는 다시 자동으로 생성된다.&lt;/p&gt;

&lt;p&gt;하지만 이렇게 해도 Queue 내부의 메세지는 여전히 삭제된다.&lt;/p&gt;

&lt;p&gt;이를 방지하려면 Publisher가 message를 Exchange로 보낼 때 persistent 속성을 부여하면 된다.&lt;/p&gt;

&lt;p&gt;그러면 메세지도 다시 생성될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;818&quot; alt=&quot;스크린샷 2021-11-14 오후 12 48 03&quot; src=&quot;https://user-images.githubusercontent.com/33855307/141666734-579d6b61-1574-4b8c-b357-92620b11c8a2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 개발하고 있는 SNS 프로젝트에 Message Queue를 적용하면 위와 같은 모습이다.&lt;/p&gt;

&lt;p&gt;DB에 데이터를 저장하기 전에 사용자의 글 작성 요청을 모두 Queue에 넣었다가 처리한다.&lt;/p&gt;

&lt;p&gt;이렇게 한다고 톰캣 큐를 사용하지 않는 것이 아니다.&lt;/p&gt;

&lt;p&gt;여전히 Nginx에게 요청을 받을 때는 여전히 톰캣 큐를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q. 그렇다면 Tomcat의 Queue에 넣었다가 처리하는 것과 무슨 차이가 있는걸까?&lt;/p&gt;

&lt;p&gt;A. Tomcat 큐에 넣는건 메모리에 저장된 데이터로 애프리케이션 강제 종료시 전부 날아갈 수 있다.&lt;/p&gt;

&lt;p&gt;반면 Message 큐를 별도로 사용하면 디스크에 저장하는 등 여러가지 옵션을 줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;message-queue-특징--장점&quot;&gt;Message Queue 특징 &amp;amp; 장점&lt;/h2&gt;

&lt;h4 id=&quot;비동기asynchronous&quot;&gt;비동기(Asynchronous)&lt;/h4&gt;

&lt;p&gt;요청이 몰릴 때에도 저장했다가 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;즉 DB 속도와 무관하게 모든 요청을 처리할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;앞쪽 애플리케이션은 실제 로직이 수행되는 것과 무관하게&lt;/p&gt;

&lt;p&gt;단순히 큐에 넣고 다음 요청을 받을 수 있는 상태가 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;애플리케이션간-의존성-제거비동조-decoupling&quot;&gt;애플리케이션간 의존성 제거(비동조, Decoupling)&lt;/h4&gt;

&lt;p&gt;API를 직접 호출하는 것과 중간에 큐가 있는 것 중 뒷쪽에 있는 애플리케이션이 중단되었을 때에도 메시지가 유실되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;과잉redundancy&quot;&gt;과잉(Redundancy)&lt;/h4&gt;

&lt;p&gt;실패할 경우 재실행 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;보증guarantees&quot;&gt;보증(Guarantees)&lt;/h4&gt;

&lt;p&gt;Queue에 따로 적재된 작업들을 모니터링 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;확장성scalable&quot;&gt;확장성(Scalable)&lt;/h4&gt;

&lt;p&gt;다양한 애플리케이션이 message를 생산할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이중화&quot;&gt;이중화&lt;/h4&gt;

&lt;p&gt;큐도 결국 애플리케이션이다. 큐도 죽을 수 있는데 이중화도 가능하다.&lt;/p&gt;

&lt;p&gt;큐끼리 동기화하기 때문에 우리는 하나의 큐인 것처럼 사용하지만 실제 이중화된 큐를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;신뢰성&quot;&gt;신뢰성&lt;/h4&gt;

&lt;p&gt;실패한 메시지는 큐로 Ack하지 않기 때문에 그 메시지는 큐에서 빠져나가지 않는다.&lt;/p&gt;

&lt;p&gt;하지만 절대로 유실되지 않는다고 보장할 수는 없다.&lt;/p&gt;

&lt;p&gt;유실되면 안되는 메시지는 로깅을 철저히하여 유실되더라도 복구할 수 있게 준비해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;확장성&quot;&gt;확장성&lt;/h4&gt;

&lt;p&gt;애플리케이션이 스케일 아웃 하더라도 메시지큐에서 따로 처리해줄 필요는 없다.&lt;/p&gt;

&lt;p&gt;사용하던 큐를 그대로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rabbitmq-사용법&quot;&gt;RabbitMQ 사용법&lt;/h2&gt;

&lt;h4 id=&quot;설치&quot;&gt;설치&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; my-rabbit &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-rabbit &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5672:5672 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 15672:15672 rabbitmq:3-management
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;consumer-예제-코드&quot;&gt;Consumer 예제 코드&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;PostRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RabbitListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CREATE_POST_QUEUE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonProcessingException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;producer-예제-코드&quot;&gt;Producer 예제 코드&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Producer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RabbitTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rabbitTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;convertAndSend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CREATE_POST_QUEUE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;producer-consumer-애플리케이션-분리&quot;&gt;Producer, Consumer 애플리케이션 분리&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;751&quot; alt=&quot;스크린샷 2021-11-14 오후 1 13 35&quot; src=&quot;https://user-images.githubusercontent.com/33855307/141667230-ff4c8dee-36b4-4d3a-b424-4beaaac1cf95.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에서 mq를 적용한 것은 하나의 애플리케이션에 producer와 consumer가 존재하는 구조이다.&lt;/p&gt;

&lt;p&gt;하지만 producer 애플리케이션과 cunsumer 애플리케이션을 분리해서 사용하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;분리되지 않는 것과 분리된 것의 차이는 consumer 애플리케이션을 배포할 때 얼마나 까다롭냐이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;분리된 형태&lt;/strong&gt;에서는 consumer를 배포할 때 앞쪽에 mq가 존재하기 때문에 모든 consumer가 종료되어도 문제가 없다.&lt;/p&gt;

&lt;p&gt;무중단 배포도 쉽게 구축할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;strong&gt;분리되지 않은 형태&lt;/strong&gt;의 경우 consumer 기능을 배포하기 위해&lt;/p&gt;

&lt;p&gt;애플리케이션을 배포할 때 무중단 배포를 위한 요소들이 고려되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mq-적용하면-요청-처리-시간이-감소할까&quot;&gt;MQ 적용하면 요청 처리 시간이 감소할까?&lt;/h2&gt;
&lt;p&gt;MQ 서버와 통신하기 위한 네트워크 I/O가 늘어나는데 성능에 문제가 없을까?&lt;/p&gt;

&lt;p&gt;현재 MQ를 도입하는 이유는 사용자가 보낸 요청을 처리하지 못해 요청이 유실되는 경우를 방지하는 것이 주목적이다.&lt;/p&gt;

&lt;p&gt;즉 요청 하나를 처리하는 시간 자체가 빨라진다기 보다는 더 많은 요청이 들어 왔을 때 유실 없이 처리 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mq는-어느-상황에-필요한가&quot;&gt;MQ는 어느 상황에 필요한가?&lt;/h2&gt;
&lt;p&gt;비동기 작업을 처리할 때 좋다.&lt;/p&gt;

&lt;p&gt;즉 사용자가 요청했지만 응답을 받을 필요가 없거나 즉시 받을 필요가 없는 경우에 해당한다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예) 클라이언트가 응답을 받을 필요가 없는 경우   
여러 서버에서 발생한 로그를 쌓는 작업   
→ 로그를 정상적으로 발송했고 MQ에 넣었다면 저장이 잘 되었는지 클라이언트는 알 필요가 없다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메시지를-consume-하는-주체는-애플리케이션이다&quot;&gt;메시지를 Consume 하는 주체는 애플리케이션이다.&lt;/h2&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 애플리케이션은 MQ에서 일정 개수 만큼 Consume한다. 
2. 애플리케이션은 Consnume한 메시지를 들고있고 DB에 insert한다. 
3. 메시지 하나를 insert하면 다음 메시지를 consume한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 과정이 반복된다.&lt;/p&gt;

&lt;p&gt;결과적으로 애플리케이션이 메시지를 Consume하고 싶을 때 한다.&lt;/p&gt;

&lt;p&gt;DB에 insert하는 속도가 느리다면 애플리케이션은 Consume을 느리게 할 것이다.&lt;/p&gt;

&lt;p&gt;MQ가 애플리케이션에 강제로 메시지를 보내지 않는다.&lt;/p&gt;

&lt;p&gt;애플리케이션이 주체이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mq가-하나이고-consume가-여러개인-경우-경쟁상태가-발생하는가&quot;&gt;MQ가 하나이고 Consume가 여러개인 경우 경쟁상태가 발생하는가?&lt;/h2&gt;
&lt;p&gt;하나의 메시지를 두 개의 Consumer가 동시에 coonsume하는 경우는 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;내부적으로 그렇게 구현되어 있기 때문에 경쟁상태는 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-08/rabbitmq/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-08/rabbitmq/</guid>
      </item>
    
      <item>
        <title>CQRS 구현</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현1-같은-프로세스-같은-db&quot;&gt;구현1: 같은 프로세스, 같은 DB&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140700610-bb3f0cee-eeb9-4cd4-b917-2bb4bbe7acda.jpeg&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;코드 수준에서만 명령과 쿼리가 분리가 된다.&lt;/p&gt;

&lt;p&gt;데이터 수준에서는 분리하지 않는다.&lt;/p&gt;

&lt;p&gt;가장 단순하고 명령/쿼리 동일 데이터 보장된다. (트랜잭션 처리 쉬움)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현2-같은-프로세스-같은-db-다른-테이블&quot;&gt;구현2: 같은 프로세스, 같은 DB, 다른 테이블&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140701082-dbe99d4c-ab7f-4101-82b4-c0b34e585d53.jpeg&quot; alt=&quot;ㅁ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;명령과 쿼리가 코드, 데이터 수준에서 분리된다.&lt;/p&gt;

&lt;p&gt;별도의 테이블을 가지고 구현하기 때문에 같은 DB를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쿼리 전용 테이블 사용
    &lt;ul&gt;
      &lt;li&gt;예) 최근 조회수 많은 글 목록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;명령이 쿼리 전용 데이터 변경 유발&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현3--같은-프로세스-다른-db&quot;&gt;구현3:  같은 프로세스, 다른 DB&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140701344-a2e11a3c-5b16-4f1c-98b3-45e76b241166.jpeg&quot; alt=&quot;ㅇ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상품 목록을 Redis와 같은 저장소에 캐싱하고 쿼리 모델은 Redis를 사용한다.&lt;/p&gt;

&lt;p&gt;명령이 데이터를 변경하면 변경 내역을 쿼리 쪽 DB에 전달하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현4-다른-프로세스-다른-db&quot;&gt;구현4: 다른 프로세스, 다른 DB&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140701729-ca46aae0-fb53-4592-8e9a-17562530e526.jpeg&quot; alt=&quot;ㄴ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;명령이 데이터를 변경하면 변경 내역을 쿼리 쪽 DB에 전달&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다른-db로-변경-전파&quot;&gt;다른 DB로 변경 전파&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140702279-11c61d81-205e-469a-af67-d3e86711c06a.jpeg&quot; alt=&quot;DB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왼쪽부터 방법 1, 2, 3에 해당하는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법1-명령이-직접-쿼리-디비를-수정하는-방식&quot;&gt;방법1) 명령이 직접 쿼리 디비를 수정하는 방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;구현이 단순한게 장점이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;카프카와 같은 메시징 수단을 이용해서 전달하는 변형도 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 유실 가능성이 있다.
쿼리 디비나 메시징이 일시적으로 문제가 발생하게 되면 쿼리 디비를 반영해야 할 데이터가 유실될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법2-변경-내역을-기록하고-별도의-전파기를-이용해-변경-내용-전달&quot;&gt;방법2) 변경 내역을 기록하고 별도의 전파기를 이용해 변경 내용 전달&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;별도 테이블에 변경 내역 저장 → 한 트랜잭션으로 처리되기 때문에 변경 내역이 유실되지 않음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전파기를 따로 구현해야 한다는 부담이 생긴다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 방법도 중간에 메시징을 두는 변형이 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법3-디비가-제공하는-cdc-사용&quot;&gt;방법3) 디비가 제공하는 CDC 사용&lt;/h3&gt;

&lt;p&gt;디비에 바이너리 로그를 읽어서 변경 데이터를 확인하고&lt;/p&gt;

&lt;p&gt;변경된 데이터를 쿼리에 전달하는 방식&lt;/p&gt;

&lt;p&gt;두번째 방법과 비슷한데 명령쪽 코드에서 변경 내용을 저장하지 않아도 되기 때문에&lt;/p&gt;

&lt;p&gt;명령 코드가 단순해진다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;메시징을 중간에 두는 변형이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다른-db-사용시-주의-사항&quot;&gt;다른 DB 사용시 주의 사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 유실
    &lt;ul&gt;
      &lt;li&gt;유실 허용 여부에 따라 DB 트랜잭션 범위 중요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;허용 가능 지연 시간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;중복 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/H1IF3BUeFb8&quot;&gt;https://youtu.be/H1IF3BUeFb8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-08/cqrs2/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-08/cqrs2/</guid>
      </item>
    
      <item>
        <title>CQRS란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cqrs&quot;&gt;CQRS&lt;/h2&gt;

&lt;h4 id=&quot;command-and-query&quot;&gt;Command and Query&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;명령
    &lt;ul&gt;
      &lt;li&gt;시스템 데이터 변경&lt;/li&gt;
      &lt;li&gt;예) 주문 취소, 배송 완료&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;쿼리
    &lt;ul&gt;
      &lt;li&gt;시스템 데이터 조회&lt;/li&gt;
      &lt;li&gt;예) 주문 목록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;responsibility-segregation&quot;&gt;Responsibility Segregation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;책임
    &lt;ul&gt;
      &lt;li&gt;구성 요소의 역할&lt;/li&gt;
      &lt;li&gt;예) 클래스, 함수, 모듈, 서버, DB, 컨테이너&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;분리
    &lt;ul&gt;
      &lt;li&gt;역할에 따라 구성 요소 나누기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140691922-4135df27-6d3c-4aea-9d94-35121d3ca3f3.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-11-08-15-03-01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cqrs가-왜-좋다는-걸까&quot;&gt;CQRS가 왜 좋다는 걸까?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140693094-a3788958-db1f-4674-8193-9478927d48ba.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-11-08-15-15-42&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 이미지는 CQRS의 예를 간단하게 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;코드가 중복되는 느낌과 개발이 느려지는 느낌인데 CQRS는 뭐가 좋다는걸까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;명령과-조회에-단일-모델을-사용하는-경우&quot;&gt;명령과 조회에 단일 모델을 사용하는 경우&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140693671-65ae61c7-c6a1-4bf9-8ba2-f832e7af0e45.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-11-08-15-21-39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 모델에 이것 저것 기능을 추가하니 코드가 뒤섞였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;코드 역할/책임 모호&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;의미/가독성 등 나빠짐&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유지보수성이 떨어짐&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Member 클래스는 더 이상 Member 테이블에 대응하는 모델이 아닌&lt;/p&gt;

&lt;p&gt;로그인 로직, Order 테이블과도 엮여있다.&lt;/p&gt;

&lt;p&gt;가장 나쁜 부분은 기능에 따라 사용하는 필드가 달라진다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단일-모델로-복잡해지는-예시-jpa&quot;&gt;단일 모델로 복잡해지는 예시) JPA&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140694166-e12082fe-0263-43de-9367-74de01e4c52c.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-11-08-15-26-51&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기능에 따라 연관을 로딩하는 방식이 달라져야 한다.&lt;/p&gt;

&lt;p&gt;이렇게 단일 모델을 유지하려고 노력하다 보면 다른 부분에서 복잡한 일이 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) 명령과 쿼리는 다루는 데이터가 다르기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;명령 → 한 영역의 데이터&lt;/li&gt;
  &lt;li&gt;쿼리 → 여러 영역의 데이터&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) 명령과 쿼리는 코드 변경 빈도, 사용자에 따라서도 다르다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;예시
    &lt;ul&gt;
      &lt;li&gt;백오피스의 주문 목록 조회 기능&lt;/li&gt;
      &lt;li&gt;사용자의 주문 기능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;변경 빈도가 다른 기능이 한 코드에 있으면&lt;/strong&gt; 서로 다른 이유로 코드가 바뀌고&lt;/p&gt;

&lt;p&gt;이는 곧 책임의 크기가 적당하지 않다는 것이다.&lt;/p&gt;

&lt;p&gt;(단일 책임 원칙을 따르지 않는 코드가 생성되는 것)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) 기능마다 성능 요구가 다르다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기능마다 트패픽 패턴, 성능 요구 다르다.
    &lt;ul&gt;
      &lt;li&gt;사용자의 상품 목록 조회, 상품 상세 조회&lt;/li&gt;
      &lt;li&gt;백오피스의 판매 수치&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기능마다 서로 다른 성능 향상 방법 필요
    &lt;ul&gt;
      &lt;li&gt;단일 모델로는 다양한 성능 향상 기법 적용이 어려울 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;명령과-쿼리를-구분하자&quot;&gt;명령과 쿼리를 구분하자.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140694915-96bb5267-02c7-4a4d-8629-50212d7299c3.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-11-08-15-34-13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;명령과 쿼리를 위한 모델을 분리하면 모델의 모호함이 없어진다.&lt;/p&gt;

&lt;p&gt;명령 영역의 모델과 쿼리 영역의 모델이 무엇을 표현하고 있는지 명확해져 코드 가독성과 유지보수성이 좋아질 가능성이 높아진다.&lt;/p&gt;

&lt;p&gt;예를들어 쿼리는 캐시, 명령은 비동기를 사용하는 방식으로 성능 향상 기법을 다르게 적용하는 것도 가능해진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/xf0kXMTFJm8&quot;&gt;https://youtu.be/xf0kXMTFJm8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-08/cqrs1/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-08/cqrs1/</guid>
      </item>
    
      <item>
        <title>어떤 부분을 테스트하고 분석해야 할까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;성능-테스트-vs-부하-테스트-vs-스트레스-테스트&quot;&gt;성능 테스트 vs 부하 테스트 vs 스트레스 테스트&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;667&quot; alt=&quot;스크린샷 2021-11-06 오후 12 49 01&quot; src=&quot;https://user-images.githubusercontent.com/33855307/140596976-9db6eb17-eeed-45f9-9522-6c7df17daae2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-성능-테스트&quot;&gt;1) 성능 테스트&lt;/h4&gt;
&lt;p&gt;특정 상황에서 시스템의 구성 요소가 어떻게 수행되는지 확인하기 위한 테스트이다.&lt;/p&gt;

&lt;p&gt;광범위한 의미를 가지고 있는데 성능테스트(Performance Test)는 부하테스트 중 하나의 관점, 즉 성능적 관점만 측정하겠다는 뜻이 담겨 있다.&lt;/p&gt;

&lt;p&gt;해당 시스템 혹은 어플리케이션의 성능을 측정한다함은 점진적인 부하량 증가 과정에서 더 이상 단위시간당 최대 처리량(TPS)이 증가하지 않을 때,&lt;/p&gt;

&lt;p&gt;그 때의 수치를 측정하고 그 수치를 해석하는 과정을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;성능테스트의 일반적인 목적은 현재의 시스템 혹은 어플리케이션이 최대로 수용가능한 동시단말사용자수가 몇 명인지,&lt;/p&gt;

&lt;p&gt;혹은 목표로 정한 성능이 도출되지 않을 때 병목지점이 어딘지를 밝히고 목표성능을 획득하기 위해 무엇을 시정해야하는지를 찾아내기 위함이다.&lt;/p&gt;

&lt;p&gt;성능테스트 과정에서 매우 중요한 부분은 목표성능을 설정하고 그러한 목표성능을 확인/측정하기 위해&lt;/p&gt;

&lt;p&gt;향후 시스템 운영 중에 실제로 발생할 접속사용자의 호출패턴이 어떠하냐를 분석/추정하는 과정이 반드시 필요하고,&lt;/p&gt;

&lt;p&gt;이를 근간으로 점진적 부하를 발생시켜야 의미있는 성능테스트 결과를 도출할 수 있다.&lt;/p&gt;

&lt;p&gt;그렇지 않을 경우 성능테스트가 자칫 스트레스테스트로 끝나고 만다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-부하-테스트&quot;&gt;2) 부하 테스트&lt;/h4&gt;
&lt;p&gt;적절한 부하를 발생시켜 통계적으로 의미있는 수치를 측정하는 테스트이다.&lt;/p&gt;

&lt;p&gt;발생시키는 부하는 실제 시스템에 적용될 예상 트래픽이어야 한다.&lt;/p&gt;

&lt;p&gt;부하테스트의 두 가지 중요한 목적 중 하나는 장시간 서비스 가능 여부를 확인하는 신뢰성(reliability) 테스트와&lt;/p&gt;

&lt;p&gt;두 번째는 성능 테스트(Performance Test)이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;버퍼 오버플로우, 메모리 leak, 메모리 오류등의 문제를 밝혀내기 위한 것이다.&lt;/p&gt;

&lt;p&gt;시스템을 구성하는 DB, HW 등 모든 요소가 갖는 한계를 찾아서 장래의 부하를 대응하기 위함이다.&lt;/p&gt;

&lt;p&gt;특정된 비즈니스 시나리오 상에서 예상되는 동시 접속자 수가 최대인 것을 골라서 테스트한다.&lt;/p&gt;

&lt;p&gt;예) 수강 신청하는 인원이 어느정도 예상되는지 알고 싶은 경우&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-스트레스-테스트&quot;&gt;3) 스트레스 테스트&lt;/h4&gt;
&lt;p&gt;시스템이 과부하 상태에서 어떻게 작동하는지를 검사한다.&lt;/p&gt;

&lt;p&gt;시스템의 실패를 확인하고 모니터링하는 과정이 정상적으로 이루어지는지 확인한다.&lt;/p&gt;

&lt;p&gt;부가적으로 장애 조치와 복구 절차가 효과적이고 효율적인지 판단하는 것도 중요하다.&lt;/p&gt;

&lt;p&gt;스트레스 테스트 시의 부하(일련의 들어오는 요청)는 이처럼 시스템 리소스의 한계점을 시험하려는 의도이기 때문에,&lt;/p&gt;

&lt;p&gt;다분히 의도적으로 왜곡되는 경향이 있으며, 향후 실제 접속자에 의해 발생하는 부하량 패턴과는 거리가 멀 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;어느-부분을-테스트-해야-할까&quot;&gt;어느 부분을 테스트 해야 할까?&lt;/h2&gt;
&lt;h4 id=&quot;application&quot;&gt;Application&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TPS(Transaction Per Second)&lt;/li&gt;
  &lt;li&gt;응답 시간(Response Time)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;middleware&quot;&gt;Middleware&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Message Queue
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database
    &lt;ul&gt;
      &lt;li&gt;MySQL(slow query, Index)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web Server
    &lt;ul&gt;
      &lt;li&gt;Apache(Network outbound io (bandwidth))&lt;/li&gt;
      &lt;li&gt;Tomcat(Idle Thread)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;infra&quot;&gt;Infra&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CPU&lt;/li&gt;
  &lt;li&gt;Memory(Swapping)&lt;/li&gt;
  &lt;li&gt;Disk IO(파일 시스템)&lt;/li&gt;
  &lt;li&gt;Network IO(고용량의 파일이나 이미지 전송에서 병목)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;테스트-결과에서-어떤-데이터를-확인해야-할까&quot;&gt;테스트 결과에서 어떤 데이터를 확인해야 할까?&lt;/h2&gt;
&lt;h4 id=&quot;tps-transaction-per-second&quot;&gt;TPS (Transaction per second)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;DB: 초당 트랜잭션 (커밋이나 롤백이 일어나는 횟수)&lt;/li&gt;
  &lt;li&gt;web server: 테스트를 위해 정의한 행위의 횟수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;latency-at-intervals&quot;&gt;Latency At Intervals&lt;/h4&gt;
&lt;p&gt;요청으로부터 응답을 받아내기 까지 걸리는 시간&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;concurrent-users&quot;&gt;Concurrent users&lt;/h4&gt;
&lt;p&gt;해당 웹 서비스에 동시에 접속할 수 있는 유저의 수를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;rps-request-per-second&quot;&gt;RPS (Request per second)&lt;/h4&gt;
&lt;p&gt;1초에 처리할 수 있는 요청의 최대 개수를 의미한다.&lt;/p&gt;

&lt;p&gt;QPS(Queries per second)라고도 부른다.&lt;/p&gt;

&lt;p&gt;서버의 환경, HTTP의 요청 타입, 컨텐츠의 캐싱 여부 등에 따라서 달라진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;artillery에서-확인할-부분&quot;&gt;artillery에서 확인할 부분&lt;/h2&gt;

&lt;h3 id=&quot;latency&quot;&gt;Latency&lt;/h3&gt;

&lt;p&gt;Latency는 지연시간이라는 의미이다. 그래프의 세로는 지연시간(Latency), 가로는 시간을 의미한다.&lt;/p&gt;

&lt;p&gt;0으로 갈수록 HTTP 트랜잭션 (요청 → 응답까지의 과정을 HTTP 트랜잭션이라고 한다.)&lt;/p&gt;

&lt;p&gt;1회당 요청 → 응답까지 짧은 시간 안에 왔다는 것이다.&lt;/p&gt;

&lt;p&gt;그러나 이 시간은 네트워크 시간 + 애플리케이션에서 처리하는 시간이 포함되어 있기 때문에 0에 가깝게 낮추는 것은 어렵다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그래프-보는-법&quot;&gt;그래프 보는 법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;max: 가장 오래 걸린 요청 → 응답 시간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;p95: 전체 HTTP 트랜잭션 중 가장 빠른 것부터 95%까지 (대부분의 트래픽)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;p50: 전체 HTTP 트랜잭션 중 가장 빠른 것부터 50%까지 (절반의 트래픽)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;min: 가장 빠르게 온 요청 → 응답 시간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 외에 p99도 많이 사용하는데 거의 모든 트래픽을 의미하기 때문에&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tps-측정&quot;&gt;TPS 측정&lt;/h3&gt;
&lt;p&gt;TPS는 arrivalRate로 측정할 수 있다.&lt;/p&gt;

&lt;p&gt;대부분의 경우 스트레스 테스트는 목표로 하는 TPS가 고정되어 있고 그 TPS를 맞춰야 하기 때문에&lt;/p&gt;

&lt;p&gt;TPS를 고정 시킨 상태에서 코드나 인프라를 수정하면서 목표로 하는 TPS가 안정적인지 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;성능 향상을 위해 유의미하게 봐야 하는 내용은 가급적 스트레스 테스트를 길게 해봐야 한다는 것이고&lt;/p&gt;

&lt;p&gt;실제 유저들의 패턴과 비슷하게 시나리오를 작성해 테스트해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://xpace.tistory.com/21&quot;&gt;https://xpace.tistory.com/21&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-05/stress-test/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-05/stress-test/</guid>
      </item>
    
      <item>
        <title>artillery란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;artillery-란&quot;&gt;artillery 란?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://artillery.io/&quot;&gt;artillery&lt;/a&gt;는 node.js로 작성된 스트레스 테스트 도구이다.&lt;/p&gt;

&lt;p&gt;가벼운 테스트부터 시나리오 테스트까지 가능하고 리포트 페이지를 제공한다.&lt;/p&gt;

&lt;p&gt;artillery는 스크립트를 yaml로 작성할 수 있고 원한다면 node.js로도 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://artillery.io/docs/guides/overview/welcome.html&quot;&gt;Document&lt;/a&gt; 에 테스트 스크립트 작성법도 상세하게 나와있어서 참고하기 좋았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;테스트 프로그램은 다음 기준으로 선택하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스트레스 테스트로 수집되는 지표 중 나에게 필요한 지표가 있는가?&lt;/li&gt;
  &lt;li&gt;테스트 스크립트로 내가 원하는 시나리오대로 테스트할 수 있는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;artillery는 위 기준에 부합하는 툴이기 때문에 사용했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특징은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP(S), Socket.io, Websocket 등 다양한 프로토콜을 지원한다.&lt;/li&gt;
  &lt;li&gt;시나리오 테스트를 할 수 있다.&lt;/li&gt;
  &lt;li&gt;JavaScript로 로직을 작성해서 추가할 수 있다.&lt;/li&gt;
  &lt;li&gt;statsd를 지원해서 Datadog이나 InfluxDB 등에 실시간으로 결과를 등록할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;artillery-사용법&quot;&gt;artillery 사용법&lt;/h2&gt;
&lt;h4 id=&quot;1-nodejs-설치&quot;&gt;1) Node.js 설치&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/ko/&quot;&gt;https://nodejs.org/ko/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-스크립트-작성&quot;&gt;2) 스크립트 작성&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt;로 작성한다.&lt;/p&gt;

&lt;p&gt;다음 공식 문서에 스크립트 작성법이 자세하게 나와있기 때문에 기본적인 설정부터&lt;/p&gt;

&lt;p&gt;시나리오 설정까지 따라할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt;로 작성했기 때문에 가끔 space를 tap으로 인식할 수 있는데 이 경우에는 yaml editor을 사용하면 해결된다.&lt;/p&gt;

&lt;p&gt;첫 테스트를 간단히 진행해보고 싶다면 아래 링크의 공식 문서, 스크립트를 참고하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://artillery.io/docs/guides/getting-started/writing-your-first-test.html#Load-Phases&quot;&gt;https://artillery.io/docs/guides/getting-started/writing-your-first-test.html#Load-Phases&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config:
  target: &quot;https://example.com/api&quot;
  phases:
    - duration: 60
      arrivalRate: 5
      name: Warm up
    - duration: 120
      arrivalRate: 5
      rampTo: 50
      name: Ramp up load
    - duration: 600
      arrivalRate: 50
      name: Sustained load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-테스트&quot;&gt;3) 테스트&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;artillery run --output report.json test-script.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;report.json 파일에 결과가 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-테스트-결과-확인-및-저장&quot;&gt;4) 테스트 결과 확인 및 저장&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;artillery report report.json  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 통해 html 파일을 만들고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;p&gt;&lt;img width=&quot;1792&quot; alt=&quot;스크린샷 2021-11-06 오전 11 43 00&quot; src=&quot;https://user-images.githubusercontent.com/33855307/140595283-482c962b-5f76-4ca7-8549-171a32fa328f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결과는 위와 같은 화면으로 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;결과를 보는 법과 테스트 진행에 자세한 개념은 다음 게시물에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-11-05/stress-test/&quot;&gt;https://hyerin6.github.io/2021-11-05/stress-test/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-05/artillery/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-05/artillery/</guid>
      </item>
    
      <item>
        <title>Dijkstra &amp; Bellman-Ford</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;가장-빠른-길-찾기&quot;&gt;가장 빠른 길 찾기&lt;/h2&gt;
&lt;p&gt;최단 경로 알고리즘은 가장 짧은 경로를 찾는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;예를 들어, ‘한 지점에서 다른 특정 지점까지의 최단 경로를 구해야 하는 경우’,&lt;/p&gt;

&lt;p&gt;‘모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우’ 등 다양하다.&lt;/p&gt;

&lt;p&gt;최단 경로 알고리즘은 다음과 같이 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다익스트라 최단 경로 알고리즘&lt;/li&gt;
  &lt;li&gt;프로이드 워셜&lt;/li&gt;
  &lt;li&gt;벨만 포드 알고리즘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리디 알고리즘과 다이나믹 프로그래밍 알고리즘이 최단 경로 알고리즘에 그대로 적용된다는 특징이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-다익스트라-최단-경로-알고리즘&quot;&gt;1) 다익스트라 최단 경로 알고리즘&lt;/h2&gt;
&lt;p&gt;다익스트라 최단 경로 알고리즘은 그래프에서 여러 개의 노드가 있을 때&lt;/p&gt;

&lt;p&gt;특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;다익스트라 최단 경로 알고리즘은 ‘음의 간선’이 없을 때 정상적으로 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;매번 ‘가장 비용이 적은 노드’를 선택해서 임의의 과정을 반복하기 때문에 기본적으로 그리디 알고리즘을 분류된다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 출발 노드를 설정한다. 
2. 최단 거리 테이블을 초기화한다. 
3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다. 
4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다. 
5. 위 과정에서 3, 4번을 반복한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다익스트라 알고리즘은 최단 경로를 구하는 과정에서 ‘각 노드에 대한 현재까지의 최단 거리’ 정보를 항상 1차원 리스트에 저장하며 
리스트를 계속 갱신한다는 특징이 있다.&lt;/p&gt;

&lt;p&gt;이러한 1차원 리스트를 최단 거리 테이블이라 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다익스트라 알고리즘을 구현하는 방법은 2가지이다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;방법1) 구현하기 쉽지만 느리게 동작하는 코드 
방법2) 구현하기에 조금 더 까다롭지만 빠르게 동작하는 코드
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다익스트라-예제&quot;&gt;다익스트라 예제&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140318577-f6744544-f47c-4c14-90a8-cf115b066a9c.jpeg&quot; alt=&quot;ㄷ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1번 노드에서 다른 노드로 가는 비용을 계산하자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이후 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1번 에서 최단 거리가 가장 짧은 4번 노드가 선택된다.&lt;/p&gt;

&lt;p&gt;최단 거리 테이블을 또 갱신해보자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;2, 5번 노드의 최단 거리 값이 같은데, 이럴 때는 일반적으로 번호가 작은 노드를 선택한다.&lt;/p&gt;

&lt;p&gt;2번 노드를 선택했으나 현재 최단 거리 테이블에서 변경되는 것은 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2번 노드 다음으로 5번 노드가 선택된다.&lt;/p&gt;

&lt;p&gt;현재 5번 노드까지 가는 최단 거리가 2이므로 3번, 6번 노드의 값이 다음과 같이 갱신된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최단 거리 테이블이 의미하는 것은 1번 노드부터 출발했을 때&lt;/p&gt;

&lt;p&gt;2, 3, 4, 5, 6번 노드까지의 최단 경로가 각각&lt;/p&gt;

&lt;p&gt;2, 3, 1, 2, 4 라는 의미다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다익스트라 최단 경로 알고리즘에서 ‘방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드를 선택’하는 과정을 반복하는데, 
이렇게 선택된 노드는 ‘최단 거리’가 완전히 선택된 노드이므로, 더 이상 알고리즘을 반복해도 최단 거리가 줄어들지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법1-간단한-다익스트라-알고리즘&quot;&gt;방법1. 간단한 다익스트라 알고리즘&lt;/h3&gt;
&lt;p&gt;간단한 다익스트라 알고리즘은 O(V^2)의 시간 복잡도를 가지며, V는 노드의 개수를 의미한다.&lt;/p&gt;

&lt;p&gt;각 노드에 대한 최단 거리를 담는 1차원 리스트를 선언하고&lt;/p&gt;

&lt;p&gt;단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택하기 위해&lt;/p&gt;

&lt;p&gt;매 단계마다 1차원 리스트의 모든 원소를 확인(순차 탐색)한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 방법은 매번 선형 탐색, 현재 노드와 연결된 노드를 매번 일일이 확인하기 때문에&lt;/p&gt;

&lt;p&gt;총 노드의 개수가 5000개 이하아면 괜찮다.&lt;/p&gt;

&lt;p&gt;그런데 10000개를 넘어가거나 간선의 개수가 많을 때는 다음 방법을 이용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법2-개선된-다익스트라-알고리즘&quot;&gt;방법2. 개선된 다익스트라 알고리즘&lt;/h3&gt;
&lt;p&gt;이 방법은 최단 경로 문제를 최악의 경우에도 시간 복잡도 O(Elog V)를 보장하여 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;V는 노드 개수, E는 간선의 개수이다.&lt;/p&gt;

&lt;p&gt;이전에는 매번 최단 거리 테이블을 선형적으로 탐색했는데&lt;/p&gt;

&lt;p&gt;단순히 선형 탐색을 하는 것이 아니라 더욱더 빠르게 찾을 수 있다면?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개선된 다익스트라 알고리즘에서는 힙(heap) 자료구조를 사용한다.&lt;/p&gt;

&lt;p&gt;힙을 사용하면 특정 노드까지의 최단 거리에 대한 정보를 힙에 담아 처리하므로&lt;/p&gt;

&lt;p&gt;출발 노드로부터 가장 거리가 짧은 노드를 더욱 빠르게 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;힙 자료구조는 우선 순위 큐를 구현하기 위해 사용하는 자료구조 중 하나이다.&lt;/p&gt;

&lt;p&gt;우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저 삭제한다는 점이 특징이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;자료구조&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;추출되는 데이터&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;스택&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;가장 나중에 삽입된 데이터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;큐&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;가장 먼저 삽입된 데이터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;우선순위 큐&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;가장 우선순위가 높은 데이터&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선순위 큐는 데이터를 우선순위에 따라 처리하고 싶을 때 사용한다.&lt;/p&gt;

&lt;p&gt;예) 여러 개의 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내서 확인해야 하는 경우&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;단계별로 우선순위 큐가 어떻게 변하는지 알아보자.&lt;/p&gt;

&lt;p&gt;우선순위 큐를 적용해도 다익스트라 알고리즘이 동작하는 기본 원리는 동일하다.&lt;/p&gt;

&lt;p&gt;최단 거리를 저장하기 위한 1차원 리스트(최단 거리 테이블)은 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;현재 가장 가까운 노드를 저장하기 위한 목적으로만 우선순위 큐를 추가로 이용한다고 보면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다시 1번 노드부터 출발해보자.&lt;/p&gt;

&lt;p&gt;여기서는 다음과 같이 출발 노드를 제외한 모든 노드의 최단 거리를 무한으로 설정한다.&lt;/p&gt;

&lt;p&gt;이후 우선순위 큐에 1번 노드를 넣는데 [거리: 0, 노드: 1] 이 정보를 갖는 객체를 우선순위 큐에 넣으면 된다.&lt;/p&gt;

&lt;p&gt;우선순위 큐에 넣으면 거리순으로 정렬된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;노드 번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;거리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;우선순위 큐: (거리: 0, 노드: 1)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;거리가 가장 짧은 노드를 선택하기 위해 우선순위 큐에서 노드를 꺼내면 된다.&lt;/p&gt;

&lt;p&gt;해당 노드를 이미 방문한 적이 있다면 무시하고,&lt;/p&gt;

&lt;p&gt;처리한 적이 없으면 1번 노드를 거쳐서 2, 3, 4 노드로 가는 최소 비용을 계산한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;노드 번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;거리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;우선순위 큐: (거리: 0, 노드: 1) (거리: 2, 노드: 2) (거리: 5, 노드: 3)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번에는 [1, 4]의 값이 꺼내진다.&lt;/p&gt;

&lt;p&gt;아직 4번 노드에 방문한 적이 없으므로 노드 4를 기준으로 연결된 간선들을 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;gt; 4 &amp;gt; 3&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;gt; 4 &amp;gt; 5&lt;/code&gt; 경로의 최소 비용은 기존 테이블의 값들보다 작기 때문에 테이블이 갱신된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;노드 번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;거리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;∞&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;우선순위 큐: (거리: 2, 노드: 2) (거리: 2, 노드: 5) (거리: 4, 노드: 3) (거리: 5, 노드: 3)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음으로 선택되는 노드는 2번 노드이다.&lt;/p&gt;

&lt;p&gt;2번 노드를 거쳐서 가는 경우 중 최단 거리를 더 짧게 갱신할 수 있는 방법이 없기 때문에 다음 단계로 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번엔 5번 노드를 꺼냈다.&lt;/p&gt;

&lt;p&gt;5번 노드에서는 3, 6번 노드로 갈 수 있고 5번 노드를 거치는 경우&lt;/p&gt;

&lt;p&gt;최단 거리가 줄어들기 때문에 테이블이 다음과 같이 갱신된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;노드 번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;거리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;우선순위 큐: (거리: 3, 노드: 3) (거리: 4, 노드: 3) (거리: 4, 노드: 6) (거리: 5, 노드: 3)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음으로 [거리: 3, 노드: 3]을 꺼낸다.&lt;/p&gt;

&lt;p&gt;이 경우 최단 거리 테이블이 갱신되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음으로 [거리: 4, 노드: 3]을 꺼낸다.&lt;/p&gt;

&lt;p&gt;3번 노드는 앞서 처리된 적이 있다.&lt;/p&gt;

&lt;p&gt;이미 처리되었기 때문에 무시한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이어서 [거리: 4, 노드: 6]이 꺼내진다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;노드 번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;거리&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;우선순위 큐: (거리: 5, 노드: 3)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;마지막 원소도 확인해보니 이미 처리된 노드이므로 무시한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모든 단계를 거치고 최단 거리 테이블에 남아 있는 0, 2, 3, 1, 2, 4가 각 노드로의 최단 거리이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-플로이드-워셜-알고리즘&quot;&gt;2) 플로이드 워셜 알고리즘&lt;/h2&gt;
&lt;p&gt;다익스트라 알고리즘은 ‘한 지점에서 다른 특정 지점까지의 최단 경로를 구해야 하는 경우’에 사용할 수 있는 최단 경로 알고리즘이다.&lt;/p&gt;

&lt;p&gt;플로이드 워셜 알고리즘은 ‘모든 지점에서 다른 모든 지점까지의 최단 경로를 구해야 하는 경우’에 사용할 수 있는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다익스트라 알고리즘은 단계마다 최단 거리를 가지는 노드를 하나씩 반복적으로 선택한다.&lt;/p&gt;

&lt;p&gt;그리고 해당 노드를 거쳐 가는 경로를 확인하며, 최단 거리 테이블을 갱신하는 방식으로 동작한다.&lt;/p&gt;

&lt;p&gt;플로이드 워셜 알고리즘도 단계마다 ‘거쳐 가는 노드’를 기준으로 알고리즘을 수행한다.&lt;/p&gt;

&lt;p&gt;매번 방문하지 않은 노드 중에서 최단 거리를 갖는 노드를 찾을 필요가 없다는 점이 다르다.&lt;/p&gt;

&lt;p&gt;또한 점화식에 맞게 2차원 리스트를 갱신하기 때문에 다이나믹 프로그래밍으로 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;각 단계에서는 해당 노드를 거쳐 가는 경우를 고려한다.&lt;/p&gt;

&lt;p&gt;예를 들어 1번 노드에 대해 확인할 때 1번 노드를 중간에 거쳐 지나가는 모든 경우를 고려하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A &amp;gt; 1번 노드 &amp;gt; B&lt;/code&gt;로 가는 비용을 확인하고 최단 거리를 갱신한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A &amp;gt; B&lt;/code&gt;의 비용이 3이고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A &amp;gt; 1번 노드 &amp;gt; B&lt;/code&gt;로 가는 비용이 2이면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A &amp;gt; B&lt;/code&gt;의 이동 비용을 2로 갱신하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;플로이드-워셜-예제&quot;&gt;플로이드 워셜 예제&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/140446889-1c208d9b-cf17-4957-8e7a-ab1cf926f0b7.jpeg&quot; alt=&quot;ㅇ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 그래프는 다음처럼 초기 테이블을 설정할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출발 \ 도착&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4번&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1번 노드를 거쳐 가는 경우를 고려한다.&lt;/p&gt;

&lt;p&gt;계산해야 할 값들은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;D23 = min(D23, D21+D13)
D24 = min(D24, D21+D14)
D32 = min(D32, D31+D12)
D34 = min(D34, D31+D14)
D42 = min(D42, D41+D12)
D43 = min(D43, D41+D13)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1번을 제외한 2, 3, 4 노드에서 2개의 노드를 뽑는 방식으로&lt;/p&gt;

&lt;p&gt;하나씩 확인하며 값을 계산하고 갱신하는 것인데&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D23 = min(D23, D21+D13)&lt;/code&gt;은&lt;/p&gt;

&lt;p&gt;‘기존의 2번에서 3번으로 가는 비용’ 보다 ‘2번에서 1번을 거쳐 3번을 가는 비용’이 더 작다면&lt;/p&gt;

&lt;p&gt;갱신한다는 의미를 갖고 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출발 \ 도착&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4번&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;무한&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2단계)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이번에는 2번 노드를 거쳐 가는 경우를 계산한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출발 \ 도착&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4번&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;무한&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;무한&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;노드의 개수가 총 4개이므로 4단계까지 수행한다.&lt;/p&gt;

&lt;p&gt;최종 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;1번 노드에서 3번 노드로 가는 최단 거리가 8이라는 의미다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출발 \ 도착&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3번&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4번&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4번&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예제-코드&quot;&gt;예제 코드&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EA%B0%84%EB%8B%A8%ED%95%9C_%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.java&quot;&gt;간단한 다익스트라 알고리즘&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EA%B0%9C%EC%84%A0%EB%90%9C_%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.java&quot;&gt;개선된 다익스트라 알고리즘&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C_%EC%9B%8C%EC%85%9C_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.java&quot;&gt;플로이드 워셜 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-04/dijkstra/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-04/dijkstra/</guid>
      </item>
    
      <item>
        <title>Spring boot Thymeleaf</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;테스트를 하기 전 편리함을 위해 배포, 테스트 자동화를 구축했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-10-20/jenkins/&quot;&gt;https://hyerin6.github.io/2021-10-20/jenkins/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 프로젝트는 백엔드에 집중하기 위해 프론트를 따로 개발하지 않았지만&lt;/p&gt;

&lt;p&gt;테스트를 위해 사용자 회원가입, token, 유저 정보를 확인해야 했기 때문에&lt;/p&gt;

&lt;p&gt;간단하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login.html&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.html&lt;/code&gt; 파일을 생성했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링 부트가 자동 설정을 지원하는 템플릿 엔진 Thymeleaf로 구현했다.&lt;/p&gt;

&lt;p&gt;예전에 자세히 알아보지 않고 JSP를 많이 사용했었는데&lt;/p&gt;

&lt;p&gt;스프링 부트가 JSP를 권장하지 않는 이유와 Thymeleaf에 대해 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;템플릿-엔진이란&quot;&gt;템플릿 엔진이란?&lt;/h1&gt;
&lt;p&gt;템플릿 엔진은 동적 컨텐츠를 생성하는 방법이다.&lt;/p&gt;

&lt;p&gt;템플릿 양식과 특정 데이터 모델에 따른 입력 자료를 결합하여 결과 문서를 출력하는 소프트웨어를 말하며,&lt;/p&gt;

&lt;p&gt;view(html)와 data logic(DB connection)을 분리해주는 기능을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서버 사이드 템플릿 엔진 : 서버에서 가져온 데이터를 미리 정의된 템플릿에 넣어 html을 그린 뒤 클라이언트에게 전달해준다.  &lt;br /&gt;
HTML 코드에서 고정적으로 사용되는 부분은 템플릿으로 만들어두고, 동적으로 생성되는 부분만 템플릿에 소스코드를 끼워넣는 방식으로 동작한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;클라이언트 사이드 템플릿 엔진 : HTML 형태로 코드를 작성하며, 동적으로 DOM을 그리게 해주는 역할을 한다.
데이터를 받아서 DOM 객체에 동적으로 그려주는 프로세스를 담당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;스프링-부트가-자동-설정을-지원하는-템플릿-엔진&quot;&gt;스프링 부트가 자동 설정을 지원하는 템플릿 엔진&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;FreeMarker&lt;/li&gt;
  &lt;li&gt;Groovy&lt;/li&gt;
  &lt;li&gt;Thymeleaf&lt;/li&gt;
  &lt;li&gt;Mustache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jsp-자동-설정을-지원하지-않는-이유&quot;&gt;JSP 자동 설정을 지원하지 않는 이유&lt;/h1&gt;
&lt;p&gt;Spring boot는 JSP를 권장하지 않는다.&lt;/p&gt;

&lt;p&gt;JSP를 사용하면 WAR 패키징을 해야한다.&lt;/p&gt;

&lt;p&gt;WAR 패키징으로도 임베디드 톰캣으로 실행할 수 있고 배포할 수 있으나&lt;/p&gt;

&lt;p&gt;Undertow라는 최근에 만들어진 서블릿 엔진이 JSP를 지원하지 않는 등 제약사항이 있다.&lt;/p&gt;

&lt;p&gt;또한 JSP에 대한 의존성을 넣으면 의존성 문제가 생기는 경우도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jar-vs-war&quot;&gt;jar vs war&lt;/h1&gt;
&lt;p&gt;jar, war 모두 java의 jar 툴을 이용해 생성된 파일이며 애플리케이션을 쉽게 배포하고 동작시킬 수 있도록 관련 파일을 패키징해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jar-java-archive&quot;&gt;JAR (Java Archive)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jar&lt;/code&gt; 자바 프로젝트를 압축한 파일&lt;/li&gt;
  &lt;li&gt;자바 리소스, 속성파일, 라이브러리 등이 포함되어 있다.&lt;/li&gt;
  &lt;li&gt;원하는 구조로 구성이 가능하고 JDK에 포함된 JRE만 가지고도 실행 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;warweb-application-archive&quot;&gt;WAR(Web Application Archive)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.war&lt;/code&gt; servlet/jsp 컨테이너에 배치할 수 있는 웹 애플리케이션 압축 파일&lt;/li&gt;
  &lt;li&gt;웹 관련 자원만 포함한다. (JSP, Servlet, JAR, Class, HTML 등)&lt;/li&gt;
  &lt;li&gt;JAR과 달리 WEB-INF 및 META-INF 디렉토리로 사전 정의된 구조를 사용하며 실행하기 위해서 Tomcat과 같은 웹 서버 또는 웹 컨테이너(was)가 필요하다.&lt;/li&gt;
  &lt;li&gt;WAR도 java의 jar 옵션 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java -jar&lt;/code&gt;)을 이용해 생성하는 JAR 파일의 일종이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;thymeleaf&quot;&gt;Thymeleaf&lt;/h1&gt;
&lt;p&gt;Thymeleaf는 비교적 최근에 만들어진 템플릿 엔진이며 서버사이드 자바 템플릿 엔진의 한 종류이다.&lt;/p&gt;

&lt;p&gt;JSP와 Thymeleaf의 가장 큰 차이점은 JSP와 달리 Servlet Code로 변환되지 않다는 점이다.&lt;/p&gt;

&lt;p&gt;따라서 비즈니스 로직과 분리되어 오로지 View에 집중할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;의존성-추가&quot;&gt;의존성 추가&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;html-파일-생성-위치&quot;&gt;html 파일 생성 위치&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;templates&lt;/code&gt; 에 생성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;xmlns:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.thymeleaf.org&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드처럼 th 네임스페이스를 추가하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;테스트&quot;&gt;테스트&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.andDo(print())&lt;/code&gt; 를 통해 렌더링 된 결과까지 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이것은 Thymeleaf를 사용했기 때문이다.&lt;/p&gt;

&lt;p&gt;JSP를 사용하면 본문을 확인(렌더링된 결과)하는 것이 매우 힘들다.&lt;/p&gt;

&lt;p&gt;서블릿 엔진 자체가 JSP 템플릿을 완성시키기 때문에 응답으로 내보낼 최종적인 View를 확인하기 위해서는 서블릿 엔진 개입이 필수적이다.&lt;/p&gt;

&lt;p&gt;반면 Thymeleaf는 서블릿 컨테이너의 개입 없이 독자적으로 최종적인 View를 완성한다.&lt;/p&gt;

&lt;p&gt;테스트에서 사용한 mockMVC는 가짜 서블릿 컨테이너이며 실제 서블릿 컨테이너가 할 수 있는 일을 다 할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jar-배포&quot;&gt;JAR 배포&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/139864504-6e2ca6ee-7e03-4128-a41a-98e6a0edd0c5.png&quot; alt=&quot;KakaoTalk_Photo_2021-11-02-23-15-17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 사진을 보면 운영 서버에 배포된 후 Thymeleaf로 구현한 view가 잘 뜨는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;png 파일인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;카카오 로그인&lt;/code&gt; 버튼도 잘 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-02/Thymeleaf/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-02/Thymeleaf/</guid>
      </item>
    
      <item>
        <title>그리디 알고리즘</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;당장-좋은-것만-선택&quot;&gt;당장 좋은 것만 선택&lt;/h2&gt;

&lt;p&gt;그리디 알고리즘은 단순하지만 강력한 문제 해결 방법이다.&lt;/p&gt;

&lt;p&gt;현재 상황에서 지금 당장 좋은 것만 고르는 방법을 의미한다.&lt;/p&gt;

&lt;p&gt;현재의 선택이 나중에 미칠 영향에 대해서는 고려하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특정한 문제를 만났을 때 단순히 현재 상황에서 가장 좋아 보이는 것만을 선택해도 문제를 풀 수 있는지를 파악할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;그리디 알고리즘은 기준에 따라 좋은 것을 선택하는 알고리즘이므로 문제에서&lt;/p&gt;

&lt;p&gt;‘가장 큰 순서대로’, ‘가장 작은 순서대로’와 같은 기준을 알게 모르게 제시해준다.&lt;/p&gt;

&lt;p&gt;대체로 이 기준은 정렬 알고리즘을 사용했을 때 만족시킬 수 있으므로 그디리 알고리즘 문제는 정렬 알고리즘과 자주 짝을 이뤄 출제된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;대표-문제-거스름돈&quot;&gt;대표 문제: 거스름돈&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;카운터에 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다. 
손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러줘야 할 동전의 최소 개수를 구하라. 
단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 대표적인 그리디 문제다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가장 큰 화폐단위 부터&lt;/strong&gt; 돈을 거슬러주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그리디-알고리즘의-정당성&quot;&gt;그리디 알고리즘의 정당성&lt;/h2&gt;
&lt;p&gt;대부분의 문제는 그리디 알고리즘을 이용했을 때 ‘최적의 해’를 찾을 수 없을 가능성이 높다.&lt;/p&gt;

&lt;p&gt;하지만 위 거스름돈 문제는 탐욕적으로 접근했을 때 매우 효과적이다.&lt;/p&gt;

&lt;p&gt;그 이유는 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대부분의 그리디 알고리즘 문제에서 이처럼 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지 검토할 수 있어야 답을 도출할 수 있다.&lt;/p&gt;

&lt;p&gt;바로 문제 유형을 파악하기 어렵다면 다음과 같은 순서로 생각해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 그리디 알고리즘을 먼저 의심하고, 문제를 해결할 수 있는 탐욕적인 해결법이 존재하는지 고민해본다. 

2. 오랜 시간 고민해도 그리디로 해결할 수 없다면, 다이나믹 프로그래밍이나 그래프 알고리즘으로 해결할 수 있는지 고민해본다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EC%88%AB%EC%9E%90%EC%B9%B4%EB%93%9C%EA%B2%8C%EC%9E%84.java&quot;&gt;숫자 카드 게임&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%EC%88%AB%EC%9E%901%EC%9D%B4%EB%90%A0%EB%95%8C%EA%B9%8C%EC%A7%80.java&quot;&gt;1이 될 때까지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/practice/%ED%81%B0%EC%88%98%EC%9D%98%EB%B2%95%EC%B9%99.java&quot;&gt;큰 수의 법칙&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42862&quot;&gt;체육복&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42860&quot;&gt;조이스틱&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42883&quot;&gt;큰 수 만들기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42885&quot;&gt;구명보트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42861&quot;&gt;섬 연결하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42884&quot;&gt;단속 카메라&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2012&quot;&gt;등수 매기기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1449&quot;&gt;수리공 항승&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-11-01/greedy/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-11-01/greedy/</guid>
      </item>
    
      <item>
        <title>Jenkins CI/CD</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금 진행중인 &lt;a href=&quot;https://github.com/hyerin6/SNS&quot;&gt;SNS 프로젝트&lt;/a&gt; 에 Cacahe를 적용하기 전에&lt;/p&gt;

&lt;p&gt;캐시 적용 전, 후 부하 테스트 결과의 차이를 확인하기 위해서&lt;/p&gt;

&lt;p&gt;배포를 위해 Jenkins로 CI/CD 부터 자동화 시켜보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 관련 포스팅&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-04-21/0421/&quot;&gt;Docker로 Jenkins 사용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-11-21/jenkins-cd/&quot;&gt;Jenkins 배포 자동화 스크립트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-10-21/jenkins-ci/&quot;&gt;Jenkins 테스트 자동화 스크립트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-04-24/0424/&quot;&gt;자동 배포 마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cicd란&quot;&gt;CI/CD란?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/devops/what-is-ci-cd&quot;&gt;RedHat&lt;/a&gt; 에서 정의한 CI/CD의 개념은 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공하는 방법이다.&lt;/p&gt;

&lt;p&gt;이렇게만 들으면 왜 CI/CD 자동화를 구축해야 하는지 와닿지 않는다.&lt;/p&gt;

&lt;p&gt;애플리케이션의 규모가 크다고 가정하자.&lt;/p&gt;

&lt;p&gt;그럼 단순히 개발하고 테스트, 빌드, 배포를 하는데만 시간이 꽤 걸릴 것이다.&lt;/p&gt;

&lt;p&gt;또한 한 사람이 관리하는 게 아니라 몇십명으로 구성된 팀이 관리할 것이기 때문에&lt;/p&gt;

&lt;p&gt;이 애플리케이션의 수정본을 하나로 합치는 것부터 배포까지 시간이 오래 걸려 긴 배포 주기를 갖게 될 것이다.&lt;/p&gt;

&lt;p&gt;시간이 오래 걸리면 사용자의 피드백을 빠르게 반영할 수 없고 배포 과정 속에서 문제가 발생할 가능성도 높다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이런 문제점을 개선하기 위해 CI/CD를 적용해야 한다.&lt;/p&gt;

&lt;p&gt;애플리케이션 코드 병합부터 테스트, 배포까지 라이프사이클 전체에 걸쳐&lt;/p&gt;

&lt;p&gt;자동화시켜 더 짧은 주기로 고객들에게 애플리케이션을 제공할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;따라서 CI/CD는 지속적인 통합(Continuous Integration),&lt;/p&gt;

&lt;p&gt;지속적인 서비스 제공(Continuous Delivery), 지속적인 배포(Continuous Deployment)로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;지속적인-통합&quot;&gt;지속적인 통합&lt;/h4&gt;

&lt;p&gt;지속적인 통합, CI(Continuous Integration)란 자동화된 빌드 및 테스트가 수행된 후,&lt;/p&gt;

&lt;p&gt;개발자가 코드 변경 사항을 중앙 리포지토리에 정기적으로 병합하는 DevOps 소프트웨어 개발 방식이다.&lt;/p&gt;

&lt;p&gt;버전 관리를 통한 코드 병합, 빌드, 테스트, 오류 보고를 자동화하여 반복적인 작업을 줄이고,&lt;/p&gt;

&lt;p&gt;발생한 문제에 대해 빠르게 처리가 가능하여 더 좋은 품질의 소프트웨어를 개발할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;지속적인-서비스-제공&quot;&gt;지속적인 서비스 제공&lt;/h4&gt;

&lt;p&gt;지속적인 서비스 제공, CD(Continuous Delivery)는 반복적인 작업을 자동화한 CI 과정을 거친 소스코드를 레포지토리에 자동으로 반영하는 단계를 의미한다.&lt;/p&gt;

&lt;p&gt;바로 프로덕션 단계로 배포하는 지속적인 배포 단계로 확장이 가능하지만, 따로 테스트 환경에 배포하여 추가적인 여러 사용자 차원에서 테스트를 검증할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;지속적인-배포&quot;&gt;지속적인 배포&lt;/h4&gt;

&lt;p&gt;지속적인 배포, CD(Continuous Deployment)는 CI/CD의 마지막 단계로 모든 테스트를 거친 코드를 레포지토리에 자동으로 반영하는 지속적인 서비스 제공 단계의 확장된 형태이다.&lt;/p&gt;

&lt;p&gt;애플리케이션을 프로덕션 단계로 자동으로 배포하는 작업을 자동화하여, 개발자가 변경 사항을 적용한 후 짧은 시간 이내에 사용자는 새로운 버전의 애플리케이션을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cicd-프로세스-속에서의-애플리케이션-배포-과정&quot;&gt;CI/CD 프로세스 속에서의 애플리케이션 배포 과정&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/138029194-9eb77ce3-1c83-49a0-b46a-e8a282a74e7d.jpeg&quot; alt=&quot;ㅋ&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;개발자는 소스 코드를 수정하고, 코드 컨벤션을 준수했는지,
코드가 잘 작동하는지 Pull Request를 보내 자동으로 확인합니다.&lt;/li&gt;
  &lt;li&gt;변경된 소스 코드에 대해 코드 리뷰를 진행한다.&lt;/li&gt;
  &lt;li&gt;코드 리뷰가 끝나면 PR Merge 작업이 수행된다.&lt;/li&gt;
  &lt;li&gt;배포 가능한 소스 코드를 주기적으로 빌드하여 테스트 버전을 생성한 후, 여러 테스트를 진행한다.&lt;/li&gt;
  &lt;li&gt;테스트 과정에서 발생한 오류를 수정하여 스토어에 배포한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 작업을 자동화하여 배포 주기 단축 및 불편함을 최소화하는 것이 CI/CD 구축 목적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkins-설치--기본-설정&quot;&gt;Jenkins 설치 &amp;amp; 기본 설정&lt;/h1&gt;
&lt;p&gt;Jenkins는 CI/CD 자동화를 제공하는 툴이다.&lt;/p&gt;

&lt;p&gt;다양한 플로그인과 문서를 지원하기 때문에 나도 프로젝트에서 항상 사용해왔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설치 방법이 어려운건 아닌데 최신 버전이 아니면 플러그인이 정상적으로 설치되지 않는다.&lt;/p&gt;

&lt;p&gt;클라우드에서 제공하는 Jenkins 서버는 최신 버전이 설치되지 않는 경우가 많으니&lt;/p&gt;

&lt;p&gt;직접 설치하는게 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;maven
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rpm &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; https://pkg.jenkins.io/redhat-stable/jenkins.io.key
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jenkins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start jenkins
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 명령어로 Jenkins를 설치하고 시작할 수 있다.&lt;/p&gt;

&lt;p&gt;이 외에 주의할 점은 java, gradle 버전 체크이다.&lt;/p&gt;

&lt;p&gt;당연히 동일해야 하므로 확인해보는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/138067726-3d024db4-aa77-41b5-9553-19fb78ed6b9d.png&quot; alt=&quot;스크린샷 2021-10-20 오후 2 23 41&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/138067732-1844e27a-cc33-4abb-a0b9-6b1f556d0eab.png&quot; alt=&quot;스크린샷 2021-10-20 오후 2 23 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;pr-이벤트-발생-후-머지해도-되는지-자동으로-체크&quot;&gt;PR 이벤트 발생 후 머지해도 되는지 자동으로 체크&lt;/h1&gt;
&lt;p&gt;PR을 올렸는데 merge해도 될지 자동으로 테스트 후,&lt;/p&gt;

&lt;p&gt;결과를 Git에 출력해주는 CI를 구축했다.&lt;/p&gt;

&lt;p&gt;만약 빌드에 실패하면 merge할 수 없다고 알려주고&lt;/p&gt;

&lt;p&gt;Details 클릭 시 스크립트를 보여주기 때문에 빠르게 오류를 찾고&lt;/p&gt;

&lt;p&gt;PR 이벤트에 관련된 작업을 쉽게 자동화할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 PR이 발생하면 젠킨스 작업이 진행된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/139387597-9ffcd233-9e82-43a3-a995-52d5a5aaf6ee.png&quot; alt=&quot;스크린샷 2021-10-29 오후 3 31 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;젠킨스 작업이 완료되면 PR 페이지에서 결과를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/139387618-3ace786b-5686-4ff8-a38b-25d3f0b93269.png&quot; alt=&quot;스크린샷 2021-10-29 오후 3 29 51&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;원하는-branch-배포하기&quot;&gt;원하는 branch 배포하기&lt;/h1&gt;
&lt;p&gt;학습을 목적으로 진행하는 프로젝트이기 때문에 master 브랜치에 push 될 때&lt;/p&gt;

&lt;p&gt;무조건 배포되게 설정하지 않고 Git에서 내가 원하는 브랜치를 배포하기 위해서&lt;/p&gt;

&lt;p&gt;Build With Parameters에 String 매개변수를 지정해놨다.&lt;/p&gt;

&lt;p&gt;브랜치를 입력하고 빌드 하기를 누르면 해당 브랜치를 clone 하고 운영 서버에 배포된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;882&quot; alt=&quot;스크린샷 2021-11-01 오전 10 34 28&quot; src=&quot;https://user-images.githubusercontent.com/33855307/139609728-ea34c42e-3cdb-4cc4-a59b-ed1bbf5020f3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins에서 빌드하고 jar와 config를 운영 서버에 전송하는데&lt;/p&gt;

&lt;p&gt;예전 프로젝트에서 배포 과정을 이해하기 위해 scp, ssh 명령어로 직접 전송하고 배포했는데&lt;/p&gt;

&lt;p&gt;Jenkins의 Publish Over SSH 플러그인을 사용하면 쉽게 파일들을 전송할 수 있다.&lt;/p&gt;

&lt;p&gt;한가지 주의할 점은 절대경로가 아닌 상대경로로 지정해야 정상적으로 작동한다는 것이다.&lt;/p&gt;

&lt;p&gt;운영 서버와 ssh 접속 설정은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;젠킨스 시스템 설정 &amp;gt; Publish over SSH&lt;/code&gt; 에서 가능하다.&lt;/p&gt;

&lt;p&gt;port, password, remote directory 까지 쉽게 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;937&quot; alt=&quot;스크린샷 2021-11-01 오전 10 30 00&quot; src=&quot;https://user-images.githubusercontent.com/33855307/139609548-a6c33f16-e2ae-43f1-888e-57d5a0bc1aa8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: SSH Server 이름을 선택하면 된다.&lt;/li&gt;
  &lt;li&gt;Verbose output in console을 체크하면 빌드할 때 상세 내역이 표시 된다.&lt;/li&gt;
  &lt;li&gt;Source files : 전송할 파일을 지정한다. 전체 파일 이동을 하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**/*&lt;/code&gt; 과 같이 입력&lt;/li&gt;
  &lt;li&gt;Remove prefix : Source files에서 지정한 경로의 하위 폴더를 지우는 기능 이다.  &lt;br /&gt;
                위의 예시같이 입력한다면 폴더를 제외하고 jar 파일만 전송하게 될 것이다.&lt;/li&gt;
  &lt;li&gt;Remote directory : SSH Server로 지정한 서버의 원격지 폴더이다.&lt;/li&gt;
  &lt;li&gt;Exec command : 파일 전송이 모두 끝난 이후에, SSH Server로 지정한 서버에서 실행될 스크립트를 지정할 수 있는 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;끝&quot;&gt;끝!&lt;/h1&gt;
&lt;p&gt;&lt;img width=&quot;1789&quot; alt=&quot;스크린샷 2021-11-01 오전 10 58 10&quot; src=&quot;https://user-images.githubusercontent.com/33855307/139611176-cd0cb4ea-e2af-4f89-b16a-2dc99c21c872.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/139800601-750c9537-17f7-4118-8c8d-8e6f83d9982e.png&quot; alt=&quot;end&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 설정이 끝나면 위와 같이 테스트, 배포를 편하게 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/devops/what-is-ci-cd&quot;&gt;https://www.redhat.com/ko/topics/devops/what-is-ci-cd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://engineering.linecorp.com/ko/blog/build-a-continuous-cicd-environment-based-on-data/&quot;&gt;https://engineering.linecorp.com/ko/blog/build-a-continuous-cicd-environment-based-on-data/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-20/jenkins/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-20/jenkins/</guid>
      </item>
    
      <item>
        <title>Docker를 사용한 이유</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;진행하던 프로젝트를 배포하고 성능 테스트를 하기 전에&lt;/p&gt;

&lt;p&gt;자주 사용하던 Docker와 가상화의 개념에 대해 학습해 보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vm가상머신이란&quot;&gt;VM(가상머신)이란?&lt;/h2&gt;

&lt;p&gt;가상머신은 물리적 하드웨어 시스템에 구축되어 자체 CPU, 메모리, 네트워크 인터페이스 및 스토리지를 갖추고 가상 컴퓨터 시스템으로 작동하는 가상 환경이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-vm&quot;&gt;Docker? VM?&lt;/h2&gt;
&lt;p&gt;도커(Docker)는 &lt;strong&gt;컨테이너형 가상화&lt;/strong&gt; 기술을 구현하기 위한 상주 애플리케이션과 이 애플리케이션을 조작하기 위한 명령행 도구로 구성되는 프로덕트다.&lt;/p&gt;

&lt;p&gt;즉 &lt;strong&gt;컨테이너&lt;/strong&gt;와 &lt;strong&gt;VM&lt;/strong&gt;을 비교한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;공통점은 기본 하드웨어에서 격리된 환경 내에 애플리케이션을 배치한다는 것이다.&lt;/p&gt;

&lt;p&gt;차이점은 격리된 환경을 얼마나 격리 시키는지의 차이이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137854655-3054f12c-9301-4c03-b4eb-bee1fe471282.jpeg&quot; alt=&quot;vm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Guest OS: VM에 설치된 OS&lt;/li&gt;
  &lt;li&gt;Hypervisor: Guest OS와 Host OS를 분리&lt;/li&gt;
  &lt;li&gt;Host operating System: 실물 컴퓨터에 설치된 OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;VM은 컴퓨터의 리소스를 분할하여 사용하기 때문에 속도가 느리고 주변 장치와의 완벽한 호환이 어렵다.&lt;/p&gt;

&lt;p&gt;이러한 VM의 단점을 보완하기 위해 프로세스를 격리하는 방식이 고안되었다.&lt;/p&gt;

&lt;p&gt;이 방식이 바로 컨테이너이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-docker-컨테이너&quot;&gt;1) Docker 컨테이너&lt;/h4&gt;
&lt;p&gt;도커 컨테이너에서 돌아가는 애플리케이션은 컨테이너가 제공하는 격리 기능 내부에 샌드 박스가 있지만&lt;/p&gt;

&lt;p&gt;여전히 같은 호스트의 다른 컨테이너와 동일한 커널을 공유한다. (하나의 OS에 이미지를 다운 받아 사용하기 때문이다.)&lt;/p&gt;

&lt;p&gt;즉 컨테이너는 커널은 공유하고 나머지 CPU, 메모리, 하드디스크는 컨테이너 안에 다 격리되어 있다.&lt;/p&gt;

&lt;p&gt;결과적으로 컨테이너 내부에서 실행되는 프로세스는 호스트 시스템에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-가상-머신&quot;&gt;2) 가상 머신&lt;/h4&gt;
&lt;p&gt;가상 머신과 함께 VM 내부에서 실행되는 모든 것은 호스트 운영체제 또는 하이퍼바이저와 독립되어 있다.&lt;/p&gt;

&lt;p&gt;프로세스 시작 → 호스트 시스템은 그것을 하드웨어 지원의 일부를 VM에 할당&lt;/p&gt;

&lt;p&gt;특정 VM만을 위한 커널을 부팅하고 운영체제 프로세스 세트를 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다른 가상화 기술과 함께 Docker를 사용한 이유를 더 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;가상화-기술의-종류&quot;&gt;가상화 기술의 종류&lt;/h2&gt;

&lt;h4 id=&quot;1-호스트-가상화&quot;&gt;1) 호스트 가상화&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;PC 혹은 Server에 OS(윈도우, 리눅스 등)를 설치하고 그 위에 가상머신을&lt;/strong&gt; 설치하여&lt;/p&gt;

&lt;p&gt;그 Host OS 위에서 가상 머신 모니터가 가상환경을 구성, 관리하는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가상 머신 모니터는 각 가상 환경마다 VM을 생성하고 VM마다 Guest OS를 설치한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;VM에 특정 하나의 애플리케이션을 사용하기 위해 가볍지 않은 Linux OS를 설치하게 되는 경우가 발생할 수도 있다.&lt;/p&gt;

&lt;p&gt;ex) Windows 환경에서 Linux의 가상머신에 Mysql 데이터 베이스를 설치하는 경우&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;VM의 개수가 많아지면 점점 Guest OS 의 무게를 무시하지 못한다.&lt;/p&gt;

&lt;p&gt;Host OS의 무게라도 줄이기 위해 등장한 것이 아래의 하이퍼바이저 가상화이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-하이퍼바이저-가상화&quot;&gt;2) 하이퍼바이저 가상화&lt;/h4&gt;

&lt;p&gt;하이퍼바이저 가상화는 &lt;strong&gt;하드웨어 위에 가상화 전문 소프트웨어인 ‘하이퍼바이저’를 설치하고 하드웨어와 가상환경을 제어&lt;/strong&gt;한다.&lt;/p&gt;

&lt;p&gt;Host OS 없이 하드웨어를 직접 제어하기 때문에 효율적으로 리소스를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;하이퍼바이저에 의해 구동되는 VM은 각 VM마다 독립된 가상 하드웨어 자원을 할당받는다.&lt;/p&gt;

&lt;p&gt;논리적으로 분리 되어 있어서 한 VM에 오류가 발생해도 다른 VM으로 퍼지지 않는다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;strong&gt;VM별로 OS가 동작&lt;/strong&gt;하기 때문에 &lt;strong&gt;VM동작에 사용되는 오버헤드&lt;/strong&gt;는 아직 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-컨테이너-가상화&quot;&gt;3) 컨테이너 가상화&lt;/h4&gt;

&lt;p&gt;컨테이너 가상화 기술은 Host OS 상에서 논리적인 구역을 나누어 특정 어플리케이션의 동작을 위한 라이브러리와&lt;/p&gt;

&lt;p&gt;애플리케이션 (OS나 참조되는 App)을 컨테이너에 넣고, 개별 서버처럼 사용하는 것이 컨테이너 가상화이다.&lt;/p&gt;

&lt;p&gt;VM 별로 OS가 없고 VM을 구동시키기 위한 OS부팅도 없기 때문에 다른 가상화 기술에 비해 가볍고 빠른게 컨테이너 가상화 기술의 특징이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;컨테이너들을-어떻게-격리시킬-수-있는가&quot;&gt;컨테이너들을 어떻게 격리시킬 수 있는가?&lt;/h2&gt;

&lt;h4 id=&quot;1-lxc-덕분이다&quot;&gt;1) LXC 덕분이다.&lt;/h4&gt;

&lt;p&gt;LXC는 리눅스 커널 컨테이너 기능을 위한 사용자영역 인터페이스이다.&lt;/p&gt;

&lt;p&gt;강력한 API와 간단한 도구들을 통해 리눅스 사용자가 쉽게 시스템 또는 어플리케이션 컨테이너들을 생성/관리할 수 있게 해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도커에서 어떻게 리눅스 기능을?&lt;/p&gt;

  &lt;p&gt;Docker란 Go언어로 작성된 리눅스 컨테이너 기반으로하는 오픈소스 가상화 플랫폼이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-네임스페이스&quot;&gt;2) 네임스페이스&lt;/h4&gt;

&lt;p&gt;하나의 시스템에서 프로세스를 격리시킬 수 있는 가상화 기술&lt;/p&gt;

&lt;p&gt;(별개의 독립된 공간을 사용하는 것처럼 격리된 환경을 제공하는 경량 프로세스 가상화 기술)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-chroots&quot;&gt;3) Chroots&lt;/h4&gt;

&lt;p&gt;chroot는 프로세스의 루트 디렉토리를 변경하는 것으로, 이를 통해 프로세스가 액세스 할 수있는 디렉토리를 제한하거나 시스템 라이브러리와 관련 라이브러리를 로드 할 수있다.&lt;/p&gt;

&lt;p&gt;chroot에서 제어 할 수있는 파일이나 디렉토리에 대한 액세스만으로, 네트워크 및 프로세스 등을 컨트롤 할 수는 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-cgroups&quot;&gt;4) CGroups&lt;/h4&gt;

&lt;p&gt;CPU, 메모리, Network, HD I/O 등 프로세스 그룹의 시스템 리소스 사용량을 관리&lt;/p&gt;

&lt;p&gt;어떤 애플리케이션 사용량이 너무 많다면 그 어플리케이션 같은 것을 C Group에 집어 넣어서 CPU와 메모리 사용 제한 가능&lt;/p&gt;

&lt;p&gt;(필요한 만큼만 할당해줌)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그럼-kubernetes는&quot;&gt;그럼 Kubernetes는?&lt;/h2&gt;
&lt;p&gt;많은 기업에서 쿠버네티스를 잘 아는 개발자를 원하는걸 볼 수 있는데&lt;/p&gt;

&lt;p&gt;Docker랑 뭐가 다르고 왜 그런걸까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Docker에서 컨테이너를 사용하면 Machine의 자원을 효율적으로 사용할 수 있는데&lt;/p&gt;

&lt;p&gt;만약 컨테이너가 기하급수적으로 증가한다면?&lt;/p&gt;

&lt;p&gt;컨테이너를 관리하고 운영하는데 상당히 어려워져서 운영상의 효율성이 저하된다.&lt;/p&gt;

&lt;p&gt;이러한 배경으로 나타난게 쿠버네티스이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;도커는 기술적인 개념, 도구이고 쿠버네티스는 도커를 관리하는 툴이라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;이미지를 컨테이너에 띄우고 실행하는 기술이 도커이고&lt;/p&gt;

&lt;p&gt;이런 도커를 기반으로 컨테이너를 관리하는 서비스가 쿠버네티스인 것이다.&lt;/p&gt;

&lt;p&gt;도커는 한 개의 컨테이너를 관리하는 데 최적이고&lt;/p&gt;

&lt;p&gt;쿠버네티스는 여러 개의 컨테이너를 서비스 단위로 관리하는 데 최적화되어있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 이유로 나는 많은 컨테이너를 관리할 정도의 프로젝트는 아니기 때문에&lt;/p&gt;

&lt;p&gt;쿠버네티스를 사용하지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.sys4u.co.kr/display/SOWIKI/1.+Virtualization+Technology&quot;&gt;http://wiki.sys4u.co.kr/display/SOWIKI/1.+Virtualization+Technology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-19/vm/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-19/vm/</guid>
      </item>
    
      <item>
        <title>Nginx 로드 밸런싱 구성</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전 게시글에서 무중단 배포 환경에 대해 알아보면서&lt;/p&gt;

&lt;p&gt;로드 밸런싱에 대해 알게 되었다.&lt;/p&gt;

&lt;p&gt;애플리케이션 서버와 사용자 사이에 중계 해줄 리버스 프록시 서버가 필요했고&lt;/p&gt;

&lt;p&gt;자연스럽게 트래픽을 분산하여 각 서버가 받는 부하를 분산하는 로드밸런싱도 구성할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-10-17/deploy/&quot;&gt;무중단 배포 환경 이해 포스팅 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;로드-밸런싱이란&quot;&gt;로드 밸런싱이란?&lt;/h1&gt;

&lt;p&gt;로드밸런서는 서버에 가해지는 부하(로드)를 분산(밸런싱)해주는 장치 또는 기술이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q-로드-밸런서가-왜-필요할까&quot;&gt;Q. 로드 밸런서가 왜 필요할까?&lt;/h3&gt;

&lt;p&gt;클라이언트가 한 두명이면 서버가 여유롭게 응답할 수 있지만&lt;/p&gt;

&lt;p&gt;수천만명이라면 하나의 서버는 지쳐서 동작을 멈추게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이러한 문제를 해결하기 위한 방법은 2가지 이다.&lt;/p&gt;

&lt;p&gt;장단점이 있기 때문에 각각의 서비스에 특징과 사용량을 생각해 최적의 방법을 적용하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;scale-up : 현재 사용하고 있는 서버 자체의 성능을 증가시켜 처리 능력을 향상시키는 것으로
cpu, 메모리 업그레이드 등으로 서버의성능을 높이는 방식&lt;/li&gt;
  &lt;li&gt;scale-out : 기존 서버와 비슷한 사양의 사양의 여러 대의 서버를 두는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;scale-out의 방식으로 서버를 증설하기로 결정했다면&lt;/p&gt;

&lt;p&gt;여러 대의 서버로 트래픽을 균등하게 분산해주는 로드밸런싱이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;로드-밸런싱-기법&quot;&gt;로드 밸런싱 기법&lt;/h1&gt;

&lt;p&gt;다음과 같은 다양한 로드 밸런싱 기법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;• 라운드로빈 방식(Round Robin Method)
서버에 들어온 요청을 순서대로 돌아가며 배정하는 방식이다.
클라이언트의 요청을 순서대로 분배하기 때문에 여러 대의 서버가 동일한 스펙을 갖고 있고,
서버와의 연결(세션)이 오래 지속되지 않는 경우에 활용하기 적합하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;• 가중 라운드로빈 방식(Weighted Round Robin Method)
각각의 서버마다 가중치를 매기고 가중치가 높은 서버에 클라이언트 요청을 우선적으로 배분한다.
주로 서버의 트래픽 처리 능력이 상이한 경우 사용되는 부하 분산 방식이다.
예를 들어 A라는 서버가 5라는 가중치를 갖고 B라는 서버가 2라는 가중치를 갖는다면,
로드밸런서는 라운드로빈 방식으로 A 서버에 5개 B 서버에 2개의 요청을 전달한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;• IP 해시 방식(IP Hash Method)
클라이언트의 IP 주소를 특정 서버로 매핑하여 요청을 처리하는 방식이다.
사용자의 IP를 해싱해(Hashing, 임의의 길이를 지닌 데이터를 고정된 길이의 데이터로 매핑하는 것, 또는 그러한 함수) 로드를 분배하기 때문에 사용자가 항상 동일한 서버로 연결되는 것을 보장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;• 최소 연결 방식(Least Connection Method)
요청이 들어온 시점에 가장 적은 연결상태를 보이는 서버에 우선적으로 트래픽을 배분한다.
자주 세션이 길어지거나, 서버에 분배된 트래픽들이 일정하지 않은 경우에 적합한 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;• 최소 리스폰타임(Least Response Time Method)
서버의 현재 연결 상태와 응답시간(Response Time, 서버에 요청을 보내고 최초 응답을 받을 때까지 소요되는 시간)을 모두 고려하여 트래픽을 배분한다.
가장 적은 연결 상태와 가장 짧은 응답시간을 보이는 서버에 우선적으로 로드를 배분하는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;nginx란&quot;&gt;Nginx란?&lt;/h1&gt;

&lt;p&gt;Nginx는 웹 서버, 리버스 프록시, 캐싱, 로드 밸런싱, 미디어 스트리밍 등을 위한 오픈소스 소프트웨어이다.&lt;/p&gt;

&lt;p&gt;위에서 계속 언급한 리버스 프록시 서버에 해당한다.&lt;/p&gt;

&lt;p&gt;요청을 전달하고 실제 요청에 대한 처리는 뒷단의 웹 애플리케이션 서버들이 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어떻게 운영되는지 알아보기 위해 간단한 예제로 Nginx를 사용해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;nginx-무중단-배포&quot;&gt;Nginx 무중단 배포&lt;/h1&gt;

&lt;p&gt;Nginx와 스프링 부트 3개의 서버로 무중단 배포를 완성해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;707&quot; alt=&quot;스크린샷 2021-10-18 오후 2 37 51&quot; src=&quot;https://user-images.githubusercontent.com/33855307/137674794-5e4c3335-c0a7-443d-a50c-3ff73bb516bb.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nginx는 80번 포트, 443 포트 할당&lt;/li&gt;
  &lt;li&gt;스프링 부트 1, 2, 3은 8080 포트 할당&lt;/li&gt;
  &lt;li&gt;Jenkins는 8080 포트 할당&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-젠킨스-설정&quot;&gt;1) 젠킨스 설정&lt;/h3&gt;

&lt;p&gt;우선 원하는 서버를 생성하고 Jenkins의 공개키(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/id_rsa.pub&lt;/code&gt;)를&lt;/p&gt;

&lt;p&gt;스프링 부트 서버 1, 2, 3의 authorized_keys(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/authorized_keys&lt;/code&gt;)에 붙여넣는다.&lt;/p&gt;

&lt;p&gt;authorized_keys의 권한을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 600 ~/.ssh/authorized_keys&lt;/code&gt; 변경한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GCP를 사용하면 메타 데이터 메뉴에서 SSH 키를 쉽게 등록할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 설정이 끝나고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;젠킨스 관리&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;시스템 설정&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish over SSH&lt;/code&gt; 항목에서&lt;/p&gt;

&lt;p&gt;Test Configuration을 해보면 SUCCESS가 출력될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137674994-2428b81f-e271-4cc0-8947-fba97c3707af.jpeg&quot; alt=&quot;ins1&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137674986-ccf45041-60dd-4fa0-b18c-a37b152bdcac.jpeg&quot; alt=&quot;ins2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: 각 인스턴스 구분이 가능하게 지정 (Job에서 표시될 이름)&lt;/li&gt;
  &lt;li&gt;Hostname: 내부 IP&lt;/li&gt;
  &lt;li&gt;Username: ssh 접근 계정 이름, 중복되어도 상관 없음 원하느대로 지정&lt;/li&gt;
  &lt;li&gt;Remote Directory: Jenkins 시스템 설정에서 SSH 설정시 지정한 홈 디렉토리 뒤에 추가로 입력하는 디렉토리 경로&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;git에서 프로젝트를 받아오는 jenkins 설정은 아래 게시글에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-10-21/jenkins-ci/&quot;&gt;https://hyerin6.github.io/2020-10-21/jenkins-ci/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨트롤러만 있는 스프링 부트 프로젝트이기 때문에&lt;/p&gt;

&lt;p&gt;배포 스크립트는 다음과 같이 간단하게 작성했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;982&quot; alt=&quot;스크린샷 2021-10-18 오후 2 46 25&quot; src=&quot;https://user-images.githubusercontent.com/33855307/137733391-914b6c0e-a07f-4cfe-aa74-05c190ae3a82.png&quot; /&gt;
&lt;img width=&quot;979&quot; alt=&quot;스크린샷 2021-10-18 오후 2 45 50&quot; src=&quot;https://user-images.githubusercontent.com/33855307/137733399-06a45e91-f042-459c-8ce2-67e0ed7aa1d5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-nginx-설치&quot;&gt;2) Nginx 설치&lt;/h3&gt;

&lt;h4 id=&quot;docker-컨테이너를-실행시킬-준비&quot;&gt;Docker 컨테이너를 실행시킬 준비&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start docker
&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;666 /var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;nginx-설치&quot;&gt;Nginx 설치&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nginx
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;로드밸런싱-설정&quot;&gt;로드밸런싱 설정&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 경로의 파일로 들어가 다음과 같은 내용을 추가해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream cpu-bound-app &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;instance_1번의_ip&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:8080 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;instance_2번의_ip&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:8080 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;instance_3번의_ip&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:8080 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  proxy_pass http://cpu-bound-app&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  proxy_http_version 1.1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  proxy_set_header Upgrade &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  proxy_set_header Connection &lt;span class=&quot;s1&quot;&gt;'upgrade'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  proxy_cache_bypass &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;proxy_pass : 요청이 오면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://cpu-bound-app&lt;/code&gt;로 전달&lt;/li&gt;
  &lt;li&gt;proxy_set_header XXX : 실제 요청 데이터를 header의 각 항목에 할당
    &lt;ul&gt;
      &lt;li&gt;ex) proxy_set_header X-Real-IP $remote_addr: Request Header의 X-Real-IP에 요청자의 IP를 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;설정-파일-적용&quot;&gt;설정 파일 적용&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 설정하면 nginx는 에러 로그를 남긴다.&lt;/p&gt;

&lt;p&gt;이유는 SELinux (Security Enhanced Linux)가 함께 작동하는데,&lt;/p&gt;

&lt;p&gt;이 SELinux가 HTTP 프록시를 차단하고 있는 것이 문제이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;nginx-에러-로그-확인&quot;&gt;Nginx 에러 로그 확인&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /var/log/nginx/error.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;http-프록시를-차단-해결&quot;&gt;HTTP 프록시를 차단 해결&lt;/h4&gt;

&lt;p&gt;HTTP 프록시를 허용해주는 커맨드를 실행하면 위 에러를 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;setsebool &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; httpd_can_network_connect on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 -P는 persist의 의미로, 재부팅 후에도 환경설정이 그대로 적용된다는 말이다.&lt;/p&gt;

&lt;p&gt;이렇게 함으로써 정상적으로 도메인 접속 후 포트포워딩이 문제 없이 이루어 지는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;nginx-흐름&quot;&gt;Nginx 흐름&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/141668538-e175bdc4-93d0-4a43-9b8c-d7a4b11bda1c.png&quot; alt=&quot;nnx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버를 늘리지 않고 단일 서버로 두고 nginx로 요청을 받았을 뿐인데&lt;/p&gt;

&lt;p&gt;postman으로 확인해보니 빨라진 응답 결과를 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Nginx는 Event-Driven 구조로 동작하기 때문에 한 개 또는 고정된 프로세스만 생성하여 사용하고,&lt;/p&gt;

&lt;p&gt;비동기 방식으로 요청들을 동시에 처리되는 것처럼 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;Nginx는 새로운 요청이 들어오더라도 새로운 프로세스와 스레드를 생성하지 않기 때문에&lt;/p&gt;

&lt;p&gt;프로세스와 스레드 생성 비용이 존재하지 않고, 적은 자원으로도 효율적인 운용이 가능하다.&lt;/p&gt;

&lt;p&gt;그래서 단일 서버에서도 동시에 많은 연결을 처리할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.post.naver.com/viewer/postView.nhn?volumeNo=27046347&amp;amp;memberNo=2521903&quot;&gt;https://m.post.naver.com/viewer/postView.nhn?volumeNo=27046347&amp;amp;memberNo=2521903&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&quot;&gt;https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/267&quot;&gt;https://jojoldu.tistory.com/267&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-18/loadbalancing/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-18/loadbalancing/</guid>
      </item>
    
      <item>
        <title>무중단 배포 환경 이해</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;무중단-배포란&quot;&gt;무중단 배포란?&lt;/h2&gt;

&lt;p&gt;무중단 배포란 배포를 중단 없이 진행한다는 의미다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;배포란 개발환경에서 개발된 코드를 패키징하여&lt;/p&gt;

  &lt;p&gt;서버에서 새로운 버전의 애플리케이션을 실행하도록 하는 것을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137627040-7f68f250-bec2-4d84-bb34-348df1bd37c1.jpeg&quot; alt=&quot;무중단배포&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전 버전 애플리케이션을 종료시키고 새로운 버전 애플리케이션을 실행하고 새로운 버전 애플리케이션이 요청을 받을 준비가 될 때까지 서비스가 중단된다.&lt;/p&gt;

&lt;p&gt;서비스가 중단되는 시간을 다운타임이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q. 새로운 버전의 애플리케이션을 배포하기 전에 예전 버전의 &lt;strong&gt;애플리케이션을 중단시키는 이유는?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A. 같은 포트를 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;하나의 서버에서 하나의 포트를 동시에 서로 다른 애플리케이션이 사용하는 것은 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q. 그렇다면 &lt;strong&gt;서버를 두 개로 늘리면&lt;/strong&gt; 어떻게 될까?&lt;/p&gt;

&lt;p&gt;A. 서버가 두 개가 되면 사용자는 &lt;strong&gt;두 서버 모두의 IP 혹은 도메인 주소를 알아야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그리고 두 서버중 어떤 서버가 배포되고 있는지 알 방법이 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 결론은 &lt;strong&gt;애플리케이션 서버와 사용자 사이에 중계 해줄 서버가 필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;리버스-프록시&quot;&gt;리버스 프록시&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137628085-3f76827e-150d-481a-8ac3-370704719a4e.jpeg&quot; alt=&quot;ㅁ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 애플리케이션 서버와 사용자 사이에서 요청을 중계해주는 서버를&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리버스 프록시(reverse proxy)&lt;/strong&gt; 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트는 애플리케이션 서버를 모르기 때문에&lt;/p&gt;

&lt;p&gt;리버스 프록시로 서버를 분산하면서 트래픽도 분산할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;이렇게 트래픽을 분산하여 각 서버가 받는 부하를 분산하는 것을 &lt;strong&gt;로드밸런싱(Load balancing)&lt;/strong&gt; 이라고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;로드밸런싱에 대해서는 다음 게시글에서 자세히 알아보고&lt;/p&gt;

  &lt;p&gt;우선 여러가지 배포 방식에 대해 알아보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;배포-방식&quot;&gt;배포 방식&lt;/h2&gt;

&lt;h4 id=&quot;1-롤링-rolling&quot;&gt;1) 롤링 (Rolling)&lt;/h4&gt;

&lt;p&gt;일반적인 배포 방식이다.&lt;/p&gt;

&lt;p&gt;이전 버전에서 새로운 버전으로 트래픽을 점진적으로 전환하는 배포 방식으로&lt;/p&gt;

&lt;p&gt;관리가 편하지만 배포 중 한쪽 인스턴스의 수가 감소되므로 서버 처리 용량을 미리 고려해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-블루-그린-blue-green&quot;&gt;2) 블루 그린 (Blue Green)&lt;/h4&gt;

&lt;p&gt;이전 버전을 블루, 새로운 버전을 그린이라고 한다.&lt;/p&gt;

&lt;p&gt;새로운 버전을 배포하고 한번에 전환하여 모든 연결을 새로운 버전으로 바라보게 하는 전략이다.&lt;/p&gt;

&lt;p&gt;동시에 나란히 구성하여 배포 시점에 트래픽이 일제히 전환된다.&lt;/p&gt;

&lt;p&gt;빠른 롤백이 가능하고 운영환경에 영향을 주지 않고&lt;/p&gt;

&lt;p&gt;실제 서비스 환경으로 테스트가 가능하다.&lt;/p&gt;

&lt;p&gt;단 시스템 자원이 두배로 필요하기 때문에 비용이 많이 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-카나리-canary&quot;&gt;3) 카나리 (Canary)&lt;/h4&gt;

&lt;p&gt;지정한 서버 또는 특정 유저에게만 배포했다가 정상적이면 전체를 배포한다.&lt;/p&gt;

&lt;p&gt;서버의 트래픽 일부를 새로운 버전으로 분산하여 오류 여부를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이런 전략은 A/B 테스트가 가능하며, 성능 모니터링에 유용하다.&lt;/p&gt;

&lt;p&gt;트래픽을 분산시킬 때는 라우팅을 랜덤 하게 할 수 있고&lt;/p&gt;

&lt;p&gt;사용자로 분류할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;트래픽이-많아지면&quot;&gt;트래픽이 많아지면?&lt;/h2&gt;

&lt;p&gt;트래픽이 많아지면 위에서 본 로드밸런싱만으로 충분하지 않다.&lt;/p&gt;

&lt;p&gt;결국 서버 자원을 사용해서 동작하는 애플리케이션이기 때문에 다음과 같은 방법도 고려해봐야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx(로드밸런싱)이 실행되는 서버 Scale-up&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;네트워크 장치로 로드 밸런싱 - 하드웨어&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DNS 리다이렉션 - 로드밸런싱을 여러개 두는 방식&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 방법 외에도 여러 방법이 있겠지만&lt;/p&gt;

&lt;p&gt;중요한 것은 어떤 부분이 병목인지 확인하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/system-admin/forward-proxy-reverse-proxy-21430345.html&quot;&gt;포워드 프록시(forward proxy) 리버스 프록시(reverse proxy) 의 차이&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/284659&quot;&gt;L4/L7 스위치의 대안, 오픈 소스 로드 밸런서 HAProxy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reference-m1.tistory.com/211&quot;&gt;배포 전략&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@makeitcloud/%EB%9E%80-L4-load-balancer-vs-L7-load-balancer-%EB%9E%80&quot;&gt;L4 load balancer vs L7 load balancer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-17/deploy/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-17/deploy/</guid>
      </item>
    
      <item>
        <title>SSH 명칭 &amp; 접속 과정</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 하면서 SSH 접속에 관련된 내용은 다음 포스팅에서 얘기한 적이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-01-15/ssh-config/&quot;&gt;ssh config 사용해서 ssh 접속하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-04-24/0424/&quot;&gt;젠킨스 서버에서 프로젝트를 배포하고 싶은 서버로 ssh 명령어로 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용법은 이미 알고있으니 기본 용어와 접속 과정을 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssh란&quot;&gt;SSH란?&lt;/h2&gt;

&lt;p&gt;SSH는 Secure Shell의 줄임말로, 원격 호스트에 접속하기 위해 사용되는 보안 프로토콜이다.&lt;/p&gt;

&lt;p&gt;기존 원격 접속 텔넷은 암호화를 제공하지 않기 때문에 보안상 취약하다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssh-작동-원리&quot;&gt;SSH 작동 원리&lt;/h2&gt;

&lt;h4 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;평문: 암호화 되지 않은 글&lt;/li&gt;
  &lt;li&gt;암호문: 암호화 되어 읽을 수 없는 글&lt;/li&gt;
  &lt;li&gt;암호화: 암호키를 사용하여 평문을 암호문으로 바꾸는 것&lt;/li&gt;
  &lt;li&gt;복호화: 암호키를 사용하여 암호문을 평문으로 바꾸는 것&lt;/li&gt;
  &lt;li&gt;대칭키: 암호화에 사용하는 키와 복호화에 사용하는 키가 같은 것&lt;/li&gt;
  &lt;li&gt;비대칭키: 암호화에 사용하는 키와 복호화에 사용하는 키가 다른 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-비대칭키-방식&quot;&gt;1) 비대칭키 방식&lt;/h4&gt;

&lt;p&gt;가장 먼저 사용자와 서버가 서로의 정체를 증명해야 한다.&lt;/p&gt;

&lt;p&gt;이 &lt;strong&gt;서버 인증&lt;/strong&gt; 시점에 사용되는 것이 비대칭키 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 과정으로 인증이 진행된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137616683-a4ff545f-a846-47c2-9668-dd5493ac93a2.png&quot; alt=&quot;스크린샷 2021-10-17 오후 4 26 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-사용자-인증&quot;&gt;2) 사용자 인증&lt;/h4&gt;

&lt;p&gt;사용자 인증은 서버 인증과 원리는 같지만, 서버와 클라이언트의 역할만 바뀌게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/137617660-4a4f3bef-e61f-4bc9-a675-7929698b2746.png&quot; alt=&quot;스크린샷 2021-10-17 오후 4 57 39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-대칭키-방식-데이터-암호화&quot;&gt;3) 대칭키 방식 (데이터 암호화)&lt;/h4&gt;

&lt;p&gt;정보를 주고 받는 과정에서 정보가 새어나가지 않기 위해 정보를 암호화해서 주고받는데&lt;/p&gt;

&lt;p&gt;이 과정이 대칭키 방식이다.&lt;/p&gt;

&lt;p&gt;비대칭키 방식과 달리 한 개의 키만을 사용하고, 이를 대칭 키(세션 키)라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://library.gabia.com/contents/infrahosting/9002/&quot;&gt;https://library.gabia.com/contents/infrahosting/9002/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-14/ssh/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-14/ssh/</guid>
      </item>
    
      <item>
        <title>엘라스틱서치 부분 검색 기능 개발</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;텍스트-분석&quot;&gt;텍스트 분석&lt;/h1&gt;

&lt;p&gt;“엘라스틱서치는 루씬을 기반으로 구축된 텍스트 기반 검색엔진이다.”&lt;/p&gt;

&lt;p&gt;일반적으로 특정 단어가 포함된 문서를 찾으려면 검색어로 찾을 단어를 입력하면 될 것이라 생각하겠지만&lt;/p&gt;

&lt;p&gt;엘라스틱 서치의 기본 분석기는 내가 생각한대로 동작하지 않았다.&lt;/p&gt;

&lt;p&gt;별도의 설정 없이 “엘라스틱서치”나 “텍스트”라고 입력해도 위 문장이 검색되지 않는다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;엘라스틱서치는 문서를 색인하기 전에 해당 문서의 필드 타입이 무엇인지 확인하고&lt;/p&gt;

&lt;p&gt;텍스트 타입이면 분석기 이용해 분석한다.&lt;/p&gt;

&lt;p&gt;텍스트가 분석되면 텀(term)으로 나눠서 형태소 형태로 분석된다.&lt;/p&gt;

&lt;p&gt;해당 형태소는 특정 원칙에 의해 필터링되어 단어가 삭제되거나&lt;/p&gt;

&lt;p&gt;추가, 수정되고 최종적으로 역색인된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-역색인-구조&quot;&gt;1) 역색인 구조&lt;/h3&gt;

&lt;p&gt;역색인 구조는 다음과 같이 요약할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 문서가 가지는 단어의 고유 단어 목록&lt;/li&gt;
  &lt;li&gt;해당 단어가 어떤 문서에 속해 있는지에 대한 정보&lt;/li&gt;
  &lt;li&gt;전체 문서에 각 단어가 몇 개 들어있는지에 대한 정보&lt;/li&gt;
  &lt;li&gt;하나의 문서에 단어가 몇 번씩 출현했는지에 대한 빈도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;색인 파일들에 들어간 토큰만 변경되어 저장되고 실제 문서의 내용은 변함없이 저장된다.&lt;/p&gt;

&lt;p&gt;색인할 때 특정한 규칙과 흐름에 의해 텍스트를 변경하는 과정을 분석(Analyze)이라고 하고 해당 처리는 분석기(Analyzer)라는 모듈을 조합해서 이루어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-분석기-구조&quot;&gt;2) 분석기 구조&lt;/h3&gt;

&lt;p&gt;분석기는 기본적으로 다음과 같은 프로세스로 동작한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문장을 특정한 규칙에 의해 수정한다.&lt;/li&gt;
  &lt;li&gt;수정한 문자를 개별 토큰으로 분리한다.&lt;/li&gt;
  &lt;li&gt;개별 토큰을 특정한 규칙에 의해 변경한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CHARACTER FILTER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;문장을 분석하기 전에 입력 텍스트에 대해 특정한 단어를 변경하거나 HTML과 같은 태그를 제거하는 역할을 하는 필터&lt;/p&gt;

&lt;p&gt;해당 내용은 텍스트를 개별 토큰화하기 전의 전처리 과정이며,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReplaceAll()&lt;/code&gt; 함수처럼 패턴으로 텍스트를 변경하거나 사용자가 정의한 필터를 적용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TOKENIZER FILTER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TOKENIZER FILTER는 분석기를 구성할 때 하나만 사용할 수 있으며 텍스트를 어떻게 나눌 것인지를 정의한다.&lt;/p&gt;

&lt;p&gt;한글을 분해할 때는 한글 형태소 분석기의 TOKENIZER를 사용하고,&lt;/p&gt;

&lt;p&gt;영문을 분석할 때는 영문 형태소 분석기의 TOKENIZER를 사용하는 등 상황에 맞게 적절한 TOKENIZER를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TOKEN FILTER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;토큰화된 단어를 하나씩 필터링해서 사용자가 원하는 토큰으로 변환한다.&lt;/p&gt;

&lt;p&gt;Token Filter는 여러 단계가 순차적으로 이뤄지며 순서를 어떻게 지정하느냐에 따라 검색의 질이 달라질 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;전체적인 프로세스는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Character Filter → Tokenizer Filter → Token Filter → Index 
                                           ↕️
                                          사전 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;부분-검색-기능을-위한-설정&quot;&gt;부분 검색 기능을 위한 설정&lt;/h1&gt;

&lt;h3 id=&quot;1-postindex&quot;&gt;1) PostIndex&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Setting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settingPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tokenizer/setting.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ToString&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROTECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;word_analyzer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Setting(settingPath = &quot;/tokenizer/setting.json&quot;)&lt;/code&gt; 이 부분은 프로젝트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource/**&lt;/code&gt; 경로의 파일을 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-resourcestokenizersettingjson&quot;&gt;2) /resources/tokenizer/setting.json&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;max_ngram_diff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;analysis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;word_analyzer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lowercase&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ngram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;min_gram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;max_gram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;token_chars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;letter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;digit&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 파일에 사용할 분석기, 필터 등을 설정하면 인덱스 생성시에 적용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;letter tokenizer: 글자가 아닌 문자를 만날 때마다 텍스트를 용어로 나눈다.&lt;/li&gt;
  &lt;li&gt;token_chars: 토큰에 포함되어야 할 문자 종류. Elasticsearch는 지정된 종류에 속하지 않은 문자를 분할한다. 기본값은 []&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ngram: 지정된 문자 목록 중 하나를 만날 때마다 텍스트를 먼저 단어로 분리&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;예) cat → cat, ca, at, c, a, t&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;filter lowercase: 소문자로 변환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-postindexrepository&quot;&gt;3) PostIndexRepository&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndexRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElasticsearchRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;match\&quot;: {\&quot;content\&quot;: \&quot;?0\&quot;}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;searchByContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 jpql도 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic 가이드 북: &lt;a href=&quot;https://esbook.kimjmin.net/06-text-analysis&quot;&gt;https://esbook.kimjmin.net/06-text-analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-08/es-search/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-08/es-search/</guid>
      </item>
    
      <item>
        <title>Spring IoC/DI 란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전 게시글에서 스프링을 정의해 봤다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-24/spring/&quot;&gt;https://hyerin6.github.io/2021-09-24/spring/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;IoC/DI, AOP, PSA, POJO 등 다양하고 익숙한 단어들이 많이 나왔는데&lt;/p&gt;

&lt;p&gt;사실 Spring 공부를 시작하고 토비의 스프링을 읽으면서 다음 게시글에서 정리해 본 적이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ioc/DI: &lt;a href=&quot;https://hyerin6.github.io/2020-01-31/spring-DI-IoC/&quot;&gt;https://hyerin6.github.io/2020-01-31/spring-DI-IoC/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AOP: &lt;a href=&quot;https://hyerin6.github.io/2020-02-14/spring-AOP/&quot;&gt;https://hyerin6.github.io/2020-02-14/spring-AOP/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 단어 의미나 구현 방법 위주로 정리했기 때문에&lt;/p&gt;

&lt;p&gt;처음부터 다시 꼼꼼하게 알아보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ioc란&quot;&gt;IoC란?&lt;/h1&gt;

&lt;p&gt;애플리케이션 코드를 작성할 때, 특정 기능이 필요하면 라이브러리를 사용한다.&lt;/p&gt;

&lt;p&gt;이때 프로그램의 흐름을 제어하는 주체가 애플리케이션 코드이다.&lt;/p&gt;

&lt;p&gt;하지만 프레임워크 기반의 개발에서는 프레임워크 자신이 흐름을 제어하는 주체가 되어&lt;/p&gt;

&lt;p&gt;필요할 때마다 애플리케이션 코드를 호출하여 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프레임워크에서 이 젱권을 가지는 것이 바로 컨테이너이다.&lt;/p&gt;

&lt;p&gt;객체의 생성부터 생명주기 관리까지의 모든 것을 컨테이너가 맡아서 하게 된다.&lt;/p&gt;

&lt;p&gt;이를 일반적인 제어권의 흐름이 바뀌었다고 해서 IoC (Inversion of Control, 제어의 역전) 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ioc-사용-목적&quot;&gt;IoC 사용 목적&lt;/h1&gt;

&lt;h3 id=&quot;1-클래스-호출-방식&quot;&gt;(1) 클래스 호출 방식&lt;/h3&gt;

&lt;p&gt;클래스 내에 선언과 구현이 같이 있기 때문에 다양한 형태로 변화가 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;795&quot; alt=&quot;스크린샷 2021-10-06 오후 11 03 51&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136218450-88e80dbf-5d1e-4a1a-bb54-3f8c980b13b8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-인터페이스-호출-방식&quot;&gt;(2) 인터페이스 호출 방식&lt;/h3&gt;

&lt;p&gt;클래스와 인터페이스를 상속받아 구현하는 클래스로 분리한다.&lt;/p&gt;

&lt;p&gt;구현 클래스 교체가 용이하여 다양한 변화가 가능하다.&lt;/p&gt;

&lt;p&gt;그러나 구현 클래스 교체 시 호출 클래스의 코드에서 수정이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ 부분적으로 종속적이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;774&quot; alt=&quot;스크린샷 2021-10-06 오후 11 06 53&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136219030-00541c99-7eaf-4616-a54a-8cd97860b539.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-팩토리-호출-방식&quot;&gt;(3) 팩토리 호출 방식&lt;/h3&gt;

&lt;p&gt;팩토리 방식은 팩토리가 구현 클래스를 생성하기 때문에 호출 클래스는 팩토리를 호출하는 코드로 충분하다.&lt;/p&gt;

&lt;p&gt;구현 클래스 변경 시 팩토리만 수정하면 되기 때문에 호출 클래스에는 영향을 미치지 않는다.&lt;/p&gt;

&lt;p&gt;그러나 호출 클래스에서 팩토리를 호출하는 코드가 들어가야 하는 것 또한 팩토리에 의존함을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;738&quot; alt=&quot;스크린샷 2021-10-06 오후 11 09 44&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136219584-5a2216f7-7e74-4a19-ba3c-8dd43ec287f5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-ioc&quot;&gt;(4) IoC&lt;/h3&gt;

&lt;p&gt;팩토리 패턴의 장점을 더해 어떠한 것에도 의존하지 않는 형태가 되었다.&lt;/p&gt;

&lt;p&gt;실행 시점에 클래스간 관계가 형성된다.&lt;/p&gt;

&lt;p&gt;즉 의존성이 삽입된다는 의미로 IoC를 DI라는 표현으로도 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;754&quot; alt=&quot;스크린샷 2021-10-06 오후 11 11 52&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136219991-9632668d-2756-4f71-aa06-f851e93eeaab.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 화살표 방향이 바뀐 것에 주목해보자.&lt;/p&gt;

&lt;p&gt;클래스가 팩토리를 호출하던 팩토리 패턴의 구조에서 클래스에 의존성 삽입하는 구조로 바뀌었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;스프링을-사용하지-않으면&quot;&gt;스프링을 사용하지 않으면?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트의 생명주기 문제&lt;/li&gt;
  &lt;li&gt;부품화 문제&lt;/li&gt;
  &lt;li&gt;기술 은닉과 부적절한 기술 은닉 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 문제를 해결하지 못하면 웹 애프리케이션은 리소스를 잘 이용하지 못하고,&lt;/p&gt;

&lt;p&gt;테스트, 확장, 변경이 어려워질 것이다.&lt;/p&gt;

&lt;p&gt;Spring은 이러한 문제를 해결하기 위해 만들어진 컨테이너라고 볼 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트의 생명주기 문제 → DI 컨테이너로 해결&lt;/li&gt;
  &lt;li&gt;부품화 문제 → DI 컨테이너로 해결&lt;/li&gt;
  &lt;li&gt;기술 은닉과 부적절한 기술 은닉 문제 → AOP로 해결&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;di&quot;&gt;DI&lt;/h1&gt;
&lt;p&gt;IoC는 DI(Dependency Injection)라고도 부른다.&lt;/p&gt;

&lt;p&gt;DI는 오브젝트를 생성하고 오브젝트끼리의 관계를 생성해 소프트웨어의 부품화 및 설계를 가능하게 한다.&lt;/p&gt;

&lt;p&gt;DI를 이용하면 인터페이스 기반의 컴포넌트를 쉽게 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;DI는 의존 관계의 주입이라는 뜻이다.&lt;/p&gt;

&lt;p&gt;오브젝트 사이의 의존관계를 만드는 것이다.&lt;/p&gt;

&lt;p&gt;클래스에서 new 연산자가 사라짐으로써 개발자가 팩토리 메서드 같은 디자인 패턴을 구현하지 않아도 DI 컨테이너가 건내주는 인스턴스를 인터페이스로 받아 인터페이스 기반의 컴포넌트화를 구현할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://isstory83.tistory.com/91&quot;&gt;https://isstory83.tistory.com/91&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-06/ioc-di/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-06/ioc-di/</guid>
      </item>
    
      <item>
        <title>Spring Transaction으로 알아보는 AOP</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이전 게시글&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring 정의: &lt;a href=&quot;https://hyerin6.github.io/2021-09-24/spring/&quot;&gt;https://hyerin6.github.io/2021-09-24/spring/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Transaction으로 알아보는 AOP: &lt;a href=&quot;https://hyerin6.github.io/2021-10-06/aop/&quot;&gt;https://hyerin6.github.io/2021-10-06/aop/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ioc/DI: &lt;a href=&quot;https://hyerin6.github.io/2020-01-31/spring-DI-IoC/&quot;&gt;https://hyerin6.github.io/2020-01-31/spring-DI-IoC/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;AOP: &lt;a href=&quot;https://hyerin6.github.io/2020-02-14/spring-AOP/&quot;&gt;https://hyerin6.github.io/2020-02-14/spring-AOP/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;transactional-과-aop&quot;&gt;Transactional 과 AOP&lt;/h1&gt;

&lt;p&gt;Spring의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;은 어떻게 동작할까?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션은 AOP를 사용하여 구현되는데&lt;/p&gt;

&lt;p&gt;트랜잭션의 begin과 commit을 메인 로직 앞 뒤로 수행해주는 기능을 담당한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;은 메서드가 실행되기 전 begin 메소드를 호출하고,&lt;/p&gt;

&lt;p&gt;메소드가 종료된 후 commit을 호출한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring AOP는 Proxy 패턴으로 구현되는데 Spring에서 사용하는 두 가지 프록시 구현체가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JDK Proxy (Dynamic Proxy)&lt;/li&gt;
  &lt;li&gt;CGLib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/136228333-728111ff-1cef-4718-8dea-72ff0ab9aa3c.png&quot; alt=&quot;springaop-process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JDK Proxy는 AOP를 적용하여 구현된 클래스의 인터페이스를 프록시 객체로 구현해서 코드를 끼워넣는 방식이다.&lt;/p&gt;

&lt;p&gt;CGLib Proxy는 Class에 대한 Proxy생성을 지원한다. (상속을 이용)&lt;/p&gt;

&lt;p&gt;따라서 final이나 private Method에 대한 AOP 불가능하다. (상속 된 Proxy 객체 생성 시, Override가 불가하기 때문이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링에 대해 공부하면서 클래스를 상속하는 것에 대해서 단점을 많이 알게 되었기 때문에&lt;/p&gt;

&lt;p&gt;“CGLib는 필요 없는게 아닐까?” 라는 생각이 드는데&lt;/p&gt;

&lt;p&gt;그렇지 않다. 단점이 있어도 상황에 따라 최선의 선택이 될 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jdk-proxy&quot;&gt;JDK Proxy&lt;/h1&gt;

&lt;p&gt;SpringBoot는 기본적으로 프록시 객체를 생성할 때 CGLib를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;그 이유는 JDK Proxy가 프록시를 생성할 때 내부적으로 &lt;strong&gt;Reflection&lt;/strong&gt;을 사용하고 있기 때문이다.&lt;/p&gt;

&lt;p&gt;리플렉션 자체가 비용이 비싼 API 이기도 하고 가급적 사용하지 않는 것을 추천하기 때문이다.&lt;/p&gt;

&lt;p&gt;또한 JDK Proxy는 AOP 적용을 위해 반드시 인터페이스를 구현해야 한다는 단점도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dynamic Proxy는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;라는 인터페이스를 구현한다.
(JDK Proxy의 경우 자바에서 기본적으로 제공하고 있는 기능이다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvocationHandler&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoke&lt;/code&gt; 메소드를 오버라이딩하여 proxy 위임 기능을 수행하는데&lt;/p&gt;

&lt;p&gt;이때 메소드에 대한 명세와 파라미터를 가져오는 과정에서 리플렉션을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cglib&quot;&gt;CGLib&lt;/h1&gt;

&lt;p&gt;CGLib는 외부 3rd party library이며 JDK Proxy와는 달리 리플렉션을 사용하지 않고 바이트코드 조작을 통해 프록시 객체를 생성한다.&lt;/p&gt;

&lt;p&gt;인터페이스를 구현하지 않고 해당 구현체를 상속받는 것으로 문제를 해결했기 때문에 성능상 이점도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CGLib는 Enhance 라는 클래스를 바탕으로 proxy를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Enhancer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프록시할 클래스 지정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NoOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enhancer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프록시 생성 &lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PostServiceImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writePost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프록시를 통한 간접 접근 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 프록시 객체들은 직접 원본 객체를 호출하기 보다는 별도의 작업을 수행하는데&lt;/p&gt;

&lt;p&gt;CGLib의 경우 callback을 사용한다.&lt;/p&gt;

&lt;p&gt;CGLib에서 가장 많이 사용하는 콜백은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.sf.cglib.proxy.MethodInterceptor&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;프록시와 원본 객체 사잉에 인터셉터를 둬서 메소드 호출을 조작하는 것을 도와줄 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostServiceProxy&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostServiceInterceptor&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostServiceImpl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jaehun2841.github.io/2018/07/21/2018-07-21-spring-aop3/#spring-bean%EC%97%90-%EB%8C%80%ED%95%9C-proxy%EB%8A%94&quot;&gt;https://jaehun2841.github.io/2018/07/21/2018-07-21-spring-aop3/#spring-bean%EC%97%90-%EB%8C%80%ED%95%9C-proxy%EB%8A%94&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://javacan.tistory.com/entry/114&quot;&gt;https://javacan.tistory.com/entry/114&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-10-06/aop/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-10-06/aop/</guid>
      </item>
    
      <item>
        <title>엘라스틱서치로 검색기능 개발하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearch란? : &lt;a href=&quot;https://hyerin6.github.io/2021-09-17/es/&quot;&gt;https://hyerin6.github.io/2021-09-17/es/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ELK : &lt;a href=&quot;https://hyerin6.github.io/2021-09-22/log-slack/&quot;&gt;https://hyerin6.github.io/2021-09-22/log-slack/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;엘라스틱서치 검색기능 구현 방법 : &lt;a href=&quot;https://github.com/hyerin6/TIL/blob/main/Mentoring/2021-09-23.md&quot;&gt;https://github.com/hyerin6/TIL/blob/main/Mentoring/2021-09-23.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;high-level-rest-client-란&quot;&gt;High Level Rest Client 란?&lt;/h2&gt;

&lt;p&gt;ElasticSearch를 사용하는 자바 애플리케이션을 만들기 위한 client api이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-의존성&quot;&gt;(1) 의존성&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Data Elasticsearch를 사용하여 Spring 애플리케이션에서 Elasticsearch 인덱싱, 검색 및 쿼리를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;또한, Spring Data Elasticsearch 에서 제공 하는 ElasticsearchRepository 인터페이스를 확장하는 저장소 인터페이스를 정의하면
해당 문서 클래스에 대한 CRUD 작업이 기본적으로 사용 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-환경-설정&quot;&gt;(2) 환경 설정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearchConfig&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableElasticsearchRepositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElasticSearchConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${...}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elasticHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestHighLevelClient&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restHighLevelClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RestHighLevelClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RestClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elasticHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;elasticsearch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uris&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:9200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ElasticSearch는 여러 노드를 등록할 수 있으며 HttpHost를 추가해주면 된다.&lt;/p&gt;

&lt;p&gt;HttpHost의 파라미터로는 hostname, port 그리고 http 또는 https 사용의 스키마가 들어간다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-인덱스-생성&quot;&gt;(3) 인덱스 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;PostIndex&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ToString&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROTECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Document&lt;/code&gt; 어노테이션으로 인덱스 이름을 지정한다.&lt;/li&gt;
  &lt;li&gt;각 필드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Field&lt;/code&gt; 어노테이션으로 설정한다.&lt;/li&gt;
  &lt;li&gt;createdAt, updatedAt을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZonedDateTime&lt;/code&gt;으로 선언한 것을 기억하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PostIndexRepository&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndexRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElasticsearchRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ElasticsearchRepository를 상속받았다.&lt;/p&gt;

&lt;p&gt;JpaRepository와 사용이 유사하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PostService&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndexRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postIndexRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreatePostRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedPost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// imageService.create(post, request.getImages());&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCreatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Asia/Seoul&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUpdatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;atZone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Asia/Seoul&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;postIndexRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;검색을 하기 위해 Post 객체를 저장할 때&lt;/p&gt;

&lt;p&gt;PostIndex도 함께 저장해줘야 한다.&lt;/p&gt;

&lt;p&gt;DB에 데이터를 저장하듯 IndexRepository를 이용하여 저장하면 엘라스틱서치에 데이터가 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;검색 테스트 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MultipartFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우주의 이야기&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우유의 이야기&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우기의 사랑&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우리 은행&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우리나라&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우주&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreatePostRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우주의 나라&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CreatePostRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;postService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAllIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;우주의&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PostIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결과&quot;&gt;결과&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/136330118-9ef56fb1-4dd5-4a2a-988c-4f7a97ca61d3.jpeg&quot; alt=&quot;인덱스생성&quot; /&gt;&lt;/p&gt;

&lt;p&gt;노란색 부분을 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Document&lt;/code&gt; 어노테이션으로 설정한 Indexname으로 post가 생성되어 저장된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elasticsearch&quot;&gt;ElasticSearch&lt;/h2&gt;

&lt;p&gt;엘라스틱 서치에 대해 처음 학습하면서 역색인 방식으로 텍스트를 저장하기 때문에&lt;/p&gt;

&lt;p&gt;엘라스틱 서치의 검색이 빠르다는 것으로 게시글을 마쳤는데&lt;/p&gt;

&lt;p&gt;엘라스틱 서치에 대해 조금 더 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-elasticsearch-vs-relational-db&quot;&gt;(1) Elasticsearch vs. Relational DB&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;820&quot; alt=&quot;vs&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136330364-e0b09989-7525-4177-8180-e45b5b699c9d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch는 키워드가 어떤 Document에 있다고 저장하는 방식이다.&lt;/p&gt;

&lt;p&gt;해쉬 테이블과 같이 big-o 표기법에 따르면 검색 시 O(1)의 효과를 낸다.&lt;/p&gt;

&lt;p&gt;Relational DB는 텍스트 검색 시 문서 개수만큼 연산이 수행되기 때문에 O(N)이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch에 다음과 같이 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;807&quot; alt=&quot;el&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136335277-caca5242-8091-4b4f-8bfc-5240a651de3d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-mapping&quot;&gt;(2) Mapping&lt;/h3&gt;

&lt;p&gt;매핑은 스키마라고 보면 된다.&lt;/p&gt;

&lt;p&gt;엘라스틱 서치 매핑을 하지 않으면 모두 문자열로 저장되기 때문에 데이터를 시각화할 때 불편한 상황이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;때문에 실무에서 매핑없이 데이터를 넣는 것은 위험하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Data Elasticsearch를 사용했기 때문에 인덱스 매니저의 Mapping에 들어가보면&lt;/p&gt;

&lt;p&gt;다음과 같이 각 필드가 잘 매핑되어 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1191&quot; alt=&quot;매핑&quot; src=&quot;https://user-images.githubusercontent.com/33855307/136335429-b6516a65-2063-4110-a4d3-930b02cdf17e.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Minsuk Heo 허민석&lt;/code&gt;의 유튜브 강의&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtube.com/playlist?list=PLVNY1HnUlO24LCsgOxR_eK2Yi4sOgH9Pg&quot;&gt;https://youtube.com/playlist?list=PLVNY1HnUlO24LCsgOxR_eK2Yi4sOgH9Pg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-27/search/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-27/search/</guid>
      </item>
    
      <item>
        <title>스프링이란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-스프링-프레임워크란&quot;&gt;1. 스프링 프레임워크란?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/134622397-69c2c91b-0831-43bf-890c-4225c617956b.jpeg&quot; alt=&quot;pojo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링 프레임워크를 정의하기 쉽지 않다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;중요하게 생각하는 것이 다양하기 때문이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IoC/DI, AOP, PSA를 제공해주는 프레임워크&lt;/li&gt;
  &lt;li&gt;IoC Container를 기반으로 객체지향 설계를 도와주는 프레임워크&lt;/li&gt;
  &lt;li&gt;빈의 생명주기와 주입 등을 제공해주는 프레임워크&lt;/li&gt;
  &lt;li&gt;POJO를 도와주는 툴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-스프링-프레임워크-정의&quot;&gt;2. 스프링 프레임워크 정의&lt;/h1&gt;

&lt;p&gt;스프링의 핵심 개발자들이 함께 쓴 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Professional Spring Framework&lt;/code&gt;에서&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링은 엔터프라이즈 서비스 기능을 POJO에 제공하는 것&lt;/strong&gt; 이라고 정의했고&lt;/p&gt;

&lt;p&gt;가장 잘 알려진 정의는 &lt;strong&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-1-애플리케이션-프레임워크&quot;&gt;2-1) 애플리케이션 프레임워크&lt;/h2&gt;

&lt;p&gt;일반적으로 라이브러리나 프레임워크는 특정 업무 분야나 한 가지 기술에 특화된 목표를 가지고 만들어진다.&lt;/p&gt;

&lt;p&gt;예) 관계형 DB와 자바 객체를 매칭해주는 ORM 기술을 제공하는 JPA&lt;/p&gt;

&lt;p&gt;그래서 프레임워크는 애플리케이션의 특정 계층에서 주로 동작하는 한 가지 기술 분야에 집중된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 스프링은 &lt;strong&gt;애플리케이션 프레임워크&lt;/strong&gt;라는 특징을 가지고 있다.&lt;/p&gt;

&lt;p&gt;애플리케이션 프레임워크는 특정 계층이나 기술, 업무 분야에 국한되지 않고&lt;/p&gt;

&lt;p&gt;애플리케이션 전 영역을 포괄하는 범용적인 프레임워크를 의미한다.&lt;/p&gt;

&lt;p&gt;애플리케이션 프레임워크는 애플리케이션 개발의 전 과정을 빠르고 편리하며 효율적으로 진행하는데 일차적인 목표를 둔 프레임워크다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러 계층의 다양한 기술을 한 곳에 모아뒀다고 해서 애플리케이션 프레임워크라고 할 수 없다.&lt;/p&gt;

&lt;p&gt;애플리케이션의 전 영역을 관통하는 일관된 프로그래밍 모델과 핵심 기술을 바탕으로&lt;/p&gt;

&lt;p&gt;각 분야의 특정에 맞는 필요를 채워주고 있기 때문에 애플리케이션을 빠르고 효과적으로 개발할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MVC 프레임워크, JDBC/ORM 지원 프레임워크, IoC/DI 프레임워크, AOP 툴이라고 보는 이유는 스프링이 제공하는 핵심 기술에만 주목했기 때문이다.&lt;/p&gt;

&lt;p&gt;스프링의 일차적인 존재 목적은 &lt;strong&gt;핵심 기술에 담긴 프로그래밍 모델을 일관되게 적용&lt;/strong&gt;해서&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;애플리케이션 전 계층과 전 영역에 전략과 기능을 제공&lt;/strong&gt;해줌으로써&lt;/p&gt;

&lt;p&gt;애플리케이션을 편리하게 개발하게 해주는 애플리케이션 프레임워크로 사용되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-2-경량급-lightweight&quot;&gt;2-2) 경량급 (lightweight)&lt;/h2&gt;

&lt;p&gt;스프링 자체가 가볍다거나 작은 규모의 코드로 이뤄졌다는 뜻은 아니다.&lt;/p&gt;

&lt;p&gt;스프링은 여러 모듈로 세분화되고 수십만 라인의 코드를 가진 복잡하고 큰 규모의 프레임워크다.&lt;/p&gt;

&lt;p&gt;경량급이라는 표현은 불필요하게 무겁지 않다는 의미다.&lt;/p&gt;

&lt;p&gt;스프링 이전의 EJB 같은 과도한 엔지니어링이 적용된 기술과 대비시켜 설명하기 위한 표현이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;EJB가 동작하려면 고가의 느리고 무거운 자바 서버(was)가 필요했다.&lt;/p&gt;

&lt;p&gt;설정 파일 구조, 패키징이 난해하고 서버 배치도 불편하다는 부담이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그에 비해 스프링은 가장 단순한 서버 환경인 톰캣이나 제티에서도 완벽하게 동작한다.&lt;/p&gt;

&lt;p&gt;단순한 개발툴과 기본적인 개발 환경으로도 엔터프라이즈 개발에서 필요로 하는 주요한 기능을 갖춘 애플리케이션을 개발하기에 충분하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-3-자바-엔터프라이즈-개발을-편하게&quot;&gt;2-3) 자바 엔터프라이즈 개발을 편하게&lt;/h2&gt;

&lt;p&gt;스프링은 근본적인 부분에서 엔터프라이즈 개발의 복잡함을 제거해내고 진정으로 개발을 편하게 해주는 해결책을 제시한다.&lt;/p&gt;

&lt;p&gt;스프링이라는 프레임워크가 제공하는 기술이 아니라 개발자가 작성하는 애플리케이션 로직에 더 많은 관심과 시간을 쏟게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-스프링의-목적&quot;&gt;3. 스프링의 목적&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;경량급 프레임워크를 이용해서 엔터프라이즈 애플리케이션 개발을 편하게&lt;/code&gt; 하는 것이 스프링의 정의였다.&lt;/p&gt;

&lt;p&gt;그렇다면 스프링을 사용해서 엔터프라이즈 개발을 편하게 하려는 이유는 뭘까?&lt;/p&gt;

&lt;p&gt;❗️️ &lt;strong&gt;엔터프라이즈 개발이 편하기 않기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;엔터프라이즈 시스템이란?
서버에서 동작하며 기업과 조직의 업무를 처리해주는 시스템&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-1-엔터프라이즈-개발의-복잡함&quot;&gt;3-1) 엔터프라이즈 개발의 복잡함&lt;/h2&gt;

&lt;h4 id=&quot;이유1-기술적인-제약과-요구사항이-늘어났기-때문이다&quot;&gt;이유1: 기술적인 제약과 요구사항이 늘어났기 때문이다.&lt;/h4&gt;

&lt;p&gt;엔터프라이즈 시스템은 많은 사용자의 요청을 동시에 처리해야 하기 때문에&lt;/p&gt;

&lt;p&gt;서버의 자원을 효율적으로 공유하고 분배해서 사용할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;중요한 기업의 핵심 정보를 처리하거나 금융, 국방 등의 시스템을 다루기도 하기 때문에&lt;/p&gt;

&lt;p&gt;보안성과 안정성, 확장성 면에서도 뛰어나야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;타 시스템과의 연계 / 클라이언트와의 접속을 위한 리모팅 기술,&lt;/p&gt;

&lt;p&gt;트랜잭션을 하나로 묶어서 사용하는 분산 트랜잭션의 지원도 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이유2-엔터프라이즈-애플리케이션이-구현해야-할-핵심기능인-비즈니스-로직의-복잡함이-증가하기-때문이다&quot;&gt;이유2: 엔터프라이즈 애플리케이션이 구현해야 할 핵심기능인 비즈니스 로직의 복잡함이 증가하기 때문이다.&lt;/h4&gt;

&lt;p&gt;점차 대부분의 업무를 컴퓨터 없이 처리하기 힘들 정도로 엔터프라이즈 시스템에 대한 업무 의존도가 높어졌다.&lt;/p&gt;

&lt;p&gt;다양하고 복잡한 업무 처리 기능을 엔터프라이즈 시스템이 구현해야 한다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이유3-복잡함을-증가시키는-원인&quot;&gt;이유3: 복잡함을 증가시키는 원인&lt;/h4&gt;

&lt;p&gt;비즈니스 로직과 엔터프라이즈 기술이라는 두 가지 복잡함이 얽혀있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-2-복잡함-해결-&quot;&gt;3-2) 복잡함 해결 ?&lt;/h2&gt;

&lt;p&gt;엔터프라이즈 개발에 나타나는 복잡함의 원인은 제거 대상이 아니다.&lt;/p&gt;

&lt;p&gt;대신 복잡함을 효과적으로 상대할 수 있는 전략과 기법이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;문제는 &lt;strong&gt;비즈니스 로직의 복잡함&lt;/strong&gt;을 효과적으로 다루기 위한 방법과 &lt;strong&gt;기술적인 복잡함&lt;/strong&gt;을 처리하는데 적용되는 방법이 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;해결책1-실패한-ejb&quot;&gt;해결책1: 실패한 EJB&lt;/h4&gt;

&lt;p&gt;EJB의 기본 전략도 이 두 가지 종류의 복잡함을 분리하는 것이다.&lt;/p&gt;

&lt;p&gt;애플리케이션 로직을 담은 핵심 코드에서 일부 기술적인 코드가 제거된 건 사실이지만&lt;/p&gt;

&lt;p&gt;오히려 EJB라는 환경과 스펙에 종속되는 코드로 만들어져야 하는 더 큰 부담을 안게 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EJB라는 틀 안에서 자바 코드를 만들게 강제한다.&lt;/li&gt;
  &lt;li&gt;특정 클래스를 상속하게 함으로써 더 이상 상속 구조를 적용하지 못하게 만들어
다형성 적용을 근본적으로 제한한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;해결책2-비침투적인-방식을-통한-효과적인-해결책-spring&quot;&gt;해결책2: 비침투적인 방식을 통한 효과적인 해결책 Spring&lt;/h4&gt;

&lt;p&gt;EJB 처럼 어떤 기술을 적용했을 때 기술과 관련된 코드나 규약이 코드에 등작하는 경우 침투적인 기술이라고 한다.&lt;/p&gt;

&lt;p&gt;스프링을 이용하면 기술적인 복잡함과 비즈니스 로직을 다루는 코드를 깔끔하게 분리할 수 있다.&lt;/p&gt;

&lt;p&gt;중요한 것은 그 과정에서 스프링 스스로가 애플리케이션 코드에 불필요하게 나타나지 않게 하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-3-복잡함을-상대하는-스프링의-전략&quot;&gt;3-3) 복잡함을 상대하는 스프링의 전략&lt;/h2&gt;

&lt;p&gt;스프링의 기본적인 전략은 비즈니스 로직을 담은 애플리케이션 코드와 엔터프라이즈 기술을 처리하는 코드를 분리시키는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기술적-복잡함을-상대하는-전략&quot;&gt;기술적 복잡함을 상대하는 전략&lt;/h3&gt;

&lt;p&gt;기술적인 복잡함을 분리해서 생각하면 효과적인 전략을 발견할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;문제1-기술에-대한-접근-방식이-일관성이-없고-특정-환경에-종속적이다&quot;&gt;문제1: 기술에 대한 접근 방식이 일관성이 없고, 특정 환경에 종속적이다.&lt;/h4&gt;

&lt;p&gt;일관성 없는 기술과 서버 환경에 대한 스프링의 공략 방법은 바로 &lt;strong&gt;서비스 추상화&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;앞서 얘기했던 트랜잭션 추상화나 OXM 추상화, 데이터 액세스 기술에 독립적으로 적용 가능한 트랜잭션 동기화 기법 등이 대표적인 예이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기술적인 복잡함은 일단 추상화를 통해 로우 레벨의 기술 구현 부분과 기술을 사용하는 인터페이스를 분리하고,&lt;/p&gt;

&lt;p&gt;환경과 세부 기술에 독립적인 접근 인터페이스를 제공하는 것이 가장 좋은 해결책이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예) JavaMail
자바 메일은 테스트 작성이 어려운데 표준 기술이다.
이 경우 서비스 추상화를 적용할 필요가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;서비스 추상화를 통해 테스트 편의성을 증대시키고 기술에 대한 세부 설정과 환경으로부터 독립적인 코드를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;문제2-기술적인-처리를-담당하는-코드가-성격이-다른-코드에-섞여서-등장한다&quot;&gt;문제2: 기술적인 처리를 담당하는 코드가 성격이 다른 코드에 섞여서 등장한다.&lt;/h4&gt;

&lt;p&gt;비즈니스 로직 전후로 경계가 설정되어야 하는 트랜잭션, 보안 적용, 로깅 기능 등이 대표적인 예이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;책임에 따라 계층을 분리하고 그 사이에 서로의 기술과 특성에 의존적인 인터페이스나 예외처리 등을 최대한 제거한다고 할지라도
근본적인 엔터프라이즈 서비스를 적용하는 한 이런 문제를 쉽게 해결할 수 없다.&lt;/p&gt;

&lt;p&gt;▶️ 이런 복잡함을 해결하기 위한 스프링의 접근 방법은 AOP다.&lt;/p&gt;

&lt;p&gt;AOP는 기술을 다루는 코드로 인한 복잡함을 기술 그 자체 이상으로 불필요하게 증대되지 않도록 도와주는 가장 강력한 수단이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;비즈니스와-애플리케이션-로직의-복잡함을-상대하는-전략&quot;&gt;비즈니스와 애플리케이션 로직의 복잡함을 상대하는 전략&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/134643113-cf8a5414-652c-4681-b153-d8b40a492975.jpeg&quot; alt=&quot;DI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;비즈니스 로직의 복잡함을 상대하는 전략은 자바라는 객체지향 기술 그 자체이다.&lt;/p&gt;

&lt;p&gt;스프링은 객체지향 언어의 장점을 제대로 살리지 못하게 방해했던 요소를 제거하도록 도와주는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;핵심-도구-객체지향과-di&quot;&gt;핵심 도구: 객체지향과 DI&lt;/h3&gt;

&lt;p&gt;기술과 비즈니스 로직의 복잡함을 해결하는 데 스프링이 공통적으로 사용하는 도구는 객체지향이다.&lt;/p&gt;

&lt;p&gt;자바 엔터프라이즈 기술의 가장 큰 장점은 객체지향 설계를 가능하게 해주는 자바 언어이다.
&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EJB는 자바의 개게지향 장점을 취하지 못하게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링의 목적은 결국 “기본으로 돌아가자” 이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바의 기본인 객체지향에 충실한 설계가 가능하도록 단순한 오브젝트로 개발할 수 있고,&lt;/p&gt;

&lt;p&gt;객체지향의 설계 기법을 잘 적용할 수 있는 구조를 만들기 위해 DI 같은 유용한 기술을 편하게 적용하도록 도와주는 것이 스프링의 기본 전략이다.&lt;/p&gt;

&lt;p&gt;서비스 추상화, 템플릿/콜백, AOP와 같은 스프링의 기술은 DI 없이는 존재할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-pojo-프로그래밍&quot;&gt;4. POJO 프로그래밍&lt;/h1&gt;

&lt;p&gt;조금 더 기술적으로 스프링이 지향하는 목적이 무엇인지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Professional Spring Framework&amp;gt;&lt;/code&gt;에서 스프링의 정수는 엔터프라이즈 서비스 기능을 POJO에 제공하는 것이라고 나와있다.&lt;/p&gt;

&lt;p&gt;엔터프라이즈 서비스 기능을 POJO에 제공한다는 말은&lt;/p&gt;

&lt;p&gt;엔터프라이즈 서비스 기술과 POJO라는 애플리케이션 로직을 담은 코드를 분리했다는 뜻이다.&lt;/p&gt;

&lt;p&gt;분리됐지만 반드시 필요한 엔터프라이즈 서비스 기술을 POJO 방식으로 개발된 애플리케이션 핵심 로직을 담은 코드에 제공한다는 것이 스프링의 가장 강력한 특징과 목표다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-1-스프링의-핵심-pojo&quot;&gt;4-1) 스프링의 핵심: POJO&lt;/h2&gt;

&lt;p&gt;DI의 기본 아이디어는 유연하게 확장 가능한 오브젝트를 만들어두고 그 관계는 외부에서 다이나믹하게 설정해준다는 것이다.&lt;/p&gt;

&lt;p&gt;이런 DI의 개념을 애플리케이션 전반에 걸쳐 적용하는 것이 스프링의 프로그래밍 모델이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링의 주요 기술인 IoC/DI, AOP, PSA는 애플리케이션을 POJO로 개발할 수 있게 해주는 기능 기술이라고 불린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pojo란&quot;&gt;POJO란?&lt;/h3&gt;

&lt;p&gt;POJO는 plain old java object의 약자이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pojo의-조건&quot;&gt;POJO의 조건&lt;/h3&gt;

&lt;p&gt;그냥 평범한 자바 오브젝트라고 할 수 있지만 좀 더 명확하게 정의하면&lt;/p&gt;

&lt;p&gt;다음 세 가지 조건을 충족해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-특정-규약에-종속되지-않는다&quot;&gt;(1) 특정 규약에 종속되지 않는다.&lt;/h4&gt;

&lt;p&gt;POJO는 자바 언어와 꼭 필요한 API외에 종속되지 않아야 한다.&lt;/p&gt;

&lt;p&gt;따라서 EJB2와 같이 특정 규약을 따라 비즈니스 컴포넌트를 만들어야 하는 경우는 POJO가 아니다.&lt;/p&gt;

&lt;p&gt;자바는 단일 상속 제한 때문에 특정 클래스를 상속해서 만들어야 하는 규약이 있는 경우 객체지향적인 설계 기법을 적용하기 어려워지고
규약이 적용된 환경에 종속적이 되면 다른 환경으로 이전이 힘들다는 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-특정-환경에-종속되지-않는다&quot;&gt;(2) 특정 환경에 종속되지 않는다.&lt;/h4&gt;

&lt;p&gt;특정 환경에 종속되어야 하는 오브젝트도 POJO라고 할 수 없다.&lt;/p&gt;

&lt;p&gt;특히 비즈니스 로직을 담고 있는 POJO 클래스는 웹이라는 환경정보나 웹 기술을 담고 있는 클래스나 인터페이스를 사용해서는 안된다.&lt;/p&gt;

&lt;p&gt;나중에 웹 컨트롤러와 연결돼서 사용될 것이 뻔하더라도 직접적으로 웹이라는 환경으로 제한해버리는 오브젝트나 API에 의존해서는 안된다.&lt;/p&gt;

&lt;p&gt;이렇게되면 웹 외의 클라이언트가 사용하지 못하게 된다. 또한 웹 서버에 올리지 않고 독립적인 테스트도 힘들어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;비즈니스 로직을 담은 코드에 HttpServletRequest나 HttpSession, 캐시와 관련된 API가 등장하거나
웹 프레임워크의 클래스를 직접 이용하는 부분이 있다면 그것은 진정한 POJO라고 볼 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;요즘은 소스코드에 직접 메타 정보를 추가해주는 어노테이션을 많이 사용한다.&lt;/p&gt;

&lt;p&gt;그렇다면 어노테이션을 사용하는 경우 POJO라고 할 수 있을까?&lt;/p&gt;

&lt;p&gt;어노테이션이 단지 코드로 표현하기 적절치 않은 부가적인 정보를 담고 있고,&lt;/p&gt;

&lt;p&gt;그래서 환경에 종속되지 않는다면 여전히 POJO라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 특정 기술과 환경에 종속적인 정보를 담고 있다면 POJO로서의 가치를 잃어버린다고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 특정 기술 규약과 환경에 종속되지 않으면 모두 POJO라고 할 수 있을까?&lt;/p&gt;

&lt;p&gt;자바 클래스를 써서 개발했다고 POJO 방식으로 개발했다고 할 수는 없다.&lt;/p&gt;

&lt;p&gt;POJO는 객체지향적인 자바 언어의 기분에 충실하게 만들어져야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;POJO는 객체지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브젝트를 말한다.&lt;/p&gt;

&lt;p&gt;그런 POJO에 애플리케이션의 핵심 로직과 기능을 담아 설계하고 개발하는 방법을 POJO 프로그래밍이라 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pojo의-장점&quot;&gt;POJO의 장점&lt;/h3&gt;

&lt;p&gt;POJO가 될 수 있는 조건이 바로 장점이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특정한 기술과 환경에 종속되지 않는 오브젝트는 그만큼 깔끔한 코드가 될 수 있다.&lt;/p&gt;

&lt;p&gt;유연한 방식으로 원하는 레벨의 코드를 빠르고 명확하게 테스트할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체지향적인 설계를 자유롭게 적용할 수 있다는 것도 큰 장점이다.&lt;/p&gt;

&lt;p&gt;우리가 알고있는 자바와 객체지향 프로그래밍, 모델링과 설계, 디자인 패턴 등은 POJO가 아니고는 적용하기 힘들다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pojo-프레임워크&quot;&gt;POJO 프레임워크&lt;/h3&gt;

&lt;p&gt;스프링은 POJO를 이용한 엔터프라이즈 애플리케이션 개발을 목적으로 하는 프레임워크라고 했다.&lt;/p&gt;

&lt;p&gt;POJO 프로그래밍이 가능하도록 기술적인 기반을 제공하는 프레임워크를 POJO 프레임워크라고 한다.&lt;/p&gt;

&lt;p&gt;스프링 프레임워크와 하이버네이트를 대표적인 POJO 프레임워크로 꼽을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링을 이용하면 POJO 프로그램의 장점을 그대로 살려서 엔터프라이즈 애플리케이션의 핵심 로직을 객체지향적인 POJO를 기반으로 깔끔하게 구현하고,
동시에 엔터프라이즈 환경의 각종 서비스와 기술적인 필요를 POJO 방식으로 만들어진 코드에 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://12bme.tistory.com/157?category=682904#&quot;&gt;https://12bme.tistory.com/157?category=682904#&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jongmin92.github.io/2018/02/11/Spring/spring-ioc-di/&quot;&gt;https://jongmin92.github.io/2018/02/11/Spring/spring-ioc-di/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.wheejuni.com/2018/05/02/spring-aop-how/&quot;&gt;https://tech.wheejuni.com/2018/05/02/spring-aop-how/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-24/spring/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-24/spring/</guid>
      </item>
    
      <item>
        <title>로깅 기능 개발하고 슬랙으로 알림 받기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;loggingfilter로-로그-남기기&quot;&gt;LoggingFilter로 로그 남기기&lt;/h2&gt;

&lt;p&gt;Elasticsearch에 대해 알아보면서 ELK 스택도 함께 알게 되었고&lt;/p&gt;

&lt;p&gt;ELK(ElasticSearch Logstash Kibana) 스택으로 로깅을 구현해보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-17/es/&quot;&gt;Elasticsearch란?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;구현 방법과 함께 어떤 모습으로 로그가 쌓이는지 확인해보고&lt;/p&gt;

&lt;p&gt;Slack에 ERROR 로그 알람을 보내는 것까지 구현해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-logbackxml&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logback.xml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Spring에서 기본적으로 제공하는 로그가 있지만 Logstash에 로그를 쌓아&lt;/p&gt;

&lt;p&gt;엘라스틱서치로 보내고 싶기 때문에 resource 에 다음 파일을 추가했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logback.xml&lt;/code&gt; 파일을 따로 생성해 설정해주지 않으면&lt;/p&gt;

&lt;p&gt;스프링이 설정해둔 로그가 찍힌다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133736279-23f9e389-3863-4cfe-98f9-31f7f1e408b1.jpeg&quot; alt=&quot;logging&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-gradle&quot;&gt;2. Gradle&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;logstash 사용을 위해 위 의존성을 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-loggingfilterjava&quot;&gt;3. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoggingFilter.java&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OncePerRequestFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilterInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ContentCachingRequestWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentCachingRequestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ContentCachingResponseWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentCachingResponseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;LoggingRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggingRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLoggingRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loggingRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;responseWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyBodyToResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingRequest&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLoggingRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ContentCachingRequestWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestURI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggingRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OncePerRequestFilter&lt;/code&gt;는 모든 서블릿에 일관된 요청을 처리하기 위해 만들어진 필터이다.&lt;/p&gt;

&lt;p&gt;이 추상 클래스를 구현한 필터는 사용자의 한번에 요청 당 딱 한번만 실행되는 필터를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;필터에 대한 자세한 이야기는 다른 포스팅에서 해보자.&lt;/p&gt;

&lt;p&gt;필터에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logger&lt;/code&gt; 로그를 남기면 kibana에서 로그를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-docker-compose&quot;&gt;4. docker-compose&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/deviantony/docker-elk&quot;&gt;https://github.com/deviantony/docker-elk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 repository를 clone 받아서 설정을 마치고
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; 명령으로 elk를 띄운다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;설정해야 하는 부분&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유료 기능인 X-Pack이 포함되어 있기 때문에 주석처리하거나 없애야 한다.&lt;/li&gt;
  &lt;li&gt;logstash &amp;gt; pipeline &amp;gt; logstash.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input {
	tcp {
		port =&amp;gt; 5000
		codec =&amp;gt; json_lines
	}
}

filter {
	json {
		source =&amp;gt; &quot;message&quot;
		remove_field =&amp;gt; [&quot;message&quot;]
	}
}

output {
	elasticsearch {
		hosts =&amp;gt; &quot;elasticsearch:9200&quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본 포트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5044: Logstash 비트 입력&lt;/li&gt;
  &lt;li&gt;5000: Logstash TCP 입력&lt;/li&gt;
  &lt;li&gt;9600: Logstash 모니터링 API&lt;/li&gt;
  &lt;li&gt;9200: 엘라스틱서치 HTTP&lt;/li&gt;
  &lt;li&gt;9300: Elasticsearch TCP 전송&lt;/li&gt;
  &lt;li&gt;5601: 키바나&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;error-로그-slack으로-알림-받기&quot;&gt;Error 로그 Slack으로 알림 받기&lt;/h2&gt;

&lt;p&gt;ELK 스택으로 로깅을 구현했다.&lt;/p&gt;

&lt;p&gt;슬랙으로 알림을 받는건 더 쉽게 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-logbackxml-1&quot;&gt;1. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logback.xml&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SLACK&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.maricn.logback.SlackAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;webhookUri&amp;gt;&lt;/span&gt;${webhook-uri}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/webhookUri&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;layout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.PatternLayout&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %msg %n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;colorCoding&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/colorCoding&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ASYNC_SLACK&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.AsyncAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SLACK&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;level&amp;gt;&lt;/span&gt;WARN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/level&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.loggingslack&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ALL&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ASYNC_SLACK&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에서 먼저 설정한 logstash 설정과 함께 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logback.xml&lt;/code&gt;에 작성해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ASYNC_SLACK
현재 추천하는 방식으로 appender를 비동기 방식으로 사용하는걸 권장하고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;filter&amp;gt;&lt;/code&gt;
레벨을 설정하는 부분이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;webhookUri&amp;gt;&lt;/code&gt;
SLACK webhookUri를 넣는 부분이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;에서 값을 가져오고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-incoming-webhooks&quot;&gt;2. Incoming Webhooks&lt;/h3&gt;

&lt;p&gt;슬랙 채널에서 Incoming Webhooks을 추가하여 원하는 형태로 설정하고&lt;/p&gt;

&lt;p&gt;webhookUri를 복사해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logback.xml&lt;/code&gt; 에 넣어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/134321054-d1bc8331-8de7-48c3-8cbb-2c121712fa41.png&quot; alt=&quot;slack1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-gradle&quot;&gt;3. Gradle&lt;/h3&gt;

&lt;p&gt;salck 알람을 위해 다음 의존성을 추가해준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.github.maricn:logback-slack-appender:1.4.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 모든 설정이 끝나면 ERROR 로그가 찍힐 때마다&lt;/p&gt;

&lt;p&gt;다음과 같이 내가 설정한 슬랙 채널에 알람이 온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/134321855-110adc8e-d167-4131-add5-83615e4fd87b.png&quot; alt=&quot;slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금 전송된 알람은 테스트한 것이기 때문에 “ERROR” 라는 메시지만 전송되었지만&lt;/p&gt;

&lt;p&gt;에러가 발생한 원인과 원하는 메시지가 전송되도록 설정해놓으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-22/log-slack/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-22/log-slack/</guid>
      </item>
    
      <item>
        <title>JUnit5 테스트 코드 작성해보자 (+BDD)</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;junit-관련-포스팅-참고&quot;&gt;JUnit 관련 포스팅 참고&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/&quot;&gt;JUnit Test란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-05-22/JUnit5/&quot;&gt;JUnit5 시작하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;테스트 코드를 작성하려다 BDDMockito 라이브러리에 대해 알게 되었고&lt;/p&gt;

&lt;p&gt;라이브러리를 활용하여 테스트를 작성하는 법을 알아봤다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 개발하면서 자주 듣는 TDD와 BDD가 뭔지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;tdd-란&quot;&gt;TDD 란?&lt;/h1&gt;

&lt;p&gt;TDD (Test Driven Development) 는 테스트가 개발을 주도한다는 의미이다.&lt;/p&gt;

&lt;p&gt;테스트를 먼저 만들고 통과하는 기능을 개발한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bdd-란&quot;&gt;BDD 란?&lt;/h1&gt;

&lt;p&gt;BDD (Behavior Driven Development) 는 Danial Terhorst-North와 Charis Matts가 착안한&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dannorth.net/introducing-bdd/&quot;&gt;BDD Introducing - Dan north &amp;amp; associates&lt;/a&gt; 방법론으로 BDD의 모든 근간은 TDD에서 착안되었기 때문에&lt;/p&gt;

&lt;p&gt;TDD가 추구하는 가치와 크게 다르지 않다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Danial Terhorst-North는 TDD를 작성하다가 코드 분석과 복잡성으로 인해&lt;/p&gt;

&lt;p&gt;누군가 나에게 “이 코드는 ~하게 짜여진 코드야” 라고 말해줬으면 좋겠다고 생각했다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그래서 행동 중심 개발, 행동에 기반하여 TDD를 수행하기로 생각한 것이다.&lt;/p&gt;

&lt;p&gt;간단하게 말하면 BDD는 애플리케이션이 어떻게 행동해야 하는지에 대한 공통된 이해를 구성하는 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;TDD, BDD 많은 내용이 있지만 테스트 작성을 위해 BDDMockito 라이브러리 사용법이 대해 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bdd-행동&quot;&gt;BDD 행동&lt;/h2&gt;

&lt;p&gt;(1) Narrative (논리적인 일련의 사건)&lt;/p&gt;

&lt;p&gt;(2) Given/When/Then&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모든 테스트 문장은 Narrative 하게 되어야 한다.&lt;/p&gt;

&lt;p&gt;즉 코드보다 인간의 언어와 유사하게 구성되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모든 테스트 문장은 Given/When/Then 으로 나눠서 작성할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Given
    &lt;ul&gt;
      &lt;li&gt;테스트를 위해 주어진 상태&lt;/li&gt;
      &lt;li&gt;테스트 대상에게 주어진 조건&lt;/li&gt;
      &lt;li&gt;테스트가 동작하기 위해 주어진 환경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When
    &lt;ul&gt;
      &lt;li&gt;테스트 대상에게 가해진 어떠한 상태&lt;/li&gt;
      &lt;li&gt;테스트 대상에게 주어진 어떤 조건&lt;/li&gt;
      &lt;li&gt;테스트 대상의 상태를 변경시키기 위한 환경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Then
    &lt;ul&gt;
      &lt;li&gt;앞선 과정의 결과&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어떤 상태에서 출발 (given)하여 어떤 상태의 변화를 가했을 때 (when)&lt;/p&gt;

&lt;p&gt;기대하는 어떤 상태가 되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bddmockito를-이용한-bdd&quot;&gt;BDDMockito를 이용한 BDD&lt;/h2&gt;

&lt;p&gt;주석을 이용하여 Given/When/Then 구조를 나눈 테스트 코드를 많이 봤는데&lt;/p&gt;

&lt;p&gt;BDDMockito를 사용하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;BDDMockito란 Mockito 라이브러리 내에 존재하는 BDDMockito 클래스를 말하며&lt;/p&gt;

&lt;p&gt;BDD 지향적인 개발을 mockito에서 API 형태로 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mockito-vs-bddmockito&quot;&gt;Mockito vs. BDDMockito&lt;/h2&gt;

&lt;p&gt;순수 Mockito에서 BDD의 Given/When/Then을 위해서&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;When()&lt;/code&gt; 메서드와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thenReturn()&lt;/code&gt;을 이용하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify()&lt;/code&gt; 구문을 이용해 검증한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// stubbing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Runtime exception 발생&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 특정 상황에 대한(when) 가짜로 결과를 만들어 주는 것을
Stubbing(스터빙)이라 한다.&lt;/p&gt;

&lt;p&gt;가짜로 수행할 객체를 넣어주는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일련의 BDD의 Stubbing 과정인데 뭔가 맞지 않는 부분이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;when()&lt;/li&gt;
  &lt;li&gt;thenReturn()&lt;/li&gt;
  &lt;li&gt;verify()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 코드에 존재하는 3가지 행동 과정인데
개념적으로 Given에 해당하는 Mockito의
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when(mockedList.get(0))&lt;/code&gt;의 이름이 when이라 헷갈린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bddmockito의-given-메서드&quot;&gt;BDDMockito의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;given()&lt;/code&gt; 메서드&lt;/h2&gt;

&lt;p&gt;위와 같이 헷갈리는 문제를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;given()&lt;/code&gt;으로&lt;/p&gt;

&lt;p&gt;더 정확한 의미를 전달하는 것으로 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;given(someClass.method(any())).willReturn()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;given-메서드&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;given()&lt;/code&gt; 메서드&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;given()&lt;/code&gt;은 BDD의 given을 내포하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;given()&lt;/code&gt;의 파라미터를 이용해서 어떤 상황에,&lt;/p&gt;

&lt;p&gt;즉 어떤 메서드가 실행되었을 때의 테스트를 위한 상황 설정이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 Stubbing 문장에서 3가지 의미를 담고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someClass.method()&lt;/code&gt; : Mocking 할 메서드&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any()&lt;/code&gt; : 메소드 파라미터&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;willReturn()&lt;/code&gt; : 메소드 반환 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mocking-할-메소드&quot;&gt;Mocking 할 메소드&lt;/h3&gt;

&lt;p&gt;Mocking 할 메소드라는 말이 무슨 뜻일까?&lt;/p&gt;

&lt;p&gt;UserService를 테스트한다고 가정해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Unit Test에서 가장 중요한 것은 테스트 하려는 대상의 고립이다.&lt;/p&gt;

&lt;p&gt;테스트 대상을 고립한다는 것은 테스트 대상에 연관된 다른 객체들은 관여하지 않도록&lt;/p&gt;

&lt;p&gt;개발자가 가짜 객체를 넣어줘야 한다는 소리와 비슷하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;테스트 대상을 고립하기 위해서 Mockito의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock()&lt;/code&gt;을 이용했고,&lt;/p&gt;

&lt;p&gt;테스트 대상이 특정 결과를 수행하기 위해 연관된 객체의 연상을 주입해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ex) UserService에는 현재 isExistByEmail 이라는 메서드가 존재한다.&lt;/p&gt;

&lt;p&gt;해당 메서드 내부에 UserRepository 인스턴스가 existsByEmail 연산을 수행하고 있으므로&lt;/p&gt;

&lt;p&gt;개발자는 UserRepository의 existsByEmail을 가짜로 주입해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해당-메서드의-파라미터&quot;&gt;해당 메서드의 파라미터&lt;/h3&gt;

&lt;p&gt;해당 메서드는 예제에서 existsByEmail 메서드를 의미한다.&lt;/p&gt;

&lt;p&gt;String으로 email을 받는 메서드다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 선택지가 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모든 값을 받았을 때의 행동 정의 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;특정 값을 받았을 때의 행동 정의 : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해당-메서드-수행했을-때-반환하는-값&quot;&gt;해당 메서드 수행했을 때 반환하는 값&lt;/h3&gt;

&lt;p&gt;행동을 반환할 때, 크게 3가지 방법이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;willReturn()&lt;/code&gt; : 반환 값을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;willThrow()&lt;/code&gt; : 예외를 던진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;will()&lt;/code&gt; + invocation
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;will()&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;willReturn()&lt;/code&gt;과는 조금 다르다.
willReturn은 고정된 값을 반환하는데, will에서는 invocation을 통해서
새로운 객체를 반환하거나 아예 새로운 행동을 반환할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dannorth.net/introducing-bdd/&quot;&gt;https://dannorth.net/introducing-bdd/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wonit.tistory.com/493&quot;&gt;https://wonit.tistory.com/493&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mingule.tistory.com/43&quot;&gt;https://mingule.tistory.com/43&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://yorr.tistory.com/26&quot;&gt;https://yorr.tistory.com/26&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://dannorth.net/introducing-bdd/&quot;&gt;https://dannorth.net/introducing-bdd/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-20/junit5-bdd/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-20/junit5-bdd/</guid>
      </item>
    
      <item>
        <title>JPA JOIN 어떻게 할까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;타임라인-구현&quot;&gt;타임라인 구현&lt;/h1&gt;

&lt;p&gt;SNS 타임라인은 내가 구독하고 있는 사용자들의 최신 게시글 목록을 의미한다.&lt;/p&gt;

&lt;p&gt;이전에 &lt;strong&gt;타임라인 페이징&lt;/strong&gt;을 어떻게 구현할지 아래의 게시글에서 이야기 했었는데,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-09-14/timeline/&quot;&gt;https://hyerin6.github.io/2021-09-14/timeline/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번엔 JPA JOIN을 어떻게 작성했는지 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;엔티티는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;user&quot;&gt;User&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@CreatedDate&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@LastModifiedDate&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;follow&quot;&gt;Follow&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Follow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;follower_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;following_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@CreatedDate&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@LastModifiedDate&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;follower_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follower&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;following_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;Post&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@CreatedDate&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@LastModifiedDate&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modifyContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JPA 연관관계를 사용하면 불필요한 조회가 발생하고&lt;/p&gt;

&lt;p&gt;N+1 문제가 발생할 수 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@OneToMany&lt;/code&gt;는 사용하지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;왜 N+1 문제가 발생하는지, JPA 연관관계를 사용하면 어떤 단점들이 있는지 먼저 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구현-방법1-jpa-연관관계-사용하는-경우&quot;&gt;구현 방법1: JPA 연관관계 사용하는 경우&lt;/h1&gt;

&lt;p&gt;만약 JPA 연관관계로 조회하고자 User를 다음과 같이 구현했다고 가정해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;follower&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;following&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 구현했다면 User 엔티티 객체만으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt;를 가져올 수 있다.
그러나 내부적으로는 다음과 같은 쿼리가 날아가는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 팔로우 하는 모든 대상 구하기
SELECT * FROM follow WHERE follow.follower_user_id = ?

-- 첫 번째 팔로우 유저의 정보, 게시글 가져오기
SELECT * FROM user WHERE user.id = ?
SELECT * FROM post WHERE post.user_id = ?

-- 두 번째 팔로우 유저의 정보, 게시글 가져오기
SELECT * FROM user WHERE user.id = ?
SELECT * FROM post WHERE post.user_id = ?

-- N 번째 팔로우 유저의 정보, 게시글 가져오기 
SELECT * FROM user WHERE user.id = ?
SELECT * FROM post WHERE post.user_id = ?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내가 팔로우하고 있는 사용자의 정보와 게시글을 조회하기 때문에&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;구독하는 유저 * 2&lt;/code&gt; 만큼 쿼리가 날아간다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;n1-문제-발생&quot;&gt;N+1 문제 발생&lt;/h2&gt;

&lt;p&gt;쿼리 1번으로 N건을 가져왔는데,&lt;/p&gt;

&lt;p&gt;관련 컬럼(Follow, Post)을 얻기 위해 쿼리를 N번 추가 수행하는 N+1 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;n1-문제는-왜-발생하는걸까&quot;&gt;N+1 문제는 왜 발생하는걸까?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpaRepository&lt;/code&gt;에 정의한 인터페이스 메서드를 실행하면&lt;/p&gt;

&lt;p&gt;JPA는 메서드 이름을 분석해서 JPQL을 생성하여 실행하게 된다.&lt;/p&gt;

&lt;p&gt;JPQL은 SQL을 추상화한 객체지향 쿼리 언어로서 특정 SQL에 종속되지 않고&lt;/p&gt;

&lt;p&gt;엔티티 객체와 필드 이름을 가지고 쿼리를 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇기 때문에 JPQL은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findAll()&lt;/code&gt;이란 메소드를 수행하면&lt;/p&gt;

&lt;p&gt;해당 엔티티를 조회하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select * from User&lt;/code&gt; 쿼리만 실행하게 되는것이다.&lt;/p&gt;

&lt;p&gt;JPQL 입장에서는 연관관계 데이터를 무시하고 해당 엔티티 기준으로 쿼리를 조회한다.&lt;/p&gt;

&lt;p&gt;때문에 연관된 엔티티 데이터가 필요한 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FetchType&lt;/code&gt;으로 지정한 시점에 조회를 별도로 호출하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;n1-문제-해결-방법&quot;&gt;N+1 문제 해결 방법&lt;/h2&gt;

&lt;p&gt;N+1 문제를 해결할 수 있는 방법은 3가지가 있다.&lt;/p&gt;

&lt;p&gt;특징과 문제점에 대해 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch join&lt;/li&gt;
  &lt;li&gt;@EntityGraph&lt;/li&gt;
  &lt;li&gt;BatchSize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방법1-fetch-join&quot;&gt;해결방법1: Fetch join&lt;/h3&gt;

&lt;p&gt;Fetch join은 JPQL로 작성해야 한다.&lt;/p&gt;

&lt;p&gt;타임라인 구현은 다음과 같은 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT p&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; FROM Post p&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; JOIN FETCH p.user u&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; JOIN FETCH u.followers f&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; WHERE f.follower.id = :userId AND p.id &amp;lt; :lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByFetchJoin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPostId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch join은 원하는 조건의 데이터를 한 번에 가져오기 때문에
내가 원하지 않는 추가 쿼리는 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;INNER JOIN으로 호출되는 것이 특징이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fetch join은 연관된 테이블끼리만 사용할 수 있기 때문에
JPA 연관관계를 사용해야 하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Post&lt;/code&gt; 테이블은 연관관계가 없어
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; 까지 같이 조인해야 합니다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정해놓은 FetchType을 사용할 수 없다.
Fetch Join을 사용하게 되면 데이터 호출 시점에 모든 연관 관계의 데이터를 가져오기 때문에
FetchType을 Lazy로 해놓는것이 무의미하다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fetch Join&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pageable&lt;/code&gt; 함께 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LIMIT&lt;/code&gt; 쿼리가 제대로 적용되지 않는다.
하나의 쿼리로 조회하는 것이기 때문에 페이징 단위로 데이터를 가져오지 않는다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DB 에서 Fetch Join 한 결과물을 모두 가져온 후
애플리케이션 메모리에서 직접 골라내기 때문에 데이터 수가 많다면
OutOfMemory 에러가 발생할 가능성이 높다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방법2-entitygraph&quot;&gt;해결방법2: EntityGraph&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EntityGraph&lt;/code&gt;의 attributePaths에 쿼리 수행시 바로 가져올 필드명을 지정하면&lt;/p&gt;

&lt;p&gt;Lazy가 아닌 Eager 조회로 가져온다.&lt;/p&gt;

&lt;p&gt;EntityGraph 상에 있는 Entity들의 연관관계 속에서 필요한 엔티티와 컬렉션을 함께 조회하려고 할때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EntityGraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributePaths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch join과 동일하게 JPQL을 사용하여 query 문을 작성하고
필요한 연관관계를 EntityGraph에 설정하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch join과 다른 점은 OUTER JOIN으로 실행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방법3-fetchmodesubselect&quot;&gt;해결방법3: FetchMode.SUBSELECT&lt;/h3&gt;

&lt;p&gt;이 방법은 쿼리 한번으로 해결하는 것은 아니고 두번의 쿼리로 해결하는 방법이다.&lt;/p&gt;

&lt;p&gt;연관관계의 데이터를 조회할 때 서브 쿼리로 함께 조회하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUBSELECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;following&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;즉시로딩으로 설정하면 조회시점에, 지연로딩으로 설정하면 지연로딩된 엔티티를 사용하는 시점에 위의 쿼리가 실행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;모두 지연로딩으로 설정하고 성능 최적화가 필요한 곳에는 JPQL 페치 조인을 사용하는 것이 추천되는 전략이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결방법4-batchsize&quot;&gt;해결방법4: BatchSize&lt;/h3&gt;

&lt;p&gt;하이버네이트가 제공하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.hibernate.annotations.BatchSize&lt;/code&gt; 어노테이션을 이용하면&lt;/p&gt;

&lt;p&gt;연관된 엔티티를 조회할 때 지정된 size 만큼 SQL의 IN절을 사용해서 조회한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@BatchSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;following&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Follow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉시로딩이므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;를 조회하는 시점에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt;를 같이 조회한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BatchSize&lt;/code&gt;가 있으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Follow&lt;/code&gt;의 row 갯수만큼 추가 SQL을 날리지 않고,&lt;/p&gt;

&lt;p&gt;조회한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; 의 id들을 모아서 SQL IN 절을 날린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;성능적으로 많이 개선되었고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pageable&lt;/code&gt;도 함께 사용할 수 있는 방법이다.&lt;/p&gt;

&lt;p&gt;그런데 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;followings&lt;/code&gt; 의 사이즈가 엄청나게 많다면?&lt;/p&gt;

&lt;p&gt;성능적인 문제를 해결하기 위해 IN 쿼리를 나눠 호출해야 하는 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;N+1 문제와 해결 방법은 JPA 연관관계를 사용해서 발생한 문제들이다.&lt;/p&gt;

&lt;p&gt;JPA 연관관계로만 해결하려고 하지 말고 JPQL로 Join, Limit 조건을 직접 작성해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구현-방법2-jpql-join-쿼리-직접-작성하기&quot;&gt;구현 방법2: JPQL JOIN 쿼리 직접 작성하기&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT p&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; FROM Post p&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; JOIN Follow f ON p.user.id = f.following.id&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; WHERE f.follower.id = :userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByJoinFollow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SELECT p&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; FROM Post p&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; JOIN Follow f ON p.user.id = f.following.id&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; WHERE f.follower.id = :userId&quot;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; AND p.id &amp;lt; :lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByJoinFollowAndLastIdLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
	&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastPostId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPostId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실제 쿼리는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id1_4_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content2_4_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created_at&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created_3_4_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updated_at&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated_4_4_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_id&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id5_4_&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;follow&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;follow1_&lt;/span&gt; 
            &lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;follow1_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;following_id&quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;follow1_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;follower_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=?&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post0_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://incheol-jung.gitbook.io/docs/q-and-a/spring/n+1&quot;&gt;https://incheol-jung.gitbook.io/docs/q-and-a/spring/n+1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/165&quot;&gt;https://jojoldu.tistory.com/165&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.wheejuni.com/2018/06/16/jpa-cartesian/&quot;&gt;https://tech.wheejuni.com/2018/06/16/jpa-cartesian/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-17/jpa-join/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-17/jpa-join/</guid>
      </item>
    
      <item>
        <title>ElasticSearch 란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch-란&quot;&gt;ElasticSearch 란?&lt;/h1&gt;

&lt;p&gt;ElasticSearch는 Apache Lucene (루씬) 기반의 Java 오픈소스 분산 검색 엔진이다.&lt;/p&gt;

&lt;p&gt;ElasticSearch를 통해 루씬 라이브러리를 단독으로 사용할 수 있게 되었고,&lt;/p&gt;

&lt;p&gt;많은 양의 데이터를 거의 실시간으로 저장, 검색, 분석할 수 있다.&lt;/p&gt;

&lt;p&gt;ElasticSearch는 검색을 위해 단독으로 사용되기도 하며, ELK 스택으로도 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;elk-스택이란&quot;&gt;ELK 스택이란?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133784300-a68e3404-69c7-4ac6-9856-45bafe89cb9a.png&quot; alt=&quot;elk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logstash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다양한 소스(DB, csv 파일 등)의 로그 또는 트랜잭션 데이터를&lt;/p&gt;

&lt;p&gt;수집, 집계, 파싱하여 ElasticSearch로 전달&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;logstash로부터 받은 데이터를 검색 및 집계하여 필요한 정보 획득&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kibana&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ElasticSearch의 빠른 검색을 통해 데이터를 시각화 및 모니터링&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch-특징&quot;&gt;ElasticSearch 특징&lt;/h1&gt;

&lt;h4 id=&quot;1-오픈소스&quot;&gt;(1) 오픈소스&lt;/h4&gt;

&lt;p&gt;ES는 오픈소스로 배포된 프로젝트이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-분산-시스템-확장성&quot;&gt;(2) 분산 시스템, 확장성&lt;/h4&gt;

&lt;p&gt;루씬을 사용한 검색엔진은 ES 뿐만이 아니다.&lt;/p&gt;

&lt;p&gt;Solr도 루씬 기반의 오픈소스 검색엔진이다.&lt;/p&gt;

&lt;p&gt;그러나 Solr는 처음부터 분산 시스템을 염두해두고 개발했기 때문에&lt;/p&gt;

&lt;p&gt;주키퍼(Zookeeper) 같은 별도의 코디네이터가 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ES는 네트워크 상에 있는 노드들과 바인딩돼 클러스터를 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;샤드를 기반으로 색인 데이터를 관리하고 운영 중에도 노드가 추가되면 샤드를 새로운 노드로 적절히 재분배하여 유지하기 때문에 쉽게 스케일 아웃이 (확장) 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-고가용성&quot;&gt;(3) 고가용성&lt;/h4&gt;

&lt;p&gt;샤드는 기본적으로 하나 이상의 복제본을 중복되지 않는 서로 다른 노드에 배치한다.&lt;/p&gt;

&lt;p&gt;따라서 시스템 운영 중 특정 노드가 다운되더라도 데이터 유실 없이 동일한 결과를 얻을 수 있기 때문에 높은 가용성을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-실시간-검색&quot;&gt;(4) 실시간 검색&lt;/h4&gt;

&lt;p&gt;ES는 실시간 검색 시스템이다.&lt;/p&gt;

&lt;p&gt;클러스터가 실행되는 동안 계속해서 데이터가 입력된다. (검색 엔진에서 index, 색인이라고 부른다.)&lt;/p&gt;

&lt;p&gt;그와 동시에 실시간에 가까운 속도로 색인된 데이터의 검색과 분석이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-전문full-text-검색-엔진&quot;&gt;(5) 전문(full-text) 검색 엔진&lt;/h4&gt;

&lt;p&gt;루씬은 기본적으로 inverted file index 라는 구조로 데이터를 저장한다.&lt;/p&gt;

&lt;p&gt;이는 루씬을 기반으로 만들어진 ES도 동일하다.&lt;/p&gt;

&lt;p&gt;이런 특성을 전문 검색이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-json-문서-기반&quot;&gt;(6) JSON 문서 기반&lt;/h4&gt;

&lt;p&gt;ES는 문서 기반으로 정보를 저장하기 때문에 직관적이다.&lt;/p&gt;

&lt;p&gt;쿼리문과 쿼리에 대한 결과 모두 JSON이기 때문에 사용자 입장에서는 직관적이라는 장점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7-restful--api&quot;&gt;(7) RESTful  API&lt;/h4&gt;

&lt;p&gt;ES는 Rest API를 기본으로 지원하며&lt;/p&gt;

&lt;p&gt;모든 데이터의 조회, 삭제, 입력, 수정을 HTTP 프로토콜 메소드를 통해 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch와-관계형-db-비교&quot;&gt;ElasticSearch와 관계형 DB 비교&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133788166-47274e54-b0e7-438b-9bb0-aa05af8e8cfb.jpeg&quot; alt=&quot;rdb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Elasticsearch 7.0부터 Type이 완전히 사라졌으며,&lt;/p&gt;

  &lt;p&gt;현재 Index가 RDBMS의 Table과 Database 역할을 한다고 생각하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch-아키텍처&quot;&gt;ElasticSearch 아키텍처&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133788721-6635e2bb-f3d2-4f80-b68c-6676fe286787.jpeg&quot; alt=&quot;아키텍처&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-클러스터&quot;&gt;(1) 클러스터&lt;/h4&gt;

&lt;p&gt;클러스터란 ES에서 가장 큰 시스템 단위를 의미하며,&lt;/p&gt;

&lt;p&gt;최소 하나 이상의 노드로 이루어진 노드들의 집합이다.&lt;/p&gt;

&lt;p&gt;서로 다른 클러스터는 데이터의 접근, 교환이 불가능한 독립적인 시스템으로 유지되며&lt;/p&gt;

&lt;p&gt;여러 대의 서버가 하나의 클러스터를 구성할 수 있고&lt;/p&gt;

&lt;p&gt;한 서버에 여러 개의 클러스터가 존재할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-노드&quot;&gt;(2) 노드&lt;/h4&gt;

&lt;p&gt;ES를 구성하는 하나의 단위 프로세스를 의미한다.&lt;/p&gt;

&lt;p&gt;그 역할에 따라 Master-eligible, Data, Ingest, Tribe 노드로 구분할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-인덱스-샤드-복제-index-shard-replica&quot;&gt;(3) 인덱스, 샤드, 복제 (index, shard, replica)&lt;/h4&gt;

&lt;p&gt;ES에서 index는 RDBMS에서 database와 대응하는 개념이다.&lt;/p&gt;

&lt;p&gt;shard와 replica는 ES에만 존재하는 개념이 아니라 분산 데이터베이스 시스템에도 존재하는 개념이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;샤딩(sharding)은 데이터를 분산해서 저장하는 방법을 의미한다.&lt;/p&gt;

&lt;p&gt;즉 ES에서 스케일 아웃을 위해 index를 여러 shard로 쪼갠 것이다.&lt;/p&gt;

&lt;p&gt;기본적으로 1개가 존재하며 검색 성능 향상을 위해 클러스터의 샤드 개수를 조정하는 튜닝을 하기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;replica는 또 다른 형태의 shard라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;노드를 손실했을 경우 데이터의 신뢰성을 위해 샤드들을 복제하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;elasticsearch는-왜-빠를까&quot;&gt;ElasticSearch는 왜 빠를까?&lt;/h1&gt;

&lt;p&gt;역색인(inverted index) 덕분이다.&lt;/p&gt;

&lt;p&gt;인덱스는 책 앞에 삽입되는 목차,&lt;/p&gt;

&lt;p&gt;역색인은 책 뒤에 삽입되는 키워드로 찾아볼 수 있도록 구성한 부분이라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;ES는 텍스트를 파싱해서 검색어 사전을 만들고 inverted index 방식으로 텍스트를 저장한다.&lt;/p&gt;

&lt;p&gt;텍스트를 파싱하고 단어, 대소문자, 유사어 체크 등의 작업을 통해 저장하기 때문에&lt;/p&gt;

&lt;p&gt;RDBMS보다 전문 검색에 빠른 성능을 보인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.elastic.co/kr/what-is/elasticsearch&quot;&gt;https://www.elastic.co/kr/what-is/elasticsearch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hsunnystory.tistory.com/175&quot;&gt;https://hsunnystory.tistory.com/175&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/kr/elasticsearch/reference/current/gs-basic-concepts.html&quot;&gt;https://www.elastic.co/guide/kr/elasticsearch/reference/current/gs-basic-concepts.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://victorydntmd.tistory.com/308&quot;&gt;https://victorydntmd.tistory.com/308&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twofootdog.tistory.com/53&quot;&gt;https://twofootdog.tistory.com/53&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/kjmorc/ss-80803233&quot;&gt;https://www.slideshare.net/kjmorc/ss-80803233&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-17/es/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-17/es/</guid>
      </item>
    
      <item>
        <title>No Offset Paging 구현</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;offset-기반의-페이징&quot;&gt;offset 기반의 페이징&lt;/h2&gt;

&lt;p&gt;페이지 번호와 페이지 사이즈 기반으로 구현한 기존의 페이징 방식은&lt;/p&gt;

&lt;p&gt;다음과 같이 페이지 번호가 하단에 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;972&quot; alt=&quot;page1&quot; src=&quot;https://user-images.githubusercontent.com/33855307/133378009-7a894e95-6530-4eb6-9280-859f64524a01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;offset : 페이지 번호&lt;/li&gt;
  &lt;li&gt;limit : 페이지 사이즈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;no-offset-cursor-based-pagination-기반의-페이징&quot;&gt;No Offset (Cursor based Pagination) 기반의 페이징&lt;/h2&gt;

&lt;p&gt;SNS 에서는 이 방식 보다는 다음과 같이 무한 스크롤을 가능하게 하는 No Offset 방식이 더 어울리며&lt;/p&gt;

&lt;p&gt;No Offset 방식은 페이지 번호를 지정하는 방식보다 더 빠르다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1475&quot; alt=&quot;page&quot; src=&quot;https://user-images.githubusercontent.com/33855307/133377891-c0a28541-5a09-4507-8dea-d924f422709c.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 이미지를 보면 페이지 번호를 클릭해서 페이지가 넘어가는 게 아니라&lt;/p&gt;

&lt;p&gt;스크롤이 페이지 끝에 닿았을 때 새로운 페이지가 로딩되는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q-페이지-번호가-없는-방식을-no-offset이라-하는데-왜-더-빠를까&quot;&gt;Q. 페이지 번호가 없는 방식을 No Offset이라 하는데 왜 더 빠를까?&lt;/h3&gt;

&lt;p&gt;A. 최신 컨텐츠가 우선으로 조회되어야 하는데 페이지 번호를 지정하는 쿼리는&lt;/p&gt;

&lt;p&gt;앞에서 읽었던 행을 다시 읽어야 하기 때문에 뒤로 갈수록 느려진다.&lt;/p&gt;

&lt;p&gt;No Offset 방식은 조회 시작 부분을 인덱스로 빠르게 찾아 매번 첫 페이지만 읽는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현-코드&quot;&gt;구현 코드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PostService&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Transactional(readOnly = true)
public List&amp;lt;Post&amp;gt; getPosts(Long userId, Long lastPostId, Pageable pageable) {
	if (lastPostId &amp;gt; 0) {
		return postRepository.findByUserIdAndIdLessThan(userId, lastPostId, pageable);
	}

	return postRepository.findByUserId(userId, pageable);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음 조회하는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastPostId&lt;/code&gt;가 없기 때문에&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findByUserId()&lt;/code&gt; 메서드를 통해 최신 게시글을 조회한다.&lt;/p&gt;

&lt;p&gt;이후 호출되는 API 부터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastPostId&lt;/code&gt; 를 기준으로 조회한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PostRepository&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Repository
public interface PostRepository extends JpaRepository&amp;lt;Post, Long&amp;gt; {

	List&amp;lt;Post&amp;gt; findByUserId(Long userId, Pageable Pageable);

	List&amp;lt;Post&amp;gt; findByUserIdAndIdLessThan(@Param(&quot;userId&quot;) Long userId, @Param(&quot;id&quot;) Long lastPostId, Pageable Pageable);

	@Query(value = &quot;SELECT p&quot;
		+ &quot; FROM Post p&quot;
		+ &quot; JOIN Follow f ON p.user.id = f.follower.id&quot;
		+ &quot; WHERE p.user.id = :userId&quot;
		+ &quot; AND  f.follower.id = :userId&quot;)
	List&amp;lt;Post&amp;gt; findByJoinFollow(@Param(&quot;userId&quot;) Long userId, Pageable pageable);

	@Query(value = &quot;SELECT p&quot;
		+ &quot; FROM Post p&quot;
		+ &quot; JOIN Follow f ON p.user.id = f.follower.id&quot;
		+ &quot; WHERE p.user.id = :userId&quot;
		+ &quot; AND  f.follower.id = :userId&quot;
		+ &quot; AND p.id &amp;lt; :lastPostId&quot;)
	List&amp;lt;Post&amp;gt; findByJoinFollowAndLastIdLessThan(@Param(&quot;userId&quot;) Long userId, @Param(&quot;lastPostId&quot;) Long lastPostId, Pageable pageable);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-14/timeline/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-14/timeline/</guid>
      </item>
    
      <item>
        <title>직렬화가 품고 있는 위험</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;직렬화-관련-게시글&quot;&gt;직렬화 관련 게시글&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;직렬화란? : &lt;a href=&quot;https://hyerin6.github.io/2021-09-13/serialize(1)/&quot;&gt;https://hyerin6.github.io/2021-09-13/serialize(1)/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;85-자바-직렬화의-대안&quot;&gt;85. 자바 직렬화의 대안&lt;/h2&gt;

&lt;p&gt;직렬화의 근본적인 문제는 공격 범위가 넓고 지속적으로 더 넓어져 방어하기 어렵다는 점이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectInputStream&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject&lt;/code&gt; 메서드를 호출하면서 객체 그래프가 역직렬화되기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObject&lt;/code&gt; 메서드는 클래스패스 안의 거의 모든 타입의 객체를 만들어낼 수 있는 &lt;strong&gt;생성자&lt;/strong&gt;다.&lt;/p&gt;

&lt;p&gt;바이트 스트림을 역직렬화하는 과정에서 이 메서드는 &lt;strong&gt;그 타입들 안의 모든 코드를 수행&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;p&gt;즉 그 타입들의 코드 전체가 공격 범위에 들어간다는 뜻이다.&lt;/p&gt;

&lt;p&gt;역직렬화 과정에서 호출되어 잠재적으로 위험한 동작을 수행하는 메서드들이 있고 (이를 가젯이라고 부른다.)&lt;/p&gt;

&lt;p&gt;가젯을 함께 사용하여 가젯 체인을 구성해 공격할 수도 있다.&lt;/p&gt;

&lt;p&gt;또한 역직렬화에 시간이 오래 걸리는 짧은 스트림을 역직렬화하는 것만으로도 서비스 거부 공격에 쉽게 노출될 수 있다.&lt;/p&gt;

&lt;p&gt;이런 스트림을 역직렬화 폭탄이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HashSet과 문자열로 만든 역직렬화 폭탄 예시&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static byte[] bomb() {
	Set&amp;lt;Object&amp;gt; root = new HashSet&amp;lt;&amp;gt;();
	Set&amp;lt;Object&amp;gt; s1 = root;
	Set&amp;lt;Object&amp;gt; s2 = new HashSet();
	for(int i = 0; i &amp;lt; 100; ++i) {
		Set&amp;lt;Object&amp;gt; t1 = new HashSet&amp;lt;&amp;gt;();
		Set&amp;lt;Object&amp;gt; t2 = new HashSet&amp;lt;&amp;gt;();
		t1.add(&quot;foo&quot;); // t1과 t2를 다르게 
		s1.add(t1); s2.add(t2);
		s2.add(t1); s2.add(t2);
		s1 = t1;
		s2 = t2;
	}
	return serialize(root);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 객체 그래프는 201개의 HashSet 인스턴스로 구성되며, 각각 3개 이하의 객체 참조를 갖는다.&lt;/p&gt;

&lt;p&gt;스트림의 전체 크기는 5744바이트지만 역직렬화는 끝나지 않을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;문제는 HashSet 인스턴스를 역직렬화하려면 그 원소들의 해시코드를 계산해야 하는 것이다.&lt;/p&gt;

&lt;p&gt;반복문에 의해 이 구조의 깊이는 100단계까지 만들어지고 이 HashSet을 역직렬화하려면&lt;/p&gt;

&lt;p&gt;hashCode 메서드를 2^100번 넘게 호출해야 한다.&lt;/p&gt;

&lt;p&gt;역직렬화가 끝나지 않는 것도 문제고 잘못되었다는 신호조차 주지 않는 것도 문제다.&lt;/p&gt;

&lt;p&gt;이 코드는 몇 개의 객체만 생성해도 스택 깊이 제한에 걸린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;86-serializable을-구현할지-신중히-결정하자&quot;&gt;86. Serializable을 구현할지 신중히 결정하자&lt;/h2&gt;

&lt;p&gt;직렬화할 수 있게 하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements Serializable&lt;/code&gt;만 덧붙이면 된다.&lt;/p&gt;

&lt;p&gt;Serializable을 구현하면 릴리스한 뒤에는 수정하기 어렵다.&lt;/p&gt;

&lt;p&gt;클래스가 Serializable을 구현하면 직렬화된 바이트 스트림 인코딩(직렬화 형태)도 하나의 공개 API가 된다.&lt;/p&gt;

&lt;p&gt;기본 직렬화 상태에서는 클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; 인스턴스 필드들마저&lt;/p&gt;

&lt;p&gt;API로 공개되는 것이다. (캡슐화가 깨진다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;문제1-serialversionuid&quot;&gt;문제1: SerialVersionUID&lt;/h4&gt;

&lt;p&gt;직렬화가 클래스 개선을 방해하는 예는 대표적으로 스트림 고유 식별자, 즉 직렬 버전 UID를 들 수 있다.&lt;/p&gt;

&lt;p&gt;모든 직렬화된 클래스는 고유 식별 번호를 부여받는다.&lt;/p&gt;

&lt;p&gt;이 번호를 명시하지 않으면 시스템이 런타임에 암호 해시 함수를 적용해 자동으로 클래스 안에 생성해 넣는다.&lt;/p&gt;

&lt;p&gt;이 값을 생성하는 데는 클래스 이름, 구현 인터페이스, 컴파일러가 자동으로 넣은 클래스 멤버들이 고려된다.&lt;/p&gt;

&lt;p&gt;그래서 나중에 이들 중 하나라도 수정한다면 직렬 버전 UID 값도 변한다.&lt;/p&gt;

&lt;p&gt;즉 자동 생성되는 값에 의존하면 쉽게 호환성이 깨져버려 런타임에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidClassException&lt;/code&gt;이 발생할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;문제2-역직렬화는-숨은-생성자다&quot;&gt;문제2: 역직렬화는 숨은 생성자다.&lt;/h4&gt;

&lt;p&gt;두 번째 문제는 버그와 보안 구멍이 생길 위험이 높아진다는 점이다.&lt;/p&gt;

&lt;p&gt;객체는 생성자를 사용해 만드는 게 기본인데 직렬화는 우회하는 객체 생성 기법인 것이다.&lt;/p&gt;

&lt;p&gt;역직렬화는 일반 생성자의 문제가 그대로 적용되는 숨은 생성자다.&lt;/p&gt;

&lt;p&gt;기본 역직렬화를 사용하면 불변식 깨짐과 허가되지 않은 접근에 쉽게 노출된다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;문제3-신버전-릴리스할-때-테스트-추가&quot;&gt;문제3: 신버전 릴리스할 때 테스트 추가&lt;/h4&gt;

&lt;p&gt;세 번째 문제는 해당 클래스의 신버전을 릴리스할 때 테스트할 것이 늘어난다는 점이다.&lt;/p&gt;

&lt;p&gt;직렬화 가능 클래스가 수정되면 신버전 인스턴스를 직렬화한 후 구버전으로 역직렬화할 수 있는지&lt;/p&gt;

&lt;p&gt;그 반대도 가능한지 검사해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;주의1-상속용으로-설계된-클래스는-대부분-serializable을-구현하면-안-되며-인터페이스도-대부분-serializable을-확장해서는-안-된다&quot;&gt;주의1: 상속용으로 설계된 클래스는 대부분 Serializable을 구현하면 안 되며, 인터페이스도 대부분 Serializable을 확장해서는 안 된다.&lt;/h4&gt;

&lt;p&gt;이 규칙을 따르지 않으면, 그런 클래스를 확장하거나 그런 인터페이스를 구현하는 이에게 부담을 주게 된다.&lt;/p&gt;

&lt;p&gt;예) 상속용으로 설계된 클래스 중 Serializable을 구현한 예로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Throwable&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;/code&gt;가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;주의2-인스턴스-필드-값-중-불변식을-보장해야-할-게-있다면-반드시-하위-클래스에서-finaliza-메서드를-재정의하지-못하게-해야-한다&quot;&gt;주의2: 인스턴스 필드 값 중 불변식을 보장해야 할 게 있다면 반드시 하위 클래스에서 finaliza 메서드를 재정의하지 못하게 해야 한다.&lt;/h4&gt;

&lt;p&gt;finalize 메서드를 자신이 재정의하면서 final로 선언하면 된다.&lt;/p&gt;

&lt;p&gt;이렇게 하지 않으면 finalizer 공격을 당할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;주의3-인스턴스-필드-중-기본값정수-0-boolean-false-객체-null으로-초기화되면-위배되는-불변식이-있다면-readobjectnodata-메서드-추가&quot;&gt;주의3: 인스턴스 필드 중 기본값(정수 0, boolean false, 객체 null)으로 초기화되면 위배되는 불변식이 있다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readObjectNoData&lt;/code&gt; 메서드 추가&lt;/h4&gt;

&lt;p&gt;기존의 직렬화 가능 클래스에 직렬화 가능 상위 클래스를 추가하는 드문 경우를 위한 메서드다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;주의4-내부-클래스는-직렬화를-구현하지-말아야-한다&quot;&gt;주의4: 내부 클래스는 직렬화를 구현하지 말아야 한다.&lt;/h4&gt;

&lt;p&gt;내부 클래스에는 바깥 인스턴스의 참조와 유효 범위 안의 지역변수 값들을 저장하기 위해 컴파일러가 생성한 필드들이 자동으로 추가된다.&lt;/p&gt;

&lt;p&gt;내부 클래스에 대한 기본 직렬화 형태는 분명하지가 않다.&lt;/p&gt;

&lt;p&gt;단, 정적 멤버 클래스는 Serializable을 구현해도 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-13/serialize(2)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-13/serialize(2)/</guid>
      </item>
    
      <item>
        <title>자바 직렬화란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 하던 중 직렬화가 필요한 순간이 많았는데 직렬화가 무엇인지,&lt;/p&gt;

&lt;p&gt;왜 필요한지 어떤 주의사항들이 있는지 알아보고자 직접 예제를 통해 학습하고&lt;/p&gt;

&lt;p&gt;이펙티브 자바 직렬화 부분을 참고했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자바-직렬화란&quot;&gt;자바 직렬화란?&lt;/h1&gt;

&lt;p&gt;자바 직렬화란 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도 사용할 수 있도록&lt;/p&gt;

&lt;p&gt;바이트 형태로 (byte) 데이터를 반환하는 기술과 바이트로 변환된 데이터를 다시 객체로 변환(역직렬화)하는 기술이다.&lt;/p&gt;

&lt;p&gt;직렬화된 객체는 다른 VM에 전송하거나 디스크에 저장한 후 나중에 역직렬화할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;직렬화--역직렬화-하는-법&quot;&gt;직렬화 / 역직렬화 하는 법&lt;/h1&gt;

&lt;p&gt;자바 기본(primitive) 타입과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.io.Serializable&lt;/code&gt; 인터페이스를 상속받은 객체는 직렬화 할 수 있는 기본 조건을 가진다.&lt;/p&gt;

&lt;p&gt;역직렬화는 다음과 같은 조건을 만족해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;직렬화 대상이 된 객체의 클래스가 클래스 패스에 존재해야 하며 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; 되어 있어야 한다.&lt;/li&gt;
  &lt;li&gt;자바 직렬화 대상 객체는 동일한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serialVersionUID&lt;/code&gt; 를 가지고 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serialVersionUID&lt;/code&gt; 가 자동 생성되긴 하지만 클래스의 구조 정보를 이용하여 생성되기 때문에&lt;/p&gt;

  &lt;p&gt;클래스의 구조가 달라지면 역직렬화 과정에서 예상하지 못한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidClassException&lt;/code&gt;을 유발할 수 있음을 주의해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;serialversionuid가-없으면&quot;&gt;serialVersionUID가 없으면?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Q. User를 직렬화 한 데이터를 저장해두고,&lt;/strong&gt;
&lt;strong&gt;User에 새로운 필드를 추가하고 기존에 저장해둔 데이터를 역직렬화하면 잘 될까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;name, age 필드만 있던 User 객체를 직렬화하고
email 필드를 추가한 후 역직렬화를 해봤다.&lt;/p&gt;

&lt;p&gt;serialVersionUID를 명시한 경우와 그렇지 않은 경우
어떤 차이가 있을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;serialVersionUID를 명시한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133041925-acb528af-82b0-407d-9df2-63894ea53c97.png&quot; alt=&quot;v1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;email 필드를 추가하고 역직렬화를 했지만 User 객체의 역직렬화는 잘 진행되어&lt;/p&gt;

&lt;p&gt;email 필드는 null로 출력되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;serialVersionUID를 명시하지 않은 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/133041929-580476e1-03e4-4e58-b6d3-9673f39bde8d.png&quot; alt=&quot;v2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidClassException&lt;/code&gt;가 발생하면서 역직렬화가 진행되지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;테스트 코드: &lt;a href=&quot;https://github.com/hyerin6/TIL/tree/main/Mentoring/SerializationQuiz&quot;&gt;https://github.com/hyerin6/TIL/tree/main/Mentoring/SerializationQuiz&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직렬화 주의사항: &lt;a href=&quot;https://hyerin6.github.io/2021-09-13/serialize(2)/&quot;&gt;https://hyerin6.github.io/2021-09-13/serialize(2)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-13/serialize(1)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-13/serialize(1)/</guid>
      </item>
    
      <item>
        <title>로그인한 User 정보는 어디에서 가져올까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;spring security를 사용하지 않고 Kakao API와 JWT를 이용해 직접 회원가입, 로그인을 구현했다.&lt;/p&gt;

&lt;p&gt;유저 정보가 필요한 API들이 많은데 로그인에 성공한 유저의 정보는 어떻게 가져와야할까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;로그인한-정보-가져오는-방법&quot;&gt;로그인한 정보 가져오는 방법&lt;/h2&gt;

&lt;h3 id=&quot;1-로그인에-성공할-때마다-db에서-조회하기&quot;&gt;1. 로그인에 성공할 때마다 DB에서 조회하기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JwtInterceptor&lt;/code&gt; 에서 헤더의 Jwt AccessToken을 파싱해서 userId 값을 가져올 수 있다.&lt;/p&gt;

&lt;p&gt;userId 값으로 DB에서 유저 정보를 가져올 수 있는데 그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;에서  어디에 저장하면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Controller&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt; 레이어에서 유저 정보를 사용할 수 있을까?&lt;/p&gt;

&lt;p&gt;ThreadLocal 변수를 선언하면 멀티 스레드 환경에서 각 스레드마다 독립적인 변수를 가지고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt; 메소드를 통해 값에 대해 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;즉, Java의 ThreadLocal을 사용하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interceptor&lt;/code&gt;에서 유저 정보를 저장하고 원하는 곳에서 꺼내 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThreadLocal 변수 선언&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class UserContext {
	
	public static final ThreadLocal&amp;lt;User&amp;gt; CONTEXT = new ThreadLocal&amp;lt;&amp;gt;();

	public static User getContext() {
		return UserContext.USER_CONTEXT.get();
	}
	
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThradLocal 값 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// JwtInterceptor에서 조회 및 저장 
User user = userService.getUser(userId);
UserContext.CONTEXT.set(user);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThreadLocal 변수 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User user = UserContext.getContext();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러나 위 코드에 아쉬운 점이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;User의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userId&lt;/code&gt; 값만 필요한 API가 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JwtInterceptor&lt;/code&gt; (사용자자의 요청마다) 에서&lt;/p&gt;

    &lt;p&gt;매번 DB에서 User 엔티티를 조회하는 것은 불필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User 정보가 필요한 곳에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User user = UserContext.getContext();&lt;/code&gt; 코드가 반복된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 두 문제를 해결하기 위해 다음과 같은 방법을 적용해봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-커스텀-어노테이션-만들기&quot;&gt;2. 커스텀 어노테이션 만들기&lt;/h3&gt;

&lt;p&gt;우선 어노테이션을 만든다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
public @interface Authenticationprincipal {
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;어노테이션을 통해 사용자 정보를 받기 위해&lt;/p&gt;

&lt;p&gt;다음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandlerMethodArgumentResolver&lt;/code&gt; 인터페이스를 구현해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/132986004-db8542fc-39c0-4258-814e-3920712bd082.png&quot; alt=&quot;스크린샷 2021-09-12 오후 8 35 29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;supportsParameter&lt;/code&gt; 메서드를 거쳐 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolverArgument&lt;/code&gt; 메서드에서 헤더값을 꺼내와 다음과 같이 유저 정보를 리턴할 수 있다.&lt;/p&gt;

&lt;p&gt;이번 프로젝트에서 구현한 코드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RequiredArgsConstructor
@Component
public class AuthenticationArgumentResolver implements HandlerMethodArgumentResolver {

	private final JwtService jwtService;

	@Override
	public boolean supportsParameter(MethodParameter parameter) {
		return parameter.getParameterAnnotation(Authenticationprincipal.class) != null;
	}

	@Override
	public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
		NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
		String accessToken = HeaderUtil.getAccessToken(webRequest);
		return jwtService.decode(accessToken);
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-security에서는-user-정보를-어떻게-가져올까&quot;&gt;Spring Security에서는 User 정보를 어떻게 가져올까?&lt;/h3&gt;

&lt;p&gt;Spring Security 사용 시, 로그인한 유저 정보를 가져오는 방법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 방법 1
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
User user = (User)authentication.getPrincipal();

// 방법 2
@GetMapping(&quot;/&quot;)
public String home(@AuthenticationPrincipal User user) { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Sep 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-09-12/login-success/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-09-12/login-success/</guid>
      </item>
    
      <item>
        <title>Spring Security OAuth2.0에서 JWT를 사용하는 이유</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Security에 대한 포스팅은 다음 링크를 참고&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Security란?: &lt;a href=&quot;https://hyerin6.github.io/2021-08-22/springsecurity(1)/&quot;&gt;https://hyerin6.github.io/2021-08-22/springsecurity(1)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Security 로그인 절차: &lt;a href=&quot;https://hyerin6.github.io/2021-08-22/springsecurity(2)/&quot;&gt;https://hyerin6.github.io/2021-08-22/springsecurity(2)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Security OAuth2 (+ Kakao Login): &lt;a href=&quot;https://hyerin6.github.io/2021-08-24/springsecurity(3)/&quot;&gt;https://hyerin6.github.io/2021-08-24/springsecurity(3)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;661&quot; alt=&quot;스크린샷 2021-08-24 오후 11 21 13&quot; src=&quot;https://user-images.githubusercontent.com/33855307/130633816-e2e3e1a7-0f07-4c92-9657-895a63622688.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Security를 학습해보면서 Spring Security와 OAuth2.0을 사용하여 위와 같이 Kakao Login 기능을 구현해봤다.&lt;/p&gt;

&lt;p&gt;Spring Security 세션에 별다른 설정 없이 진행한다면 사용자 정보를 출력해보는 것까지는 문제없이 구현할 수 있었다.&lt;/p&gt;

&lt;p&gt;하지만 그 다음 인증 과정에서 문제가 많았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 직접 구현해보기 전에 RefreshToken을 DB에 저장해두고 AccessToken이 만료되면 RefreshToken으로 AccessToken을 재발급 받는&lt;/p&gt;

&lt;p&gt;로그인 / 로그인 유지 과정을 Spring Security 프레임워크로 구현하려고 했으나 다음과 같은 문제점들이 생겼다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ID/Password가 아닌 OAuth2로 로그인하는 과정은&lt;/p&gt;

&lt;p&gt;AbstractAuthenticationProcessingFilter에서 OAuth2 로그인 과정을 호출한다.&lt;/p&gt;

&lt;p&gt;상황에 맞게 AuthenticationProcessingFilter가 작동하는데 OAuth2 로그인으로 설정했기 때문에&lt;/p&gt;

&lt;p&gt;OAuth2LoginAuthenticationFilter의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attemptAuthentication()&lt;/code&gt;에서 다음과 같은 인증 과정을 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1) DefaultOAuth2UserService (구현: kakaoOAuth2UserService)
loadUser()에서 request로 받은 값들을 OAuth2User로 반환한다.

(2) OAuth2AuthorizedClientService (구현: KakaoOAuth2AuthorizedClientService)
위 loadUser()에서는 AccessToken과 User 정보만 받을 수 있고
RefreshToken은 OAuth2AuthorizedClientService 클래스에서 받을 수 있다.

(3) AuthenticationSuccessHandler (구현: KakaoAuthenticationSuccessHandler)
로그인 성공 후 처리를 진행한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제점1&quot;&gt;문제점(1)&lt;/h2&gt;
&lt;p&gt;AccessToken은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceServer&lt;/code&gt;를 구현해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Introspection&lt;/code&gt;으로 &lt;strong&gt;토큰에 대한 인증 과정을 수행해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://www.oauth.com/oauth2-servers/token-introspection-endpoint/&quot;&gt;https://www.oauth.com/oauth2-servers/token-introspection-endpoint/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/131086187-9dc4aff6-2559-43e8-8151-2e973f0368a6.jpeg&quot; alt=&quot;security1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;access_token은 Bearer 토큰 형식으로 단순히 암호화된 문자열이다.&lt;/p&gt;

&lt;p&gt;Bearer 토큰으로 리소스 서버에 리소스를 요청하면 해당 토큰이 유효한지, 토큰 인증한 회원이 누구인지 인증서버에 추가 확인하는 과정이 필요하다.&lt;/p&gt;

&lt;p&gt;이러한 토큰을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opaque token&lt;/code&gt; 이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;access_token 인증 과정의 번거로움을 보완하기 위해 JWT 토큰 사용을 고려해볼 수 있다.&lt;/p&gt;

&lt;p&gt;JWT는 JSON String이 암호화된 문자열로 토큰 자체에 특정한 정보를 세팅할 수 있다는 것이 특징이다.&lt;/p&gt;

&lt;p&gt;회원의 id나 &lt;strong&gt;인증에 필요한 정보를 포함시킬 수 있기 때문에&lt;/strong&gt; Bearer 토큰처럼 회원 확인을 위해&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인증 서버를 한번 더 거칠 필요가 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JWT를 사용하면 다음과 같은 인증 과정을 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/131086194-6e1bad4c-3c78-434f-a343-c1d701ca1264.jpeg&quot; alt=&quot;security2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제점2&quot;&gt;문제점(2)&lt;/h2&gt;
&lt;p&gt;Spring Security 프레임워크를 사용해서 브라우저를 통해 발급받은 Kakao AccessToken을 브라우저를 통해서가 아닌&lt;/p&gt;

&lt;p&gt;RestAPI로(ex.postman을 사용해서 헤더에 access token을 담아 요청하는 경우) 사용하는 경우 인증이 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제점3&quot;&gt;문제점(3)&lt;/h2&gt;
&lt;p&gt;Spring Security에서 RefreshToken을 저장하는 방법은 inMemory, JDBC 두 가지이다.&lt;/p&gt;

&lt;p&gt;JDBC에 저장하는 토큰 관리 방법은 다음과 같은 테이블을 만들고 Spring Security에서 정의한대로 구현해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create table IF NOT EXISTS oauth_client_details (
  client_id VARCHAR(256) PRIMARY KEY,
  resource_ids VARCHAR(256),
  client_secret VARCHAR(256),
  scope VARCHAR(256),
  authorized_grant_types VARCHAR(256),
  web_server_redirect_uri VARCHAR(256),
  authorities VARCHAR(256),
  access_token_validity INTEGER,
  refresh_token_validity INTEGER,
  additional_information VARCHAR(4096),
  autoapprove VARCHAR(256)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음 계획한대로 Spring Security를 사용해서 RefreshToken을 DB에 저장하고&lt;/p&gt;

&lt;p&gt;로그인이 필요한 API마다 AuthorizationServer(Kakao)에 토큰의 유효성을 검사하는 방식까지&lt;/p&gt;

&lt;p&gt;구현하려고 했으나 너무 많은 클래스를 구현해야 하고 Spring Security가 어떻게 동작하는지 알아보기 위해&lt;/p&gt;

&lt;p&gt;시작한 구현이기 때문에 이정도에서 만족하고 OAuth2와 JWT를 사용한 로그인 방식으로 변경했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번주부터는 Spring Security를 사용하지 않고 JWT를 사용한 Kakao 로그인을 구현할 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://daddyprogrammer.org/post/1287/spring-oauth2-authorizationserver-database/&quot;&gt;https://daddyprogrammer.org/post/1287/spring-oauth2-authorizationserver-database/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://daddyprogrammer.org/post/1754/spring-boot-oauth2-resourceserver/&quot;&gt;https://daddyprogrammer.org/post/1754/spring-boot-oauth2-resourceserver/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.oauth.com/oauth2-servers/token-introspection-endpoint/&quot;&gt;https://www.oauth.com/oauth2-servers/token-introspection-endpoint/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-26/springsecurity(4)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-26/springsecurity(4)/</guid>
      </item>
    
      <item>
        <title>Spring Security + OAuth2.0 + Kakao</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Security에 대한 포스팅은 다음 링크를 참고&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Security란?: &lt;a href=&quot;https://hyerin6.github.io/2021-08-22/springsecurity(1)/&quot;&gt;https://hyerin6.github.io/2021-08-22/springsecurity(1)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Security 로그인 절차: &lt;a href=&quot;https://hyerin6.github.io/2021-08-22/springsecurity(2)/&quot;&gt;https://hyerin6.github.io/2021-08-22/springsecurity(2)/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;OAuth2.0 로그인을 사용한다면 UsernamePasswordAuthenticationFilter 대신 OAuth2LoginAuthenticationFilter가 호출된다.&lt;/p&gt;

&lt;p&gt;두 필터의 상위 클래스는 AbstractAuthenticationProcessingFilter이고,
스프링 시큐리티가 상위 클래스를 호출하면 로그인 방식에 따라 구현체인
UsernamePasswordAuthenticationFilter와 OAuth2LoginAuthenticationFilter가 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-security-configuration&quot;&gt;Spring Security Configuration&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableWebSecurity&lt;/code&gt;는 스프링 시큐리티 설정들을 활성화 시켜준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oauth2Client()&lt;/code&gt;로 OAuth2 클라이언트 구성 요소를 지정할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorizedClientService(authorizedClientService())&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.oauth2Login()&lt;/code&gt;으로 OAuth2 로그인 관련 처리를 설정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userService()&lt;/code&gt;는 OAuth2 인증 과정에서 Authentication을 생성에 필요한&lt;/p&gt;

    &lt;p&gt;OAuth2User를 반환하는 클래스를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customUserType(KakaoOAuth2User.class, SOCIAL_TYPE)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;OAuth2User 타입을 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;successHandler()&lt;/code&gt;는 인증을 성공적으로 마친 경우 처리할 클래스를 지정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failureHandler()&lt;/code&gt;는 인증을 실패한 경우 처리할 클래스를 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oauth2-인증-과정&quot;&gt;OAuth2 인증 과정&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 소셜 로그인 성공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AbstractAuthenticationProcessingFilter에서 OAuth2 로그인 과정을 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resource Server에서 넘겨주는 정보대로&lt;/p&gt;

    &lt;p&gt;OAuth2LoginAuthentiationFilter의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attemptAuthentication()&lt;/code&gt;에서 인증 과정을 수행&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;attemptAuthentication() 처리 과정에서 OAuth2AuthenticationToken을 생성하기 위해&lt;/p&gt;

    &lt;p&gt;OAuth2LoginAuthenticationProvider의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 처리 과정에서 OAuth2User를 생성하기 위해&lt;/p&gt;

    &lt;p&gt;OAuth2UserService의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUser()&lt;/code&gt; 호출&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUser()&lt;/code&gt; 처리 과정에서 OAuth2User를 반환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(6)번까지 끝내면 AbstractAuthenticationProcessingFilter에서 SuccessHandler의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onAuthenticationSuccess()&lt;/code&gt;을 호출한다.&lt;/p&gt;

    &lt;p&gt;기본적으로 리다이렉션하는 역할인데 커스텀해서 지정할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(6)번까지의 과정이 정상적으로 끝나지 않았다면 AbstractAuthenticationProcessingFilter에서 FailureHandler의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onAuthenticationFailure()&lt;/code&gt;을 호출한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 올바른 요청일 경우의 처리 과정이고 이외의 경우는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인증되지 않은 사용자가 인증이 필요한 URL에 접근하려 한다면 authenticationEntityPoint에서 예외 처리&lt;/li&gt;
  &lt;li&gt;인증된 사용자가 권한이 부족한 URL에 접근하려 한다면 accessDeniedHandler에서 예외 처리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인증-코드-요청&quot;&gt;인증 코드 요청&lt;/h2&gt;

&lt;p&gt;Spring Security와 OAuth2를 사용해서 자신이 등록한 kakao api의 인증 코드 api를 호출하려면 해당 역할을 하는 endpoint를 알아야 한다.&lt;/p&gt;

&lt;p&gt;여기서 endpointsms Filter이고 해당 역할을 하는 Filter는
OAuth2AuthorizationRequestRedirectFilter이다.&lt;/p&gt;

&lt;p&gt;이 필터에서 this.authorizationRequestResolver가 registrationID인 kakao 값으로 설정 정보를  조회한다.&lt;/p&gt;

&lt;p&gt;인증 코드를 얻기 위해 호출할 API 주를 만들고 해당 주소로 리다이렉션한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Security OAuth2 설정을 끝내고 브라우저 주소창에&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost::8080/oauth2/authorization/kakao&lt;/code&gt;을 입력하면 카카오톡 로그인 페이지가 뜬다.&lt;/p&gt;

&lt;p&gt;사용자가 로그인에 성공하면 카카오에 등록한 Callback URL인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt;가 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;access-token-요청&quot;&gt;Access Token 요청&lt;/h2&gt;

&lt;p&gt;code를 요청할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt;을 보내는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt;를 어떻게 처리해서 access token을 얻어올 수 있을까?&lt;/p&gt;

&lt;p&gt;직접 Controller에서 token을 얻는 API를 만드는 예제를 본 적이 있는데  프레임워크를 사용하고 있기 때문에 나는 프레임워크를 이용할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Access token을 획득하는 역할의 Filter는 OAuth2LoginAuthenticationFilter이다.&lt;/p&gt;

&lt;p&gt;OAuth2LoginAuthenticationToken 클래스 변수에 access token과 함께 kakao user 정보도 가지고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;로그인-상태-처리&quot;&gt;로그인 상태 처리&lt;/h2&gt;

&lt;p&gt;Spring Security는 기본적으로 세션 기반으로 동작한다.&lt;/p&gt;

&lt;p&gt;그러나 stateless로 만들고 싶은 경우 OAuth2 인증 처리 후 실행되는 successHandler를 커스텀하면 된다.&lt;/p&gt;

&lt;p&gt;이 방법은 현재 프로젝트에서 kakao라는 provider에 의존하는 문제가 있다.&lt;/p&gt;

&lt;p&gt;이 의존 문제는 OAuth2UserService의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUser()&lt;/code&gt; 메소드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; 타입으로&lt;/p&gt;

&lt;p&gt;OAuth2 회원 정보 조회 API의 Response를 파싱하는 코드를 소셜에 맞게 변경해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 CustomUserTypesOAuth2UserService를 사용하여 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;Custom User Type을 Map에 담아 파라미터로 넘겨서 사용하고
Map의 Key는 Client의 Registration ID로 설정하는 것이다.&lt;/p&gt;

&lt;p&gt;설정은 다음과 같이 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .anyRequest().authenticated()
            .and()
            .oauth2Client()
            .authorizedClientService(authorizedClientService())
            .and()
            .oauth2Login()
            .userInfoEndpoint()
            .customUserType(KakaoOAuth2User.class, SOCIAL_TYPE)
            .userService(oAuth2UserService())
            .and()
            .successHandler(authenticationSuccessHandler());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;저장된-인증-정보-사용&quot;&gt;저장된 인증 정보 사용&lt;/h2&gt;

&lt;p&gt;Spring Security는 인증을 하면 인증 정보를 SecurityContextHolder 클래스를 통해 메모리에 저장한다.&lt;/p&gt;

&lt;p&gt;세션 키로 메모리에 저장된 인증 정보를 꺼내서 무언가 처리하고 싶다면 다음과 같이 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;controller에서 매개변수로 받는 방법
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AuthenticationPrincipal OAuth2User oauth2User&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;코드에서 얻는 방법
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication auth = SecurityContextHolder.getContext().getAuthentication();&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 방법으로 JWT를 사용하지 않고 구현하려면 구현해야 하는 클래스도 많고 설정해야 하는 부분도 많으며, 문제점도 있다.
그래서 JWT를 함께 사용하는 예제가 많은데 그 이유에 대해서는 다음 게시글에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2021-08-24/springsecurity(4)/&quot;&gt;https://hyerin6.github.io/2021-08-24/springsecurity(4)/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-24/springsecurity(3)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-24/springsecurity(3)/</guid>
      </item>
    
      <item>
        <title>Spring Security 로그인 절차</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;로그인은-어떻게-진행될까&quot;&gt;로그인은 어떻게 진행될까?&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/130346760-f38deeb1-6f0d-4291-b129-1d36f620eb9e.jpeg&quot; alt=&quot;SpringSecurity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 로그인을 요청한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AuthenticationFilter (사용할 구현체 : UsernamePasswordAuthenticationFilter)가 HttpServletRequest에서 사용자가 보낸 아이디와 패스워드를 인터셉트한다.
Front 단에서 유효성 검사를 할 수 있지만 서버에서도 가능하다.
HttpServletRequest에서 꺼내온 사용자 아이디와 패스워드를
진짜 인증을 담당할 AuthenticationManager 인터페이스 (구현체: ProviderManager)에게
인증용 객체(UsernamePasswordAuthenticationToken)로 만들어줘서 위임한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AuthenticationFilter에게 인증용 객체(UsernamePasswordAuthenticationToken)을 전달받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실제 인증을 할 AuthenticationProvider에게 Authentication 객체 (UsernamePasswordAuthenticationToken)을 다시 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DB에서 사용자 인증 정보를 가져올 UserDetailsService 객체에게 사용자 아이디를 넘겨주고
DB에서 인증에 사용할 정보 (id/password, 권한 등)을 UserDetails 객체로 전달받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AuthenticationProvider는 UserDetails 객체를 전달받은 이후 실제 사용자의 입력 정보와 UserDetails 객체를 가지고 인증을 시도한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;7~10. 인증이 완료되면 사용자 정보를 가진 Authentication 객체를 SecurityContextHolder에 담은 이후 AuthenticationSuccessHandler를 실행한다.
실패 시 AuthenticationFilureHandler를 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;로그인&quot;&gt;로그인&lt;/h2&gt;

&lt;h3 id=&quot;authenticationfilter-delegatingfilterproxy&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelegatingFilterProxy&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;우선 클라이언트(브라우저)로 부터 요청(Request)이 오면, 그 요청은 ApplicationFilter 객체들로 먼저 가게 된다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet에 도달하기 전이다. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ApplicationFilter들을 거치다가 DelegatingFilterRegistrationBean 이라는 필터를 만나게 된다.&lt;/p&gt;

&lt;p&gt;이 필터는 DelegatingFIlterProxy라는 클래스로 만들어진 스프링 빈을 등록시켜주는 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filter&quot;&gt;Filter&lt;/h3&gt;

&lt;p&gt;스프링 부트에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt; 어노테이션을 이용해서&lt;/p&gt;

&lt;p&gt;SecurityFilterAutoConfiguration 클래스를 로드하고 디폴트로 이름이 SpringSecurityFilterChain 빈을 등록해준다.&lt;/p&gt;

&lt;p&gt;이때 스프링 시큐리티가 만든 DelegatingFilterProxy 클래스인 SpringSecurityFilterChain 이라는 이름의 스프링 빈을 등록하고&lt;/p&gt;

&lt;p&gt;이후에는 이 DelegatingFilterProxy(SpringSecurityFilterChain)가 필터로 동작하게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DelegatingFilterProxy가 처리를 위임하는 필터 클래스는 FilterChainProxy다.&lt;/p&gt;

  &lt;p&gt;이 클래스 내부에 체인으로 등록된 필터를 순서대로 수행하는 것이다.&lt;/p&gt;

  &lt;p&gt;DelegatingFIlterProxy ▶️ FIlterChainProxy ▶️ List 구조&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SpringSecurityFilterChain은 스프링에서 보안과 관련된 여러 필터 리스트를 갖고 있는 객체로 필터 리스트를 순회하면서 필터링한다.&lt;/p&gt;

&lt;p&gt;필터 리스트는 AuthenticationFilter들이고, 스프링 시큐리티가 자동으로 생성한다.&lt;/p&gt;

&lt;p&gt;SpringSecurityFilterChain이라는 필터가 갖고 있는 필터 중 하나로 UsernamePasswordAuthenticationFilter라는 필터가 있다.&lt;/p&gt;

&lt;p&gt;이 필터는 ID/Password를 이용한 인증을 담당하는 필터다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oauth-20&quot;&gt;OAuth 2.0&lt;/h3&gt;

&lt;p&gt;그렇다면 OAuth 2.0을 이용한 인증을 하려면 어떻게 동작할까?&lt;/p&gt;

&lt;p&gt;UsernamePasswordAuthenticationFilter는 OAuth 2.0 인증을 할 수 없으니 인증되지 않은 채로 다음 필터로 넘어간다.&lt;/p&gt;

&lt;p&gt;그 후 OAuth2ClientAuthenticationProcessingFilter라는 필터에서 OAuth 2.0을 이용한 인증이 진행된다.&lt;/p&gt;

&lt;p&gt;이 필터로 OAuth를 쓴다고 설정하면 스프링 시큐리티가 설정해준다. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여러 필터를 거치며 인증이 완료되면 해당 요청(Request)은 인증된 요청이 되는 것이다.&lt;/p&gt;

&lt;p&gt;요청에 대한 인증은 UsernamePasswordAuthenticationFilter가 담당한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Authentication attempAuthentication(HttpServletRequest request, HttpServletResponse response) {
	
	...
	
	UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
	this.setDetails(request, authRequest);
	return this.getAuthenticationManager().authenticate(authRequest);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attempAuthentication(request, response)&lt;/code&gt; 메소드를 보면 요청으로부터&lt;/p&gt;

&lt;p&gt;username, password를 얻어오고&lt;/p&gt;

&lt;p&gt;그 값으로 UsernamePasswordAuthenticationToken(Authentication)을 생성한다.&lt;/p&gt;

&lt;p&gt;그 다음 참조하고 있던 AuthenticationManager(구현체: ProviderManager)에게 인증을 진행하도록 위임한다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 UsernamePasswordAuthenticationToken은 Authentication 인터페이스의 구현체다.&lt;/p&gt;

&lt;p&gt;Authentication의 구현체만 AuthenticationManager 인증 과정을 수행할 수 있다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 개발자가 스프링 시큐리티를 이용해 인증 절차를 만들려면?&lt;/p&gt;

&lt;p&gt;AuthenticationProvider 인터페이스를 구현해서 ProviderManager가&lt;/p&gt;

&lt;p&gt;그 클래스의 객체에게 인증을 위임하도록 하면 개발자가 원하는 인증 처리를 할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/76&quot;&gt;https://mangkyu.tistory.com/76&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/205&quot;&gt;https://jeong-pro.tistory.com/205&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding-start.tistory.com/153&quot;&gt;https://coding-start.tistory.com/153&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-22/springsecurity(2)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-22/springsecurity(2)/</guid>
      </item>
    
      <item>
        <title>Spring Security란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;spring-security&quot;&gt;Spring Security&lt;/h1&gt;
&lt;p&gt;Spring 기반의 애플리케이션의 보안을(인증과 권한, 인가 등) 담당하는 스프링 하위 프레임워크다.&lt;/p&gt;

&lt;p&gt;SpringSecurity는 인증과 권한에 대한 부분을 Filter 흐름에 따라 처리하고 있다.&lt;/p&gt;

&lt;p&gt;Filter는 DispatcherServlet으로 가기 전에 적용되므로 가장 먼저 URL 요청을 받지만,&lt;/p&gt;

&lt;p&gt;Interceptor는 Dispatcher와 Controller 사이에 위치한다는 점에서 적용 시기의 차이가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/130345769-916b067f-d136-4bcc-8800-1ee0fc0ba598.jpeg&quot; alt=&quot;springsecutiry_architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;springcontextholder&quot;&gt;SpringContextHolder&lt;/h3&gt;

&lt;p&gt;SpringContextHolder는 보안 주체의 세부 정보를 포함하여 응용프로그램의 현재 보안 컨텍스트에 대한 세부 정보가 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;securitycontext&quot;&gt;SecurityContext&lt;/h3&gt;

&lt;p&gt;Authentication을 보관하는 역할이며, SecurityContext를 통해 Authentication 객체를 꺼내올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Authentication은 현재 접근하는 주체의 정보와 권한을 담은 인터페이스다.&lt;/p&gt;

&lt;p&gt;Authentication 객체는 SecurityContext에 저장되며,&lt;/p&gt;

&lt;p&gt;SecurityContextHolder를 통해 SecurityContext에 접근하고&lt;/p&gt;

&lt;p&gt;SpringContext를 통해 Authentication에 접근할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Authentication extends Principal, Serializable {
	// 현재 사용자의 권한 목록을 가져옴 
	Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities();
	
	// credenrials(ex.password)을 가져옴 
	Object getCredentials();
	
	Object getDetails();
	
	// Principal 객체를 가져옴 
	Object getPrincipal();
	
	// 인증 여부를 가져옴 
	boolean isAuthenticated();
	
	// 인증 여부를 설정함 
	void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;usernamepasswordauthenticationtoken&quot;&gt;UsernamePasswordAuthenticationToken&lt;/h3&gt;

&lt;p&gt;UsernamePasswordAuthenticationToken은 인증 전 객체를 생성하고 인증 완료된 객체를 생성하는 생성자를 갖고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;authenticationprovider&quot;&gt;AuthenticationProvider&lt;/h3&gt;

&lt;p&gt;AuthenticationProvider에서는 실제 인증에 대한 부분을 처리하는데&lt;/p&gt;

&lt;p&gt;인증 전의 Authentication 객체를 받아서 인증이 완료된 객체를 반환하는 역할을 한다.&lt;/p&gt;

&lt;p&gt;AuthenticationProvider 인터페이스를 구현해서 Custom한 AuthenticationProvider을 작성해서 AuthenticationManager에 등록한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface AuthenticationProvider {
	// 인증 전 Authentication 객체를 받아서 인증된 Authentication 객체를 반환 
	Authentication authenticate(Authentication var1) throw AuthenticationException;
	
	boolean supports(Class&amp;lt;?&amp;gt; var1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;authenticationmanager&quot;&gt;AuthenticationManager&lt;/h3&gt;

&lt;p&gt;인증에 대한 부분은 SpringSecurity의 AuthenticationManager을 통해서 처리하는데&lt;/p&gt;

&lt;p&gt;실제로는 AuthenticationManager에 등록된 AuthenticationProvider에 의해 처리된다.&lt;/p&gt;

&lt;p&gt;인증에 성공하면 인증 성공 객체를 생성하여 SecurityContext에 저장한다.&lt;/p&gt;

&lt;p&gt;인증 상태를 유지하기 위해 세션에 보관하며, 인증이 실패한 경우 AuthenticationException을 발생시킨다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;AuthenticationManager를 implements한 ProviderManager는 실제 인증 과정에 대한 로직을 가지고 있는&lt;/p&gt;

&lt;p&gt;AuthenticationProvider를 List로 가지고 있으며, ProviderManager는 for문을 통해 모든 provider를 조회하면서 authenticate 처리를 한다. 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ProviderManager에 개발자가 직접 구현한 CustomAuthenticationProvider를 등록하는 방법은&lt;/p&gt;

&lt;p&gt;WebSecurityConfigureAdapter를 상속해 만든 SecurityConfig에서 할 수 있다.&lt;/p&gt;

&lt;p&gt;WebSecurityConfigureAdapter의 상위 클래스에서는 AuthenticationManager를 가지고 있기 때문에&lt;/p&gt;

&lt;p&gt;직접만든 CustomAuthenticationProvider를 등록할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;userdetails&quot;&gt;UserDetails&lt;/h3&gt;

&lt;p&gt;인증에 성공하여 생성된 UserDetails 객체는 Authentication 객체를 구현한 UsernamePasswordAuthenticationToken을 생성하기 위해 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;userdetailsservice&quot;&gt;UserDetailsService&lt;/h3&gt;

&lt;p&gt;UserDetailsService 인터페이스는 UserDetails 객체를 반환하는 단 하나의 메소드를 가지고 있는데&lt;/p&gt;

&lt;p&gt;일반적으로 이를 구현한 클래스의 내부에 UserRepository를 주입받아 DB에서 User 정보를 가져온다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface UserDetailsService {
	UserDetails loadUserByUsername(String var1) throws UsernameNotFoundException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/76&quot;&gt;https://mangkyu.tistory.com/76&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/205&quot;&gt;https://jeong-pro.tistory.com/205&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding-start.tistory.com/153&quot;&gt;https://coding-start.tistory.com/153&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-22/springsecurity(1)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-22/springsecurity(1)/</guid>
      </item>
    
      <item>
        <title>스프링 예외 발생 위치와 처리 방법</title>
        <description>&lt;h1 id=&quot;스프링-처리-과정&quot;&gt;스프링 처리 과정&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/129752405-32d58181-4260-43ce-aa8d-2ece9164f964.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-08-17-23-00-42&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링의 처리 과정을 보면 예외가 발생하는 부분은 크게 두 가지로 나눌 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DispatcherServlet 내에서 발생하는 예외 (Controller, Service, Repository 등)&lt;/li&gt;
  &lt;li&gt;DispatcherServlet 전의 서블릿(Filter)에서 발생하는 예외&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dispatcherservlet-내에서-발생한-예외&quot;&gt;DispatcherServlet 내에서 발생한 예외&lt;/h1&gt;

&lt;p&gt;DispatcherServlet 내에서 발생하는 예외는 HandlerExceptionResolver를 사용한 예외 전략으로 내부에서 자체적으로 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandlerExceptionResolver&lt;/code&gt; 사용은 다음 링크 참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jaehun2841.github.io/2018/08/30/2018-08-25-spring-mvc-handle-exception/#handlerexceptionresolver%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%B2%98%EB%A6%AC&quot;&gt;https://jaehun2841.github.io/2018/08/30/2018-08-25-spring-mvc-handle-exception/#handlerexceptionresolver%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%B2%98%EB%A6%AC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dispatchherservlet-전에-발생한-예외&quot;&gt;DispatchherServlet 전에 발생한 예외&lt;/h1&gt;

&lt;p&gt;DispatcherServlet 전의 서블릿(Filter)에서 발생하는 예외는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandlerExceptionResolver&lt;/code&gt;의 처리를 받을 수 없다.&lt;/p&gt;

&lt;p&gt;Filter에서 예외가 발생하면 Web Application 레벨에서 처리를 해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해결 방법은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;web.xml 에서 error-page 등록, 사용자에게 에러 응답&lt;/li&gt;
  &lt;li&gt;Filter 내부 예외 처리를 위한 Filter 생성, try-catch문을 사용하여 예외 처리&lt;/li&gt;
  &lt;li&gt;Filter 내부 try-catch문에서 발생한 예외를  HandlerExceptionResolver를 빈으로 주입받아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;에서 처리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;handlerexceptionresolver의-예외-처리-방법&quot;&gt;HandlerExceptionResolver의 예외 처리 방법&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Controller Level: @ExceptionHandler&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Global Level: @ControllerAdvice&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Method Level: try/catch&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-controller-level-exceptionhandler&quot;&gt;(1) Controller Level: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;스프링에서 Controller에서 발생하는 예외를 공통적으로 처리할 수 있는 기능을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;애노테이션을 통해 Controller의 메서드에서 throw된 Exception에 대한 공통적인 처리를 할 수 있다.&lt;/p&gt;

&lt;p&gt;TestController내에서 발생하는 TestException에 대해서 예외가 발생하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;controllerExceptionHandler&lt;/code&gt;메서드에서 모두 처리해준다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Controller 메서드 내의 하위 서비스 (Service, Repository등등)에서 예외가 발생하더라도,&lt;/p&gt;

&lt;p&gt;중간에 처리하지 않는 이상 Controller단까지 예외가 던져지게 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;가 예외를 처리하게 된다.&lt;/p&gt;

&lt;p&gt;Checked Exception, Runtime Exception 상관 없이 Controller까지 예외를 throw하면 처리가 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RestController
public class TestController {

    // 예외 핸들러
    @ExceptionHandler(value = TestException.class)
    public String controllerExceptionHandler(Exception e) {
        log.error(e.getMessage());
        return &quot;/error/404&quot;;
    }

    @GetMapping(&quot;hello1&quot;)
    public String hello1() {
        throw new TestException(&quot;hello1 에러 &quot;); // 예외 발생
    }

    @GetMapping(&quot;hello2&quot;)
    public String hello2() {
        throw new TestException(&quot;hello2 에러 &quot;); // 예외 발생
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-global-level-controlleradvice&quot;&gt;(2) Global Level: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ControllerAdvice&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;하나의 Controller가 아닌 여러 Controller에서 발생하는 예외를 처리하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ControllerAdvice&lt;/code&gt;를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ControllerAdvice&lt;/code&gt;는 모든 Controller에서 발생하는 예외를 처리할 수 있게 해주는 애노테이션이다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet에서 발생하는 예외를 전역적으로 처리해준다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet에서 발생하는 예외만 처리할 수 있고 Filter에서 발생하는 예외는 따로 처리를 하지 않으면 처리가 불가능하다.&lt;/p&gt;

&lt;p&gt;Q. Controller의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;와 ControllerAdvice의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;중 높은 우선순위는?&lt;/p&gt;

&lt;p&gt;A. Controller의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExceptionHandler&lt;/code&gt;가 먼저다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-method-level-trycatch&quot;&gt;(3) Method Level: try/catch&lt;/h3&gt;

&lt;p&gt;생략&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-16/spring-exception/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-16/spring-exception/</guid>
      </item>
    
      <item>
        <title>createdAt 어떻게 저장할까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 코드는 sns 프로젝트의 게시글 엔티티 클래스이다.   &lt;br /&gt;
많은 어노테이션이 붙어있는데 이번에는 엔티티 생성, 수정 시간을 기록하는  &lt;br /&gt;
필드에 대해 알아보자.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Setter
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@EntityListeners(AuditingEntityListener.class)
@Entity
public class Post {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;

	private String content;

	@ManyToOne
	@JoinColumn(name = &quot;user_id&quot;)
	private User user;

	@CreatedDate
	@Column(updatable = false, nullable = false)
	private LocalDateTime createdAt;

	@LastModifiedDate
	private LocalDateTime updatedAt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;createddate--lastmodifieddate&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedDate&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@LastModifiedDate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedDate&lt;/code&gt;는 엔티티 생성 시 특정 필드를 자동으로 데이터베이스에 매핑해주기 위해 사용한다.     &lt;br /&gt;
그런데 아무런 설정 없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedDate&lt;/code&gt; 어노테이션만 붙이면 다음과 같은 에러가 발생하거나 NULL이 저장된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;not-null property references a null or transient value createddate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 설정이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SpringApplication&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableJpaAuditing&lt;/code&gt; 붙이기&lt;/li&gt;
  &lt;li&gt;콜백 요청을 원하는 엔티티에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EntityListeners(AuditingEntityListener.class)&lt;/code&gt; 붙이기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;왜 이런 설정이 필요한지 더 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entitylisteners&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EntityListeners&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;엔티티를 DB에 적용하기 이전에 콜백을 요청할 수 있는 어노테이션&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;auditingentitylistener&quot;&gt;AuditingEntityListener&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Auditing이란 감시하다라는 뜻이다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;엔티티를 영속성 컨텍스트에 저장하거나 수정한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;하는 경우     &lt;br /&gt;
자동으로 auditor, time을 매핑하여 DB에 넣도록 도와준다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 부트의 엔트리 포인트인 실행 클래스에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableJpaAuditing&lt;/code&gt;을 적용하여 JPA Auditing을 활성화 해야한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 설정들을 마치면 엔티티에 따로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createdAt&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updatedAt&lt;/code&gt;을 set 하지 않아도 자동으로 DB에 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creationtimestamp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreationTimestamp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;앞서 알아본 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedDate&lt;/code&gt;는 Spring Data에서 제공하는 어노테이션이고  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreationTimestamp&lt;/code&gt;는 하이버네이트에서 제공하는 어노테이션이다.&lt;/p&gt;

&lt;p&gt;설정 없이 사용할 수 있지만 하이버네이트에 종속되어 버리니    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@CreatedDate&lt;/code&gt;를 사용하기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/1.7.0.DATAJPA-580-SNAPSHOT/reference/html/auditing.html&quot;&gt;https://docs.spring.io/spring-data/jpa/docs/1.7.0.DATAJPA-580-SNAPSHOT/reference/html/auditing.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing.annotations&quot;&gt;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#auditing.annotations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-CreationTimestamp&quot;&gt;https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-CreationTimestamp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bgpark.tistory.com/133&quot;&gt;https://bgpark.tistory.com/133&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#events-jpa-callbacks&quot;&gt;https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#events-jpa-callbacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-14/createdAt/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-14/createdAt/</guid>
      </item>
    
      <item>
        <title>파일 리스트와 데이터 요청을 하나의 객체로 바인딩</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;의 차이를 정확히 알아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;requestparam&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;은 1개의 HTTP 요청 파라미터를 받기 위해서 사용한다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestParam&lt;/code&gt;은 필수 여부가 true 이기 때문에 기본적으로 반드시 해당 파라미터가 전송되어야 한다. &lt;br /&gt;
해당 파라미터가 전송되지 않으면 400 error가 발생한다.  &lt;br /&gt;
반드시 필요한 변수가 아니라면 옵션을 통해 설정해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;requestbody&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;클라이언트가 전송하는 Json(application/json) 형태의 HTTP Body 내용을 Java Object로 변환시켜주는 역할이다.
그래서 Body가 존재하지 않는 Get 메서드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;를 사용하려고 하면 에러가 발생하게 된다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;로 받는 데이터는 Spring에서 관리하는 MessageConverter 중 하나인 &lt;br /&gt;
MappingJackson2HttpMessageConverter를 통해 Java 객체로 변환한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;modelattribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;클라이언트가 전송하는 multipart/form-data 형태의 HTTP Body 내용과 HTTP 파라미터들을 &lt;br /&gt;
Setter을 통해 1 대 1로 객체에 바인딩하기 위해 사용된다.     &lt;br /&gt;
JSON이나 XML과 같은 형태의 데이터를 변환시키는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;와 달리        &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;는 multipart/form-data 형태의 HTTP Body와 HTTP 파라미터들을 매핑시킨다는 차이가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;create-post&quot;&gt;Create Post&lt;/h1&gt;
&lt;p&gt;SNS 개발을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content(String)&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image(MultipartFile)&lt;/code&gt;를 List 형태로 받아야 하는 상황이다.       &lt;br /&gt;
이미지는 AWS S3에 저장하며, 파일 이름과 URL을 DB에 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법-1-사진을-base64로-인코딩하여-json으로-전달&quot;&gt;방법 1: 사진을 Base64로 인코딩하여 JSON으로 전달&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// DTO
public class CreatePostRequest {
	private String content;
	private List&amp;lt;String&amp;gt; images;
}

// Controller
@PostMapping(&quot;/posts&quot;)
public ResponseEntity&amp;lt;Void&amp;gt; create(@ModelAttribute CreatePostRequest request) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Base64로 이미지를 변환하는 경우 최대 33% 까지 파일의 크기가 증대된다.   &lt;br /&gt;
따라서 네트워크 대역 낭비가 심하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring에서 특정 크기 이상의 데이터가 Body에 담기는 경우 요청을 해석하지 못하는 상황이 발생한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법-2-각각의-데이터를-별도로-form으로-전달&quot;&gt;방법 2: 각각의 데이터를 별도로 form으로 전달&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Controller 
@PostMapping(&quot;/posts&quot;)
public ResponseEntity&amp;lt;Void&amp;gt; create(@RequestParam String content, 
                                   @RequestParam List&amp;lt;MultipartFile&amp;gt; images) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체를 form을 이용해 데이터를 전달받고 데이터들을 객체로 매핑하기 위해  &lt;br /&gt;
Spring type convertion을 이용해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List를 받는 경우 데이터의 논리적인 연관을 파악하기 어렵다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법-3-form-데이터를-하나의-객체로-전달&quot;&gt;방법 3: form 데이터를 하나의 객체로 전달&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// DTO 
public class CreatePostRequest {
	private String content;
	private List&amp;lt;MultipartFile&amp;gt; images;
}

// Controller 
@PostMapping(&quot;/posts&quot;)
public ResponseEntity&amp;lt;Void&amp;gt; create(@ModelAttribute CreatePostRequest request) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ModelAttribute&lt;/code&gt;를 사용하여 form data를 객체로 바로 매핑하는 방법이다.     &lt;br /&gt;
데이터 간의 논리적인 연관관계를 표현할 수 있고,   &lt;br /&gt;
Base64와 같이 인코딩 하지 않기 때문에 파일 사이즈가 증대되는 현상도 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-09/post-crud/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-09/post-crud/</guid>
      </item>
    
      <item>
        <title>프로젝트에서 Enum 사용해보기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 프로젝트에서 Enum을 사용할 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;남성/여성&lt;/code&gt;을 표현하기 위해 사용해본 적이 있다. &lt;br /&gt;
JPA 프로젝트에서 enum을 사용하는 방법은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumerated&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Enumerated&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Enumerated&lt;/code&gt; 은 두가지 저장 방법을 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnumType.ORDINAL&lt;/code&gt;: ENUM이 정의된 순서의 인덱스로 DB에 값을 저장       &lt;br /&gt;
Enum에 정의된 순서를 기반으로 인덱스가 만들어지고, DB에 저장되는 방식인데    &lt;br /&gt;
값이 추가될 때 순서가 바뀌면서 데이터를 잘못 가져오는 문제가 발생할 수 있다.           &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnumType.STRING&lt;/code&gt;: ENUM의 이름 자체를 DB에 값으로 저장.    &lt;br /&gt;
Name 값을 그대로 DB에 저장하는 방식인데, Name 값을 변경해야 하는 상황이라면 바뀐 데이터를 처리하는 일이 생기고      &lt;br /&gt;
DB에 데이터를 낭비하면서 넣게 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;converter&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Converter&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;DB에 값을 효율적이게 저장할 수 있는 방법이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Converter&lt;/code&gt; 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Convertor  &lt;br /&gt;
아래와 같은 구조로 사용된다.    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;영속성 컨텍스트 &amp;gt; Convetor &amp;gt; DB&lt;/code&gt;       &lt;br /&gt;
영속성 컨텍스트에 데이터가 들어가고, 실제 디비로 들어가거나 나오기 직전에   &lt;br /&gt;
Convetor 로직이 있다면 돌고 난 후에 DB로 접근하게 되어있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트에 적용한 부분은 다음과 같다.&lt;br /&gt;
좋아요(Like) 기능을 게시글(Post)과 댓글에(Comment) 적용하기 위해   &lt;br /&gt;
Type enum을 만들고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Enumerated&lt;/code&gt; 사용의 문제점을 해결하기 위해  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AttributeConverter&lt;/code&gt;를 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Like&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Entity
public class Like {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Convert(converter = LikeTypeConverter.class)
	private Type type;

	@ManyToOne
	@JoinColumn(name = &quot;user_id&quot;)
	private User user;

	private Long parentId;

	. . .

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public enum Type {
	POST(1), COMMENT(2);

	public int type;

	Type(int type) {
		this.type = type;
	}

	public int toDbValue() {
		return type;
	}

	public static Type from(Integer dbData) {
		return Stream.of(Type.values())
			.filter(x -&amp;gt; x.type == dbData)
			.findFirst()
			.orElseThrow(IllegalArgumentException::new);
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LikeTypeConverter&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Converter
public class LikeTypeConverter implements AttributeConverter&amp;lt;Type, Integer&amp;gt; {

    // DB에 어떤 값이 저장되는지 
	@Override
	public Integer convertToDatabaseColumn(Type attribute) {
		return attribute.toDbValue();
	}
	
    // DB에서 Entity로 값을 넣을 때 어떤 값을 리턴하는지 
	@Override
	public Type convertToEntityAttribute(Integer dbData) {
		return Type.from(dbData);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techblog.woowahan.com/2600/&quot;&gt;https://techblog.woowahan.com/2600/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.yangs.kr/16&quot;&gt;https://tech.yangs.kr/16&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hungrydiver.co.kr/bbs/detail/develop?id=43&quot;&gt;https://hungrydiver.co.kr/bbs/detail/develop?id=43&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 06 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-06/enum-converter/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-06/enum-converter/</guid>
      </item>
    
      <item>
        <title>QueryDSL 사용</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;querydsl-이란&quot;&gt;QueryDsl 이란?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntityManager.find()&lt;/code&gt; 메소드를 사용하면 식별자로 엔티티 하나를 조회할 수 있다.   &lt;br /&gt;
이렇게 조회한 엔티티에 객체 그래프 탐색을 사용하면 연관된 엔티티들을 찾을 수 있다.   &lt;br /&gt;
둘은 가장 단순한 검색 방법이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;식별자로 조회 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntityManager.find()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;객체 그래프 탐색 ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.getB().getC()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현실적으로는 위 기능만으로 개발하기 어렵기 때문에 SQL로 필요한 내용을 최대한 걸러서 조회해야 하는데     &lt;br /&gt;
ORM을 사용하면 데이터베이스 테이블이 아닌 엔티티 객체를 대상으로 개발하므로    &lt;br /&gt;
검색도 테이블이 아닌 엔티티 객체를 대상으로 하는 방법이 필요하다.   &lt;br /&gt;
&lt;strong&gt;JPQL&lt;/strong&gt;이 이런 문제를 해결하기 위해 만들어졌는데 다음과 같은 특징이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테이블이 아닌 객체를 대상으로 검색하는 객체지향 쿼리다.&lt;/li&gt;
  &lt;li&gt;SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SQL이 데이터베이스 테이블을 대상으로 하는 데이터 중심의 쿼리라면 &lt;strong&gt;JPQL은 엔티티 객체를 대상으로 하는 객체지향 쿼리다.&lt;/strong&gt;        &lt;br /&gt;
JPQL을 사용하면 JPA는 이 JPQL을 분석한 다음 적절한 SQL을 만들어 데이터베이스를 조회한다.         &lt;br /&gt;
그리고 조회한 결과로 엔티티 객체를 생성해서 반환한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JPA가 공식 지원하는 기능은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JPQL&lt;/li&gt;
  &lt;li&gt;Criteria 쿼리: JPQL을 편하게 작성하도록 도와주는 API, 빌더 클래스 모음&lt;/li&gt;
  &lt;li&gt;네이티브 SQL: JPA에서 JPQL 대신 직접 SQL을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;QueryDSL: Criteria 쿼리처럼 JPQL을 편하게 작성하도록 도와주는 빌더 클래스 모음, 비표준 오픈소스 프레임워크다.&lt;/li&gt;
  &lt;li&gt;JDBC 직접 사용, MyBatis 같은 SQL 매퍼 프레임워크 사용: 필요하면 JDBC를 직접 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;QueryDSL은 JPQL의 빌더(Criteria) 클래스이다.             &lt;br /&gt;
코드 기반이며 단순하고 사용하기 쉽다는 장점이 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;queryDSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;         
    &lt;span class=&quot;nc&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;          
    
    &lt;span class=&quot;nc&quot;&gt;JPAQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPAQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;QMember&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qMember&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JPQL 병칭 = m         &lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;회원&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;          
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;QueryDSL을 사용하려면 우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.mysema.query.jpa.impl.JPAQuery&lt;/code&gt; 객체를 생성해야 한다.         &lt;br /&gt;
이때 엔티티 매니저를 생성자에 넘겨준다.            &lt;br /&gt;
그리고 사용할 쿼리 타입(Q)을 생성하는데 생성자에는 별칭을 주면 된다.           &lt;br /&gt;
이 별칭은 JPQL에서 별칭으로 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;querydsl-사용하기&quot;&gt;QueryDsl 사용하기&lt;/h1&gt;
&lt;p&gt;Spring Boot 2.3부터 Gradle 6.3 이상을 요구한다.        &lt;br /&gt;
예전에 작성한 코드를 가지고 Spring Boot와 Gradle을 버전업했다.                         &lt;br /&gt;
인텔리제이에서 Querydsl을 이용해서 생성하는 Q클래스를 불러올 수 없다는 경고가 노출된다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;gradle은 프로젝트의 의존성을 관리하고 작성된 코드를 배포 가능한 형태로 가공하는 개발도구다.     &lt;br /&gt;
그리고 그 버전이 매우 빠른 속도로 업데이트 된다. 기능의 변동도 많다.      &lt;br /&gt;
때문에 기존에 작성한 스크립트가 쓸모가 없어지거나 동작하지 않는 등의 상황이 발생한다.     &lt;br /&gt;
gradle 플러그인(&lt;a href=&quot;https://plugins.gradle.org/&quot;&gt;https://plugins.gradle.org/&lt;/a&gt;)을 사용하다보면 그런 상황을 많이 마주하게 된다.&lt;/p&gt;

&lt;p&gt;그 중에 JPA 엔티티 클래스(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.persistence.Entity&lt;/code&gt; 선언클래스)를 가공하여    &lt;br /&gt;
Query와 유사한 작성법으로 사용할 수 있는 Q클래스를 생성하는 Queyrdsl JPA 플러그인이 대표적인 경우다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/querydsl/querydsl&quot;&gt;https://github.com/querydsl/querydsl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration&quot;&gt;http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html#jpa_integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Querydsl JPA는 프로젝트 내에서&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; @Entity&lt;/code&gt; 어노테이션을 선언한 클래스를 탐색하고    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JPAAnnotationProcessor&lt;/code&gt;를 이용하여 Q클래스를 생성한다.   &lt;br /&gt;
생성된 Q클래스는 자바 언어가 가지는 정적코드의 장점을 활용하여 안전한 쿼리문을 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation processor&lt;/code&gt;가 등장하기 이전 그레이들 버전(4.6 이전)에서는   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JPAAnnotationProcessor&lt;/code&gt;의 작동을 정의하는 스크립트를 정의하는 것이 쉽지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;gradle에서 qureydsl를 사용하는 방법은 두가지다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;플러그인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.ewerk.gradle.plugins.querydsl&lt;/code&gt;을 사용&lt;/li&gt;
  &lt;li&gt;annotationProcessor 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;플러그인-comewerkgradlepluginsquerydsl-사용&quot;&gt;플러그인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.ewerk.gradle.plugins.querydsl&lt;/code&gt; 사용&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: &quot;com.ewerk.gradle.plugins.querydsl&quot;

def queryDslDir = &quot;src/main/generated&quot;
querydsl {
    library = &quot;com.querydsl:querydsl-apt:4.2.2&quot; // 사용할 AnnotationProcesoor 정의
    jpa = true
    querydslSourcesDir = queryDslDir
}
sourceSets {
    main {
        java {
            srcDir queryDslDir
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
     // 아래를 지정하지 않으면, compile로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 gradle 플러그인은 2018.7 에 출시된 1.0.10 를 마지막으로 더이상 업데이트가 없다.  &lt;br /&gt;
gradle 4.6 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation Processor&lt;/code&gt; 가 소개되고, &lt;br /&gt;
이를 반영한 gradle 5.X 가 출시됐을 때는 정상적으로 작동하지 않았다. &lt;br /&gt;
그래서 위 스크립트 부분 중 다음 부분이 추가되었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;querydsl-apt 에 있는 AnnotationProcessor 의 경로를 설정해준다. &lt;br /&gt;
그리고 gradle 6.x 에서는 다음 코드를 추가해주면 정상작동한다고 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configurations {
     // 아래를 지정하지 않으면, compile로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;최신버전에서 정상 동작시키려고 뭔가 하나씩 설정을 추가하는 상황이 발생한다.    &lt;br /&gt;
또한 gradle 플러그인은 IntelliJ IDEA 연동에 문제 일으키기 때문에  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation Processor&lt;/code&gt;을 권장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cannot-find-symbol-오류&quot;&gt;Cannot find symbol 오류&lt;/h2&gt;
&lt;p&gt;QueryDSL과 Hibernate/Eclipse Metamodel Generator를 함께 사용할 때   &lt;br /&gt;
아직 생성되지 않은 메타 모델 클래스를 사용하는 코드들 때문에 cannot find symbol 에러가 발생할 수 있는데,   &lt;br /&gt;
이는 이 둘을 서로 따로 생성했을 때 발생하는 현상이다.&lt;/p&gt;

&lt;p&gt;Lombok을 함께 사용할 경우 각 AP가 실행된 뒤에 다시 lombok AP가 돌면서 발생하는 것으로 알고 있는데    &lt;br /&gt;
이 둘을 함께 지정해서 APT를 수행해야 에러가 나지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;annotation-processor-설정-사용&quot;&gt;Annotation Processor 설정 사용&lt;/h2&gt;
&lt;p&gt;gradle 4.6(&lt;a href=&quot;https://docs.gradle.org/4.6/release-notes.html&quot;&gt;https://docs.gradle.org/4.6/release-notes.html&lt;/a&gt;)에서 소개된     &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Annotation processor&lt;/code&gt;는 어노테이션이 선언된 클래스처리를 별도의 프로세서에서 처리하여 성능향상을 꽤했다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def querydslVersion = '4.3.1'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Querydsl
    implementation group: 'com.querydsl', name: 'querydsl-jpa', version: querydslVersion
    implementation group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
    implementation group: 'com.querydsl', name: 'querydsl-core', version: querydslVersion

    annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion
    annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: querydslVersion, classifier: 'jpa'
    annotationProcessor(&quot;jakarta.persistence:jakarta.persistence-api&quot;)
    annotationProcessor(&quot;jakarta.annotation:jakarta.annotation-api&quot;)

    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    testImplementation 'org.assertj:assertj-core:3.15.0'
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/62521275/problem-with-generating-querydsl-classes-with-gradle&quot;&gt;https://stackoverflow.com/questions/62521275/problem-with-generating-querydsl-classes-with-gradle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/372&quot;&gt;https://jojoldu.tistory.com/372&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://honeymon.io/tech/2020/07/09/gradle-annotation-processor-with-querydsl.html&quot;&gt;http://honeymon.io/tech/2020/07/09/gradle-annotation-processor-with-querydsl.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kangwoojin.github.io/programing/query-dsl-setting-3/&quot;&gt;https://kangwoojin.github.io/programing/query-dsl-setting-3/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 02 Aug 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-08-02/querydsl/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-08-02/querydsl/</guid>
      </item>
    
      <item>
        <title>Gradle 사용</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;gradle-사용법&quot;&gt;gradle 사용법&lt;/h1&gt;
&lt;p&gt;Spring 프로젝트를 만들고보니 build.gradle 파일에 다음과 같은 간단한 코드가 들어있었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins {
	id 'org.springframework.boot' version '2.4.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트에 필요한 설정을 해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;         &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;플러그인-의존성-관리를-위한-설정&quot;&gt;플러그인 의존성 관리를 위한 설정&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {
	ext {
		springBootVersion = '2.4.2-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ext 라는 키워드는 build.gradle에서 사용하는 전역변수를 설정하겠다는 의미로       &lt;br /&gt;
springBootVersion 전역변수를 생성하고 그 값을 ‘2.4.2-SNAPSHOT’로 설정한 것이다.                                         &lt;br /&gt;
즉 spring-boot-gradle-plugin라는 스프링 부트 그레들 플러그인의 2.4.2-SNAPSHOT를 의존성으로 받겠다는 의미이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;플러그인-의존성들을-적용할-것인지-결정&quot;&gt;플러그인 의존성들을 적용할 것인지 결정&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'java'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.spring.dependency-management&lt;/code&gt; 플러그인은 스프링 부트의 의존성들을 관리해 주는 플러그인이라 꼭 추가해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;각종-의존성라이브러리들을-어떤-원격-저장소에서-받을지&quot;&gt;각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;repositories {
    mavenCentral()
    jcenter()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적으로 mavenCentral을 많이 사용하지만, 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용한다. &lt;br /&gt;
jcenter에 라이브러리를 업로드하면 mavenCentral에도 업로드될 수 있도록 자동화를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로젝트-개발에-필요한-의존성들을-선언&quot;&gt;프로젝트 개발에 필요한 의존성들을 선언&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 버전을 명시하면 안됩니다. 버전을 명시하지 않아야만 맨 위에 작성한   &lt;br /&gt;
‘org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}’의 버전을 따라가게 된다.&lt;/p&gt;

&lt;p&gt;이렇게 관리할 경우 각 라이브러리들의 버전 관리가 한 곳에 집중되고, 버전 충돌 문제도 해결되어 편하게 개발을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;implementation을 사용한 이유는 공식 문서와 구글링을 참고했고, 간단하게 요약해보면 다음과 같은 이유이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation을-사용한-이유&quot;&gt;implementation을 사용한 이유&lt;/h1&gt;

&lt;h3 id=&quot;1-의존성-옵션&quot;&gt;(1) 의존성 옵션&lt;/h3&gt;
&lt;p&gt;gradle 프로젝트는 여러 모듈을 포함할 수 있고 하나의 모듈은 다른 모듈을 의존할 수 있다.     &lt;br /&gt;
모듈이 커지면 빌드 시간이 오래 걸리고 여러 모듈이 많이 얽혀 있을수록 빌드 시간이 오래 걸린다.&lt;/p&gt;

&lt;p&gt;Gradle 3.0 부터 의존 라이브러리 수정 시 재빌드가 필요한 라이브러리를 선택적으로 할 수 있도록        &lt;br /&gt;
compile 대신 api 와 implementation 으로 나눠 필요없는 경우 재빌드 하지 않도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-api와-implementation-차이&quot;&gt;(2) api와 implementation 차이&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;api : 의존 라이브러리 수정 시 본 모듈을 의존하고 있는 모듈들 또한 재빌드       &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A(api) &amp;lt;- B &amp;lt;- C&lt;/code&gt; 의 경우 C에서 A를 접근할 수 있음           &lt;br /&gt;
A 수정 시 B와 C 모두 재빌드   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;implementation: 의존 라이브러리 수정 시 본 모듈까지만 재빌드      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A(implementation) &amp;lt;- B &amp;lt;- C&lt;/code&gt; 의 경우 C에서 A를 접근할 수 없음     &lt;br /&gt;
A 수정 시 B까지 재빌드&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;implementation은 dependency 가 compile classpath 에 들어가지 않아서
transitive dependency 를 실수로 depend 하지 않는다.        &lt;br /&gt;
더 빠른 compile 이 가능하고, dependency change 가 발생했을 때 recompile 을 적게 한다. 쉬운 배포가 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-의존성-옵션들&quot;&gt;(3) 의존성 옵션들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;implementation    &lt;br /&gt;
의존 라이브러리 수정시 본 모듈까지만 재빌드      &lt;br /&gt;
본 모듈을 의존하는 모듈은 해당 라이브러리의 api 를 사용할 수 없음  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;api&lt;br /&gt;
의존 라이브러리 수정시 본 모듈을 의존하는 모듈들도 재빌드  &lt;br /&gt;
본 모듈을 의존하는 모듈들도 해당 라이브러리의 api 를 사용할 수 있음 &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;compileOnly  &lt;br /&gt;
compile 시에만 빌드하고 빌드 결과물에는 포함하지 않음    &lt;br /&gt;
runtime 시 필요없는 라이브러리인 경우 (runtime 환경에 이미 라이브러리가 제공되고 있는가 하는 등의 경우)   &lt;br /&gt;
참고: &lt;a href=&quot;https://blog.gradle.org/introducing-compile-only-dependencies&quot;&gt;https://blog.gradle.org/introducing-compile-only-dependencies&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;runtimeOnly  &lt;br /&gt;
runtime 시에만 필요한 라이브러리인 경우  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;annotationProcessor &lt;br /&gt;
annotation processor 명시 (gradle 4.6)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-31/gradle/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-31/gradle/</guid>
      </item>
    
      <item>
        <title>DbSchema 사용하기</title>
        <description>&lt;p&gt;Dbschema는 Java 기반의 ERD 설계툴이다.    &lt;br /&gt;
설계한 ERD를 HTML5로 생성하는 기능이 있으므로   &lt;br /&gt;
프로그램이 없는 곳에서도 브라우저만 있으면 ERD를 리뷰할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dbschema.com/&quot;&gt;https://dbschema.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;MySQL Workbench나 DataGrip을 사용해봤기 때문에 사용법이 어렵지는 않았다.&lt;/p&gt;

&lt;p&gt;다음과 같이 ERD를 그리면 프로젝트 진행 중 관리하기 쉽게 DDL을 출력할 수 있고 &lt;br /&gt;
html로 파일 생성, 공유가 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;975&quot; alt=&quot;스크린샷 2021-07-31 오후 2 44 47&quot; src=&quot;https://user-images.githubusercontent.com/33855307/127730664-c492f9a5-bccc-4311-b3aa-d13e849d73ac.png&quot; /&gt;
&lt;img width=&quot;1787&quot; alt=&quot;스크린샷 2021-07-31 오후 3 11 11&quot; src=&quot;https://user-images.githubusercontent.com/33855307/127730668-de2ffd22-6031-441c-b47f-f5c1c479d7f5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아직 완벽하게 마무리한 테이블 설계는 아니지만, Dbschema를 사용하여 설계해봤고 &lt;br /&gt;
추후 기능을 확실하게 정하면 수정할 예정이다.  🏃🏻‍♀️&lt;/p&gt;

</description>
        <pubDate>Sat, 31 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-31/dbschema/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-31/dbschema/</guid>
      </item>
    
      <item>
        <title>Git-flow 란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/127602165-ac0ce9e1-fa18-46c0-8345-68e63865ef9e.png&quot; alt=&quot;git-flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;많은 사람들이 프로젝트에서 git flow를 사용했다고 소개한다.    &lt;br /&gt;
정확히 어떤 것인지 알고 사용해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;git-flow-란&quot;&gt;Git-flow 란?&lt;/h1&gt;
&lt;p&gt;Git으로 개발할 때 사용되는 방법론으로 완벽하게 따라할 필요는 없고   &lt;br /&gt;
각자 개발 환경에 따라 변형해서 사용하면 된다.&lt;/p&gt;

&lt;p&gt;5가지의 브랜치를 사용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;master : 기준이 되는 브랜치로 제품을 배포&lt;/li&gt;
  &lt;li&gt;develop : 개발 브랜치로 개발자들이 이 브랜치를 기준으로 각자 작업한 기능들을 합칩니다. (Merge)&lt;/li&gt;
  &lt;li&gt;feature : 단위 기능을 개발하는 브랜치 (develop으로 merge)&lt;/li&gt;
  &lt;li&gt;release : 배포를 위해 master 브랜치로 보내기 전에 먼저 QA(품질검사)&lt;/li&gt;
  &lt;li&gt;hotfix : master 브랜치로 배포 후 버그가 생겼을 때 수정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;intellij-에서-git-flow&quot;&gt;IntelliJ 에서 Git-flow&lt;/h1&gt;

&lt;h3 id=&quot;1-git-flow-설치&quot;&gt;1. git-flow 설치&lt;/h3&gt;

&lt;p&gt;brew로 git flow avh를 설치했다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install git-flow-avh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;처음에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install git-flow&lt;/code&gt;로 git-flow를 설치하니 버전이 0.4.1이라 안된다는 메시지가 떴다.   &lt;br /&gt;
찾아보니 git-flow-avh를 설치하라는 가이드가 나오는데 설치하고보니 다음과 같은 차이가 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;git flow   &lt;br /&gt;
hotfix를 dev와 master에 각각 merge를 한다.   &lt;br /&gt;
(즉, 가지가 hotfix하나에서 dev와 master branch로 두갈래 나뉘어진다.)   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git flow avh  &lt;br /&gt;
hotfix가 dev branch로 merge되고, hotfix가 merge된 dev branch를 master branch에 머지한다.    &lt;br /&gt;
즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix &amp;gt; dev &amp;gt; master&lt;/code&gt; 순이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-git-flow-init-에러-해결&quot;&gt;2. git flow init 에러 해결&lt;/h3&gt;

&lt;p&gt;현재 git flow avh를 설치하니 git flow 버전은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.12.3&lt;/code&gt; 이다.     &lt;br /&gt;
git flow init 시에 에러가 발생했는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitflow_export&lt;/code&gt; 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAGS_GET_OPT_CMD&lt;/code&gt; 환경 변수가 있는 것이 원인이었다.     &lt;br /&gt;
삭제 후에 정상적으로 작동한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;issue: &lt;a href=&quot;https://github.com/fork-dev/Tracker/issues/418&quot;&gt;https://github.com/fork-dev/Tracker/issues/418&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Post installation setup: &lt;a href=&quot;https://github.com/petervanderdoes/gitflow-avh/wiki/Installing-on-Mac-OS-X#post-installation-setup&quot;&gt;https://github.com/petervanderdoes/gitflow-avh/wiki/Installing-on-Mac-OS-X#post-installation-setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-intellij-플러그인-사용하기&quot;&gt;3. IntelliJ 플러그인 사용하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7315-git-flow-integration&quot;&gt;git-flow-integration&lt;/a&gt; 플러그인을 사용하자.  &lt;br /&gt;
플러그인 설치 후, 오른쪽 하단에 Gitflow가 생긴다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Init Repo&lt;/code&gt; 클릭 후, 설정하면 된다.    &lt;br /&gt;
기본 옵션은 Git Flow 규칙을 따르기 때문에 기본 규칙을 따른다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;를 클릭하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/127607349-377ccec5-b666-42fd-a674-688a77e2fbc6.png&quot; alt=&quot;스크린샷 2021-07-30 오후 2 27 11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;316&quot; alt=&quot;스크린샷 2021-08-01 오후 2 20 18&quot; src=&quot;https://user-images.githubusercontent.com/33855307/127760133-f96e1642-07af-4794-a302-30d306c6f4b7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;develop을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;163&quot; alt=&quot;스크린샷 2021-08-01 오후 3 42 58&quot; src=&quot;https://user-images.githubusercontent.com/33855307/127761924-12982227-a618-4d18-b458-e95f9169be94.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞에서 봤던 feature, release 등을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-30/gitflow/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-30/gitflow/</guid>
      </item>
    
      <item>
        <title>Session은 어떻게 작동할까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;질문&quot;&gt;질문&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;유튜버 개발바닥의 기술면접 대표 질문 3가지: &lt;a href=&quot;https://youtu.be/3ArYMq5AomI&quot;&gt;https://youtu.be/3ArYMq5AomI&lt;/a&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요즘 개발서적 외에 유튜브로도 가끔 개발 관련 영상을 보는데  &lt;br /&gt;
위 영상의 질문이 좋아 정리해야겠다는 생각이 들었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HttpSession.getAttribute(&quot;user&quot;);

사용자 A가 접속해도 &quot;user&quot;를 key로 가져오고 
사용자 B가 접속해도 &quot;user&quot;를 key로 가져온다.   
같은 key를 쓰는데 어떻게 A와 B를 구분해서 값을 가져올까?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;답변&quot;&gt;답변&lt;/h2&gt;
&lt;p&gt;session은 각 클라이언트마다 하나씩 생성되어 제공합니다.  &lt;br /&gt;
그래서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpSession.getAttribute(&quot;user&quot;)&lt;/code&gt;는 서로 다른 값을 리턴합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그럼-왜-session은-각-클라이언트마다-하나씩-생성될까&quot;&gt;그럼 왜 session은 각 클라이언트마다 하나씩 생성될까?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP 특성: &lt;a href=&quot;https://hyerin6.github.io/2021-07-23/restfulapi/&quot;&gt;https://hyerin6.github.io/2021-07-23/restfulapi/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Session 특성: &lt;a href=&quot;https://hyerin6.github.io/2020-02-06/session/&quot;&gt;https://hyerin6.github.io/2020-02-06/session/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cookie 특성: &lt;a href=&quot;https://hyerin6.github.io/2020-02-06/cookie/&quot;&gt;https://hyerin6.github.io/2020-02-06/cookie/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP 특성&lt;/strong&gt;  &lt;br /&gt;
(1) Stateless(무상태) 프로토콜이다.     &lt;br /&gt;
(2) 클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어진다. &lt;br /&gt;
(3) 클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다.&lt;br /&gt;
(4) 클라이언트와 서버는 서로 상태를 유지하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session 특성&lt;/strong&gt;  &lt;br /&gt;
(1) 클라이언트가 처음 서버에 연결을 하면 어떤 하나의 SessionID가 생성된다. &lt;br /&gt;
(2) SessionID는 고유한 ID이다. &lt;br /&gt;
(3) 이 ID를 통해 서버는 클라이언트를 구분하고 요청에 대한 응답을 한다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉 식별할 수 있는 고유한 값이 없다면 서버는 요청에 대한 응답을 내릴 수가 없을 것이다.    &lt;br /&gt;
때문에 세션에서는 식별이 가능한 고유 값을 생성하고 서버는 그 값으로 사용자를 구분합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-26/session-how-do-they-work/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-26/session-how-do-they-work/</guid>
      </item>
    
      <item>
        <title>Web Server vs. Web Application Server</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;static-pages&quot;&gt;Static Pages&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126870006-00b0a463-1db2-414e-8d91-0408ad12ceb5.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-24-22-32-06 001&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1️⃣   GET &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/index.html&lt;/code&gt;      &lt;br /&gt;
2️⃣   READ(DB에서 읽기) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/index.html&lt;/code&gt;     &lt;br /&gt;
3️⃣   {file contents}  &lt;br /&gt;
4️⃣   STATUS(응답) {file contents}&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;web server는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;항상 동일한 페이지를 반환한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;image, html, css, javascript&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;          &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dynamic-pages&quot;&gt;Dynamic Pages&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126870005-c825dcaa-d39b-46e5-8b8a-b75837d344c2.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-24-22-32-07 002&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1️⃣   GET &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src/servlet?uid=Alice&lt;/code&gt; STATUS Response &lt;strong&gt;Alice&lt;/strong&gt;    &lt;br /&gt;
2️⃣   GET &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src/servlet?uid=Bob&lt;/code&gt; STATUS Response &lt;strong&gt;Bob&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인자의 내용에 맞게 동적인 contetns를 반환한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물   &lt;br /&gt;
Servlet: WAS 위에서 돌아가는 Java Program&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개발자는 Servlet에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt;을 구현한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;web-server와-was-차이&quot;&gt;Web Server와 WAS 차이&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126870004-f24254b3-ff05-4437-8ae8-44ac28f0028b.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-24-22-32-07 003&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-server&quot;&gt;Web Server&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어와 하드웨어로 구분된다.&lt;/li&gt;
  &lt;li&gt;HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스 하는 기능을 담당한다.  &lt;br /&gt;
요청에 따라 두 가지 기능 중 적절하게 선택하여 수행
    &lt;ul&gt;
      &lt;li&gt;정적인 컨텐츠 제공, WAS를 거치지 않고 바로 자원을 제공&lt;/li&gt;
      &lt;li&gt;동적인 컨텐츠 제공, 클라이언트의 요청을 WAS에 보내고 WAS에서 처리한 결과를 클라이언트에게 전달&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예) Apache Server, Nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wasweb-application-server&quot;&gt;WAS(Web Application Server)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server&lt;/li&gt;
  &lt;li&gt;HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들워에(소프트웨어 엔진)이다.&lt;/li&gt;
  &lt;li&gt;웹 컨테이너 혹은 서블릿 컨테이너 라고도 부른다.&lt;/li&gt;
  &lt;li&gt;컨테이너란 JSP, Servlet을 실행시킬 수 있는 소프트웨어를 말한다.&lt;/li&gt;
  &lt;li&gt;WAS는 JSP, Servlet 구동 환경을 제공한다.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAS = Web Server + Web Container&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;프로그램 실행 환경, DB 접속 기능 제공, 트랜잭션 관리 기능, 비즈니스 로직 수행&lt;/li&gt;
  &lt;li&gt;예) Tomcat, Jeus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;web-server와-was를-구분하는-이유&quot;&gt;Web Server와 WAS를 구분하는 이유&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Web Server를 통해 정적인 파일들을 Application Server까지 가지 않고 앞단에서 빠르게 보내줄 수 있다.&lt;br /&gt;
Web Server에서는 정적 컨텐츠만 처리하도록 기능을 분배하여 서버의 부담을 줄일 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Web Server만을 이용한다면 사용자가 원하는 요청에 대한 결과값을 모두 미리 만들어 놓고 서비스를 해야 한다.&lt;br /&gt;
하지만 이렇게 수행하기에는 자원이 절대적으로 부족하다.&lt;br /&gt;
따라서 WAS를 통해 요청에 맞는 데이터를 DB에서 가져와서 비즈니스 로직에 맞게 &lt;br /&gt;
그때 그때 결과를 만들어서 제공함으로써 자원을 효율적으로 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;was만-사용하지-않는-이유는&quot;&gt;WAS만 사용하지 않는 이유는?&lt;/h1&gt;
&lt;p&gt;자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 Web Server와 WAS를 분리한다.&lt;br /&gt;
Web Server를 WAS 앞에 두고 필요한 WAS들을 Web Server에 플러그인 형태로 설정하면 더욱 효율적인 분산 처리가 가능하다.&lt;br /&gt;
자세한 이점은 다음과 같다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;기능을-분리하여-서버-부하-방지&quot;&gt;기능을 분리하여 서버 부하 방지&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;WAS는 DB 조회나 다양한 로직을 처리하느라 바쁘기 때문에   &lt;br /&gt;
단순한 정적 컨텐츠는 WS에서 빠르게 클라이언트에게 제공하는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;WAS는 기본적으로 동적인 컨텐츠를 제공하기 위해 존재하는 서버다.&lt;/li&gt;
  &lt;li&gt;정적 컨텐츠 요청까지 WAS가 처리한다면 정적 데이터 처리로 인해 부하가 커지고,   &lt;br /&gt;
동적 컨텐츠 처리가 지연됨에 따라 수행 속도가 느려진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;물리적으로-분리하여-보안-강화&quot;&gt;물리적으로 분리하여 보안 강화&lt;/h3&gt;
&lt;p&gt;SSL에 대한 암복호화 처리에 WS를 사용&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;여러-대의-was를-연결-가능&quot;&gt;여러 대의 WAS를 연결 가능&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Load Balancing을 위해서 WS 사용&lt;/li&gt;
  &lt;li&gt;fail over (장애 극복), fail back 처리에 유리&lt;/li&gt;
  &lt;li&gt;대용량 웹 애플리케이션의 경우(여러 서버 사용) WS와 WAS를 분리하여  &lt;br /&gt;
무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다.&lt;/li&gt;
  &lt;li&gt;예) 앞 단의 WS에서 오류가 발생한 WAS를 이용하지 못하도록 한 후   &lt;br /&gt;
WAS를 재시작함으로써 사용자는 오류를 느끼지 못하고 이용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;여러-웹-애플리케이션-서비스&quot;&gt;여러 웹 애플리케이션 서비스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 서버에 PHP Application과 Java Application 함께 사용 가능&lt;/li&gt;
  &lt;li&gt;접근 허용 IP 관리&lt;/li&gt;
  &lt;li&gt;2대 이상의 서버에서의 세션 관리도 WS에서 처리하면 효율적이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html&quot;&gt;https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&quot;&gt;https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/10/28/servlet.html&quot;&gt;https://gmlwjd9405.github.io/2018/10/28/servlet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-24/ws-was/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-24/ws-was/</guid>
      </item>
    
      <item>
        <title>모놀리틱 서비스 vs. 마이크로 서비스</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;969&quot; alt=&quot;스크린샷 2021-07-23 오전 12 53 28&quot; src=&quot;https://user-images.githubusercontent.com/33855307/126669659-5b7165bc-ee83-4554-bf97-05421e72306d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;모놀리틱-아키텍처-monolithic-architecture&quot;&gt;모놀리틱 아키텍처 (Monolithic Architecture)&lt;/h1&gt;
&lt;p&gt;모놀리틱 아키텍처는 비즈니스 로직, DB, UI 등을 하나의 패키지에 담아 빌드하고 배포하는 아키텍처다. &lt;br /&gt;
빠르고 쉽게 서비스를 구성할 수 있어 적은 비용으로 서비스 출시가 가능하다는 장점이 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;모놀리틱-아키텍처의-한계&quot;&gt;모놀리틱 아키텍처의 한계&lt;/h3&gt;
&lt;p&gt;코드가 많아지고 복잡해짐에 따라 모놀리틱의 아키텍처의 한계점이 드러난다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;부분장애가 전체 서비스의 장애로 확대될 수 있다.&lt;/li&gt;
  &lt;li&gt;소스 코드의 수정이 어렵다.   &lt;br /&gt;
여러 컴포넌트가 하나의 서비스에 강하게 결합되어 있기 때문에 서비스 수정에 대한 영향도 파악이 어렵다.&lt;/li&gt;
  &lt;li&gt;한 프레임워크와 언어에 종속적이다.&lt;/li&gt;
  &lt;li&gt;부분적인 Scale-out이 어렵다. &lt;br /&gt;
과하게 사용되지 않는 다른 모든 서비스가 Scale-out되어야 하기때문에 Scale-out이 어렵다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;새로운-아키텍처의-필요성&quot;&gt;새로운 아키텍처의 필요성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;코드 주소의 독립성&lt;/li&gt;
  &lt;li&gt;기능별 분산된 구조&lt;/li&gt;
  &lt;li&gt;기능별 최적화도니 기술 적용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;마이크로-서비스-아키텍처-microservices-architecture&quot;&gt;마이크로 서비스 아키텍처 (Microservices Architecture)&lt;/h1&gt;
&lt;p&gt;마이크로 서비스 아키텍처는 하나의 큰 애플리케이션을 &lt;br /&gt;
여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처다.&lt;/p&gt;

&lt;p&gt;애플리케이션을 핵심기능 별로 세분화하고 각 기능을 서비스라고 부르며, &lt;br /&gt;
독립적으로 구축하고 배포할 수 있다.&lt;/p&gt;

&lt;p&gt;서비스는 각 별도의 프로세스에서 실행되며, HTTP 자원 API 같은 가벼운 매커니즘으로 통신한다. &lt;br /&gt;
💡   독립적인 배포, 다른 프로그래밍 언어나 다른 DB 사용 가능&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;msa는-언제-적용할까&quot;&gt;MSA는 언제 적용할까?&lt;/h3&gt;
&lt;p&gt;MSA는 어느정도 트래픽이 나오고 큰 규모의 서비스에 사용해야 한다. &lt;br /&gt;
어느 정도 규모가 있어야 유지보수 비용이 줄어들기 때문에 모든 프로젝트에 MSA가 적합하다고 할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;부하가 집중되는 특정 서비스를 자원을 할당해 스케일 아웃할 수 있어 효율적인 자원 사용이 가능하다.&lt;/li&gt;
  &lt;li&gt;서비스의 변경이 다른 서비스에 영향을 미칠 가능성이 적다.&lt;/li&gt;
  &lt;li&gt;서비스 단위로 독립적인 배포가 가능하다.&lt;/li&gt;
  &lt;li&gt;시스템의 아키텍처가 개발 조직과 나아가 회사 조직 문화에 큰 영향을 미치는데,
    &lt;ul&gt;
      &lt;li&gt;특정 서비스의 개선과 수정 작업이 다른 서비스의 이해 당사자들과 독립적으로 진행될 수 있다.&lt;/li&gt;
      &lt;li&gt;의사결정이 빠르고, 독립적인 테스트의 구축이 용이해 품질이 증가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 간의 통신에 대한 처리가 추가적으로 필요하다.&lt;/li&gt;
  &lt;li&gt;공유 자원 접근이 어렵다.&lt;/li&gt;
  &lt;li&gt;배포와 실행이 복잡하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;msa의-원칙&quot;&gt;MSA의 원칙&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 하나에 책임도 하나   &lt;br /&gt;
하나의 단위 요소가 여러 개의 책임을 가지면 결국 다른 요소들과 높은 결합도를 형성하게 됩니다. &lt;br /&gt;
이러한 단일 책임 원칙이 서비스 차원에도 적용해야 한다는 것입니다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마이크로서비스는 자율적    &lt;br /&gt;
마이크로서비스는 자기 완비적으로 독립적으로 배포할 수 있으며,   &lt;br /&gt;
자율적인 서비스로서 비즈니스의 범위와 실행에 대해 전적인 책임을 져야합니다.   &lt;br /&gt;
마이크로서비스는 라이브러리 의존성을 포함한 모든 의존 관계와   &lt;br /&gt;
웹서버나 컨테이너 또는 물리적인 차원을 추상화하는 가상머신을 모두 함께 갖고 있어야합니다.   &lt;br /&gt;
대표적인 예로 Spring Boot의 flatJar 방식, 내장형 서버가 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;msa에-필요한-기술&quot;&gt;MSA에 필요한 기술&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;REST
각 서비스들은 대체로 REST API와 같이 가벼운 프로토콜을 이용하여 통신한다.      &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;br /&gt;
각 서비스들이 서로를 직접 호출하는 것이 아니라, API Gateway를 거쳐 통신하도록 한다.   &lt;br /&gt;
API Gateway는 부하를 분산시키는 로드 밸런싱, 캐싱, API 미터링, 모니터링 등 다양한 기능을 수행한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;VM/Docker(K8s)  &lt;br /&gt;
각 서비스들은 편리한 배포 및 확장을 위하여 가상 머신이나 Docker 컨테이너 상에서 동작한다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 기술은 다른 포스트에서 자세하게 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/coupang-tech/%ED%96%89%EB%B3%B5%EC%9D%84-%EC%B0%BE%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9A%B0%EB%A6%AC%EC%9D%98-%EC%97%AC%EC%A0%95-94678fe9eb61&quot;&gt;쿠팡 테크 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/blog/introduction-to-microservices/&quot;&gt;nginx microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guruble.com/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4microservice-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AD%A3%EC%9D%B4-%EC%A4%91%ED%97%8C%EB%94%94/&quot;&gt;guruble 블로그&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dongwooklee96.github.io/post/2021/03/27/soa-%EB%AA%A8%EB%86%80%EB%A6%AC%ED%8B%B1-%EA%B7%B8%EB%A6%AC%EA%B3%A0-msa-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/&quot;&gt;이동욱님 개발 블로그: soa/모놀리틱/msa 아키텍처&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-24/msa/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-24/msa/</guid>
      </item>
    
      <item>
        <title>Token 인증 방식이 생긴 이유</title>
        <description>&lt;p&gt;Session 인증 방식은 공부해보기 전에도 많이 들었고 많이 사용하기 때문에 익숙하다.     &lt;br /&gt;
그런데 왜 Token 방식이 생겼을까? 어떤 차이가 있는지 알아보기로 했다.&lt;/p&gt;

&lt;p&gt;session, cookie, token을 학습하며 자주 마주치는&lt;br /&gt;
CORS, XSS, CSRF도 간단하게 알아보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stateless한-http&quot;&gt;Stateless한 HTTP&lt;/h1&gt;
&lt;p&gt;HTTP는 stateless한 특성을 가지고 있어 각 통신의 상태는 저장되지 않는다.   &lt;br /&gt;
즉 매번 새 페이지를 요청할 때마다 로그인을 해야 한다는 것인데, 이렇게 되면 사용자는 매우 불편해진다.&lt;/p&gt;

&lt;p&gt;이 문제를 해결하기 위한 대표적인 도구가 바로 세션(Session)과 토큰(Token)이다.&lt;br /&gt;
세션과 토큰 모두 존재 목적은 거의 같지만 차이점은 많다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;세션-기반-인증-session-cookie&quot;&gt;세션 기반 인증 (Session, Cookie)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126797627-b2c53bcc-e353-417b-9bb7-2aa8adef4834.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-23-23-33-31 001&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;토큰-기반-인증&quot;&gt;토큰 기반 인증&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126797619-e9645816-ff93-462f-bd97-12170fe29ae9.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-23-23-33-31 002&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;corscross-origin-resource-sharing&quot;&gt;CORS(Cross-Origin Resource Sharing)&lt;/h1&gt;
&lt;p&gt;CORS는 보안 기능이다.    &lt;br /&gt;
CORS가 도메인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;website.com&lt;/code&gt;에서 사용 가능한 서버에서 구성되면,  &lt;br /&gt;
리소스는 AJAX를 통해 동일한 도메인에서 제공되는 주소에서 시작되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain-b.com&lt;/code&gt;에서 CORS를 활성화하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain-b.com&lt;/code&gt;의 GET 요청만 허용하도록 구성한 경우,   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain-a.com&lt;/code&gt;에 호스팅된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://domain-b.com/images/test.png&lt;/code&gt; 이미지를 이용하려고 할 때   &lt;br /&gt;
대부분의 방문자에게 해당 이미지가 로드되지 않는다.&lt;/p&gt;

&lt;p&gt;브라우저는 origin URL을 담고 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;이라는 요청헤더를 더해준다.   &lt;br /&gt;
서버는 이때 반드시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;이라는 응답헤더로 답해줘야한다.     &lt;br /&gt;
해당 응답헤더의 값은 반드시 origin 요청헤더의 값과 같거나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;(모든 URL이 괜찮다는 것을 의미함)이어야한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;xsscross-site-scripting&quot;&gt;XSS(Cross Site Scripting)&lt;/h1&gt;
&lt;p&gt;xss는 주입식 공격이다. &lt;br /&gt;
공격자가 악의적인 스크립트를 신뢰할 수 있는 웹사이트에 삽입하는 방법의 공격이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;csrfcross-site-request-forgery&quot;&gt;CSRF(Cross Site Request Forgery)&lt;/h1&gt;
&lt;p&gt;CSRF는 악의적인 웹사이트, 전자 메일, 블로그, 인스턴트 메시지 또는 프로그램으로 인해  &lt;br /&gt;
사용자의 웹 브라우저가 사용자가 인증 된 다른 신뢰할 수 있는 사이트에서 원치 않는 작업을 수행 할 때 발생하는 공격 유형이다.&lt;/p&gt;

&lt;p&gt;이 취약점은 브라우저가 세션 쿠키, IP주소 또는 각 요청과 유사한 인증 리소스를 자동으로 보내는 경우에 발생 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-23/session-token/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-23/session-token/</guid>
      </item>
    
      <item>
        <title>HTTP API vs. RESTful API</title>
        <description>&lt;p&gt;API, REST, REST API, RESTful API, HTTP, URL, URI, URN…    &lt;br /&gt;
개발하면서 많은 키워드들을 보게 되는데 정확히 어떤 의미인지 정리해보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;api&quot;&gt;API&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;예) 
나 - 리모컨 - 에어컨
손님 - 점원 - 요리사 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 API는 리모컨과 점원이라고 할 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API는 응용 프로그램(애플리케이션)에서 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 의미한다.  &lt;br /&gt;
즉 API는 애플리케이션과 운영체제, 애플리케이션과 프로그래밍 언어가 제공하는 기능 사이의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;상호작용&lt;/code&gt;을 도와준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rest-representational-state-transfer&quot;&gt;REST (Representational State Transfer)&lt;/h1&gt;
&lt;p&gt;REST는 자원을 이름으로 구분, 해당 자원의 상태를 주고 받는 것을 의미한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http uri를 통해 자원을 명시한다.&lt;/li&gt;
  &lt;li&gt;http method를 통해 해당 자원에 대한 CURD 연상을 적용하는 것을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rest-구성-요소&quot;&gt;REST 구성 요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자원(resource): HTTP URI&lt;/li&gt;
  &lt;li&gt;자원에 대한 행위: HTTP Method&lt;/li&gt;
  &lt;li&gt;자원에 대한 행위의 내용: HTTP Message Pay Load&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rest-특징&quot;&gt;REST 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;server-client 구조&lt;/li&gt;
  &lt;li&gt;stateless (무상태)&lt;/li&gt;
  &lt;li&gt;cacheable (캐시 처리 기능)&lt;/li&gt;
  &lt;li&gt;Layered system (계층화)&lt;/li&gt;
  &lt;li&gt;uniform interface (인터페이스 일관성)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rest-api&quot;&gt;REST API&lt;/h1&gt;
&lt;p&gt;REST의 원리를 따르는 API를 의미한다. &lt;br /&gt;
리소스에 대한 행위를 http method로 정의하는 방식이다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://hyerin.com/run&lt;/code&gt; 명사 사용, 마지막에 슬래시(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) ❌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://hyerin.com/test-blog&lt;/code&gt; 언더바(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;) ❌, 하이픈(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;) 🆗&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://hyerin.com/photo.png&lt;/code&gt; ➡️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/photo&lt;/code&gt; 파일 확장자는 URI에 포함되지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://hyerin.com/post/1&lt;/code&gt; 행위를 포함하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;restful-api&quot;&gt;RESTful API&lt;/h1&gt;
&lt;p&gt;REST API 설계 가이드를 따라 API를 만드는 것이다.  &lt;br /&gt;
RESTful API 자체만으로 API의 목적이 무엇인지 쉽게 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP&lt;/h1&gt;
&lt;p&gt;하이퍼텍스트(html) 문서를 교환하기 위해 만들어진 프로토콜이다.  &lt;br /&gt;
윕상에서 네트워크로 서버끼리 통신할 때 어떠한 형식으로 서로 통신하자고 규정해 놓은 통신구조라고 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;비연결성-connectionless&quot;&gt;비연결성 (Connectionless)&lt;/h3&gt;
&lt;p&gt;비연결성은 클라이언트와 서버가 한 번 연결을 맺은 후, &lt;br /&gt;
클라이언트 요청에 대해 서버가 응답을 마치면 연결을 끊어버리는 성징을 말한다.&lt;/p&gt;

&lt;p&gt;http 프로토콜은 왜 한 번 맺은 연결을 끊을까?&lt;br /&gt;
http는 인터넷 상에서 불특정 다수의 통신 환경을 기반으로 설계되었다.  &lt;br /&gt;
만약 서버에서 다수의 클라이언트와 연결을 계속 유지해야 한다면 많은 리소스가 발생한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점)&lt;/strong&gt; 연결을 유지하기 위한 리소스를 줄이면 더 많은 연결을 할 수 있으므로 비연결적인 특징을 갖고 있다. &lt;br /&gt;
&lt;strong&gt;단점)&lt;/strong&gt; 그러나 서버는 클라이언트를 기억하고 있지 않으므로 동일한 클라이언트의 모든 요청에 대해 &lt;br /&gt;
매번 새로운 연결을 연결/해제 해야 하므로 오버헤드가 발생한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;keepAlive&lt;/strong&gt;&lt;br /&gt;
오버헤드에 대한 해결책으로 http의 keepAlive 속성을 사용할 수 있다.  &lt;br /&gt;
keepAlive는 지정된 시간동안 서버와 클라이언트 사이에서 패킷 교환이 없을 경우,  &lt;br /&gt;
상대방에게 안부를 묻기 위해 패킷을 주기적으로 보내는데 패킷에 반응이 없으면 접속을 끊는다.    &lt;br /&gt;
그러나 keepAlive 속성이 완벽한 해결책은 아니다. &lt;br /&gt;
keepAlive 상태로 유지하기 위해 메모리를 많이 사용하게 되므로 주의해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;         &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;무상태-stateless&quot;&gt;무상태 (Stateless)&lt;/h3&gt;
&lt;p&gt;Connectionless로 인해 서버는 클라이언트를 식별할 수 없다. 이를 Stateless라고 한다. &lt;br /&gt;
클라이언트의 상태를 모른다는 것은 요청이 오면 그에 따른 응답을 할 뿐 &lt;br /&gt;
각각의 요청과 응답은 독립적이며, 어떤 상태를 저장하지 않는다는 의미다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;쇼핑몰에서 옷을 구매하기 위해 로그인 했다.     
로그아웃하기 전까지 '로그인'이라는 상태가 계속 유지되는 것처럼 보이지만     
로그인 상태는 유지되지 않는다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 매번 로그인을 다시 해야하나?   &lt;br /&gt;
상태를 기억하는 방법은 다양하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cookie, Session, Token: &lt;a href=&quot;https://hyerin6.github.io/2021-07-23/session-token/&quot;&gt;https://hyerin6.github.io/2021-07-23/session-token/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;OAuth 2.0: &lt;a href=&quot;https://hyerin6.github.io/2021-07-23/OAuth2/&quot;&gt;https://hyerin6.github.io/2021-07-23/OAuth2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;응답-상태-코드&quot;&gt;응답 상태 코드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;100 ~ 메시지 정보&lt;/li&gt;
  &lt;li&gt;200 ~ 요청 성공&lt;/li&gt;
  &lt;li&gt;300 ~ 리다이렉션&lt;/li&gt;
  &lt;li&gt;400 ~ 클라이언트 에러&lt;/li&gt;
  &lt;li&gt;500 ~ 서버 에러&lt;/li&gt;
  &lt;li&gt;참고: &lt;a href=&quot;https://brunch.co.kr/@leedongins/65&quot;&gt;https://brunch.co.kr/@leedongins/65&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-method&quot;&gt;HTTP Method&lt;/h3&gt;
&lt;p&gt;클라이언트가 서버에 요청할 때 어떤 목적을 갖는 행위힌지 HTTP Method에 명시한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GET&lt;br /&gt;
GET 메서드는 특정 리소스의 표시를 요청한다. &lt;br /&gt;
GET을 사용하는 요청은 오직 데이터를 받기만 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HEAD&lt;br /&gt;
HEAD 메서드는 GET 메서드의 요청과 동일한 응답을 요구하지만, 응답 본문을 포함하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POST&lt;br /&gt;
POST 메서드는 특정 리소스에 엔티티를 제출할 때 쓰인다.  &lt;br /&gt;
이는 종종 서버의 상태의 변화나 부작용을 일으킨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PUT&lt;br /&gt;
PUT 메서드는 목적 리소스 모든 현재 표시를 요청 payload로 바꾼다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DELETE&lt;br /&gt;
DELETE 메서드는 특정 리소스를 삭제한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CONNECT&lt;br /&gt;
CONNECT 메서드는 목적 리소스로 식별되는 서버로의 터널을 맺는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OPTIONS&lt;br /&gt;
OPTIONS 메서드는 목적 리소스의 통신을 설정하는 데 쓰인다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TRACE (en-US)&lt;br /&gt;
TRACE 메서드는 목적 리소스의 경로를 따라 메시지 loop-back 테스트를 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PATCH&lt;br /&gt;
PATCH 메서드는 리소스의 부분만을 수정하는 데 쓰인다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;uri-url-urn&quot;&gt;URI, URL, URN&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126861448-ed582c74-9085-45ad-b5dc-8aab2e6b7c20.png&quot; alt=&quot;스크린샷 2021-07-24 오후 4 44 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;uri&quot;&gt;URI&lt;/h3&gt;
&lt;p&gt;서버 리소스 이름은 통합 자원 식별자(uniform resource identifier) 혹은 URI라고 불린다. &lt;br /&gt;
URI는 인터넷의 우편물 주소 같은 것으로, 정보 리소스를 고유하게 식별하고 위치를 지정할 수 있다. &lt;br /&gt;
그리고 이 URI에는 두 가지 형태가 있는데 이것이, URL, URN이라는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;URL&lt;/h3&gt;
&lt;p&gt;통합 자원 지시자(uniform resource locator, URL)는 URI의 가장 흔한 형태이다. &lt;br /&gt;
URL은 특정 서버의 한 리소스에 대한 구체적인 위치를 서술한다. &lt;br /&gt;
URL은 리소스가 정확히 어디에 있고 어떻게 접근할 수 있는지 분명히 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;urn&quot;&gt;URN&lt;/h3&gt;
&lt;p&gt;URI의 두 번째 형태는 유니폼 리소스 이름(uniform resource name, URN) 이다.  &lt;br /&gt;
URN은 콘텐츠를 이루는 한 리소스에 대해, 그 리소스의 위치에 영향 받지 않는 유일무이한 이름 역할을 한다.  &lt;br /&gt;
이 위치 독립적인 URN은 리소스를 여기저기로 옮기더라도 문제없이 동작한다.  &lt;br /&gt;
리소스가 그 이름을 변하지 않게 유지하는 한, 여러 종류의 네트워크 접속 프로토콜로 접근해도 문제없다.  &lt;br /&gt;
예를 들어, 다음의 URN은 인터넷 표준 문서 ‘RFC 2141’가 어디에 있거나 상관없이 그것을 지칭하기 위해 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;단순하게 말하자면, URI는 규약이고, URL은 규약에 대한 형태라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn&quot;&gt;https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-23/restfulapi/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-23/restfulapi/</guid>
      </item>
    
      <item>
        <title>OAuth 2.0 란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oauth-20&quot;&gt;OAuth 2.0&lt;/h1&gt;
&lt;p&gt;OAuth 2.0은 자신이 소유한 리소스에 소프트웨어 애플리케이션이 접근할 수 있도록 허용해줌으로써 접근 권한을 위임해주는 프로토콜이다.       &lt;br /&gt;
토큰을 이용해 애플리케이션이 해당 리소스에 접근할 수 있습니다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;리소스 소유자 &lt;br /&gt;
일반적으로 리소스 소유자는 서비스 사용자, 웹 브라우저를 이용한다고 가정  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보호된 리소스
리소스 소유자가 접근하는 구성 요소이다.    &lt;br /&gt;
대부분 웹 API의 형태를 띤다. API를 통해 읽고 쓰는 작업 &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트 &lt;br /&gt;
리소스 소유자 대신 보호된 리소스에 접근하는 소프트웨어 요소&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;624&quot; alt=&quot;스크린샷 2021-07-23 오후 2 01 43&quot; src=&quot;https://user-images.githubusercontent.com/33855307/126739238-64a8fbd8-999e-49eb-a32e-3e0d60a7ac46.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;인가-그랜트-절차&quot;&gt;인가 그랜트 절차&lt;/h1&gt;
&lt;p&gt;이전에도 OAuth 2.0 인가 그랜트 절차에 대해 학습한 적이 있는데 &lt;br /&gt;
페이코 개발자 센터 이미지를 참고하여 다시 기억해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126660618-2c3592b2-8d0f-4ccb-996b-ce55193d37ad.jpeg&quot; alt=&quot;페이코_oauth2&quot; /&gt;&lt;br /&gt;
참고: &lt;a href=&quot;https://developers.payco.com/guide/development/start&quot;&gt;https://developers.payco.com/guide/development/start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;과거의-자격-증명-공유-와-자격-증명-탈취&quot;&gt;과거의 자격 증명 공유 (와 자격 증명 탈취)&lt;/h1&gt;
&lt;p&gt;기업 환경에서 많이 사용되는 한 가지 방법은 사용자의 자격 증명을 복사해 연결하고자 하는 다른 서비스에 전달하는 것이다. &lt;br /&gt;
이 경우 클라이언트가 마치 사용자인 것처럼 사용자가 입력한 id/password를 보호된 리소스에 전달한다.&lt;/p&gt;

&lt;p&gt;위 방법이 가능하기 위해서는 클라이언트 애플리케이션과 보호된 리소스에 대한   &lt;br /&gt;
사용자의 자격 증명이 동일해야 하며 다음과 같은 문제점이 생긴다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자격 증명 탈취에 대한 보안성이 제한       &lt;br /&gt;
ex) 하나의 기업이 동일한 정책과 네트워크 통제 안에서 클라이언트와 인가 서버, 보호된 리소스를 운영하면    &lt;br /&gt;
사용자는 그 기업의 여러 서비스에 대해 동일한 자격 증명을 이용할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;사용자의 비밀번호가 클라이언트 애플리케이션에 노출   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;보호된 리소스 입장에서 자신에게 접근하는 것이 실제 리소스 소유자인지 클라이언트인지 구분할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oauth-20-장단점&quot;&gt;OAuth 2.0 장단점&lt;/h1&gt;
&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사용자의 권한 위임 결정은 캡처하고 네트워크상에 표현하는 데 매우 뛰어나다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보안 결정 절차에 여러 당사자가 참여할 수 있으며, 특히 런타임 시 사용자가 보안 결정을 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유사한 프로토콜에 비해 훨씬 간단하고 안전하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트 개발자가 이전의 보안 프로토콜처럼 더 이상 시그니처 정규화나 복잡한 보안 정책 문서를 분석하지 않아도 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth 토큰을 제대로 사용하면 보다 향상된 보안성을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 어떤 클라이언트가 침해된다면, 피해는 해당 클라이언트의 사용자로 국한된다.  &lt;br /&gt;
클라이언트가 침해되더라도 리소스 소유자의 자격 증명 데이터는 유출되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;독립적인 개발자가 수천 개의 클라이언트를 안전하게 관리하는 것보다 하나의 인가 서버를 안전하게 관리하는 편이 훨씬 쉽다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth 2.0의 확장성과 모듈화 &amp;gt; 다양한 환경에서도 적용해 사용할 수 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;유연성으로 OAuth 구현체 간의 기본적인 호환성에 문제가 발생할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth의 스펙에는 많은 부분을 선택 사항으로 기술하고 있기 때문에 &lt;br /&gt;
두 시스템 간에 OAuth를 구현하고자 하는 개발자들을 혼란스럽게 만들 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;선택 사항 중 일부를 잘못 이해하거나 적절히 수행하지 않으면 안전하지 않은 OAuth 구현이 될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oauth-20이-아닌-것&quot;&gt;OAuth 2.0이 아닌 것&lt;/h1&gt;
&lt;p&gt;OAuth가 널리 쓰임에도 실제로 보면 OAuth가 아닌 것이 많다.   &lt;br /&gt;
프로토콜을 이해함에 있어서 차이점이 무엇인지 이해하는 것도 중요하다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth는 HTTP 프로토콜과 독집적으로 정의되지 않는다.  &lt;br /&gt;
OAuth 2.0 토큰은 메시지 시그니처를 제공하지 않기 때문에 HTTPS를 이용해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth는 인증 프로토콜이 아니다.  &lt;br /&gt;
OAuth 트랜잭션 자체만으로 사용자가 누구인지 알 수 없다. &lt;br /&gt;
또한, OAuth는 여러 곳에서 인증을 사용한다. &lt;br /&gt;
그렇다고 해서 내제된 인증 자체만으로 OAuth가 인증 프로토콜이 되지는 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 간의 권한 위임 메커니즘은 정의하지 않는다. &lt;br /&gt;
리소스 소유자가 다른 사람을 인가할 수 있게 하려면 OAuth만으로는 힘들다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth는 인가 절차 메커니즘을 정의하지 않는다.  &lt;br /&gt;
권한 위임이 이뤄졌다는 사실을 전달하는 방법을 제공하지만, 권한 인가 자체의 내용을 정의하는 것은 아니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth는 토큰의 포맷을 정의하지 않는다.  &lt;br /&gt;
OAuth 프로토콜은 토큰의 내용이 클라이언트 애플리케이션에게 완전히 불투명하다고 명확히 기술하고 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth 2.0은 1.0과 달리 암호화 방법을 정의하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;OAuth 2.0은 단일 프로토콜이 아니다.   &lt;br /&gt;
OAuth 스펙은 사용 방법이 각기 다른 여러 가지 정의와 흐름으로 나뉜다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 33p - 56p&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;클라이언트에-대한-csrf-공격&quot;&gt;클라이언트에 대한 CSRF 공격&lt;/h1&gt;
&lt;p&gt;인가 코드 그랜트 타입과 암시적 그랜트 타입에서 상태(state) 파라미터 사용을 권장하고 있다.  &lt;br /&gt;
클라이언트가 요청과 콜백 사이의 상태를 유지하기 위해 사용하는 구조가 정해지지 않은 값으로서 &lt;br /&gt;
인가 서버는 유저에이전트를 클라이언트로 다시 리다이렉트 시킬 때 이 값을 전달한다. &lt;br /&gt;
CSRF(Cross-Site Request Forgery) 공격을 방지하기 위해 이 값을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;CSRF란 악의적인 애플리케이션이 현재 사용자가 인증된 웹 사이트로   &lt;br /&gt;
사용자의 웹 브라우저가 요청을 보내게 함으로써 원하지 않는 작업이 이뤄지도록 만드는 것이다.     &lt;br /&gt;
웹 브라우저가 요청을 만들고(쿠키를 이용해) 그로 인해 특정 작업이 수행된다는 것이다.&lt;/p&gt;

&lt;p&gt;CSRF 공격을 막기 위한 가장 일반적이고 효과적인 방법은 각각의 HTTP 요청에 예측할 수 없는 값을 추가하는 것이다.  &lt;br /&gt;
이는 OAuth 스펙에서도 설명하는 방법이다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 195p&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oauth-토큰이-무엇인가&quot;&gt;OAuth 토큰이 무엇인가?&lt;/h1&gt;
&lt;p&gt;클라이언트는 인가 서버로부터 토큰을 발급받아 보호된 리소스에 전달한다.  &lt;br /&gt;
인가 서버는 토큰을 생성해 클라이언트에게 발급하고, &lt;br /&gt;
토큰을 리소스 소유자의 권한 위임과 클라이언트의 권한과 연결시켜 관리한다.&lt;br /&gt;
보호된 리소스는 클라이언트로부터 전달받은 토큰이 클라이언트가 요청한 작업을 수행할 수 있는 권한이 있는지 확인한다.
토큰은 권한 위임 행위 결과를 나타낸다.&lt;/p&gt;

&lt;p&gt;이렇게 중요한데 OAuth에서 토큰에 대한 언급이 전혀 없다. &lt;br /&gt;
왜 구체적으로 정의하지 않을까?  &lt;br /&gt;
토큰을 구체적으로 정의하지 않는 이유는 OAuth 특성이나 위험 환경 그리고 요구 사항이 각기 다른 다양한 곳에서 적용해 사용할 수 있기 때문이다. &lt;br /&gt;
토큰의 유효 기간이 만료되거나 폐기될 수 있고, 무기한으로 지정해 사용하거나 다양한 조랍으로 사용할 수 있다. &lt;br /&gt;
또한 시스템의 특정 사용자나 모든 사용자를 나타내거나 아무런 사용자도 나타내지 않을 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 278p&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;구조화된-토큰-json-web-token&quot;&gt;구조화된 토큰: JSON Web Token&lt;/h1&gt;
&lt;p&gt;공유해 사용하는 데이터베이스에서 토큰을 찾는 것 대신 토큰 안에 필요한 정보를 담아 만들면 어떨까?    &lt;br /&gt;
그렇게 하면 인가 서버는 어떤 네트워크 API 호출 없이 도큰 자체 만으로 보호된 리소스와 간접적으로 통신할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;인가 서버가 JWT를 지원하도록 수정한다고 가정해보자.    &lt;br /&gt;
토큰의 구조가 이전과 달라졌는데도 클라이언트 코드는 수정할 필요가 없다.   &lt;br /&gt;
이는 클라이언트에게 있어서 토큰의 구조는 명확하지 않다는 OAuth 2.0의 중요한 스펙 덕분이라고 할 수 있다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 279p&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oauth-20이-인증-프로토콜이-아닌-이유&quot;&gt;OAuth 2.0이 인증 프로토콜이 아닌 이유&lt;/h1&gt;
&lt;p&gt;먼저, 인증이란 무엇인가?  &lt;br /&gt;
인증은 현재 사용자가 누구인지 그리고 현재 사용자가 애플리케이션을 사용하고 있는지 여부를 애플리케이션에게 알려주는 것이다.&lt;/p&gt;

&lt;p&gt;일반적으로 자격 증명(id/password 같은)을 애플리케이션에 제공함으로써 &lt;br /&gt;
사용자가 현재 주장하는 자신임을 알리는 보안 아키텍처의 일부분이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 OAuth 2.0은 자체적으로 사용자에게 어떤 것도 알려주지 않을 뿐만 아니라 &lt;br /&gt;
사용자가 자신의 존재를 어떻게 증명했는지 또는 존재했는지에 대해서도 알려주지 않는다.&lt;/p&gt;

&lt;p&gt;토큰을 요청하고 획득, 그 토큰을 이용해 API에 접근하지만 &lt;br /&gt;
누가 해당 클라이언트를 인가했는지 또는 인가되는 과정에 사용자가 있었는지는 전혀 알지 못한다.&lt;/p&gt;

&lt;p&gt;클라이언트에게 권한을 인가하기 위한 강력한 패러다임이지만   &lt;br /&gt;
사용자가 현재 있고, 누군지를 알아내는 인증과는 상반된다고 할 수 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 354p&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;인증authentication-vs-인가authorization&quot;&gt;인증(Authentication) vs. 인가(Authorization)&lt;/h1&gt;
&lt;p&gt;둘은 표면적으로는 유사하지만 기본적인 성격은 분명히 다르다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인증(Authentication)   &lt;br /&gt;
클라이언트가 자신이 주장하는 사용자와 같은 사용자인지를 확인하는 과정  &lt;br /&gt;
ex) 방문자가 자신이 회사 건물에 들어 갈 수있는지 확인 받는 과정이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인가(Authorization)      &lt;br /&gt;
권한부여, 클라이언트가 하고자 하는 작업이 해당 클라이언트에게 허가된 작업인지를 확인&lt;br /&gt;
ex) 방문자가 회사 건물에 방문했을 때, 허가된 공간에만 접근 가능하다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인증을 거친 후 인증된 사용자에 대한 특정한 권한을 부여 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 게시글은 &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791161751450&quot;&gt;OAuth2 In Action&lt;/a&gt; 를 참고하여 작성되었습니다.😇&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-23/OAuth2/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-23/OAuth2/</guid>
      </item>
    
      <item>
        <title>자바를 제대로 사용할 수 있는 방법</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자바의-역사와-jvm&quot;&gt;자바의 역사와 JVM&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JDK (Java Development Kit)    &lt;br /&gt;
JDK 자바 개발 도구, JVM용 소프트웨어 개발 도구              &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java SE (Java Standard Edition)          &lt;br /&gt;
자바의 표준안이다. &lt;br /&gt;
자바라는 언어가 어떠한 문법적인 구성을 가졌는지와 같은 것들을 정의    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JRE (Java Runtime Environment)  &lt;br /&gt;
JRE는 실행만을 위한 환경이다. (JVM용 OS)        &lt;br /&gt;
JRE만 설치하면, 컴파일하는 프로그램이 제외된 상태로 설치된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JVM (Java Virtual Machine)        &lt;br /&gt;
자바 프로그램이 수행되는 프로세스를 의미한다.     &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; 명령어로 애플리케이션이 수행되면 이 JVM 위에서 애플리케이션이 동작한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jit-컴파일러는-도대체-뭘까&quot;&gt;JIT 컴파일러는 도대체 뭘까?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적 변환(dynamic translation)&lt;/code&gt;이라고 보면 된다.  &lt;br /&gt;
명칭은 컴파일러지만 실행시에 적용되는 기술이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터프리트 방식: 프로그램을 실행할 때마다 컴퓨터가 알아들을 수 있는 언어로 변환하는 작업 수행&lt;/li&gt;
  &lt;li&gt;정적 컴파일 방식: 실행하기 전에 변환 작업을 딱 한 번만 수행한다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JIT은 위 두 가지 방식을 혼합한 것이라고 보면 된다.  &lt;br /&gt;
변환 작업은 인터프리터에 의해서 지속적으로 수행되지만, 필요한 코드의 정보는 캐시에 담아두었다가 재사용한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;분명히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 명령어로 컴파일 했는데 그럼 정적 컴파일 방식 아닌가? &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 명령어로 컴파일 하는 단계에서 만들어진 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일은 바이트 코드일 뿐이다.   &lt;br /&gt;
이렇게 한 번 컴파일한 코드는 어느 OS에서나 사용할 수 있다.  &lt;br /&gt;
즉 class 파일은 컴퓨터가 알아들을 수 있도록 기계 코드로 다시 변환 작업이 필요하다는 것이다.  &lt;br /&gt;
이 변환 작업을 JIT 컴파일러에서 한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hotspot은-뭘까&quot;&gt;HotSpot은 뭘까?&lt;/h1&gt;
&lt;p&gt;Sun에서 개발한 JVM 이름이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HotSpot 종류&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HotSpot 클라이언트 컴파일러   &lt;br /&gt;
애플리케이션 시작 빠르게, 적은 메모리를 점유하기 위함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HotSpot 서버 컴파일러   &lt;br /&gt;
애플리케이션 수행 속도에 초점을 맞춤&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;실수를-방지할-수-있도록-도와주는-제네릭&quot;&gt;실수를 방지할 수 있도록 도와주는 제네릭&lt;/h1&gt;
&lt;p&gt;자바는 여러 타입이 존재하기 때문에 형변환을 하면서 많은 예외가 발생할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DTO 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CastingDTO implements Serializable {
    private Object object;
    
    // Setter, Getter
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CastingDTO 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CastingDTO dto1 = new CastingDTO();
dto1.setObject(new String());

CastingDTO dto2 = new CastingDTO();
dto2.setObject(new StringBuilder());

CastingDTO dto3 = new CastingDTO();
dto3.setObject(new StringBuffer());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 컴파일과 문제 없이 실행된다.  &lt;br /&gt;
그런데 저장되어 있는 값을 꺼낼 때 문제가 발생한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getObject()&lt;/code&gt; 메서드 리턴 타입이 Object이기 때문이다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 형변환이 필요하다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String temp = (String)dto1.getObject();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런데 인스턴스 변수 타입이 StringBuilder인지 StringBuffer인지 혼동될 경우 어떻게 될까? &lt;br /&gt;
instanceof 예약어를 사용하여 타입을 점검하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(temp instanceof StringBuilder)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러한 단점을 보완하기 위해서 Java 5 부터 새롭게 추가된 제네릭(Generic)이라는 것이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;제네릭은-뭘까&quot;&gt;제네릭은 뭘까?&lt;/h1&gt;
&lt;p&gt;제네릭은 타입 형변환에서 발생할 수 있는 문제점을 사전에 없애기 위해서 만들어졌다.  &lt;br /&gt;
컴파일할 때 점검한다는 의미다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generic DTO 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CastingGenericDTO&amp;lt;T&amp;gt; implements Serializable {
    private T object;
    
    // Setter, Getter
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generic 클래스 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CastingGenericDTO&amp;lt;String&amp;gt; dto = new CastingGenericDTO&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;객체를 선언할 때 꺽쇠 안에 각 타입을 명시해 줘서 귀찮을 것 같지만  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getObject()&lt;/code&gt; 메서드를 사용하여 객체를 가져올 때는 간단해진다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String temp = dto.getObject();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;형변환할 필요가 없어졌다.     &lt;br /&gt;
만약 잘못된 타입으로 치환하면 컴파일 자체가 안 된다.    &lt;br /&gt;
따라서 실행 시에 형변환으로 인해 예외가 발생하는 일은 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;제네릭을-사용하는-이유&quot;&gt;제네릭을 사용하는 이유&lt;/h1&gt;
&lt;p&gt;(1) 컴파일할 때 타입을 체크해서 에러를 사전에 잡을 수 있다.&lt;/p&gt;

&lt;p&gt;(2) 컴파일러가 타입 캐스팅을 해주기 때문에 개발자가 편리하다.&lt;/p&gt;

&lt;p&gt;(3) 타입만 다르고 코드의 내용이 대부분 일치할 때 코드의 재사용성이 좋아진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;java-8&quot;&gt;Java 8&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Lambda(람다) 표현식&lt;/li&gt;
  &lt;li&gt;Functional(함수형) 인터페이스&lt;/li&gt;
  &lt;li&gt;Stream&lt;/li&gt;
  &lt;li&gt;Optional&lt;/li&gt;
  &lt;li&gt;인터페이스의 기본 메서드&lt;/li&gt;
  &lt;li&gt;날짜 관련 클래스 추가&lt;/li&gt;
  &lt;li&gt;병렬 배열 정렬&lt;/li&gt;
  &lt;li&gt;StringJoiner 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-optional&quot;&gt;Java8: Optional&lt;/h2&gt;
&lt;p&gt;optional이라는 단어는 “선택적인”이라는 의미다.               &lt;br /&gt;
Optional은 Functional 언어인 Haskell과 Scala에서 제공하는 기능을 따 온 것이다.               &lt;br /&gt;
객체를 편리하게 처리하기 위해서 만든 클래스라고 보면 된다.&lt;/p&gt;

&lt;p&gt;Optional 클래스는 java.util 패키지에 속해 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final class Optional&amp;lt;T&amp;gt; extends Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Optional 클래스는 깡통이라고 생각하면 된다.  &lt;br /&gt;
이 깡통에 물건을 넣을 수도 있고, 아무 물건이 없을 수도 있다.  &lt;br /&gt;
그래서 기본적인 깡통으로 만들기 위해서 Optional 클래스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Optional()&lt;/code&gt;과 같이 객체를 생성하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;optional-객체-생성&quot;&gt;Optional 객체 생성&lt;/h3&gt;
&lt;p&gt;API 문서를 잘 살펴보면 Optional 클래스를 리턴하는      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;of()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ofNullable()&lt;/code&gt; 메서드들이 존재한다.        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional.empty()&lt;/code&gt;   &lt;br /&gt;
null이 아닌 객체를 담고 있는 Optional 객체를 생성한다.  &lt;br /&gt;
이 비어있는 객체는 Optional 내부적으로 미리 생성해놓은 싱글톤 인스턴스입니다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional.of(value)&lt;/code&gt;   &lt;br /&gt;
null이 아닌 객체를 담고 있는 Optional 객체를 생성한다.     &lt;br /&gt;
null이 넘어올 경우 NullPointerException을 던지기 때문에 주의해서 사용해야 한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional.ofNullable(value)&lt;/code&gt;    &lt;br /&gt;
null인지 아닌지 확신할 수 없는 객체를 담고 있는 Optional 객체를 생성한다.     &lt;br /&gt;
null이 넘어올 경우 NPE를 던지지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional.empty()&lt;/code&gt;와 동일하게   &lt;br /&gt;
비어있는 Optional 객체를 얻어옵니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;객체-꺼내기&quot;&gt;객체 꺼내기&lt;/h3&gt;
&lt;p&gt;Optional이 담고 있는 객체를 꺼내로기 위해서 다양한 인스턴스 메서드를 제공한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt; &lt;br /&gt;
비어있는 Optional 객체에 대해서 NoSuchElementException을 던진다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orElse(T other)&lt;/code&gt; &lt;br /&gt;
비어있는 Optional 객체에 대해서 넘어온 인자를 반환한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orElseGet(Supplier&amp;lt;? extends T&amp;gt; other)&lt;/code&gt;  &lt;br /&gt;
비어있는 Optional 객체에 대해서 넘어온 함수형 인자를 통해 생성된 객체를 반환한다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orElse(T other)&lt;/code&gt;의 게으른 버전이다.    &lt;br /&gt;
비어있는 경우에만 함수가 호출되기 때문에 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orElse(T other)&lt;/code&gt; 대비 성능상 이점을 기대할 수 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orElseThrow(Supplier&amp;lt;? extends T&amp;gt; exceptionSupplier)&lt;/code&gt;  &lt;br /&gt;
비어있는 Optional 객체에 대해서 넘어온 함수형 인자를 통해 생성된 예외를 던집니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-default-method&quot;&gt;Java8: Default method&lt;/h2&gt;
&lt;p&gt;Java8부터는 default 메서드가 추가되었다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface DefaultStaticInterface {
    default String getEmail() {
        return name + &quot;@gmail.com&quot;;
    } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 Java8에서 컴파일이 잘 된다.  &lt;br /&gt;
DefaultStaticInterface를 구현하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getName()&lt;/code&gt; 메서드를 재정의하면?  &lt;br /&gt;
이 경우도 괜찮다.&lt;/p&gt;

&lt;p&gt;그렇다면 default 메서드를 왜 만들었을까?    &lt;br /&gt;
“하위 호환성” 때문이다.&lt;/p&gt;

&lt;p&gt;예를들어, 오픈소스를 만들었다고 가정하자.    &lt;br /&gt;
많은 사람들이 사용하고 있는데 인터페이스에 새로운 메서드를 만들어야 하는 상황이 발생했다.    &lt;br /&gt;
자칫 잘못하면 오류가 발생하고 수정해야 하는 일이 발생할 수도 있다.    &lt;br /&gt;
이럴 때 사용하는 것이 default 메서드다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-병렬-배열-정렬-parallel-array-sorting&quot;&gt;Java8: 병렬 배열 정렬 (Parallel array sorting)&lt;/h2&gt;
&lt;p&gt;배열을 정렬하는 가장 간편한 방법은 java.util 패키지의 Arrays 클래스를 사용하는 것이다.  &lt;br /&gt;
이 Arrays 클래스에는 다음과 같은 static 메서드들이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;binarySearch()&lt;/li&gt;
  &lt;li&gt;copyof()&lt;/li&gt;
  &lt;li&gt;equals()&lt;/li&gt;
  &lt;li&gt;fill()&lt;/li&gt;
  &lt;li&gt;hashCode()&lt;/li&gt;
  &lt;li&gt;sort()&lt;/li&gt;
  &lt;li&gt;toString()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Java8 에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paralleleSort()&lt;/code&gt;라는 정렬 메섬드가 제공되며  &lt;br /&gt;
Java7 에서 소개된 Fork-Join 프레임워크가 내부적으로 사용된다.&lt;/p&gt;

&lt;p&gt;사용법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int[] intValues = new int[10];
Arrays.parallelSort(intValues);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort()&lt;/code&gt;의 경우 단일 스레드로 수행되며,     &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallelSort()&lt;/code&gt;는 필요에 따라 여러개의 스레드로 나뉘어 작업이 수행된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallelSort()&lt;/code&gt;가 CPU를 더 많이 사용하게 되겠지만 처리 속도는 더 빠르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-stringjoiner&quot;&gt;Java8: StringJoiner&lt;/h2&gt;
&lt;p&gt;StringJoiner은 java.util에 포함되어 있으며 &lt;br /&gt;
순차적으로 나열되는 문자열을 처리할 떄 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String[] stringsArray = new String[]{&quot;A&quot;, &quot;B&quot;, &quot;C&quot;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 배열을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(A, B, C)&lt;/code&gt; 이렇게 변환하고 싶으면 어떻게 해야 할까? &lt;br /&gt;
콤마(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;) 처리를 위해 if문을 넣거나 substring을 사용해야 하는데 &lt;br /&gt;
이러한 단점을 보완하기 위해 StringJoiner가 만들어졌다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StringJoiner joiner = new StringJoiner(&quot;,&quot;);

for(Stirng s : stringArray) {
    joiner.add(s);   
}

System.out.println(joiner);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-lambda-표현식&quot;&gt;Java8: Lambda 표현식&lt;/h2&gt;
&lt;p&gt;익명 클래스를 사용하면 가독성도 떨어지고 불편한데  &lt;br /&gt;
이러한 단점을 보완하기 위해 람다 표현식이 만들어졌다.&lt;/p&gt;

&lt;p&gt;대신 이 표현식은 인터페이스에 메서드가 하나인 것들만 적용 가능하다. &lt;br /&gt;
그래서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;익명 클래스 &amp;lt;-&amp;gt; 람다 표현식&lt;/code&gt; 전환이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java8-stream&quot;&gt;Java8: Stream&lt;/h2&gt;
&lt;p&gt;자바의 스트림은 “연속된 정보”를 처리하는 데 사용한다.      &lt;br /&gt;
자바에 연속된 정보로 배열, 컬렉션이 있다.   &lt;br /&gt;
배열에는 스트림을 사용할 수 없지만 List로 변환하는 방법은 다양하다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Integer[] values = {1, 3, 5};

// (1)
List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;(Arrays.asList(values));

// (2)
List&amp;lt;Integer&amp;gt; list = Arrays.stream(values).collect(Collectors.toList());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;스트림-구조&quot;&gt;스트림 구조&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list.stram().filter(x -&amp;gt; x &amp;gt; 10).count()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream()&lt;/code&gt; : 스트림 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter()&lt;/code&gt; : 중개 연산&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count()&lt;/code&gt; : 종단 연산 
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메서드-참조&quot;&gt;메서드 참조&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach()&lt;/code&gt;를 사용해 목록을 출력해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;forEach(System.out::println)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::&lt;/code&gt; 이 더블 콜론은 정확하게 Method Reference 라고 부른다. &lt;br /&gt;
즉 메서드 참조를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;static 메서드 참조   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContainingClass::staticMethodName&lt;/code&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 객체의 인스턴스 메서드 참조  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containingObject::instanceMethodName&lt;/code&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 유형의 임의의 객체에 대한 인스턴스 메서드 참조 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContainingType::methodName&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성자 참조
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassName::new&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stream-map&quot;&gt;stream map()&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt;은 스트림 값을 변환한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list.stream.map(x -&amp;gt; x*3).forEach(System.out::println)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt;을 사용하면 스트림에서 처리하는 값들을 중간에 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-17/%EC%9E%90%EB%B0%94%EC%9D%98%EC%8B%A0(2)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-17/%EC%9E%90%EB%B0%94%EC%9D%98%EC%8B%A0(2)/</guid>
      </item>
    
      <item>
        <title>자바의 완전 기본 문법부터 정리</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;컴파일--실행&quot;&gt;컴파일 &amp;amp; 실행&lt;/h1&gt;
&lt;p&gt;자바의 경우 다음과 같은 과정으로 진행된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;코드 작성 &amp;gt; 컴파일 &amp;gt; 실행 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 작성하고 콘솔에서 컴파일 및 실행을 하면 된다. &lt;br /&gt;
컴파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 명령어를 사용하고 실행은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; 명령을 사용한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126040739-ae957f26-363a-4268-98b2-c06535c09966.png&quot; alt=&quot;스크린샷 2021-07-17 오후 11 51 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개발자가 작성한 코드를 컴퓨터가 이해할 수 있도록 엮어주는 작업이 컴파일이다.       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.java&lt;/code&gt; 확장자의 소스를 컴파일하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 확장자를 가진 파일이 생성되어 디스크에 저장된다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일은 바이너리 파일로 되어있고, 컴파일하는 프로그램을 컴파일러라고 부르며, &lt;br /&gt;
자바에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.exe&lt;/code&gt; 프로그램이 그 역할을 수행한다. (Mac이나 Linux에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt;)  &lt;br /&gt;
컴파일시 코드에 규칙을 지키지 않았다면, 오류를 내면서 컴파일이 되지 않는다.&lt;/p&gt;

&lt;p&gt;컴파일을 마친 클래스 파일은 JVM에서 읽어서 운영체제에서 실행된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jit-컴파일러&quot;&gt;JIT 컴파일러&lt;/h1&gt;
&lt;p&gt;Just In Time의 약자 &lt;br /&gt;
프로그램 실행을 보다 빠르게 하기 위한 기술이고 명칭은 컴파일러지만 실행시에 적용된다.&lt;/p&gt;

&lt;p&gt;JIT 컴파일러는 프로그램의 성능에 영향을 주는 지점에 대해서 지속적으로 분석한다.    &lt;br /&gt;
분석된 지점은 부하를 최소화하고 높은 성능을 내기 위한 최적화의 대상이 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JIT 컴파일러를 사용한다는 것은?&lt;/strong&gt;                  &lt;br /&gt;
언제나 자바 메서드가 호출되면 바이트코드를 컴파일하고 실행 가능한 네이티브 코드로 변환한다는 의미다.       &lt;br /&gt;
매번 JIT 컴파일하면 성능 저하가 심하므로 최적화 단계를 거치게 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 컴파일러는 소스코드를 바이트코드로 변환 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt;)   &lt;br /&gt;
자바 프로그램을 실행할 때 JVM은 항상 바이트코드로 시작, &lt;br /&gt;
동적으로 기계에 의존적인 코드로 변환한다.&lt;/p&gt;

&lt;p&gt;JIT은 애플리케이션에서 각각의 메서드를 컴파일할 만큼 시간적 여유가 없어서 &lt;br /&gt;
모든 코드는 초기에 인터프리터에 의해서 시작되고 해당 코드가 충분히 많이 사용될 경우에 컴파일할 대상이 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 인터프리터    
Java 인터프리터는 javac 명령으로 자바 프로그램을 자바 바이트코드로 컴파일하고,   
Java 인터프리터가 한 줄씩 해석하여 기계어로 변역한다.   

- 컴파일 
고급언어로 작성된 프로그램을 목적 프로그램(컴퓨터가 읽을 수 있는) 번역 후   
링킹(Linking) 작업을 통해 실행 프로그램을 생성한다.   

- 링킹(Linking)
컴파일이 끝나면 나눠져 있는 Object 파일들이나 다른 파일(라이브러리)를 엮어주는 작업이다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hotspot&quot;&gt;HotSpot&lt;/h1&gt;
&lt;p&gt;JVM에서 이 작업은 각 메서드에 있는 카운터를 통제되며, 메서드에 두 개의 카운터가 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수행 카운터 (invocation counter)   &lt;br /&gt;
메서드를 시작할 때마다 증가한다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;백에지 카운터 (backedge counter)        &lt;br /&gt;
높은 바이트코드 인덱스에서 낮은 인덱스로 컨트롤 흐름이 변경될 때마다 증가하며   &lt;br /&gt;
메서드에 루프가 존재하는지 확인할 때 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;backedge counter는 invovation counter 보다 컴파일 우선순위가 더 높다.    &lt;br /&gt;
이 카운터들이 인터프리터에 의해 증가될 때마다 한계치에 도달했는지 확인하고 도달한 경우 인터프리터는 컴파일을 요청한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;osr&quot;&gt;OSR&lt;/h1&gt;
&lt;p&gt;HotSpot VM은 OSR(On Stack Replacement)라는 특별한 컴파일도 수행한다.&lt;/p&gt;

&lt;p&gt;OSR은 인터프리터에서 수행한 코드 중 오랫동안 루프가 지속되는 경우 &lt;br /&gt;
중간에 컴파일해야 남은 반복을 빠르게 수행할 수 있기 때문에 사용된다.&lt;/p&gt;

&lt;p&gt;최적화되지 않은 코드가 수행되고 있는 것을 발견하면 인터프리터에 두지 않고 컴파일된 코드로 변경한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참조-자료형&quot;&gt;참조 자료형&lt;/h1&gt;
&lt;p&gt;생성자는 몇 개까지 만들 수 있을까? &lt;br /&gt;
자바는 여러 생성자를 가질 수 있다. 100개가 되도 상관 없다. &lt;br /&gt;
이러한 이유는 다음 예를 통해 알아보자.&lt;/p&gt;

&lt;p&gt;자바 패턴 중에서 DTO 라는 것이 있다. (Data Transfer Object) &lt;br /&gt;
어떤 속성을 갖는 클래스를 만들고 그 속성들을 쉽게 전달하기 위해 DTO라는 것을 만든다.&lt;/p&gt;

&lt;p&gt;비슷한 클래스로 VO라는 것도 있다. &lt;br /&gt;
VO는 Value Object의 약자로 DTO와 형태는 동일하지만, VO는 데이터를 담아두기 위한 목적이고 &lt;br /&gt;
DTO는 데이터를 다른 서버로 전달하기 위한 것이 목적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;접근-제어자&quot;&gt;접근 제어자&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; &lt;br /&gt;
누구나 접근 가능 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;   &lt;br /&gt;
같은 패키지 내에 있거나 상속받은 경우에만 접근 가능 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt; &lt;br /&gt;
같은 패키지 내에 있을 때만 접근 가능 &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; &lt;br /&gt;
해당 클래스 내에서만 접근 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;상속&quot;&gt;상속&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Child extends Parent   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;extends는 “확장하다.”는 뜻이다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends Parent&lt;/code&gt;는 “Parent 클래스를 확장” 한다는 말이다.&lt;/p&gt;

&lt;p&gt;이렇게 확장하면 부모 클래스에서 선언되어 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 및 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;로 선언되어 있는    &lt;br /&gt;
모든 변수와 메서드를 내가 갖고 있는 것처럼 사용할 수 있다.      &lt;br /&gt;
즉, 다른 패키지에 선언된 부모 클래스의 접근 제어자가 없거나  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;로 선언된 것들은 자식 클래스에서 사용할 수 없다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Child child = new Child();
child.printName();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 Parent 클래스의 메서드를 호출하지도 않았는데,
확장한 클래스인 Child의 생성자를 호출하니 자동으로 부모 클래스의 &lt;strong&gt;기본 생성자&lt;/strong&gt;가 호출된다. &lt;br /&gt;
기본 생성자란 매개변수가 아무것도 없는 생성자를 의미한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;부모 클래스에서는 기본 생성자를 만들어 놓는 것 이외에는 상속을 위해 해야하는 작업은 없다.&lt;/li&gt;
  &lt;li&gt;자식 클래스의 생성자가 호출되면 자동으로 부모 클래스의 매개변수 없는 생성자가 실행된다.&lt;/li&gt;
  &lt;li&gt;자식 클래스에서는 부모 클래스에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;로 선언된 &lt;br /&gt;
모든 인스턴스 및 클래스 변수와 메서드를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;상속과-생성자&quot;&gt;상속과 생성자&lt;/h1&gt;
&lt;p&gt;만약 부모 클래스에 기본 생성자가 없다면 어떻게 될까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// public Patrent() { 
// System.out.println(&quot;Parent constructor&quot;); 
// }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 생성자를 주석 처리 했다.&lt;/p&gt;

&lt;p&gt;다시 실행해보면, Parent constructor 메시지가 출력되지 않고 정상적으로 처리된다.  &lt;br /&gt;
문제가 없다고 생각할 수도 있지만 부모 클래스에 매개변수를 받는 메서드가 있을 경우에는 문제가 생긴다.&lt;/p&gt;

&lt;p&gt;매개변수가 있는 생성자를 만들었을 경우, 기본 생성자는 자동으로 만들어지지 않는다.&lt;/p&gt;

&lt;p&gt;해결 방법은 두 가지다.           &lt;br /&gt;
(1) 부모 클래스에 “매개변수가 없는” 기본 생성자를 만든다. &lt;br /&gt;
(2) 자식 클래스에서 부모 클래스의 생성자를 명시적으로 지정하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;을 사용한다. &lt;br /&gt;
명시적으로 지정하지 않아도 컴파일시 자동으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;가 추가된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;메서드-overriding&quot;&gt;메서드 Overriding&lt;/h1&gt;
&lt;p&gt;상속 광계를 보다 유연하게 활용하기 위한 메서드 Overriding에 대해 알아보자.  &lt;br /&gt;
자식 클래스에서 부모 클래스에 있는 메서드와 동일하게 선언하는 것을 “메서드 Overriding”이라고 한다 .&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;접근 제어자&lt;/li&gt;
  &lt;li&gt;리턴 타입&lt;/li&gt;
  &lt;li&gt;메서드 이름&lt;/li&gt;
  &lt;li&gt;매개변수 타입 및 개수 &lt;br /&gt;
위 목록 모두 동일해야만 메서드 Overriding 이라고 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overriding된 메서드의 접근 제어자는 부모 클래스에 있는 메서드와 달라도 되지만, &lt;br /&gt;
접근 권한이 확장되는 경우에만 허용된다. &lt;br /&gt;
접근 권한이 축소될 경우 컴파일 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;overloading&quot;&gt;Overloading&lt;/h1&gt;
&lt;p&gt;Overloading(오버로딩)과 헷갈릴 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overloading(오버로딩): 확장&lt;/li&gt;
  &lt;li&gt;Overriding(오버라이딩): 덮어씀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오버로딩은 같은 이름의 메서드 여러 개를 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;형변환&quot;&gt;형변환&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent obj = new Child(); // OK!
Child obj2 = new Parent(); // Fail! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;왜 첫번째 코드는 되는데 두번째 코드는 안될까?  &lt;br /&gt;
Child 클래스에서 Parent 클래스에 있는 메서드와 변수 사용이 가능하다.   &lt;br /&gt;
반대로 Parent 클래스에서는 Child 클래스에 있는 모든 메서드와 변수들을 사용할 수 없다.   &lt;br /&gt;
정확하게는 Parent 클래스에서 Child 클래스의 모든 메서드, 변수를 사용할 수도 있고 그렇지 않을 수도 있다.&lt;/p&gt;

&lt;p&gt;만약 Child 클래스에 추가된 메서드나 변수가 없으면 가능할 수도 있다.  &lt;br /&gt;
하지만 &lt;strong&gt;자바 컴파일러에서는 자식 객체를 생성할 때 부모 생성자를 사용하면 안된다고 못을 박는다.&lt;/strong&gt;    &lt;br /&gt;
명시적으로 형변환(casting)을 한다고 알려줘야만 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Child child = (Child) new Parent();  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 Parent cannot be cast to Child Exception이 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent p = new Parent();
Child c = new Child();
Parent p2 = c;
Child c2 = p;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;분명 마지막 라인에서 컴파일 에러가 발생할 것이다.      &lt;br /&gt;
“incompatible types”라는 에러가 뜨며 컴파일 되지 않는다.     &lt;br /&gt;
그 이유는 parent 객체는 Child 클래스에 선언되어 있는 메서드나 변수를 완전히 사용할 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컴파일 오류만을 피하려면 다음과 같이 형변환을 해야만 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Child c2 = (Child)p;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“너 이제 Child 클래스인 것처럼 행동해!” 라고 명시적으로 선언해주는 것이다.&lt;/p&gt;

&lt;p&gt;컴파일은 정상적으로 수행되지만, 예외가 발생한다.  &lt;br /&gt;
p가 실제로 Parent 클래스의 객체이므로 컴파일 오류는 넘겼지만 &lt;br /&gt;
실행시에는 “얘는 원래 Parent 클래스의 객체라서 못쓰겠는데요..” 라는 예외가 발생한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Child c = new Child();
Parent p2 = c;
Child c2 = (Child) p2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 아무런 문제 없이 실행될 것이다.  &lt;br /&gt;
왜 아무 문제 없이 실행될까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent p2 = child;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;p2는 child를 대입한 것이다. 그리고 child는 Child 클래스의 객체다.  &lt;br /&gt;
p2로 겉모습은 Parent 클래스의 객체인 것처럼 보이지만, &lt;br /&gt;
실제로는 Child 클래스의 객체이기 때문에 p2를 Child 클래스로 형변환해도 전혀 문제 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent[] parentArray = new Parent[3];
parentArray[0] = new Child();
parentArray[1] = new Parent();
parentArray[2] = new Child();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 문제는 없다.&lt;br /&gt;
그런데 타입이 Parent인지 Child인지 어떻게 구분할 수 있을까? &lt;br /&gt;
이럴때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 예약어를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;polymorphism&quot;&gt;Polymorphism&lt;/h1&gt;
&lt;p&gt;Polymorphism은 다형성이다.       &lt;br /&gt;
형태가 다양하다. &amp;gt; 어떤 형태가 다양하다는 걸까?&lt;/p&gt;

&lt;p&gt;예) Parent, Child, ChildOther 클래스가 있다.        &lt;br /&gt;
Child와 ChildOther은 Parent 클래스를 상속받았다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parent parent1 = new Parent();
Parent parent2 = new Child();
Parent parent3 = new ChildOther();

parent1.printName();
parent2.printName();
parent3.printName();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전부 Parent 타입으로 선언하고 각 객체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printName()&lt;/code&gt; 메서드를 호출했다.    &lt;br /&gt;
위 코드의 결과는 상이하다.&lt;/p&gt;

&lt;p&gt;이유는 선언시에는 모두 Parent 타입으로 선언했지만,   &lt;br /&gt;
&lt;strong&gt;실제로 호출된 메서드는 생성자를 사용한 클래스에 있는 것이 호출된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“형변환을 하더라도 실제 호출되는 것은 원래 객체에 있는 메서드가 호출된다.”  &lt;br /&gt;
라는 것이 바로 다형성이고 Polymorphism이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자식-클래스에서-할-수-있는-일들&quot;&gt;자식 클래스에서 할 수 있는 일들&lt;/h1&gt;

&lt;h3 id=&quot;생성자-관련&quot;&gt;생성자 관련&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자식 클래스의 생성자가 호출되면 자동으로 부모 클래스의 매개변수가 없는 기본 생성자가 호출된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;명시적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;라고 지정할 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;변수-관련&quot;&gt;변수 관련&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;부모 클래스에 private로 선언된 변수를 제외한 모든 변수가 자신의 클래스에 선언된 것처럼 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;부모 클래스에 선언된 변수와 동일한 이름을 가지는 변수를 선언할 수도 있다. &lt;br /&gt;
(그러나 이렇게 덮어쓰는 것은 권장하지 않는다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;부모 클래스에 선언되어 있지 않는 이름의 변수를 선언할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;메서드-관련&quot;&gt;메서드 관련&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;변수처럼 부모 클래스에 선언된 메서드들이 자신의 클래스에 선언된 것처럼 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;부모 클래스에 선언된 메서드와 동일한 시그니처를 사용함으로써 메서드를 Overriding할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;부모 클래스에 선언되어 있지 않은 이름의 새로운 메서드를 선언할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;인터페이스와-추상클래스-enum&quot;&gt;인터페이스와 추상클래스, enum&lt;/h1&gt;

&lt;h3 id=&quot;interface-abstract&quot;&gt;interface, abstract&lt;/h3&gt;
&lt;p&gt;자바에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일을 만들 수 있는 것에는 클래스에만 있는 것이 아니다.    &lt;br /&gt;
interface와 abstract 클래스도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final&quot;&gt;final&lt;/h3&gt;
&lt;p&gt;상속과 관련해서 알아야 하는 또 하나의 예약어는 final이다. &lt;br /&gt;
final은 클래스, 메서드, 변수에 선언할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-클래스&quot;&gt;final 클래스&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final class FinalClass { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스가 final로 선언되어 있으면 상속을 해줄 수 없다.     &lt;br /&gt;
더 이상 확장해서는 안 되는 클래스, 누군가 이 클래스를 상속받아서 내용을 변경해서는 안 되는 클래스를 선언할 때는 final로 선언하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-메서드&quot;&gt;final 메서드&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class FinalMethodClass {
    public final void printLog(String data) {
        System.out.println(&quot;Data = &quot; + data);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메서드를 final로 선언하면 더 이상 Overriding할 수 없다.  &lt;br /&gt;
FinalMethodClass를 상속해도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printLog()&lt;/code&gt; 메서드는 override할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-변수&quot;&gt;final 변수&lt;/h3&gt;
&lt;p&gt;변수에서 final을 쓰는 것은 좀 다르다.  &lt;br /&gt;
변수에 final을 사용하면 그 변수는 “더 이상 바꿀 수 없다.”라는 말이다.   &lt;br /&gt;
그래서 인스턴스 변수나 static으로 선언된 클래스 변수는 선언과 함께 값을 지정해야만 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final int instanceVariable;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 컴파일 에러가 발생한다.    &lt;br /&gt;
final로 선언했기 때문에 변수 생성과 동시에 초기화를 해야만 컴파일시 에러가 발생하지 않는다.   &lt;br /&gt;
생성자나 메서드에서 초기화하면 되지 않나? 라고 생각할 수도 있겠지만,    &lt;br /&gt;
그러면 중복되어 변수 값이 선언될 수도 있기 때문에 final의 기본 의도를 벗어난다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 매개변수나 지역변수는 어떨까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void method(final int parameter) {
    final int localVariable;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매개변수나 지역변수를 final로 선언하는 경우에는 반드시 선언할 때 초기화할 필요는 없다.  &lt;br /&gt;
매개변수는 이미 초기화되어 넘어왔고, &lt;br /&gt;
지역변수는 메서드를 선언하는 중괄호 내에서만 참조되므로 다른 곳에서 변경할 일이 없다.&lt;/p&gt;

&lt;p&gt;그러나 매개변수, 지역변수 초기화 후 다른 값을 할당하려고 하면 컴파일 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참조-자료형-변수&quot;&gt;참조 자료형 변수&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class FinalReferenceType {
    final MemberDTO dto = new MemberDTO();
}

public static void main(Stirng args[]) {
    FinalReferenceType referenceType = new FinalReferenceType();
    referenceType.checkDTO();
}

public void checkDTO() {
    System.out.println(dto);
    dto = new MemberDTO();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;객체를 final로 선언했을 때는 어떻게 처리될까?     &lt;br /&gt;
dto가 final이기 때문에 값을 할당할 수 없다는 메시지와 함께 에러가 발생한다.    &lt;br /&gt;
참조 자료형도 두 번 이상 값을 할당하거나 새로 생성자를 사용하여 초기화할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkDTO()&lt;/code&gt; 메서드를 수정해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void checkDTO() {
    System.out.println(dto);
    dto.name = &quot;Hyerin&quot;;
    System.out.println(dto);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메서드를 이렇게 변경한 후 컴파일해 보면 전혀 문제가 없다. &lt;br /&gt;
name 값이 “Hyerin”으로 잘 할당되어 있다.&lt;/p&gt;

&lt;p&gt;dto 객체, 즉 MemberDTO 클래스의 객체는 FinalReferenceType에서 두 번 이상 생성하 수 없다.             &lt;br /&gt;
하지만 &lt;strong&gt;그 객체의 안에 있는 객체들은 final로 선언된 것이 아니기 때문에 그러한 제약이 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;enum&quot;&gt;enum&lt;/h1&gt;
&lt;p&gt;enum 클래스라는 상수의 집합도 있다.  &lt;br /&gt;
final로 String과 같은 문자열이나 숫자들을 나타내는 기본 자료형의 값을 고정할 수 있다. &lt;br /&gt;
이를 “상수(constant)”라고 한다.&lt;/p&gt;

&lt;p&gt;어떤 클래스가 상수만으로 만들어져 있을 경우에는 class 선언 부분에 enum이라고 선언하면 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이 객체는 상수의 집합이다.&lt;/code&gt; 를 명시적으로 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 선언 
public enum OverTimeValues {
    THREE_HOUR,
    FIVE_HOUR;
}

// 사용 
OverTimeValues.THREE_HOUR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;enum 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum클래스이름.상수이름&lt;/code&gt;을 지정함으로써 클래스의 객체 생성이 완료된다고 생각하면 된다.     &lt;br /&gt;
enum 클래스는 생성자를 만들 수 있지만 생성자를 통해 객체를 생성할 수는 없다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public enum OverTimeValues {
    THREE_HOUR(18000);
    
    private final int amout;
    
    OverTimeValues(int amout) {
        this.amount = amount;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;enum 클래스의 생성자는 아무것도 명시하지 않는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-private&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;만 접근 제어자로 사용할 수 있다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;를 생성자로 사용해서는 안된다. &lt;br /&gt;
각 상수를 enum 클래스 내에서 선언할 때에만 이 생성자를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면 enum 클래스는 생성자가 없는데 어떻게 이상없이 작동했을까? &lt;br /&gt;
enum 클래스도 일반 클래스와 마찬가지로 컴파일할 때 생성자를 자동으로 만들어 준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;enum-클래스의-부모&quot;&gt;enum 클래스의 부모&lt;/h1&gt;
&lt;p&gt;enum 클래스의 부모는 무조건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Enum&lt;/code&gt; 이어야 한다.  &lt;br /&gt;
자바에서 다중 상속은 허용되지 않지만 일반 클래스들은 상속에 상속을 거쳐서 여러 부모를 가질 수 있다. &lt;br /&gt;
하지만 enum 클래스는 무조건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Enum&lt;/code&gt; 이라는 클래스의 상속을 받는다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends java.lang.Enum&lt;/code&gt; 이라는 문장을 사용하지는 않지만      &lt;br /&gt;
컴파일러가 알아서 이 문장을 추가해서 컴파일한다.        &lt;br /&gt;
그렇기 때문에 enum에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;하면 안 된다.&lt;/p&gt;

&lt;p&gt;Enum 클래스의 생성자는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected Enum(String name, int ordinal)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일러에서 자동으로 호출되도록 해놓은 생성자다.  &lt;br /&gt;
개발자가 이 생성자를 호출할 수 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;name은 enum 상수의 이름이고, ordinal은 enum의 순서이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enum 클래스의 부모 클래스는 Object 클래스이기 때문에 Object 클래스의 메서드들은 모두 사용할 수 있다.  &lt;br /&gt;
그러나 개발자들이 Object 클래스의 4개 메서드를 오버라이딩하지 못하도록 막아놓았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;예외&quot;&gt;예외&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;checked exception&lt;/li&gt;
  &lt;li&gt;error&lt;/li&gt;
  &lt;li&gt;runtime exception &amp;amp; unchecked exception&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;
&lt;p&gt;에러는 자바 프로그램 밖에서 발생한 예외를 말한다. &lt;br /&gt;
Error는 프로세스에 영향을 주고, Exception은 스레드에만 영향을 준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;런타임-예외&quot;&gt;런타임 예외&lt;/h3&gt;
&lt;p&gt;런타임 예외는 예외가 발생할 것을 미리 감지하지 못했을 때 발생한다. &lt;br /&gt;
컴파일할 때 예외가 발생하지 않는다. 하지만 실행시에는 발생할 가능성이 있다. &lt;br /&gt;
컴파일시 체크하지 않기 때문에 unchecked exception 이라고도 부른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126043479-db756682-cc03-4d24-9365-cf8077dd9780.png&quot; alt=&quot;스크린샷 2021-07-18 오전 1 26 56&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Exception을 바로 확장한 클래스들이 Checked 예외이며, &lt;br /&gt;
RuntimeException 밑에 확장되어 있는 클래스들이 런타임 예외들이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;throwable-javalangthrowable&quot;&gt;Throwable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.Throwable&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Exception과 Error의 공통 부모 클래스는 당연히 Object 클래스다.         &lt;br /&gt;
공통 부모 클래스가 하나 더 있는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang&lt;/code&gt; 패키지에 선언된 Throwable 클래스다.&lt;/p&gt;

&lt;p&gt;상속 관계가 이렇게 되어 있는 이유는 Exception이나 Error의 성경은 다르지만    &lt;br /&gt;
모두 동일한 이름의 메서드를 사용하여 처리할 수 있도록 하기 위함이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;throwable-생성자&quot;&gt;Throwable 생성자&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thowable()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thowable(String message)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Throwable(String message, Throwable cause)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Throwable(Throwable cause)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;message: 예외 메시지&lt;br /&gt;
cause: 별도의 예외 원인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;throwable-오버라이딩-메서드&quot;&gt;Throwable 오버라이딩 메서드&lt;/h3&gt;
&lt;p&gt;Throwable 클래스에 선언되어 있고 Exception 클래스에서 오버라이딩한 메서드는 10개가 넘는다.  &lt;br /&gt;
많이 사용되는 메서드를 살펴보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMessage()&lt;/code&gt;   &lt;br /&gt;
예외 메시지를 String 형태로 제공받는다.  &lt;br /&gt;
메시지를 활용하여 별도의 예외 메시지를 사용자에게 보여주려고 할 때 좋다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt;
예외 메시지를 String 형태로 제공받는다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getMessage()&lt;/code&gt; 보다 약간 더 자세하게, 예외 클래스 이름도 같이 제공한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printStackTrace()&lt;/code&gt;      &lt;br /&gt;
가장 첫 줄에는 예외 메시지를 출력하고 두 번째 줄부터는      &lt;br /&gt;
예외가 발생하게 된 메서드들의 호출관계(스택 트레이스)를 출력해준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void throwable() {
    int[] intArray = new int[5];
    
    try {
        intArray = null;
        System.out.println(intArray[5]);
    } catch(Throwable t) {
        // * 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 위치에 위에서 알아본 메서드를 사용해보자.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.out.println(t.getMessage());
// 출력 : null       
  
System.out.println(t.toString());
// 출력 : java.lang.NullPointerException      
  
System.out.println(t.printStackTrace());    
/* 출력 :
java.lang.NullPointerException         
at c.exception.ThrowableSample.throwable(...)  
at c.exception.ThrowableSample.main(...)
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;예외를-만들어보자&quot;&gt;예외를 만들어보자.&lt;/h1&gt;
&lt;p&gt;Throwable을 직접 상속 받는 클래스는 Exception과 Error가 있다고 했다.      &lt;br /&gt;
Exception을 처리하는 예외 클래스는 개발자가 임의로 추가해서 만들 수 있다.      &lt;br /&gt;
&lt;strong&gt;Throwable이나 그 자식 클래스의 상속을 받아야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyException extends Exception {
    public MyException() {
        super();
    }
    
    public MyException(String message) {
        super(messaage);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 만든 예외 클래스는 어떻게 사용할까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try {
    if(number &amp;gt; 12) {
        throw new MyException(&quot;Number is over than 12&quot;);
    } catch(MyException e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MyException이 예외 클래스가 되려면 Throwable 클래스의 자식 클래스가 되어야 한다고 했다.  &lt;br /&gt;
만약 MyException을 선언할 때 관련된 클래스를 확장하지 않았을 때는&lt;br /&gt;
이 부분에서 제대로 컴파일이 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;자바-예외-처리-전략&quot;&gt;자바 예외 처리 전략&lt;/h1&gt;
&lt;p&gt;예외를 처리할 때 표준을 정해두고 진행해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;1-예외가-항상-발생하지-않고-실행시에-발생할-확률이-매우-높은-경우-런타임-예외로-만드는-것이-나을-수도-있다&quot;&gt;(1) 예외가 항상 발생하지 않고, 실행시에 발생할 확률이 매우 높은 경우 런타임 예외로 만드는 것이 나을 수도 있다.&lt;/h3&gt;
&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends RuntimeException&lt;/code&gt; 으로 선언하는 것이다.&lt;/p&gt;

&lt;p&gt;이렇게 되면, 해당 예외를 던지는 메서드를 사용하더라도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;로 묶지 않아도 컴파일시에 예외가 발생하지 않는다.   &lt;br /&gt;
그러나 이 경우에는 예외가 발생할 경우 해당 클래스를 호출하는 다른 클래스에서 예외를 처리하도록 구조적인 안전장치가 되어 있어야만 한다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;로 묶지 않은 메서드를 호출하는 메서드에서 예외를 처리하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;가 되어 있는 것을 의미한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void methodCaller() {
    try {
        methodCalled();
    } catch(Exception e) {
     // 예외처리 
    }
}


public void methodCallee() {
    // RuntimeException 예외 발생 가능성이 있는 부분 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같이 unchecked exception인 RuntimeException이 발생하는 메서드가 있다면  &lt;br /&gt;
그 메서드를 호출하는 메서드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;로 묶어주지 않더라도 컴파일할 때 문제가 발생하지는 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-임의의-예외-클래스를-만들-때에는-반드시-try-catch로-묶어줄-필요가-있을-경우에만-exception-클래스로-확장한다&quot;&gt;(2) 임의의 예외 클래스를 만들 때에는 반드시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch&lt;/code&gt;로 묶어줄 필요가 있을 경우에만 Exception 클래스로 확장한다.&lt;/h3&gt;
&lt;p&gt;일반적으로 실행시 예외를 처리할 수 있는 경우에는 RuntimeException 클래스를 확장하는 것을 권장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-catch문-내에서-아무런-작업-없이-공백으로-놔두면-예외-분석이-어려워지므로-꼭-로그-처리와-같은-예외-처리를-해줘야만-한다&quot;&gt;(3) catch문 내에서 아무런 작업 없이 공백으로 놔두면 예외 분석이 어려워지므로 꼭 로그 처리와 같은 예외 처리를 해줘야만 한다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;예외-관련-qa&quot;&gt;예외 관련 Q&amp;amp;A&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;예외를 처리하기 위한 세 가지 블록은?    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch/finally&lt;/code&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(1)번 답 중 “예외가 발생하든 안하든 반드시 실행해야 하는 부분”은 어떤 블록인가요?      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finally&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(1)번 답 중에서 “여기서 예외가 발생할 것이니 조심하세요.”라고 선언하는 블록은 어떤 블록인가요? &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;예외의 종류 세 가지는 각각 무엇인가요?
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RuntimeException(unchecked exception)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Checked Exception&lt;/code&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로세스에 치명적인 영향을 주는 문제가 발생한 것을 무엇이라고 하나요?      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;try나 catch 블록 내에서 예외를 발생시키는 키워드는 무엇인가요? &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw new Exception&lt;/code&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메서드 선언 시 어떤 예외를 던질 수도 있다고 선언할 때 사용하는 키워드?  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throws Exception&lt;/code&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;직접 예외를 만들 때 어떤 클래스의 상속을 받아서 만들어야 하나요? &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Throwable&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Throwable&lt;/code&gt;의 자식 클래스&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;string&quot;&gt;String&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final class String extends Object  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;public final 로 선언되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;public : 누구나 사용할 수 있다.  &lt;br /&gt;
final : 이 클래스를 확장할 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;implements Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Serializable 인터페이스    &lt;br /&gt;
구현해야 하는 메서드가 하나도 없는 인터페이스다.   &lt;br /&gt;
구현한다고 선언만 하면 해당 객체를 파일로 저장하거나 다른 서버에 전송 가능한 상태가 된다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comparable 인터페이스   &lt;br /&gt;
이 인터페이스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compareTo()&lt;/code&gt;라는 메서드만 선언되어 있다.   &lt;br /&gt;
이 메서드는 매개변수로 넘어가는 객체와 현재 객체가 같은지를 비교하는데 사용한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CharSequence 인터페이스  &lt;br /&gt;
이 인터페이스는 해당 클래스가 문자열을 다루기 위한 클래스라는 것을 명시적으로 나타내는 데 사용된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;null-체크&quot;&gt;Null 체크&lt;/h1&gt;
&lt;p&gt;어떤 참조 자료형도 널이 될 수 있다.&lt;/p&gt;

&lt;p&gt;객체가 널이라는 것은?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체가 아무런 초기화가 되어 있지 않음&lt;/li&gt;
  &lt;li&gt;클래스에 선언되어 있는 어떤 메서드도 사용할 수 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;비교-equals-vs-compareto&quot;&gt;비교 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compareTo&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;메서드 이름은 다르지만 매개변수로 넘어온 값과 String 객체가 같은지 비교하기 위한 메서드다.  &lt;br /&gt;
단지 IgnoreCase가 붙은 메서드들은 대소문자 구분을 할지 안할지 여부만 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;immutable-string&quot;&gt;immutable String&lt;/h1&gt;
&lt;p&gt;JDK5 이상은 String 더하기 연산을 할 경우, 컴파일할 때 자동으로 해당 연산을 StringBuilder로 변환해 준다.    &lt;br /&gt;
따라서 일일이 더하는 작업을 변환해 줄 필요는 없으나 for 루프와 같은 반복 연산을 할 때에는 자동으로 변환해주지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;charsequence&quot;&gt;CharSequence&lt;/h1&gt;
&lt;p&gt;String, StringBuilder, StringBuffer 클래스의 공통점은 &lt;br /&gt;
CharSequence 인터페이스를 구현했다는 점이다.&lt;/p&gt;

&lt;p&gt;세 가지 중 하나의 클래스를 사용하여 매개변수로 받는 작업을 할 때  &lt;br /&gt;
String이나 StringBuilder 타입으로 받는 것보다 CharSequence 타입으로 받는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;클래스-안의-클래스&quot;&gt;클래스 안의 클래스&lt;/h1&gt;
&lt;p&gt;자바에서 클래스 안에 클래스가 들어갈 수 있다. &lt;br /&gt;
이러한 클래스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nested 클래스&lt;/code&gt;라고 부른다.&lt;/p&gt;

&lt;p&gt;Nested 클래스는 선언한 방법에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static nested class&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inner class&lt;/code&gt;로 구분된다.    &lt;br /&gt;
차이는 static으로 선언되었는지 여부다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inner class&lt;/code&gt;는 또 두가지로 나뉘는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;로컬(지역) 내부 클래스&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;익명 내부 클래스&lt;/code&gt;라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/126055612-05e674dc-60a5-4e13-b1b4-4da9eb4558ae.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-18-13-21-46&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;왜-nested-클래스를-만드는-걸까&quot;&gt;왜 Nested 클래스를 만드는 걸까?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;한 곳에서만 사용되는 클래스를 논리적으로 묶어서 처리할 필요가 있을 때 &amp;gt; Static Nested 사용 이유&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;캡슐화가 필요할 때 &amp;gt; inner class 사용 이유
    &lt;blockquote&gt;
      &lt;p&gt;A 클래스에 private 변수가 있다. 이 변수에 접근하고 싶은 B라는 클래스를 선언하고 &lt;br /&gt;
B 클래스를 외부에 노출시키고 싶지 않을 경우 
즉 내부 구현을 감추고 싶을 때를 의미한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;소스의 가독성과 유지보수성을 높이고 싶을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;static-nested&quot;&gt;static nested&lt;/h1&gt;
&lt;p&gt;내부 클래스는 감싸고 있는 외부 클래스의 어떤 변수도 접근할 수 있다.   &lt;br /&gt;
private로 선언된 변수까지도 접근 가능하다.  &lt;br /&gt;
하지만 static nested 클래스를 그렇게 사용하는 것은 불가능하다. &lt;br /&gt;
이름에서 알 수 있듯이 static 하기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class OuterOfStatic {    // (1)
    static class StaticNested{  // (2)
        private int value = 0;
        // getter, setter
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스를 컴파일해 보자.  &lt;br /&gt;
내부에 있는 Nested 클래스는 별도로 컴파일할 필요가 없다. 자동으로 컴파일된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그러면-이-static-nested-클래스의-객체는-어떻게-생성할까&quot;&gt;그러면 이 static nested 클래스의 객체는 어떻게 생성할까?&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OuterOfStatic.StaticNested staticNested = new OuterOfStatic.StaticNested();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;감싸고 있는 클래스 이름 뒤에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.(점)&lt;/code&gt;을 찍고 쓰면 된다.  &lt;br /&gt;
객체 사용 방법은 일반 클래스와 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-왜-static-nested-클래스를-만들까&quot;&gt;그렇다면 왜 static nested 클래스를 만들까?&lt;/h3&gt;
&lt;p&gt;클래스를 묶기 위해서다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;School 클래스: 학교 관리 클래스  
University 클래스: 대학교 관리 클래스   
Student 클래스: School 학생이지 University 학생인지 불분명하다.    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 겉으로 보기에 유사하지만 내부적으로 구현이 달라야 할 때 static nested 클래스를 사용한다.      &lt;br /&gt;
static nested 클래스로 만드면 School에서 만든 경우, University 클래스에서는 사용할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;내부-클래스&quot;&gt;내부 클래스&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class OuterOfInner {
    class Inner {
        private int value = 0;
        // getter, setter
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;static 선언이 없다. &lt;br /&gt;
그러므로 이 Inner 클래스의 객체를 생성하는 방법도 다르다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OuterOfInner outer = new OuterOfInner();
OuterOfInner.Inner inner = outer.newInner();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inner 클래스의 객체를 생성하기 전에는 먼저 Inner 클래스를 감싸고 있는 Outer 클래스의 객체를 만들어야만 한다.  &lt;br /&gt;
outer 객체를 통해서 Inner 클래스의 객체를 만들어 낼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;이와-같이-복잡한-inner-클래스-객체를-왜-사용하는걸까&quot;&gt;이와 같이 복잡한 Inner 클래스 객체를 왜 사용하는걸까?&lt;/h3&gt;
&lt;p&gt;앞에서 이러한 내부 클래스를 만드는 이유를 캡슐화 때문이라고 했다.  &lt;br /&gt;
하나의 클래스에서 어떤 공통적인 작업을 수행하는 클래스가 필요한데 다른 클래스에서는 전혀 필요가 없을 때 &lt;br /&gt;
이러한 내부 클래스를 만들어 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;익명-클래스&quot;&gt;익명 클래스&lt;/h1&gt;
&lt;p&gt;내부 클래스를 만드는 것보다도 더 간단한 방법은 익명 클래스를 만드는 것이다. &lt;br /&gt;
말 그대로 이름이 없는 클래스다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Machine {
    Remocon tv = new Remocon() {
        @Override
        public void on() { . . . }
    };
}

Machine machine = new Machine();
machine.tv.on();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스 이름도 없고 객체 이름도 없기 때문에 다른 클래스나 메서드에서 참조할 수 없다.    &lt;br /&gt;
그래서 객체를 해당 클래스 내에서 재사용하려면, 객체 생성 후 사용하면 된다.    &lt;br /&gt;
(그러나 재사용할 일이 없을 때 사용하도록 하자.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;왜-익명-클래스라는-것을-제공하는-것일까&quot;&gt;왜 익명 클래스라는 것을 제공하는 것일까?&lt;/h3&gt;
&lt;p&gt;클래스를 만들고 그 클래스를 호출하면 그 정보는 메모리에 올라간다.  &lt;br /&gt;
즉 클래스를 많이 만들면 만들수록 메모리를 많이 필요해지고 애플리케이션을 시작할 때 더 많은 시간이 소요된다.  &lt;br /&gt;
따라서 이렇게 간단한 방법으로 객체를 생성할 수 있도록 해놓았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;내부-클래스-특징&quot;&gt;내부 클래스 특징&lt;/h1&gt;
&lt;p&gt;Nested 클래스를 사용하려면 알고 있어야 하는 사항은 참조 가능한 변수들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;static nested 클래스에서 외부 클래스의 static 변수만 참조할 수 있다.   &lt;br /&gt;
만약 참조하는 코드가 있다면 컴파일시에 에러가 발생하므로 어떻게라도 사용할 수 없다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;내부 클래스와 익명 클래스는 외부 클래스의 어떤 변수라도 참조할 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그렇다면 반대로 외부 클래스에서 static nested 클래스의 인스턴스 변수나     &lt;br /&gt;
내부 클래스의 인스턴스 변수로서의 접근하는 것은 가능할까?       &lt;br /&gt;
반대로의 참조도 가능하다. private라고 해도 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;어노테이션이란&quot;&gt;어노테이션이란?&lt;/h1&gt;
&lt;p&gt;어노테이션은 클래스나 메서드 등의 선언시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;를 사용하는 것을 의미한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일 정보를 알려주거나&lt;/li&gt;
  &lt;li&gt;컴파일할 때와 설치(deployment)시 작업을 지정하거나&lt;/li&gt;
  &lt;li&gt;실행할 때 별도의 처리가 필요할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;자바에서-사용하기-위해서-정해져-있는-어노테이션은-3개&quot;&gt;자바에서 사용하기 위해서 정해져 있는 어노테이션은 3개&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Override&lt;/code&gt;           &lt;br /&gt;
해당 메서드가 부모 클래스에 있는 메서드를 오버라이드 했다는 것을 명시적으로 선언 &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt;     &lt;br /&gt;
미리 만들어져 있는 클래스나 메서드가 더 이상 사용되지 않는 경우  &lt;br /&gt;
그런 것을 deprecated라고 하는데 컴파일러에게 “사용하지 않으니 누가 쓴다면 경고해달라.”라고 알려주는 것이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SupressWarnings&lt;/code&gt;        &lt;br /&gt;
컴파일에서 경고를 알리는 경우가 있다.  &lt;br /&gt;
일부러 이렇게 코딩했으니 경고해줄 필요가 없다고 알려주는 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;메타-어노테이션이라는-것은-개발자가-어노테이션을-선언할-때-사용한다&quot;&gt;메타 어노테이션이라는 것은 개발자가 어노테이션을 선언할 때 사용한다.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Target&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Retention&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Documented&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Inherited&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;어노테이션-선언-방법&quot;&gt;어노테이션 선언 방법&lt;/h3&gt;
&lt;p&gt;추가로 알아야 하는 어노테이션은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@interface&lt;/code&gt; 이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface UserAnnotation {
    public int numer();
    public String text() default &quot;This is first annotation&quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;상속을-지원하지-않는다&quot;&gt;상속을 지원하지 않는다.&lt;/h3&gt;
&lt;p&gt;자바의 상속은 많은 이점을 제공한다.                &lt;br /&gt;
enum 클래스와 마찬가지로 미리 만들어 놓은 어노테이션을 확장하는 것이 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-17/%EC%9E%90%EB%B0%94%EC%9D%98%EC%8B%A0(1)/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-17/%EC%9E%90%EB%B0%94%EC%9D%98%EC%8B%A0(1)/</guid>
      </item>
    
      <item>
        <title>Baekjoon 기초 수학 알고리즘 풀이</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;10430&quot;&gt;10430&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10430&quot;&gt;https://www.acmicpc.net/problem/10430&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(A+B)%C는 ((A%C) + (B%C))%C 와 같을까?
(A×B)%C는 ((A%C) × (B%C))%C 와 같을까?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주어진 식대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.out.println()&lt;/code&gt; 해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4375&quot;&gt;4375&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4375&quot;&gt;https://www.acmicpc.net/problem/4375&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1로만 이루어진 n의 배수를 찾아, 그 중 가장 작은 수의 자리수를 출력하라.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;input = n&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;num = num * 10 + 1; // 1, 11, 111, ... 1로만 이뤄진 수를 구한다. 
num = num % n; // n의 배수인지 확인하기 위해 나머지를 구한다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1037&quot;&gt;1037&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1037&quot;&gt;https://www.acmicpc.net/problem/1037&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 
어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;약수가 전부 주어지기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;가장 작은 수 * 가장 큰 수&lt;/code&gt; 가 N이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;17427&quot;&gt;17427&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/17427&quot;&gt;https://www.acmicpc.net/problem/17427&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;두 자연수 A와 B가 있을 때, A = BC를 만족하는 자연수 C를 A의 약수라고 한다. 
예를 들어, 2의 약수는 1, 2가 있고, 24의 약수는 1, 2, 3, 4, 6, 8, 12, 24가 있다. 
자연수 A의 약수의 합은 A의 모든 약수를 더한 값이고, f(A)로 표현한다. 
x보다 작거나 같은 모든 자연수 y의 f(y)값을 더한 값은 g(x)로 표현한다.
자연수 N이 주어졌을 때, g(N)을 구해보자.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;n 이하인 수들 중에서 i를 약수로 갖는 수&lt;br /&gt;
=&amp;gt; n 이하의 i의 배수&lt;br /&gt;
=&amp;gt; 개수를 구하려면 n/i 이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;answer += i * (n / i)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;입력이 최대 1,000,000 이므로 long 타입으로 선언해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;17425&quot;&gt;17425&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/17425&quot;&gt;https://www.acmicpc.net/problem/17425&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;문제는 위 17427번과 같지만 입력 방법이 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 자연수의 약수의 합을 저장하는 코드: N logN    &lt;br /&gt;
이전 약수의 합을 저장하는 코드(dp): N   &lt;br /&gt;
테스트 케이스 만큼 실행되는 코드: T&lt;/p&gt;

&lt;p&gt;총 시간 복잡도는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N logN + T&lt;/code&gt; 이므로 위 계획으로 문제를 풀 시간은 충분하다.    &lt;br /&gt;
그러나 테스트 케이스마다 약수의 합을 구하는 코드를 실행하면 시간 초과가 뜬다.  &lt;br /&gt;
미리 문제를 해결해놓고 테스트 케이스에 따라 답을 꺼내와야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/125189363-afe37280-e272-11eb-942e-c083673e9359.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-11-18-05-41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2609&quot;&gt;2609&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2609&quot;&gt;https://www.acmicpc.net/problem/2609&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;최소 공배수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N * M /최대 공약수&lt;/code&gt; 로 구할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1978&quot;&gt;1978&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1978&quot;&gt;https://www.acmicpc.net/problem/1978&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;주어진 수 N개 중에서 소수가 몇 개인지 찾아서 출력하는 프로그램을 작성하시오.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;에라토스테네스의 체를 이용하여 소수를 찾는다.    &lt;br /&gt;
2의 배수 제거, 3의 배수 제거, … 를 반복하는 개념이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean[] prime = new boolean[n + 1];
Arrays.fill(prime, true);

// 0 과 1 은 소수가 아니므로 false
prime[0] = false;
prime[1] = false;

for (int i = 2; i * i &amp;lt;= n; ++i) {
    if (prime[i]) {
        // 이미 2의 배수가 걸러졌기 때문에 i 의 제곱수부터 시작해도 된다.
        for (int j = i * i; j &amp;lt;= n; j += i) { 
            prime[j] = false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1929&quot;&gt;1929&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1929&quot;&gt;https://www.acmicpc.net/problem/1929&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;에라토스테네스의 체를 이용하여 소수를 찾는다.  &lt;br /&gt;
코드는 위와 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6588&quot;&gt;6588&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/6588&quot;&gt;https://www.acmicpc.net/problem/6588&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다.  
예를 들어 8은 3 + 5로 나타낼 수 있고, 3과 5는 모두 홀수인 소수이다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이것도 에라토스테네스의 체를 이용하여 소수를 찾은 후 시작한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (true) {
    int num = Integer.parseInt(br.readLine());
    boolean ok = false;
    if (num == 0) {
        break;
    }
    for (int i = 2; i &amp;lt;= num / 2; i++) {
        if (prime[i] &amp;amp;&amp;amp; prime[num - i]) {
            sb.append(num + &quot; = &quot; + i + &quot; + &quot; + (num - i) + &quot;\n&quot;);
            ok = true;
            break;
        }
    }
    if (!ok) {
        sb.append(&quot;Goldbach's conjecture is wrong.\n&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-11/codeplus-%EA%B8%B0%EC%B4%88-%EC%88%98%ED%95%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-11/codeplus-%EA%B8%B0%EC%B4%88-%EC%88%98%ED%95%99/</guid>
      </item>
    
      <item>
        <title>제네릭</title>
        <description>&lt;p&gt;제네릭을 지원하기 전에는 컬렉션에서 객체를 꺼낼 때마다 형변환을 해야 했다.         &lt;br /&gt;
제네릭을 사용하면 컬렉션이 담을 수 있는 타입을 컴파일러에게 알려준다.        &lt;br /&gt;
컴파일러는 알아서 형변환 코드를 추가할 수 있고 엉뚱한 타입의 객체를 넣으려는 시도를          &lt;br /&gt;
컴파일 과정에서 판단하여 더 안전하고 명확한 프로그램을 만들어준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;26-로-타입은-사용하지-말라&quot;&gt;26. 로 타입은 사용하지 말라.&lt;/h1&gt;
&lt;p&gt;클래스와 인터페이스 선언에 타입 매개변수가 쓰이면 이를 제네릭 클래스 혹은 제네릭 인터페이스라 한다.     &lt;br /&gt;
ex) List 인터페이스는 원소의 타입을 나타내는 타입 매개변수 E를 받는다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;제네릭 클래스 + 제네릭 인터페이스 = 제네릭 타입 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각각의 제네릭 타입은 일련의 매개변수화 타입을 정의한다.   &lt;br /&gt;
ex) List&lt;String&gt;은 원소의 타입이 String인 리스트를 뜻하는 매개변수화 타입이다.&lt;/String&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;raw-type-이란&quot;&gt;Raw Type 이란?&lt;/h3&gt;

&lt;p&gt;Raw Type은 타입 파라미터가 없는 제네릭 타입을 의미한다.   &lt;br /&gt;
다음 예제 코드에서 t가 로 타입 변수이다.  &lt;br /&gt;
애초에 제네릭으로 정의되지 않은 클래스나 인터페이스에는 로 타입이 없다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Trouble&amp;lt;T&amp;gt; {
    public List&amp;lt;String&amp;gt; getStrs() { return Arrays.asList(&quot;str&quot;); }
}

public static void main(String[] args) {
    Trouble t = new Trouble();
    
    for(String str : t.getStrs()) { // 컴파일 에러 발생 
        System.out.println(str);
    }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Raw Type을 사용하면 왜 컴파일 에러가 발생할까?&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Raw Type의 슈퍼 클래스는 Raw Type이다. 
상속 받지 않은 로 타입의 생성자, 인스턴스 메서드, 필드는 로 타입이다. 
로 타입은 파라미터 T만 지우는게 아니라 슈퍼 클래스의 타입 파라미터, 
해당 클래스에 정의된 모든 타입 파라미터를 지워버린다.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t.getStrs()&lt;/code&gt;의 반환 타입이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;이 아닌 로 타입 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;가 된 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private final Collection stamps = ...;
stamps.add(new Coin()); // stamp만 저장하기로 했는데 실수로 coin을 저장함 

for(Iterator i = stamps.iterator(); i.hasNext();); {
    Stamp stamp = (Stamp) i.next(); // ClassCastException을 던진다.
    stamp.cancel();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오류는 가능한 발생 즉시, 이상적으로는 컴파일 할 때 발견하는 것이 좋다.      &lt;br /&gt;
위 코드는 런타임에 오류를 알아챌 수 있는데 이렇게 되면                   &lt;br /&gt;
런타임에 문제를 겪는 코드와 원인을 제공하는 코드가 동떨어져 있을 가능성이 커진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제네릭을 활용하면 Stamp 인스턴스만 취급한다는 정보가 타입 선언 자체에 녹아든다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private final Collection&amp;lt;Stamp&amp;gt; stamps = ...;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 선언하면 stamps에는 Stamp 인스턴스만 넣어야 함을 컴파일러가 인지하게 된다.  &lt;br /&gt;
아무런 경고 없이 컴파일 된다면 의도대로 동작할 것임을 보장한다.   &lt;br /&gt;
&lt;strong&gt;컴파일러는 컬렉션에서 원소를 꺼내는 모든 곳에 보이지 않는 형변환을 추가하여 절대 실패하지 않음을 보장한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;로 타입을 쓰면 제네릭이 안겨주는 안전성과 표현력을 모두 잃게 된다.   &lt;br /&gt;
&lt;strong&gt;그렇다면 쓰면 안되는 로 타입을 왜 만들어놓은 걸까?&lt;/strong&gt;    &lt;br /&gt;
그 이유는 &lt;strong&gt;호환성&lt;/strong&gt; 때문이다.&lt;/p&gt;

&lt;p&gt;제네릭은 자바 5부터 사용할 수 있다.   &lt;br /&gt;
기존 코드를 모두 수용하면서 제네릭을 사용하는 새로운 코드와 맞물려 돌아가게 해야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;처럼 임의 객체를 허용하는 매개변수화 타입은 괜찮다.&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;로 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;와 매개변수화 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;의 차이는 무엇일까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;는 제네릭 타입에서 완전히 발을 뺀 것이고,    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;는 모든 타입을 허용한다는 의미를 컴파일러에 명확히 전달한 것이다.&lt;/p&gt;

&lt;p&gt;매개변수로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;를 받는 메서드에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;을 넘길 수 있지만 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;를 받는 메서드에는 넘길 수 없다.  &lt;br /&gt;
이는 제네릭의 하위 타입 규칙 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;의 하위 타입이지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;의 하위 타입은 아니다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt; 같은 매개변수화 타입을 사용할 때와 달리   &lt;br /&gt;
List같은 로 타입을 사용하면 타입 안정성을 잃게 된다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;&amp;gt;();
    unsafeAdd(strings, Integer.valueOf(42)); 
    String s = strings.get(0); // 컴파일러가 자동으로 형변환 코드를 넣어준다. 
}

private static void unsafeAdd(List list, Object o) {
    list.add(o);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 컴파일은 되지만 &lt;strong&gt;로 타입&lt;/strong&gt;인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;를 사용하여 다음과 같은 경고가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;warning: [unchecked] unchecked call to add(E) as a
member of the raw type List
    list.add(0);
            ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings.get(0)&lt;/code&gt;의 결과를 형변환하려 할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;을 던진다.  &lt;br /&gt;
Integer를 String으로 변환하려 시도한 것이다.  &lt;br /&gt;
이 형변환은 컴파일러가 자동으로 만들어준 것이라 보통은 실패하지 않는다.   &lt;br /&gt;
하지만 이 경우 컴파일러의 경고를 무시했기 때문에 나타난 결과다.&lt;/p&gt;

&lt;p&gt;로 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;를 매개변수화 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;로 바꾼 다음 다시 컴파일해보면,   &lt;br /&gt;
다음 오류 메세지지가 출력되며 컴파일조차 되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 변경 코드 
unsafeAdd(List&amp;lt;Object&amp;gt; list, Object o) { . . . }

// error
error: incompatible types: List&amp;lt;String&amp;gt; cannot be 
converted to List&amp;lt;Object&amp;gt;
    unsafeAdd(strings, Integer.valueOf(42));
       ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로 타입을 사용하여 잘못된 타입을 사용했을 경우, 해당 에러를 런타임 시에 알게 되지만       &lt;br /&gt;
매개변수화 타입을 정의한 제네릭을 사용했을 경우, 해당 오류를 컴파일 즉시 잡아낼 수 있다는 점에서        &lt;br /&gt;
제네릭은 안전성을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제네릭 타입을 쓰고 싶지만 실제 타입 매개변수가 무엇인지 신경 쓰고 싶지 않다면        &lt;br /&gt;
와일드카드(물음표, ?)를 사용하자.&lt;/p&gt;

&lt;p&gt;비한정적 와일드카드 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&amp;lt;?&amp;gt;&lt;/code&gt;와 로 타입인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;은 무슨 차이일까?        &lt;br /&gt;
특징을 간단히 말하면 &lt;strong&gt;와일드카드 타입은 안전하고, 로 타입은 안전하지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로 타입 컬렉션에는 아무 원소나 넣을 수 있으니 타입 불변식을 훼손하기 쉽다.     &lt;br /&gt;
반면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;?&amp;gt;&lt;/code&gt;에는 (null 외에) 어떤 원소도 넣을 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;27-비검사-경고를-제거하라&quot;&gt;27. 비검사 경고를 제거하라.&lt;/h1&gt;
&lt;p&gt;제네릭을 사용하기 시작하면 수많은 컴파일러 경고를 보게 될 것이다.&lt;/p&gt;

&lt;p&gt;예) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&amp;lt;Lark&amp;gt; exaltation = new HashSet();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 코드는 unchecked conversion 경고를 출력한다.   &lt;br /&gt;
컴파일러가 알려준 타입 매개변수를 명시하면 경고가 사라지는데  &lt;br /&gt;
자바 7부터 지원하는 다이아몬드 연산자(&amp;lt;&amp;gt;)로 해결할 수 있다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new HashSet&amp;lt;&amp;gt;();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 예제는 해결하기 쉬운 경고다.  &lt;br /&gt;
해결하기 어렵더라도 할 수 있는 한 모든 비검사 경고를 제거하면  &lt;br /&gt;
그 코드는 타입 안전성이 보장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약 경고를 제거할 수 없지만 타입 안전하다고 확신할 수 있다면    &lt;br /&gt;
최대한 좁은 범위에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SuppressWarnings&lt;/code&gt; 어노테이션을 적용하자.   &lt;br /&gt;
경고를 숨기기로 한 근거가 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jul 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-07-06/chap5/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-07-06/chap5/</guid>
      </item>
    
      <item>
        <title>Mixin</title>
        <description>&lt;h1 id=&quot;mixin&quot;&gt;Mixin&lt;/h1&gt;

&lt;p&gt;이펙티브의 클래스와 인터페이스 부분을 읽다가 mixin이란 개념이 나왔는데&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;믹스인이란 클래스가 구현할 수 있는 타입으로 믹스인을 구현한 클래스에         
원래의 '주된 타입' 외에도 특정 선택적 행위를 제공한다고 선언하는 효과를 준다.           
예) Comparable은 자신을 구현한 클래스의 인스턴스들끼리는 순서를 정할 수 있다고 선언하는 믹스인 인터페이스이다.       
이처럼 대상 타입의 주된 기능에 선택적 기능을 '혼합(mixed-in)'한다고 해서 믹스인이라고 부릅니다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 설명만으로 부족해 mixin에 대해 찾아봤는데  &lt;br /&gt;
스택 오버플로에 나와 같은 고민으로 글을 작성한 사람도 있었다.&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/17987704/an-example-of-a-mixin-in-java&quot;&gt;https://stackoverflow.com/questions/17987704/an-example-of-a-mixin-in-java&lt;/a&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;using-mixins-in-java&quot;&gt;Using mixins in Java&lt;/h1&gt;
&lt;p&gt;클래스에 기능을 덧붙여야 할 때가 있는데 대부분 Mixin보다는 Delegator로 구현한다.    &lt;br /&gt;
이번에는 일급 컬렉션(first class collections)을 사용하여 Java에서 Mixin을 구현하는 방법을 알아보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일급 컬렉션에 대해&lt;br /&gt;
&lt;a href=&quot;https://woowacourse.github.io/javable/post/2020-05-08-First-Class-Collection/&quot;&gt;https://woowacourse.github.io/javable/post/2020-05-08-First-Class-Collection/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://jojoldu.tistory.com/412&quot;&gt;https://jojoldu.tistory.com/412&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exam1-구독자-목록을-포함한-magazinejava-newspaperjava&quot;&gt;exam1. 구독자 목록을 포함한 Magazine.java, Newspaper.java&lt;/h2&gt;

&lt;h3 id=&quot;일반적으로-다음과-같이-모델링한다&quot;&gt;일반적으로 다음과 같이 모델링한다.&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Magazine.java
class Magazine {
    private List&amp;lt;Subcriber&amp;gt; subscribers;
    
    public void addSub(Subscriber subscriber) {
        subscribers.add(subscriber);
    }
    
    public List&amp;lt;Subcriber&amp;gt; primeSubscribers() {
        . . .
    }
}

// Newspaper.java   
class Newspaper {
    private DateTime date; 
    private List&amp;lt;Subcriber&amp;gt; subscribers; 
    
    public void addSub(Subscriber subscriber) {
        subscribers.add(subscriber);
    }
    
    public List&amp;lt;Subcriber&amp;gt; primeSubscribers() {
        . . .
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;구독자 목록 관련된 작업이 두 클래스에서 모두 중복된다.      &lt;br /&gt;
구독자 목록인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Subcriber&amp;gt; subscribers&lt;/code&gt;을     &lt;br /&gt;
필드로 갖고 있는 다른 클래스를 만들면 이를 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Subcribers {
    private List&amp;lt;Subcriber&amp;gt; subscribers; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;list와-subscribers을-별도의-클래스로-분리&quot;&gt;List와 Subscribers을 별도의 클래스로 분리&lt;/h3&gt;

&lt;p&gt;custom arrayList에서 동작하게 하려면 List를 재정의해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface ListMixin&amp;lt;T&amp;gt; extends List&amp;lt;T&amp;gt; {
    List&amp;lt;T&amp;gt; getRecords();
    
    default int size() {
        return getRecords().size();
    }
    
    . . .
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Subscribers에서 ListMixin 인터페이스를 구현하고    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRecords()&lt;/code&gt; 메서드를 재정의하여 구독자 목록을 반환함으로써     &lt;br /&gt;
이 클래스를 List처럼 사용할 수 있다.    &lt;br /&gt;
구독자 리스트에 관련된 작업이 전부 이 클래스에 들어간다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Subcribers implements ListMixin&amp;lt;Subcriber&amp;gt; {
    private List&amp;lt;Subcriber&amp;gt; subcribers = new ArrayList&amp;lt;&amp;gt;();
    
    @Override 
    public List&amp;lt;Subcriber&amp;gt; getRecords() {
        return subcribers;
    }
    
    public void addSub(Subscriber subscriber) {
        subscribers.add(subscriber);
    }
    
    . . .
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Magazine.java&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Newspaper.java&lt;/code&gt;에서   &lt;br /&gt;
구독자 명단을 반환하는 로직을 다루지 않아도 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Magazine {

    private Subcribers Subcribers;
    
    . . .
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exam2-mixin-exam-code&quot;&gt;exam2. mixin exam code&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface TimeStamped {
	long getStamp();
}


class TimeStampedImp implements TimeStamped {
	private final long timeStamp;

	public TimeStampedImp() {
		timeStamp = new Date().getTime();
	}

	public long getStamp() {
		return timeStamp;
	}
}


interface SerialNumbered {
	long getSerialNumber();
}


class SerialNumberedImp implements SerialNumbered {
	private static long counter = 1;
	private final long serialNumber = counter++;

	public long getSerialNumber() {
		return serialNumber;
	}
}


class Basic {
	private String value;

	public void set(String val) {
		value = val;
	}

	public String get() {
		return value;
	}
}


class Mixin extends Basic implements TimeStamped, SerialNumbered {
	private TimeStamped timeStamp = new TimeStampedImp();
	private SerialNumbered serialNumber = new SerialNumberedImp();

	public long getStamp() {
		return timeStamp.getStamp();
	}

	public long getSerialNumber() {
		return serialNumber.getSerialNumber();
	}
}


public class Mixins {
	public static void main(String[] args) {
		Mixin mixin1 = new Mixin();
		Mixin mixin2 = new Mixin();

		mixin1.set(&quot;test string 1&quot;);
		mixin2.set(&quot;test string 2&quot;);

		System.out.println(mixin1.get() + &quot; &quot; + mixin1.getStamp() + &quot; &quot; + mixin1.getSerialNumber());
		System.out.println(mixin2.get() + &quot; &quot; + mixin2.getStamp() + &quot; &quot; + mixin2.getSerialNumber());
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/122785098-0867c580-d2ee-11eb-93b7-8d2600f7bcd4.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-06-22-00-08-43&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Jun 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-06-21/mixin/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-06-21/mixin/</guid>
      </item>
    
      <item>
        <title>추상 골격 구현 클래스 (Abstract Skeletal Implementation Class)</title>
        <description>&lt;h1 id=&quot;추상-골격-구현-클래스란&quot;&gt;추상 골격 구현 클래스란?&lt;/h1&gt;
&lt;p&gt;인터페이스의 장점과 추상 클래스의 장점을 결합&lt;/p&gt;

&lt;p&gt;자판기를 개발할 것이다.       &lt;br /&gt;
음료 자판기, 커피 자판기, 라면 자판기 등등 여러 타입이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;interface&quot;&gt;Interface&lt;/h1&gt;

&lt;h3 id=&quot;자판기-인터페이스&quot;&gt;자판기 인터페이스&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Vending {
    void start();
    void chooseProduct();
    void stop();
    void process();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;캔디-구현체&quot;&gt;캔디 구현체&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CandyVending implements Vending {

    @Override
    public void start() {
        System.out.println(&quot;Start Vending machine&quot;);
    }
    
    @Override
    public void chooseProduct() {
        System.out.println(&quot;Produce diiferent candies&quot;);
        System.out.println(&quot;Choose a type of candy&quot;);
        System.out.println(&quot;pay for candy&quot;);
        System.out.println(&quot;collect candy&quot;);
    }
    
    @Override
    public void stop() {
        System.out.println(&quot;Stop Vending machine&quot;);
    }
    
    @Override
    public void process() {
        start();
        chooseProduct();
        stop();
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;음료수-자판기&quot;&gt;음료수 자판기&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class DrinkVending implements Vending {

    @Override
    public void start() {
        System.out.println(&quot;Start Vending machine&quot;);
    }
    
    @Override
    public void chooseProduct() {
        System.out.println(&quot;Produce diiferent soft drinks&quot;);
        System.out.println(&quot;Choose a type of soft drinks&quot;);
        System.out.println(&quot;pay for drinks&quot;);
        System.out.println(&quot;collect drinks&quot;);
    }
    
    @Override
    public void stop() {
        System.out.println(&quot;stop Vending machine&quot;);
    }
    
    @Override
    public void process() {
        start();
        chooseProduct();
        stop();
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;main&quot;&gt;main&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class VendingManager {
    public static void main(String[] args) {
        Ivending candy = new CandyVending();
        Ivending drink = new DrinkVending();
        candy.process();
        drink.process();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process()&lt;/code&gt;가 중복된다.         &lt;br /&gt;
그렇다고 유틸리티클래스에 코드를 넣으면 SRP                          &lt;br /&gt;
(단일 책임 원칙, 객체는 하나의 책임(역할)만을 가져야 한다.)가 깨지게 된다.                &lt;br /&gt;
이처럼 인터페이스는 중복 코드를 만들게 될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;
&lt;h3 id=&quot;그렇다면-추상-클래스는&quot;&gt;그렇다면 추상 클래스는?&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class AbstractVending {
    public void start() {
        System.out.println(&quot;Start Vending machine&quot;);
    }
    
    public abstract void chooseProduct();
    
    public void stop() {
        System.out.println(&quot;Stop Vending machine&quot;);
    }
    
    public void process() {
        start();
        chooseProduct();
        stop();
    }
}

public class CandyVending extends AbstractVending {
    @Override
    public void chooseProduct() {
        System.out.println(&quot;Produce diiferent candies&quot;);
        System.out.println(&quot;Choose a type of candy&quot;);
        System.out.println(&quot;pay for candy&quot;);
        System.out.println(&quot;collect candy&quot;);
    }
}

public class DrinkVending extends AbstractVending {
    @Override
    public void chooseProduct() {
        System.out.println(&quot;Produce diiferent soft drinks&quot;);
        System.out.println(&quot;Choose a type of soft drinks&quot;);
        System.out.println(&quot;pay for drinks&quot;);
        System.out.println(&quot;collect drinks&quot;);
    }
}

public class VendingManager {
    public static void main(String[] args) {
        AbstractVending candy =  new CandyVending();
        AbstractVending drink =  new DrinkVending();
        candy.process();
        System.out.println(&quot;*********************&quot;);
        drink.process();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중복은 제거했지만 구현 클래스들은 다른 상속을 포기해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;abstract-interface-skeletal-implementation&quot;&gt;Abstract Interface Skeletal Implementation&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;인터페이스를 만든다.&lt;/li&gt;
  &lt;li&gt;인터페이스를 구현하는 추상 메서드를 만들어서 공통 메서드를 구현한다.&lt;/li&gt;
  &lt;li&gt;구현 클래스에 추상 클래스를 상속한 private 이너클래스 (Delegator 패턴)를 만든다. 
그리고 그 클래스를 변수로 가지고 포워딩한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;인터페이스&quot;&gt;인터페이스&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Vending {
    void start();
    void chooseProduct();
    void stop();
    void process();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;인터페이스를-구현한-추상-클래스&quot;&gt;인터페이스를 구현한 추상 클래스&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class AbstractVending implements Vending {

    // 중복되는 메서드는 구현 
    public void start() {
        System.out.println(&quot;Start Vending machine&quot;);
    }
    
    // 구현체마다 다른 기능은 추상 메서드로 정의 
    public abstract void chooseProduct();
    
    public void stop() {
        System.out.println(&quot;Stop Vending machine&quot;);
    }
    
    public void process() {
        start();
        chooseProduct();
        stop();
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;구현-클래스에-추상-클래스를-상속한-private-inner-class-구현--inner-class-객체를-변수로-가지고-포워딩&quot;&gt;구현 클래스에 추상 클래스를 상속한 private inner class 구현 &amp;amp; inner class 객체를 변수로 가지고 포워딩&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CandyVending implements Vending {
   
   // 구현마다 다른 기능은 구현체 클래스에 private inner class에 추상 클래스를 상속받아 재정의 
    private class AbstractVendingDelegator extends AbstractVending {
         @Override
         public void chooseProduct() {
            System.out.println(&quot;Produce diiferent candies&quot;);
            System.out.println(&quot;Choose a type of candy&quot;);
            System.out.println(&quot;pay for candy&quot;);
            System.out.println(&quot;collect candy&quot;);
         }
    }

    // inner class의 객체를 변수로 포워딩 
    AbstractVendingDelegator delegator = new AbstractVendingDelegator();
    
    @Override
    public void start() {
        delegator.start(); // 각 메서드 호출을 내부 클래스의 인스턴스 메서드 호출
    }
    
    @Override
    public void chooseProduct() {
        delegator.chooseProduct();
    }
    
    @Override
    public void stop() {
        delegator.stop();
    }
    
    @Override
    public void process() {
        delegator.process();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인터페이스로 인한 중복을 추상클래스로 지우고 Delegator 패턴으로 추상 클래스 상속에 대한 단점을 지울수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 20 Jun 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-06-20/skeletal_implementation/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-06-20/skeletal_implementation/</guid>
      </item>
    
      <item>
        <title>Sign up, Sign in 구현</title>
        <description>&lt;h1 id=&quot;issue-54&quot;&gt;issue #54&lt;/h1&gt;

&lt;h3 id=&quot;user-entity&quot;&gt;User Entity&lt;/h3&gt;

&lt;p&gt;서비스에서 필요한 uid, name, profile image만 갖고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;sns로 로그인하기 때문에 uid를 저장     &lt;br /&gt;
사용자를 식별할 수 있는 uid가 있지만 pk는 MySQL의 auto increment로 설정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본 생성자의 접근 제어자 : protected, Builder 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setter나 필드를 수정할 수 있는 메서드는 없다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;userrepository&quot;&gt;UserRepository&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CRUD 처리를 위한 공통 인터페이스&lt;/li&gt;
  &lt;li&gt;oprional 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sign-up&quot;&gt;Sign up&lt;/h3&gt;

&lt;p&gt;kakao에서 제공하는 API를 활용하여 사용자 인증과 정보를 받는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kakao에서 제공하는 절차 &lt;br /&gt;
&lt;img width=&quot;478&quot; alt=&quot;스크린샷 2021-06-22 오후 11 03 08&quot; src=&quot;https://user-images.githubusercontent.com/33855307/122938801-05340e80-d3ae-11eb-9982-cee8d0770faa.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;litebook에서 진행되는 상세 절차   &lt;br /&gt;
&lt;img width=&quot;797&quot; alt=&quot;스크린샷 2021-06-22 오후 11 03 51&quot; src=&quot;https://user-images.githubusercontent.com/33855307/122938920-1f6dec80-d3ae-11eb-8262-2e43074ca000.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;

&lt;h4 id=&quot;q-user-entity-기본-생성자-접근자를-protected로-변경한-이유는&quot;&gt;Q. User Entity 기본 생성자 접근자를 protected로 변경한 이유는?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new User()&lt;/code&gt;을 막을 수 있어 &lt;strong&gt;객체의 일관성을 유지&lt;/strong&gt;할 수 있다.               &lt;br /&gt;
private이 아닌 protected로 설정하는 이유는 JPA에서 기본 생성자가 필요한데              &lt;br /&gt;
protected로 제어하는 것까지 허용되기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-jpa-기본-생성자가-필요한-이유는&quot;&gt;Q. JPA 기본 생성자가 필요한 이유는?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; 지연 로딩을 사용하는 경우    &lt;br /&gt;
임시로 hibernate가 생성한 proxy 객체를 사용하게 되는데      &lt;br /&gt;
이러한 proxy 객체는 해당 class를 상속하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; 혹은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; 기본 생성자가 필요하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-builder-패턴을-사용한-이유는&quot;&gt;Q. Builder 패턴을 사용한 이유는?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; &lt;strong&gt;불필요한 Setter 생성을 방지하고 불변 객체로 만들기 위함이다.&lt;/strong&gt;             &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder&lt;/code&gt; 어노테이션을 사용하여 빌더 패턴을 적용하였고            &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder&lt;/code&gt; 어노테이션을 선언하면 전체 인자를 갖는 생성자를 자동으로 만들기 때문에             &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AllArgsConstructor(access=AccessLevel.PRIVATE)&lt;/code&gt; 접근자를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;로 만들어            &lt;br /&gt;
외부에서 접근할 수 없도록 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-왜-optional을-사용했는가&quot;&gt;Q. 왜 Optional을 사용했는가?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; 우선 Optional 이란 존재할 수도 있지만 안 할 수도 있는 객체         &lt;br /&gt;
(null이 될 수도 있는 객체)를 감싸고 있는 일종의 래퍼 클래스다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;null 관련 문제
1) 런타임에서 NullPointerException 예외를 발생시킬 수 있다.
2) NPE 방어를 위해서 들어간 null 체크 로직 때문에 코드 가독성과 유지보수성이 떨어진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Optional로 객체를 감싸서 사용하게 되면서 NPE를 유발할 수 있는 &lt;strong&gt;null을 직접 다루지 않아도 된다.&lt;/strong&gt;            &lt;br /&gt;
실제 프로젝트에서 작성한 코드는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;userRepository.findByUid(uid).orElseThrow(() -&amp;gt; new NotFoundException(...));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-responseentityconstants는-왜-만들었는가&quot;&gt;Q. ResponseEntityConstants는 왜 만들었는가?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; api 응답에 필요한 Response 클래스를 별도로 만들어 &lt;strong&gt;재사용성을 높였다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-service-레이어에-인터페이스를-사용한-이유는&quot;&gt;Q. Service 레이어에 인터페이스를 사용한 이유는?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;A. 1) SocialAuthService 인터페이스&lt;/strong&gt;       &lt;br /&gt;
로그인으로 회원가입, 로그인을 진행하는데              &lt;br /&gt;
지금 구현한 kakao 로그인을 제외하고 naver, google, facebook 등              &lt;br /&gt;
&lt;strong&gt;확장성&lt;/strong&gt;을 고려해 인터페이스를 사용했다.&lt;/p&gt;

&lt;p&gt;또한 제네릭으로 파라미터 타입을 제한하여            &lt;br /&gt;
회원가입, 로그인 로직에 필요한 추가 필드나 로직이 있는 경우         &lt;br /&gt;
누구도 수정이 편리하도록 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) LoginService 인터페이스&lt;/strong&gt;          &lt;br /&gt;
현재 구현한 로그인 방식은 세션 로그인 방식이다.               &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KakaoAuthService.java&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signIn()&lt;/code&gt; 메서드의 코드에서                 &lt;br /&gt;
kakao api를 활용하여 사용자 인증 과정과 세션 로그인이 필요하다.&lt;/p&gt;

&lt;p&gt;그런데 위에서 설명한 회원가입, 로그인 방식이 확장되면  &lt;br /&gt;
세션 로그인 코드는 계속 중복되서 나타날 것이고  &lt;br /&gt;
만약 세션 로그인이 아닌 jwt나 spring security 등으로 변경되는 경우   &lt;br /&gt;
많은 코드를 변경해야 한다.&lt;/p&gt;

&lt;p&gt;LoginService 인터페이스를 구현해서 &lt;br /&gt;
반복되는 코드를 줄이고 확장을 대비할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Thu, 17 Jun 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-06-17/issue54/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-06-17/issue54/</guid>
      </item>
    
      <item>
        <title>클래스와 인터페이스</title>
        <description>&lt;p&gt;클래스와 인터페이스를 쓰기 편하고, 견고하며 유연하게 만드는 방법을 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;15-클래스와-멤버의-접근-권한을-최소화하라&quot;&gt;15. 클래스와 멤버의 접근 권한을 최소화하라.&lt;/h2&gt;

&lt;p&gt;어설프게 설계된 컴포넌트와 잘 설계된 컴포넌트의 가장 큰 차이는?        &lt;br /&gt;
클래스 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터 얼마나 잘 숨겼느냐다.&lt;/p&gt;

&lt;p&gt;잘 설계된 컴포넌트는 모든 내부 구현을 완벽히 숨겨 구현과 API를 깔끔히 분리한다.    &lt;br /&gt;
이는 정보은닉, 혹은 캡슐화라고 하는 개념이기도 하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정보-은닉의-장점&quot;&gt;정보 은닉의 장점&lt;/h3&gt;

&lt;p&gt;1) 시스템 개발 속도를 높인다.  &lt;br /&gt;
   여러 컴포넌트를 병렬로 개발할 수 있기 때문이다.
   &lt;br /&gt;
2) 시스템 관리 비용을 낮춘다.  &lt;br /&gt;
   각 컴포넌트를 빠르게 파악할 수 있고 교체 부담이 감소한다.  &lt;br /&gt;
   &lt;br /&gt;
3) 정보 은닉 자체가 성능을 높여주지는 않지만 성능 최적에 도움이 된다.     &lt;br /&gt;
   완성된 시스템을 프로파일링해 최적화할 컴포넌트를 정해   &lt;br /&gt;
   다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만 최적화할 수 있기 때문이다.      &lt;br /&gt;
   &lt;br /&gt;
4) 소프트웨어 재사용성을 높인다.  &lt;br /&gt;
   &lt;br /&gt;
5) 큰 시스템을 제적하는 난이도를 낮춘다.         &lt;br /&gt;
   시스템 전체가 완성되지 않아도 개별 컴포넌트의 동작을 검증할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자바는 정보 은닉을 위한 다양한 장치를 제공한다.    &lt;br /&gt;
그중 &lt;strong&gt;접근 제어 매커니즘&lt;/strong&gt;은 클래스, 인터페이스, 멤버의 접근성 (접근 허용 범위)을 명시한다.     &lt;br /&gt;
각 요소의 접근성은 그 요소가 선언된 위치, 접근 제한자(private, protected, public)로 정해진다.&lt;/p&gt;

&lt;p&gt;접근 제한자를 제대로 활용하는 것이 정보 은닉의 핵심이다.  &lt;br /&gt;
기본 원칙은 &lt;strong&gt;모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다&lt;/strong&gt;는 것이다.    &lt;br /&gt;
소프트웨어가 올바른 동작을 하는 한 항상 가장 낮은 접근 수준을 부여해야 한다고 할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(가장 바깥) 탑레벨 클래스와 인터페이스에 부여할 수 있는 접근 수준은 &lt;br /&gt;
package-private와 public이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package-private : 해당 패키지에서만 이용할 수 있다.       &lt;br /&gt;
package-private으로 선언하면 API가 아닌 내부 구현이 되어 언제든 수정할 수 있다.  &lt;br /&gt;
즉, 클라이언트에 아무런 피해 없이 다음 릴리스에서 수정, 교체, 제거할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;public : API가 되므로 하위 호환을 위해 영원히 관리해줘야만 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 클래스에서만 사용하는 package-private 탑레벨 클래스나 인터페이스는  &lt;br /&gt;
이를 사용하는 클래스 안에 private static으로 중첩시켜보자.   &lt;br /&gt;
탑레벨로 두면 같은 패키지의 모든 클래스가 접근할 수 있지만 private static으로 중첩시키면 &lt;br /&gt;
바깥 클래스 하나에서만 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;이보다 더 중요한 것은 &lt;strong&gt;public일 필요가 없는 클래스의 접근 수준을 package-private 탑레벨 클래스로 좁히는 일&lt;/strong&gt;이다.  &lt;br /&gt;
public 클래스는 그 패키지의 API인 반면, package-private 탑레벨 클래스는 내부 구현에 속하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;멤버(필드, 메서드, 중첩 클래스, 중첩 인터페이스)에 부여할 수 있는 접근 수준은 네 가지다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;private: 멤버를 선언한 탑레벨 클래스에서만 접근할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;package-private: 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다.           &lt;br /&gt;
접근 제한자를 명시하지 않았을 때 적용되는 패키지 접근 수준이다.           &lt;br /&gt;
(단, 인터페이스의 멤버는 기본적으로 public이 적용된다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected: package-private의 접근 범위를 포함하며,       &lt;br /&gt;
이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다.          &lt;br /&gt;
(제약이 조금 따름)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public: 모든 곳에서 접근할 수 있다.        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;private와 package-private 멤버는 모두 해당 클래스의 구현에 해당하므로 보통은 공개 API에 영향을 주지 않는다.   &lt;br /&gt;
단, Serializable을 구현한 클래스에서는 그 필드들도 외도치 않게 공개 API가 될 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;public 클래스에서 멤버의 접근 수준을 package-private에서 protected로   &lt;br /&gt;
바꾸는 순간 그 멤버에 접근할 수 있는 대상 범위가 넓어진다.     &lt;br /&gt;
public클래스의 protected 멤버는 공개 API이므로 영원히 지원돼야 한다. &lt;br /&gt;
따라서 protected 멤버의 수는 적을수록 좋다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;멤버 접근성을 좁히지 못하게 방해하는 제약이 있다.       &lt;br /&gt;
상위 클래스의 메서드를 재정의할 때는 그 접근 수준을 상위 클래스에서보다 좁게 설정할 수 없다는 것이다.      &lt;br /&gt;
이 제약은 상위 클래스의 인스턴스는 하위 클래스의 인스턴스로 대체해 사용할 수 있어야 한다는 규칙   &lt;br /&gt;
(리스코프 치환 원칙)을 지키기 위해 필요하다.          &lt;br /&gt;
클래스가 인터페이스를 구현하는 건 이 규칙의 특별한 예로 볼 수 있고   &lt;br /&gt;
이때 클래스는 인터페이스가 정의한 모든 메서드를 public으로 선언해야 한다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다.&lt;/strong&gt;      &lt;br /&gt;
필드가 가변 객체를 참조하거나 final이 아닌 인스턴스 필드를 public으로 선언하면      &lt;br /&gt;
그 필드에 담을 수 있는 값을 제한할 힘을 잃게 된다.&lt;/p&gt;

&lt;p&gt;또한 필드가 수정될 때 (락 획득 같은) 다른 작업을 할 수 없게 되므로       &lt;br /&gt;
&lt;strong&gt;public 가변 필드를 갖는 클래스는 일반적으로 스레드 안전하지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 문제는 정적 필드에서도 마찬가지이나, 예외가 하나 있다.                &lt;br /&gt;
필요한 구성 요소는 상수로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static final&lt;/code&gt; 필드로 공개해도 좋다.&lt;/p&gt;

&lt;p&gt;길이가 0이 아닌 배열은 모두 변경 가능하니 주의하자.     &lt;br /&gt;
따라서 &lt;strong&gt;클래스에서 public static final 배열 필드를 두거나      &lt;br /&gt;
이 필드를 반환하는 접근자 메서드를 제공해서는 안 된다.&lt;/strong&gt;          &lt;br /&gt;
이런 필드는 클라이언트에서 내용을 수정할 수 있게 되고 다음과 같은 보안 허점이 존재한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static final Thing[] VALUES = { ... };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 IDE가 생성하는 접근자는 private 배열 필드의 참조를 반환하여  &lt;br /&gt;
이 같은 문제를 똑같이 일으키니 주의해야 한다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해결책은 두 가지다.&lt;/p&gt;

&lt;h4 id=&quot;1-앞-코드의-public-배열을-private으로-만들고-public-불변-리스트-추가&quot;&gt;1) 앞 코드의 public 배열을 private으로 만들고 public 불변 리스트 추가&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static final Thing[] PRIVATE_VALUES = { ... };
public static final List&amp;lt;Thing&amp;gt; VALUES = 
    Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-배열을-private으로-만들고-그-복사본을-반환하는-public-메서드를-추가방어적-복사&quot;&gt;2. 배열을 private으로 만들고 그 복사본을 반환하는 public 메서드를 추가(방어적 복사)&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static final Thing[] PRIVATE_VALUES = { ... };
public static final Thing[] values() {
    return PRIVATE_VALUES.clone();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트가 무엇을 원하는지 판단해 둘 중 하나를 선택하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자바 9에서는 모듈 시스템이라는 개념이 도입되면서 &lt;strong&gt;두 가지 암묵적 접근 수준&lt;/strong&gt;이 추가되었다.     &lt;br /&gt;
패키지가 클래스들의 묶음이듯, 모듈은 패키지들의 묶음이다.  &lt;br /&gt;
모듈은 자신에 속하는 패키지 중 공개(export)할 것들을 선언한다.  &lt;br /&gt;
protected 혹은 public 멤버라도 해당 패키지를 공개하지 않았다면 모듈 외부에서는 접근할 수 없다.  &lt;br /&gt;
모듈 시스템을 활용하면 클래스를 외부에 공개하지 않으면서도   &lt;br /&gt;
같은 모듈을 이루는 패키지 사이에서는 자유롭게 공유할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;두 가지 암묵 접근 수준은 숨겨진 패키지 안에 있는 &lt;br /&gt;
public 클래스의 public 혹은 protected 멤버와 관련이 있다.&lt;/p&gt;

&lt;p&gt;이 암묵적 접근 수준들은 각각 public 수준과 protected 수준과 같으나          &lt;br /&gt;
그 효과가 모듈 내부로 한정되는 변종인 것이다.     &lt;br /&gt;
이런 상황은 흔하지 않으며 패키지들 사이에서 클래스들을 재배치하면 대부분 해결된다.&lt;/p&gt;

&lt;p&gt;모듈의 JAR 파일을 자신의 모듈 경로가 아닌 애플리케이션의 클래스패스(classpath)에 두면            &lt;br /&gt;
그 모듈 안의 모든 패키지는 마치 모듈이 없는 것처럼 행동한다.     &lt;br /&gt;
즉 모듈이 공개했는지 여부와 상관없이 public 클래스가 선언한             &lt;br /&gt;
모든 public 혹은 protected 멤버를 모듈 밖에서도 접근할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;이를 활용한 대표적인 예가 JDK이다. &lt;br /&gt;
자바 라이브러리에서 공개하지 않은 패키지들은 해당 모듈 밖에서는 절대로 접근할 수 없다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;모듈의 장점을 누리려면 해야 할 일이 많다.  &lt;br /&gt;
먼저 패키지들을 모듈 단위로 묶고, 모듈 선언에 패키지들의 모든 의존성을 명시한다.  &lt;br /&gt;
다음 소스 트리를 재배치하고, 모듈 안으로부터 일반 패키지로의 모든 접근에 특별한 조치를 취해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;16-public-클래스에서는-public-필드가-아닌-접근자-메서드를-사용하라&quot;&gt;16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라.&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Point {
    public double x;
    public double y;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 클래스는 데이터 필드에 직접 접근할 수 있으니 캡슐화의 이점을 제공하지 못한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API를 수정하지 않고는 내부 표현을 바꿀 수 없고 불변식을 보장할 수 없다.&lt;/li&gt;
  &lt;li&gt;외부에서 필드에 접근할 때 부수 작업을 수행할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 private으로 바꾸고 public 접근자를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private double x;

public double getX() { return x; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;패키지 바깥에서 접근할 수 있는 클래스라면 접근자를 제공함으로써      &lt;br /&gt;
클래스 내부 표현 방식을 언제든 바꿀 수 있는 유연성을 얻을 수 있다.    &lt;br /&gt;
public 클래스가 필드를 공개하려면 이를 사용하는 클라이언트가 생기므로  &lt;br /&gt;
내부 표현 방식을 마음대로 바꿀 수 없게 된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package-private 클래스&lt;/strong&gt; 혹은 &lt;strong&gt;private 중첩 클래스&lt;/strong&gt;라면 데이터 필드를 노출한다 해도 하등의 문제가 없다.      &lt;br /&gt;
클라이언트 코드가 이 클래스 내부 표현에 묶이긴 하나,       &lt;br /&gt;
클라이언트도 어차피 이 클래스를 포함하는 패키지 안에서 동작하는 코드일 뿐이다.         &lt;br /&gt;
따라서 패키지 바깥 코드는 전혀 손대지 않고도 데이터 표현 방식을 바꿀 수 있다.      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;public 클래스의 필드가 불변이라면 직접 노출할 때의 단점이 조금은 줄어들지만 좋은 생각은 아니다.  &lt;br /&gt;
API를 변경하지 않고는 표현 방식을 바꿀 수 없고  &lt;br /&gt;
필드를 읽을 때 부수 작업을 수행할 수 없다는 단점이 여전하다.      &lt;br /&gt;
단, 불변식은 보장됨&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ex.&lt;/strong&gt; 불변 필드를 노출한 public 클래스&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final class Time {

    public final int hour;
    
    . . .
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;17-변경-가능성을-최소화하라&quot;&gt;17. 변경 가능성을 최소화하라.&lt;/h2&gt;

&lt;p&gt;불변 클래스란 그 인스턴스의 내부 값을 수정할 수 없는 클래스다.    &lt;br /&gt;
불변 클래스는 가변 클래스보다 설계하고 구현, 사용하기 쉬우며 오류 발생 확률도 적고 훨씬 안전하다.&lt;/p&gt;

&lt;p&gt;자바 플랫폼 라이브러리에도 다양한 불변 클래스가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;기본 타입의 박싱된 클래스들&lt;/li&gt;
  &lt;li&gt;BigInteger&lt;/li&gt;
  &lt;li&gt;BigDecimal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;클래스를 불변으로 만들려면 다음 5가지 규칙을 따르면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 상태를 변경하는 메서드를 제공하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스를 확장할 수 없도록 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 필드를 final로 선언한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 필드를 private으로 선언한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;불변-객체는-단순하다&quot;&gt;불변 객체는 단순하다.&lt;/h4&gt;

&lt;p&gt;불변 객체는 생성된 시점의 상태를 파괴할 때까지 그대로 간직한다.        &lt;br /&gt;
반면 가변 객체는 변경자 메서드의 상태 전이를 정밀하게 문서로 남겨놓지 않으면       &lt;br /&gt;
신뢰하기 어려울 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;불변-객체는-근본적으로-스레드-안전하여-따로-동기화할-필요가-없다&quot;&gt;불변 객체는 근본적으로 스레드 안전하여 따로 동기화할 필요가 없다.&lt;/h4&gt;

&lt;p&gt;다른 스레드에 영향을 줄 수 없으니 불변 객체는 안심하고 공유할 수 있다.     &lt;br /&gt;
따라서 불변 클래스라면 한번 만든 인스턴스를 최대한 &lt;strong&gt;재활용&lt;/strong&gt;하기 권한다.         &lt;br /&gt;
가장 쉬운 방법은 자주 쓰이는 값들을 상수 &lt;strong&gt;public static final&lt;/strong&gt;로 제공하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ex)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static final Complex ZERO = new Complex(0, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;불변 클래스는 자주 사용되는 인스턴스를 캐싱하여 같은 인스턴스를   &lt;br /&gt;
중복 생성하지 않게 해주는 정적 팩토리 메서드를 제공할 수 있다.      &lt;br /&gt;
박싱된 기본 타입 클래스 전부와 BigInteger가 여기 속한다. &lt;br /&gt;
이런 정적 팩토리를 사용하면 여러 클라이언트가 인스턴스를 공유하여  &lt;br /&gt;
메모리 사용량과 가비지 컬렉션 비용이 줄어든다.&lt;/p&gt;

&lt;p&gt;새로운 클래스를 설계할 때 public 생성자 대신 정적 팩토리를 만들어두면,    &lt;br /&gt;
클라이언트를 수정하지 않고도 필요에 따라 캐시 기능을 나중에 덧붙일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;불변-객체는-자유롭게-공유할-수-있음은-물론-불변-객체끼리는-내부-데이터를-공유할-수-있다&quot;&gt;불변 객체는 자유롭게 공유할 수 있음은 물론, 불변 객체끼리는 내부 데이터를 공유할 수 있다.&lt;/h4&gt;

&lt;p&gt;BigInteger를 예로 들자.                    &lt;br /&gt;
BigInteger 클래스 내부에서 값의 부호와 크기를 따로 표현하는데         &lt;br /&gt;
부호에는 int 변수를, 크기에는 int 배열을 사용하는 것이다.         &lt;br /&gt;
이때 배열은 비록 가변이지만 복사하지도 않고 원본 인스턴스가 가리키는 내부 배열을 그대로 가리킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;객체를-만들-때-다른-불변-객체들을-구성요소로-사용하면-이점이-많다&quot;&gt;객체를 만들 때 다른 불변 객체들을 구성요소로 사용하면 이점이 많다.&lt;/h4&gt;

&lt;p&gt;구조가 아무리 복잡하더라도 불변식을 유지하기 훨씬 수월하기 때문이다.    &lt;br /&gt;
좋은 예로, 불변 객체는 맵의 키와 집합(Set) 원소로 쓰기에 안성맞춤이다.    &lt;br /&gt;
맵이나 집합은 안에 담긴 값이 바뀌면 불변식이 허물어지는데    &lt;br /&gt;
불변 객체를 사용하면 그런 걱정은 하지 않아도 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;불변-객체는-그-자체로-실패-원자성을-제공한다&quot;&gt;불변 객체는 그 자체로 실패 원자성을 제공한다.&lt;/h4&gt;

&lt;p&gt;상태가 절대 변하지 않으니 불일치 상태에 빠질 가능성이 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실패 원자성 : &lt;br /&gt;
메서드에서 예외가 발생한 후에도 그 객체는 여전히 유효한 상태이어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;불변-클래스에도-단점은-있다-값이-다른면-반드시-독립된-객체로-만들어야-한다는-것이다&quot;&gt;불변 클래스에도 단점은 있다. 값이 다른면 반드시 독립된 객체로 만들어야 한다는 것이다.&lt;/h4&gt;

&lt;p&gt;값의 가짓수가 많다면 이를 모두 만드는 데 큰 비용을 처리해야 한다.&lt;/p&gt;

&lt;details&gt;                                       
&lt;summary&gt;ex) 백만 비트짜리 BigInteger에서 비트 하나를 바꿔야 한다.&lt;/summary&gt;                                    
&lt;div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BigInteger moby = ...;
moby = moby.flipBit(0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;flipBit 메서드는 새로운 BigInteger 인스턴스를 생성한다.  &lt;br /&gt;
원본과 한 비트만 다른 백만 비트짜리 인스턴스를 만들었다. &lt;br /&gt;
이 연산은 BigInteger의 크기에 비례해 시간과 공간을 잡아먹는다.&lt;/p&gt;

    &lt;p&gt;BigInteger처럼 임의 길이의 비트 순열을 표현하는 BitSet은 가변이고  &lt;br /&gt;
원하는 비트 하나만 상수 시간 안에 바꿔주는 메서드를 제공한다.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BigSet moby = ...;
moby.flip(0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;원하는 객체를 완성하기까지의 단계가 많고,   &lt;br /&gt;
그 중간 단계에서 만들어진 객체들이 모두 버려진다면 성능 문제가 더 불거진다.&lt;/p&gt;

    &lt;p&gt;이 문제를 해결하는 방법은 다음 두 가지이다.&lt;/p&gt;

    &lt;h4 id=&quot;multistep-operation----&quot;&gt;1. 다단계 연산 (multistep operation)들을 예측하여 기본 기능으로 제공&lt;/h4&gt;

    &lt;p&gt;이런 다단계 연산을 기본으로 제공하면 더 이상 각 단계마다 객체를 생성하지 않아도 된다.  &lt;br /&gt;
불변 객체는 내부적으로 아주 영리한 방식으로 구현할 수 있기 때문이다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

    &lt;h4 id=&quot;package-private-----&quot;&gt;2. 클라이언트들이 원하는 복잡한 연산들을 정확히 예측할 수 있으면 package-private의 가변 동반 클래스 만으로 충분하다.&lt;/h4&gt;

    &lt;p&gt;그렇지 않다면 이 클래스를 public으로 제공하는 것이 최선이다.               &lt;br /&gt;
대표적인 예로 String 클래스가 있다.              &lt;br /&gt;
String의 가변 동반 클래스가 StringBuilder(와 StringBuffer)&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  &lt;/div&gt;                                
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;불변 클래스를 만드는 또 다른 설계 방법 몇 가지가 있다. &lt;br /&gt;
클래스가 불변임을 보장하려면 자신을 상속하지 못하게 해야 한다고 했는데  &lt;br /&gt;
가장 쉬운 방법은 final 클래스로 선언하는 것이지만, 더 유연한 방법이 있다.&lt;/p&gt;

&lt;p&gt;모든 &lt;strong&gt;생성자를 private 혹은 package-private으로&lt;/strong&gt; 만들고 &lt;strong&gt;public 정적 팩토리를 제공&lt;/strong&gt;하는 방법이다.    &lt;br /&gt;
다음은 구체적인 예제 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Complex {
  private final double re;
  private final double im;
  
  private Complex(double re, double im) {
    this.re = re;
    this.im = im;
  }
  
  public static Complex valueOf(double re, double im) {
    return new Complex(re, im);
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 방식이 최선일 때가 많다.&lt;/p&gt;

&lt;p&gt;바깥에서 볼 수 없는 package-private 구현 클래스를 원하는 만큼 만들어 활용할 수 있으니 훨씬 유연하다.      &lt;br /&gt;
패키지 바깥의 클라이언트 입장에서 이 불변 객체는 사실상 final이다.       &lt;br /&gt;
정적 팩토리 방식은 다수의 구현 클래스를 활용한 유연성을 제공하고,   &lt;br /&gt;
다음 릴리스에서 객체 캐싱 기능을 추가해 성능을 끌어올릴 수도 있다.&lt;/p&gt;

&lt;details&gt;                                       
&lt;summary&gt;BigInteger는?&lt;/summary&gt;                                     
&lt;div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;BigInteger와 BigDecimal의 메서드들은 모두 재정의할 수 있게 설계되었고,  &lt;br /&gt;
하위 호환성이 발목을 잡아 아직 문제 해결을 하지 못했다.   &lt;br /&gt;
때문에 만약 신뢰할 수 없는 클라이언트로부터 BigInteger와 BigDecimal 인스턴스를 &lt;br /&gt;
인수로 받는다면 주의해야 한다.  &lt;br /&gt;
이 값들이 불변이어야 보안을 지킬 수 있다면 인수로 받은 객체가 진짜인지 확인해야 한다.  &lt;br /&gt;
신뢰할 수 없는 하위 클래스의 인스턴스라고 확인되면, 이 인수들을 가변이라고 가정하고  &lt;br /&gt;
방어적으로 복사해 사용해야 한다는 뜻이다.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static BigInteger safeInstance(BigInteger val) {
    return val.getClass() == BigInteger.class ?
           val : new BigInteger(val.toByteArray());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  &lt;/div&gt;                                  
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;정리&quot;&gt;정리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;어떤 메서드도 객체의 상태 중 외부에 비치는 값을 변경할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스는 꼭 필요한 경우가 아니라면 불변이어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;불변으로 만들 수 없는 클래스라도 변경할 수 있는 부분은 최소화하자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 합당한 이유가 없다면 모든 필드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private final&lt;/code&gt; 이어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성자는 불변식 설정이 모두 완료된, 초기화가 완벽히 끝난 상태의 객체를 생성해야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/122661409-d27af200-d1c4-11eb-8134-25a3966b7afa.jpg&quot; alt=&quot;️이펙티브자바_210619_234935_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/122661407-d149c500-d1c4-11eb-8a56-76e7ac6620df.jpg&quot; alt=&quot;️이펙티브자바_210619_234935_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/122661406-d0189800-d1c4-11eb-8e32-a893344f0c91.jpg&quot; alt=&quot;️이펙티브자바_210619_234935_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/122661404-cbec7a80-d1c4-11eb-87a4-801097e469c8.jpg&quot; alt=&quot;️이펙티브자바_210619_234935_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;20-추상-클래스보다는-인터페이스를-우선하라&quot;&gt;20. 추상 클래스보다는 인터페이스를 우선하라.&lt;/h2&gt;

&lt;p&gt;자바가 제공하는 다중 구현 매커니즘은 &lt;strong&gt;인터페이스&lt;/strong&gt;와 &lt;strong&gt;추상 클래스&lt;/strong&gt;다.       &lt;br /&gt;
자바 8부터 인터페이스도 디폴트 메서드를 제공할 수 있게 되어 두 메커니즘 모두 인스턴스 메서드를 구현 형태로 제공할 수 있다.         &lt;br /&gt;
둘의 가장 큰 차이는 &lt;strong&gt;추상 클래스가 정의한 타입을 구현하는 클래스는 반드시 추상 클래스의 하위 클래스가 되어야 한다&lt;/strong&gt;는 점이다.      &lt;br /&gt;
자바는 단일 상속만 지원하므로 추상 클래스 방식은 &lt;strong&gt;새로운 타입을 정의하는 데 커다란 제약&lt;/strong&gt;을 갖고 있는 것이다.&lt;/p&gt;

&lt;p&gt;반면 기존 클래스 위에 새로운 추상 클래스를 끼워넣기는 어려운 게 일반적이다.   &lt;br /&gt;
두 클래스가 같은 추상 클래스를 확장하길 원한다면, 그 추상 클래스는 계층구조상 두 클래스의 공통 조상이어야 한다.      &lt;br /&gt;
이 방식은 클래스 계층구조에 혼란을 일으킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인터페이스는 믹스인(mixin) 정의에 안성맞춤이다.     &lt;br /&gt;
&lt;strong&gt;믹스인이란 클래스가 구현할 수 있는 타입&lt;/strong&gt;으로 믹스인을 구현한 클래스에     &lt;br /&gt;
원래의 ‘주된 타입’ 외에도 &lt;strong&gt;특정 선택적 행위를 제공한다고 선언하는 효과&lt;/strong&gt;를 준다.       &lt;br /&gt;
예) Comparable은 자신을 구현한 클래스의 인스턴스들끼리는 순서를 정할 수 있다고 선언하는 믹스인 인터페이스이다.&lt;/p&gt;

&lt;p&gt;추상 클래스로는 믹스인을 정의할 수 없다.  &lt;br /&gt;
이유는 앞서와 같이, 기존 클래스에 덧씌울 수 없기 때문이다.        &lt;br /&gt;
클래스는 두 부모를 둘 수 없고 클래스 계층구조에는 믹스인을 삽입하기에 합리적인 위치가 없기 때문이다.&lt;/p&gt;

&lt;p&gt;mixin에 대해 더 알아보기 : &lt;a href=&quot;https://hyerin6.github.io/2021-06-21/mixin/&quot;&gt;https://hyerin6.github.io/2021-06-21/mixin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인터페이스로는 계층구조가 없는 타입 프레임워크를 만들 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Singer {
    AudioClip sing(Song s);
}

public interface SongWriter {
    Song compose(int chartPosition);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 가수 인터페이스와 작곡가 인터페이스가 있다.       &lt;br /&gt;
우리 주변에 작곡도 하는 가수가 제법있는데,  &lt;br /&gt;
타입을 인터페이스로 정의하면 가수 클래스가 Singer와 Songwriter 모두를 구현해도 문제가 없다.    &lt;br /&gt;
Singer와 Songwriter 모두를 확장하고 새로운 메서드까지 추가한 제 3의 인터페이스를 정의할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Singer와 Songwriter 모두 구현 
public class People implements Singer, SongWriter {
    @Override
    public void Sing(String s) {

    }
    @Override
    public void Compose(int chartPosition) {

    }
}

// Singer와 Songwriter 모두 확장, 새로운 메서드까지 추가한 제 3의 인터페이스 정의 
public interface SingerSongWriter extends Singer, Songwriter {
        AudioClip strum();
        void actSensitive();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 구조를 클래스로 만들려면?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class Singer {
    abstract void sing(String s);
}

public abstract class SongWriter {
    abstract void compose(int chartPosition);
}

public abstract class SingerSongWriter {
    abstract void strum();
    abstract void actSensitive();
    abstract void Compose(int chartPosition);
    abstract void sing(String s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;가능한 조합 전부를 각각의 클래스로 정의한 고도비만 계층구조가 만들어질 것이다.      &lt;br /&gt;
추상 클래스로 만들었기 때문에 Singer 클래스와 SongWriter 클래스를 둘다 상속할 수 없어     &lt;br /&gt;
다음과 같은 SingerSongWriter라는 또 다른 추상 클래스를 만들어서 클래스 계층을 표현할 수 밖에 없다.    &lt;br /&gt;
매개변수 타입만 다른 메서드들을 수없이 많이 가진 거대한 클래스를 낳을 수 있다. &lt;br /&gt;
이는 조합 폭발(combinato-rial explosion)이라고 부르는 현상이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;래퍼 클래스 관용구와 함께 사용하면 인터페이스는 기능을 향상 시키는 안전하고 강력한 수단이 된다.&lt;/strong&gt; &lt;br /&gt;
타입을 추상 클래스로 정의해두면 그 타입에 기능을 추가하는 방법은 상속뿐이다.     &lt;br /&gt;
상속해서 만든 클래스는 래퍼 클래스보다 활용도가 떨어지고 깨지기는 더 쉽다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인터페이스 메서드 중 구현 방법이 명백한 것이 있다면, 그 구현을 디폴트 메서드로 제공할 수 있다.  &lt;br /&gt;
그런데 디폴트 메서드에도 제약은 있다.&lt;/p&gt;

&lt;p&gt;1) Object의 equals, hashcode 같은 메서드는 디폴트 메서드로 제공해서는 안된다.
2) public이 아닌 정적 멤버도 가질 수 없다.
3) 본인이 만들지 않은 인터페이스에는 디폴트 메서드를 추가할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;인터페이스와 추상 골격 구현 (skeletal implementation) 클래스를 함께 제공하는 식으로  &lt;br /&gt;
인터페이스와 추상 클래스의 장점을 가질 수 있다.  &lt;br /&gt;
인터페이스로 타입 정의, 필요한 디폴트 메서드 구현     &lt;br /&gt;
추상 골격 구현 클래스는 나머지 메서드까지 구현   &lt;br /&gt;
이렇게 골격 구현을 확장하는 것만으로 이 인터페이스를 구현하는데 필요한 일이 대부분 완료된다.  &lt;br /&gt;
이는 템플릿 메서드 패턴과 같다.&lt;/p&gt;

&lt;p&gt;예) 컬렉션 프레임워크의 AbstractList, AbstractSet 클래스   &lt;br /&gt;
두 추상 클래스는 각각 List, Set 인터페이스의 추상 골격 구현 클래스이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;추상 골격 구현 클래스는 아래 게시물에서 더 알아보자.&lt;br /&gt;
&lt;a href=&quot;https://hyerin6.github.io/2021-06-20/skeletal_implementation/&quot;&gt;https://hyerin6.github.io/2021-06-20/skeletal_implementation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 게시물에서 예제로 인터페이스의 디폴트 메소드를 사용하지 않고 추상 골격 구현 클래스를 만들어 중복을 제거했다.      &lt;br /&gt;
그런데 Vending을 구현하는 구현 클래스가 VendingManuFacturer라는 제조사 클래스를 상속받아야해서  &lt;br /&gt;
추상 골격 구현을 확장하지 못하는 상황일 땐 어떻게 해야할까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class VendingManuFacturer {
    public void printManufacturerName() { . . . }
}

// 상속받아야 하는 클래스를 구현체가 상속받는다.
public class SnackVending extends VendingManufacturer implements Vending {
    InnerAbstractVending innerAbstractVending = new InnerAbstractVending();

    @Override
    public void start() {
        innerAbstractVending.start();
    }

    @Override
    public void chooseProduct() {
        innerAbstractVending.chooseProduct();
    }

    @Override
    public void stop() {
        innerAbstractVending.stop();
    }

    @Override
    public void process() {
        printManufacturerName();
        innerAbstractVending.process();
    }

    private class InnerAbstractVending extends AbstractVending {
        @Override
        public void chooseProduct() {
            System.out.println(&quot;choose product&quot;);
            System.out.println(&quot;chocolate&quot;);
            System.out.println(&quot;cracker&quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인터페이스를 구현한 클래스에서 해당 골격 구현을 확장한 private 내부 클래스를 정의하고      &lt;br /&gt;
&lt;strong&gt;각 메소드 호출을 내부 클래스의 인스턴스에 전달하여 골격 구현 클래스를 우회적으로 이용&lt;/strong&gt;하는 방식을      &lt;br /&gt;
&lt;strong&gt;시뮬레이트한 다중 상속&lt;/strong&gt;(simulated multiple inheritance)이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단순-구현simple-implementation&quot;&gt;단순 구현(simple implementation)&lt;/h3&gt;

&lt;p&gt;단순 구현은 골격 구현의 작은 변종이다.    &lt;br /&gt;
단순 구현도 골격 구현과 같이 상속을 위해 인터페이스를 구현한 것이지만,    &lt;br /&gt;
추상 클래스가 아니란 점이 다르다.  &lt;br /&gt;
이러한 단순 구현은 그대로 써도 되고 필요에 맞게 확장해도 된다.    &lt;br /&gt;
예) AbstractMap.SimpleEntry&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;           &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-인터페이스는-구현하는-쪽을-생각해-설계하라&quot;&gt;21. 인터페이스는 구현하는 쪽을 생각해 설계하라.&lt;/h2&gt;

&lt;p&gt;자바 8전에 기존 구현체를 깨뜨리지 않고는 인터페이스에 메서드를 추가할 방법이 없었다.        &lt;br /&gt;
자바 8에서 기존 인터페이스에 메서드를 추가할 수 있도록 디폴트 메서드를 소개했지만,     &lt;br /&gt;
위험이 완전히 사라진 것은 아니다.&lt;/p&gt;

&lt;p&gt;디폴트 메서드를 선언하면 그 인터페이스를 구현한 후   &lt;br /&gt;
디폴트 메서드를 재정의하지 않은 모든 클래스에서 디폴트 구현이 쓰이게 된다.    &lt;br /&gt;
그러나 모든 기존 구현체들과 매끄럽게 연동되리라는 보장은 없다.  &lt;br /&gt;
디폴트 메서드는 구현 클래스에 대해 아무것도 모른 채 합의 없이 삽입될 뿐이다.&lt;/p&gt;

&lt;p&gt;자바 8에서 핵심 컬렉션 인터페이스들에 다수의 디폴트 메서드가 추가되었다.  &lt;br /&gt;
주로 람다를 활용하기 위해서다.  &lt;br /&gt;
하지만 생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하기란 어렵다.&lt;/p&gt;

&lt;h3 id=&quot;자바-8에서-추가된-collection-인터페이스-추가된-removeif-메서드&quot;&gt;자바 8에서 추가된 Collection 인터페이스 추가된 removeIf 메서드&lt;/h3&gt;

&lt;p&gt;반복자를 이용해 순회하면서 각 원소를 인수로 넣어 predicate를 호출해서,   &lt;br /&gt;
predicate가 true를 반환하면 iterator의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; 메서드를 호출해 원소를 제거 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default boolean removeIf(Predivate&amp;lt;? super E&amp;gt; filter) {
    Objects.requireNonNull(filter);
    boolean result = false;
    for ( Iterator&amp;lt;E&amp;gt; it = iterator(); it.hashNext(); ) {
        if (filter.test(it.next())) {
            it.remove();
            result = true;
        }
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Collection에 새롭게 들어간 디폴드 메서는 과연 모든 Collection에 대해 정상작동 할까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;apache가-만든-synchronizedcollection&quot;&gt;apache가 만든 SynchronizedCollection&lt;/h3&gt;

&lt;p&gt;이 클래스는 스레드 안정성을 위해서 동기화가 되어있는 List의 wrapper 클래스이다.        &lt;br /&gt;
다음과 같이 코드를 보면 동기화 코드가 있는걸 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @Override
    public boolean add(final E object) {
        synchronized (lock) {
            return decorated().add(object);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 이 클래스는 removeIf 메서드를 재정의하지 않는다.          &lt;br /&gt;
즉 자바8과 함께 쓴다면 &lt;strong&gt;스레드 안전성&lt;/strong&gt;을 갖지 못한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;removeIf의 구현은 동기화에 대해 아무것도 모르기 때문에 락 객체를 사용할 수 없다.  &lt;br /&gt;
SynchronizedCollection 인스턴스를 여러 스레드가 공유하는 환경에서 한 스레드가 removeIf를 호출하면  &lt;br /&gt;
ConcurrentModificationException이 발생하거나 다른 예기치 못한 결과로 이루어 질 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JDK에서 이런 문제를 예방하기 위해 구현 클래스에서 removeIf() 디폴트 메서드를 재정의했다.&lt;/p&gt;

&lt;h3 id=&quot;collectionssynchronizedcollection-클래스의-removeif&quot;&gt;Collections.synchronizedCollection 클래스의 removeIf()&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public boolean removeIf(Predicate&amp;lt;? super E&amp;gt; filter) {
    synchronized (mutex) {
        return c.removeIf(filter);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 JDK에 속하지 않은 제 3의 기존 컬렉션 구현체들은 이런 언어 차원의 인터페이스에 맞춰 수정될 기회가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;해결-방법은&quot;&gt;해결 방법은?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기존 인터페이스에 디폴트 메서드로 새 메서드를 추가하는 일은 꼭 필요한 경우가 아니면 피해야 한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;새로운 인터페이스를 만드는 경우라면 표준적인 메서드 구현을 제공하는 데 아주 유용한 수단이다.     &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;디폴트 메서드는 인터페이스로부터 메서드를 제거하거나 기존 메서드의 시그니처를 수정하는 용도가 아님을 명심        &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;디폴트 메서드라는 도구가 생겼어도 인터페이스 설계는 세심하게  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;새로운 인터페이스는 릴리스 전에 반드시 테스트를 거쳐야 한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;인터페이스를 릴리스한 후라도 결함을 수정하는게 가능한 경우도 있겠지만, 절대 그 가능성에 기대서는 안된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;22-인터페이스는-타입을-정의하는-용도로만-사용하라&quot;&gt;22. 인터페이스는 타입을 정의하는 용도로만 사용하라.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스 : 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할&lt;/li&gt;
  &lt;li&gt;인터페이스 구현 : 자신의 인스턴스로 무엇을 할 수 있는지 클라이언트에게 얘기해주는 것    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예) 상수 인터페이스  &lt;br /&gt;
메서드 없이 상수를 뜻하는 static final 필드만 갖고 있는 인터페이스  &lt;br /&gt;
정규화된 이름을(qualified name) 쓰는 것을 피하고자 이 인터페이스를 구현한다.&lt;/p&gt;

&lt;p&gt;상수는 내부 구현에 해당한다.     &lt;br /&gt;
상수 인터페이스 구현     &lt;br /&gt;
-&amp;gt; 내부 구현을 클래스의 API로 노출하는 행위        &lt;br /&gt;
-&amp;gt; 클라이언트 코드가 내부 구현에 해당하는 이 상수들에 종속&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;23-태그-달린-클래스보다는-클래스-계층구조를-활용하라&quot;&gt;23. 태그 달린 클래스보다는 클래스 계층구조를 활용하라.&lt;/h2&gt;

&lt;p&gt;두 가지 이상의 의미를 표현할 수 있으며,    &lt;br /&gt;
그중 현재 표현하는 의미를 태그 값으로 알려주는 클래스가 있다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;예-원과-사각형을-표현할-수-있는-클래스&quot;&gt;예) 원과 사각형을 표현할 수 있는 클래스&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Figure {
    enum Shape { RECTANGLE, CIRCLE };
    
    // 태그 필드 - 현재 모양을 나타낸다.   
    final Shape shape;
    
    // 다음 필드들은 모양이 사각형일 때만 쓰인다. (RECTANGLE)
    double length;
    double width;
    
    // 다음 필드는 모양이 원일 때만 쓰인다. (CIRCLE)   
    double radius;
    
    // 사각형 생성자   
    Figure(double length, double width) { . . . }
    
    // 원 생성자 
    Figure(double radius) { . . . }
    
    double area() {
        switch(shape) {
            . . .
        }
    }
     
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;태그 달린 클래스에는 단점이 한가득이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;열거 타입 선언&lt;/li&gt;
  &lt;li&gt;태그 필드&lt;/li&gt;
  &lt;li&gt;switch&lt;/li&gt;
  &lt;li&gt;가독성&lt;/li&gt;
  &lt;li&gt;다른 의미를 위한 코드로 인한 메모리 낭비&lt;/li&gt;
  &lt;li&gt;필드를 final로 선언하려면 해당 의미에 쓰이지 않는 필드도 생성자에서 초기화해야함&lt;/li&gt;
  &lt;li&gt;또 다른 의미를 추가하면 코드 수정 (ex. switch 문을 찾아 새 의미 처리 코드 추가)&lt;/li&gt;
  &lt;li&gt;인스턴스의 타입만으로 현재 나타내는 의미를 알 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;태그 달린 클래스는 장황하고, 오류를 내기 쉽고 비효율적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체 지향 언어는 타입 하나로 다양한 의미의 객체를 표현하는 훨씬 나은 수단을 제공한다. &lt;br /&gt;
-&amp;gt; 클래스 계층구조를 활용하는 &lt;strong&gt;서브 타이핑(subtyping)&lt;/strong&gt; 이다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;태그-달린-클래스를-클래스-계층구조로-바꾸는-방법&quot;&gt;태그 달린 클래스를 클래스 계층구조로 바꾸는 방법&lt;/h3&gt;

&lt;p&gt;(1) 가장 먼저 계층 구조의 &lt;strong&gt;루트(root)가 될 추상 클래스&lt;/strong&gt; 정의    &lt;br /&gt;
(2) 태그 값에 따라 동작이 달라지는 메서드는 추상 메서드로 선언    &lt;br /&gt;
(3) 태그 값에 상관없는 동작이 일정한 메서드는 루트 클래스에 일반 메서드로 추가     &lt;br /&gt;
(4) 모든 하위 클래스에서 공통으로 사용하는 데이터 필드들도 전부 루트 클래스에 올림    &lt;br /&gt;
(5) 루트 클래스를 확장한 구체 클래스를 의미별로 하나씩 정의한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Figure.java 
abstract class Figure {
    abstract double area();
}

// Circle.java 
class Circle extends Figure {
    final double radius;

    Circle(double radius) { this.radius = radius; }

    @Override 
    double area() { return Math.PI * (radius * radius); }
}

// Rectangle.java
class Rectangle extends Figure {
    final double length;
    final double width;

    Rectangle(double length, double width) {
        this.length = length;
        this.width  = width;
    }
    
    @Override 
    double area() { return length * width; }
}

// Square.java
class Square extends Rectangle {
    Square(double side) {
        super(side, side);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;루트 클래스 : Figure&lt;/li&gt;
  &lt;li&gt;태그 값에 따라 동작이 달라지는 구현체 : Square, Rectangle &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) 루트 클래스를 건드리지 않고 다른 개발자들이 독립적으로 계층구조 사용, 확장 가능&lt;/p&gt;

&lt;p&gt;(2) 타입이 의미별로 존재&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수 의미를 명시하거나 제한 가능&lt;/li&gt;
  &lt;li&gt;특정 의미만 매개변수로 받기 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 타입 사이의 자연스러운 계층 관계를 반영할 수 있어    &lt;br /&gt;
유연성과 컴파일타임 타입 검사 능력이 높아짐&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;24-멤버-클래스는-되도록-static으로-만들자&quot;&gt;24. 멤버 클래스는 되도록 static으로 만들자.&lt;/h2&gt;

&lt;p&gt;중첩 클래스는 자신을 감싼 바깥 클래스에서만 쓰여야 하며,  &lt;br /&gt;
그 외에 쓰임새가 있다면 톱레벨 클래스로 만들어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정적 멤버 클래스&lt;/li&gt;
  &lt;li&gt;(비정적) 멤버 클래스&lt;/li&gt;
  &lt;li&gt;익명 클래스&lt;/li&gt;
  &lt;li&gt;지역 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-정적-멤버-클래스&quot;&gt;1. 정적 멤버 클래스&lt;/h3&gt;

&lt;p&gt;정적 멤버 클래스는 바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하면 일반 클래스와 똑같다.       &lt;br /&gt;
private으로 선언하면 바깥 클래스에서만 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-비정적-멤버-클래스&quot;&gt;2. 비정적 멤버 클래스&lt;/h3&gt;

&lt;p&gt;정적 멤버 클래스와 비정적 멤버 클래스의 구문상 차이는 static이 있고 없고 차이다. 의미상 차이는 꽤 크다.             &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정적-멤버-클래스-vs-비정적-멤버-클래스&quot;&gt;정적 멤버 클래스 vs 비정적 멤버 클래스&lt;/h3&gt;

&lt;h4 id=&quot;1-객체-생성&quot;&gt;(1) 객체 생성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;정적 내부 클래스의 경우 다음과 같이 객체 생성이 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A {
    static class B { ... }
}

void foo() {
    A.B b = new B();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; 예약어가 있음으로 인해 독립적으로 생성할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비정적 내부 클래스인 경우 다음과 같이 생성해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A {
    class B { ... }
}

void foo() {
    // ex1
    A a = new A();
    A.B b = a.new B();
    
    // ex2
    A.B b = new A().new B();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반드시 A 객체를 생성한 뒤 A 객체를 이용해서 생성해야 한다.   &lt;br /&gt;
즉 비정적 내부 클래스는 바깥 클래스에 대한 참조가 필요하다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-메모리-누수-가능성&quot;&gt;(2) 메모리 누수 가능성&lt;/h4&gt;

&lt;p&gt;비정적 내부 클래스의 경우 바깥 클래스에 대한 참조를 가지고 있기 때문에 메모리 누수가 발생할 여지가 있다.   &lt;br /&gt;
바깥 클래스는 더 이상 사용되지 않지만 내부 클래스의 참조로 인해 GC가 수거하지 못해      &lt;br /&gt;
바깥 클래스의 메모리 해제를 하지 못하는 경우가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;정적 내부 클래스의 경우 바깥 클래스에 대한 참조 값을 가지고 있지 않기 때문에 메모리 누수가 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-사용-시기&quot;&gt;(3) 사용 시기&lt;/h4&gt;

&lt;p&gt;메모리 누수가 발생할 수 있는 문제점이 있기 때문에     &lt;br /&gt;
내부 클래스가 독립적으로 사용된다면 정적 클래스로 선언하여 사용하는 것이 좋다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;비정적 멤버 클래스    &lt;br /&gt;
비정적 클래스를 어댑터 패턴을 이용하여 &lt;strong&gt;바깥 클래스를 다른 클래스로 제공할 때&lt;/strong&gt; 사용하면 좋다.    &lt;br /&gt;
예) HashSet의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keySet()&lt;/code&gt; : Map의 key에 해당하는 값들을 Set으로 반환     &lt;br /&gt;
어댑터 패턴을 이용해서 Map을 Set으로 제공한다.    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;정적 멤버 클래스       &lt;br /&gt;
바깥 클래스가 표현하는 객체의 한 부분(구성 요소)을 나타낼 때 쓴다.    &lt;br /&gt;
예) Map 구현체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;키-값&lt;/code&gt; 쌍을 표현하는 엔트리 객체      &lt;br /&gt;
엔트리 선언 시 static을 빠뜨려도 맵은 동작하겠지만    &lt;br /&gt;
모든 엔트리가 바깥 Map으로 참조를 갖게 되어 공간과 시간이 낭비된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-멤버-클래스가-public이나-protected-멤버라면&quot;&gt;(4) 멤버 클래스가 public이나 protected 멤버라면?&lt;/h4&gt;

&lt;p&gt;공개된 클래스의 public이나 protected 멤버라면 정적이냐 아니냐는 두 배로 중요해진다.   &lt;br /&gt;
멤버 클래스 역시 공개 API가 되기 때문에 향후 릴리스에서 static을 붙이면 하위 호환성이 떨어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;비정적-멤버-클래스-정리&quot;&gt;비정적 멤버 클래스 정리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;비정적 멤버 클래스의 인스턴스는 바깥 클래스의 인스턴스와 암묵적으로 연결       &lt;br /&gt;
비정적 멤버 클래스의 인스턴스 메서드에서 정규화된 this를 사용            &lt;br /&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스명.this&lt;/code&gt; 형태로 바깥 클래스의 이름을 명시하는 용법)               &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;바깥 인스턴스의 메서드를 호출하거나 바깥 인스턴스의 참조를 가져올 수 있다.                       &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;비정적 멤버 클래스의 인스턴스와 바깥 인스턴스 사이의 관계는       &lt;br /&gt;
멤버 클래스가 인스턴스화될 때 확립되며, 더 이상 변경할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-익명-클래스-anonymous-inner-class&quot;&gt;3. 익명 클래스 (Anonymous Inner Class)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이름이 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바깥 클래스의 멤버도 아니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;멤버와 달리 쓰리는 시점에 동시에 인스턴스가 만들어진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오직 비정적인 문맥에서 사용될 때만 바깥 클래스의 인스턴스를 참조할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정적 문맥에서라도 상수 변수 이외의 정적 멤버는 가질 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉, 상수 표현을 위해 초기화된 final 기본 타입과 문자열 필드만 가질 수 있음  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;익명 클래스는 응용하는 데 제약이 많은 편이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;선언한 지점에서만 인스턴스를 만들 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instanceof&lt;/code&gt; 검사나 클래스의 이름이 필요하 작업은 수행 불가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여러 인터페이스를 구현할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터페이스를 구현하는 동시에 다른 클래스를 상속할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;익명 클래스를 사용하는 클라이언트는 그 익명 클래스가 상위 타입에서 상속한 멤버 외에는 호출할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 인터페이스 사용
public interface Monster{
    String getName();
} 

public static void main(String args[]){
    Monster monster = new Monster(){
        String name;
        public String getName(){
            return name;
        }
    };
    System.out.println(monster.getName());
}


// 클래스 상속 사용 
public class Pet{
    String name = &quot;부모 클래스&quot;;
    public String getName(){
            return name;
    }
}

public static void main(String[] args){
    Pet pet = new Pet(){
            String name = &quot;익명 내부 클래스&quot;;
            @Override
            public String getName(){
                return name;
            }
    };
    System.out.println(pet.getName()); // 결과 : 익명 내부 클래스
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pet 익명 클래스는 Pet 클래스는 아니다.                    &lt;br /&gt;
생성된 인스턴스의 클래스 이름 확인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instance.getClass().getName&lt;/code&gt;                &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet + $ + n(생성된 몇번 째)&lt;/code&gt; 이런식의 클래스 이름이 나온다.             &lt;br /&gt;
인터페이스로 선언된 익명 클래스는 현재 main에 속해있는 클래스 이름을 반환한다.           &lt;br /&gt;
즉 자바에서는 이 서로 두개의 클래스를 같은 클래스로 보고 있지 않다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;사용-시기&quot;&gt;사용 시기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자바가 람다를 지원하기 전에 즉석에서 작은 함수 객체나 처리 객체를 만드는 데 &lt;br /&gt;
익명 클래스를 주로 사용했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정적 팩토리 메서드를 구현할 때 사용한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;지역-클래스&quot;&gt;지역 클래스&lt;/h3&gt;

&lt;p&gt;네 가지 중첩 클래스 중 가장 드물게 사용된다.&lt;/p&gt;

&lt;p&gt;지역 클래스는 지역 변수처럼 메소드 내부에 정의되는 클래스를 말한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지역 클래스 지역 변수를 선언할 수 있는 곳이면 실질적으로 어디서든 선언할 수 있고,    &lt;br /&gt;
유효 범위도 지역 변수와 같다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;멤버 클래스처럼 이름이 있고 반복해서 사용할 수 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;익명 클래스처럼 비정적 문맥에서 사용될 때만 바깥 인스턴스를 참조할 수 있으며 &lt;br /&gt;
정적 멤버는 가질 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;핵심-정리&quot;&gt;핵심 정리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;메서드 밖에서도 사용해야 하거나 메서드 안에 정의하기엔 너무 길다면 멤버 클래스로 만든다.         &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;멤버 클래스의 인스턴스 각각이 바깥 인스턴스를 참조한다면 비정적으로,        &lt;br /&gt;
그렇지 않으면 정적으로 만든다.      &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;중첩 클래스가 한 메서드 안에서만 쓰인다면 그 인스턴스를 생성하는 시점이 단 한 곳이고         &lt;br /&gt;
해당 타입으로 쓰기에 적합한 클래스나 인터페이스가 이미 있다면 익명 클래스로 만든다.        &lt;br /&gt;
그렇지 않으면 지역 클래스로 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;25-톱레벨-클래스는-한-파일에-하나만-담으라&quot;&gt;25. 톱레벨 클래스는 한 파일에 하나만 담으라.&lt;/h2&gt;

&lt;p&gt;소스 파일 하나에 톱레벨 클래스를 여러 개 선언하더라도 자바 컴파일러가 불평하지는 않지만      &lt;br /&gt;
아무런 이득 없이 위험을 감수해야 하는 행위다.&lt;/p&gt;

&lt;p&gt;한 클래스를 여러 가지로 정의할 수 있지만 어느 소스 파일을 먼저 컴파일하냐에 따라 달라진다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예) 집기(Utensil)와 디저트(Dessert) 클래스를 담은 Utensil.java&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main.java&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        System.out.println(Utensil.Name + Dessert.Name);       
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Utensil.java&lt;br /&gt;
```
class Utensil { 
  static final String NAME = “pan”;
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;class Dessert { 
    static final String NAME = “cake”;
}&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
* Dessert.java    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;class Utensil { 
    static final String NAME = “pot”;
}&lt;/p&gt;

&lt;p&gt;class Dessert { 
    static final String NAME = “pie”;
}
```&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이때 우연히 똑같은 두 클래스를 담은 Dessert.java 파일을 만들었다고 해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac Main.java Dessert.java&lt;/code&gt; 명령으로 컴파일한다면?     &lt;br /&gt;
컴파일 오류가 나고 클래스 중복 정의했다고 알려줄 것이다.    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac Main.java&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac Main.java Utensil.java&lt;/code&gt; 명령으로 컴파일하면?  &lt;br /&gt;
pancake를 출력한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac Main.java Dessert.java&lt;/code&gt; 명령으로 컴파일하면? &lt;br /&gt;
potpie를 출력한다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컴파일러에 어느 소스 파일을 먼저 건네느냐에 따라 동작이 달라지므로 반드시 바로 잡아야 하는 문제다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해결책은 톱레벨 클래스들을 서로 소스 파일로 분리하면 그만이다.  &lt;br /&gt;
다른 클래스에 딸린 부차적인 클래스라면 정적 멤버 클래스를 사용하는 방법을 고민해볼 수 있다.&lt;/p&gt;

&lt;p&gt;정적 멤버 클래스로 만들면 읽기 좋고, private으로 선언하면 접근 범위도 최소로 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Jun 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-06-04/chap4/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-06-04/chap4/</guid>
      </item>
    
      <item>
        <title>객체 생성과 파괴</title>
        <description>&lt;h2 id=&quot;1-생성자-대신-정적-팩토리-메서드를-고려하라&quot;&gt;1. 생성자 대신 정적 팩토리 메서드를 고려하라&lt;/h2&gt;
&lt;p&gt;클래스의 인스턴스를 얻는 전통적인 수단은 public 생성자이다.  &lt;br /&gt;
클래스는 생성자와 별도로 static factory method를 제공하며 다음과 같은 장단점이 있다.&lt;/p&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 이름을 가질 수 있다.&lt;/strong&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.&lt;/strong&gt;       &lt;br /&gt;
ex.&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean.valueOf(boolean)&lt;/code&gt;             &lt;br /&gt;
불변 클래스는 미리 인스턴스를 만들거나 새로 생성한 인스턴스를 캐싱해 재활용할 수 있으므로 메모리 측면에서 유리하다.             &lt;br /&gt;
이렇게 언제 어느 인스턴스를 살아있게 할지를 철저히 통제할 수 있다. 이를 &lt;strong&gt;인스턴스 통제 클래스&lt;/strong&gt;라고 한다. &lt;br /&gt;        &lt;br /&gt;
인스턴스를 통제하면 다음과 같이 만들 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;싱글톤&lt;/li&gt;
  &lt;li&gt;인스턴스화 불가&lt;/li&gt;
  &lt;li&gt;불변 값 클래스에서 동치 인스턴스가 하나뿐임을 보장 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a==b&lt;/code&gt; 일 때만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.equals(b)&lt;/code&gt;가 성립)   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. 하위 타입 객체를 반환할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;java 8: 인터페이스에는 public 정적 멤버만 허용&lt;/li&gt;
  &lt;li&gt;java 9: private 정적 메서드까지 허용하지만 정적 필드와 정적 멤버 클래스는 public이어야 한다.            &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.&lt;/strong&gt;          &lt;br /&gt;
반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체를 반환하든 상관없다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 정적 팩토리 메서드를 작성하는 시점에 반환할 객체의 클래스가 존재하지 않아도 된다.&lt;/strong&gt;             &lt;br /&gt;
이러한 유연함은 Service Provider 프레임워크의 근간이 된다. 대표적인 예로 JDBC가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DriverManager.registerDriver()&lt;/code&gt; 메서드로 각 DBMS별 Driver를 설정한다. (제공자 등록 API)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DriverManager.getConnection()&lt;/code&gt; 메서드로 DB 커넥션 객체를 받는다. (service access API)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connection Interface&lt;/code&gt;는 DBMS 별로 동작을 구현하여 사용할 수 있다. (service Interface)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에서 설명한 3개의 핵심 컴포넌트와 더불어 종종 &lt;strong&gt;서비스 제공자 인터페이스&lt;/strong&gt;라는 네 번째 컴포넌트가 쓰이기도 한다. &lt;br /&gt;
이는 서비스 인터페이스의 인스턴스를 생성하는 팩토리 객체를 설명해준다.  &lt;br /&gt;
서비스 제공자 인터페이스가 없다면 각 구현체를 인스턴스로 만들 때 &lt;strong&gt;리플렉션&lt;/strong&gt;을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 상속을 하려면 public이거나 protected 생성자가 필요하므로 정적 팩토리 메서드만 제공하면 하위 클래스를 만들 수 없다.&lt;/strong&gt;               &lt;br /&gt;
컬렉션 프레임 워크의 유틸리티 구현 클래스는 private 생성자만 제공하므로 상속이 불가하다.         &lt;br /&gt;
이러한 제약은 상속보다 컴포지션을 사용하도록 유도되어 오히려 더 장점으로 작용한다.           &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 정적 팩토리 메서드는 프로그래머가 찾기 어렵다.&lt;/strong&gt;             &lt;br /&gt;
흔히 사용하는 명명 방식을 지켜보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정적 팩터리 메서드는 각각의 쓰임새가 있으니, 장단점을 잘 인식하고 무작정 public 생성자만 사용하는 습관을 고쳐보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-생성자에-매개변수가-많다면-빌더를-고려하라&quot;&gt;2. 생성자에 매개변수가 많다면 빌더를 고려하라.&lt;/h2&gt;
&lt;p&gt;매개변수 개수가 많을 때, 다음과 같은 방법들을 고려해볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;방법1-점층적-생성자-패턴&quot;&gt;방법(1) 점층적 생성자 패턴&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Exam {
    private final int a;
    private final int b;
    private final int c;
    private final int d;
    
    public Exam(int a, int b) {
        this(a, b, 0);
    }
    
    public Exam(int a, int b, int c) {
        this(a, b, c, 0);
    }
    
    public Exam(int a, int b, int c, int d) {
        this(a, b, c, d);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 필수 매개변수만 받는 생성자, 필수 매개변수와 선택 매개변수 1개를 받는 생성자, … 형태로 선택 매개변수를 전부 다 받는 생성자까지 늘려가는 방식이다.  &lt;br /&gt;
그러나 매개변수 개수가 많아지면 클라이언트 코드를 작성하거나 읽기 어렵다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법2-선택-매개변수가-많다면-자바빈즈-패턴-java-beans&quot;&gt;방법(2) 선택 매개변수가 많다면 자바빈즈 패턴 (Java Beans)&lt;/h3&gt;
&lt;p&gt;매개변수가 없는 생성자로 객체를 만들어 Setter 메서드들을 호출해 원하는 매개변수의 값을 설정하는 방식이다. &lt;br /&gt;
그러나 객체를 하나 만들려면 메서드 여러 개를 호출해야 하고, 객체가 완전히 생성되기 전까지는 일관성(consistency)이 무너진 상태에 놓이게 된다.  &lt;br /&gt;
자바빈즈 패턴에서는 클래스를 불변으로 만들 수 없으며 스레드 안전성을 얻으려면 개발자가 추가 작업을 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;방법3-안전성과-가독성을-겸비한-빌더-패턴-builder-pattern&quot;&gt;방법(3) 안전성과 가독성을 겸비한 빌더 패턴 (Builder Pattern)&lt;/h3&gt;
&lt;p&gt;객체를 직접 만드는 대신 필수 매개변수만으로 생성자(혹은 정적 팩토리)를 호출해 빌더 객체를 얻는다.  &lt;br /&gt;
빌더 객체가 제공하는 일종의 Setter 메서드로 원하는 선택 매개변수들을 설정하고 매개변수가 없는 build 메서드를 호출해 필요한 객체를 얻는다.&lt;/p&gt;

&lt;p&gt;빌더의 Setter는 자신을 반환하기 때문에 연쇄적으로 호출할 수 있다. &amp;gt; 플루언트 API(fluent API) / 메서드 연쇄(method chaining)    &lt;br /&gt;
빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기에 좋다. 각 계층의 클래스에 관련 빌더를 멤버로 정의한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public abstract class Pizza {
    public enum Topping { ... }
    final Set&amp;lt;Topping&amp;gt; toppings;
    
    // 추상 클래스는 추상 빌더를, 구체 클래스는 구체 빌더를 갖게 한다. 
    abstract static class Builder&amp;lt;T extends Builder&amp;lt;T&amp;gt;&amp;gt; {
        . . .
        return self();
    }
    
    abstract Pizza build();
    
    // 하위 클래스는 이 메서드를 재정의(overriding)하여   
    // this를 반환하도록 해야한다. 
    protected abstract T self();
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;빌더 패턴은 상당히 유연하다. 빌더 하나로 여러 객체를 순회하면서 만들 수 있고, 빌더에 넘기는 매새변수에 따라 다른 객체를 만들 수도 있다.    &lt;br /&gt;
장점만 있는 것은 아니다. 객체를 만들려면 그에 앞서 빌더부터 만들어야 한다. 빌더 생성 비용이 크지는 않지만 성능에 민감한 상황에서는 문제가 될 수 있다.      &lt;br /&gt;
생성자나 정적 팩토리가 처리해야 할 매개변수가 많다면 빌더 패턴을 선택하는 게 더 낫다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-private-생성자나-열거-타입으로-싱글톤-패턴임을-보증하라&quot;&gt;3. private 생성자나 열거 타입으로 싱글톤 패턴임을 보증하라.&lt;/h2&gt;
&lt;p&gt;싱글톤이란 인스턴스를 오직 하나만 생성할 수 있는 클래스이다.     &lt;br /&gt;
예를 들어 함수와 같은 무상태 객체나 설계상 유일해야 하는 시스템 컴포넌트를 들 수 있다.&lt;/p&gt;

&lt;p&gt;그러나 클래스를 싱글톤으로 만들면 타입을 인터페이스로 정의하지 않으면   &lt;br /&gt;
싱글톤 인스턴스를 가짜(mock) 구현으로 대체할 수 없기 때문에 이를 사용하는 클라이언트를 테스트하기 어렵다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;싱글톤을-만드는-방식&quot;&gt;싱글톤을 만드는 방식&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 생성자 private, 유일한 인스턴스에 접근할 수 있는 수단은 public static final 멤버&lt;/strong&gt;       &lt;br /&gt;
&lt;br /&gt;   &lt;br /&gt;
&lt;strong&gt;2. 정적 팩토리 메서드를 public static 멤버로 제공&lt;/strong&gt;        &lt;br /&gt;
정적 팩토리 메서드 방식의 장점&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;API를 바꾸지 않고도 싱글톤이 아니게 변경할 수 있다.&lt;/li&gt;
  &lt;li&gt;정적 팩토리를 제네릭 싱글톤 팩토리로 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;정적 팩토리의 메소드 참조를 supplier(공급자)로 사용할 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에서 설명한 두가지 방법으로 인스턴스가 전체 시스템에서 하나뿐임이 보장된다.             &lt;br /&gt;
그러나 예외가 있는데 권한이 있는 클라이언트 리플렉션 API인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessibleObject.setAccessible&lt;/code&gt;을 사용해 private 생성자를 호출할 수 있다.                    &lt;br /&gt;
이 공격을 방어하고 싶다면 생성자를 수정하여 객체가 두 번 생성되려 할 때 예외를 던지게 하면 된다.
&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;3. 원소가 하나인 열거 타입을 선언&lt;/strong&gt;         &lt;br /&gt;
싱글톤 클래스를 직렬화하려면 단순히 Serializable을 구현한다고 선언하는 것만으로는 부족하다.             &lt;br /&gt;
모든 인스턴스 필드를 일시적(transient)이라고 선언하고 readResolve 메서드를 제공해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 싱글톤임을 보장해주는 readResolve 메서드 
private Object readResolve() {
    // 진짜 인스턴스를 반환하고 가짜는 가비지 컬렉터에 맡긴다. 
    return INSTANCE;
}

public enum Elvis {
    INSTANCE;
    
    public void leaveTheBuilding() { ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;public 필드 방식과 비슷한 위 방법은 더 간결하고 추가 노력없이 직렬화할 수 있고, 리플렉션 공격도 막아준다.     &lt;br /&gt;
대부분 상황에서 원소가 하나뿐인 열거 타입이 싱글톤을 만드는 가장 좋은 방법이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단, 만들려는 싱글톤이 Enum 외의 클래스를 상속해야 한다면 이 방법은 사용할 수 없다.    &lt;br /&gt;
열거 타입이 다른 인터페이스를 구현하도록 선언할 수는 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-인스턴스화를-막으려면-private-생성자를-사용하라&quot;&gt;4. 인스턴스화를 막으려면 private 생성자를 사용하라.&lt;/h2&gt;
&lt;p&gt;정적 메서드와 정적 필드만 담은 클래스를 만들 때가 있을 것이다.         &lt;br /&gt;
객체지향적으로 좋아 보이지는 않지만 분명 쓰임새가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유틸리티 함수를 만드는데 유용하게 쓰인다.&lt;/li&gt;
  &lt;li&gt;java.util.Collections 처럼 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메서드(혹은 팩토리)를 모아놓을 수 있다.&lt;/li&gt;
  &lt;li&gt;final 클래스와 관련한 메서드들을 모아놓을 때도 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정적 멤버만 담은 유틸리티 클래스는 인스턴스로 만들어 쓰려고 설계할 게 아니다.           &lt;br /&gt;
그러나 생성자를 명시하지 않으면 컴파일러가 자동으로 매개변수가 없는 기본 생성자를 만들어준다.&lt;/p&gt;

&lt;p&gt;추상 클래스는 하위 클래스를 만들어 인스턴스화하면 그만이기 때문에 인스턴스화를 막을 수 없다.            &lt;br /&gt;
이때 인스턴스화를 막는 간단한 방법은 private 생성자를 추가하는 것이다.        &lt;br /&gt;
이 방식은 &lt;strong&gt;상속을 불가능하게 하는 효과&lt;/strong&gt;도 있다. &lt;strong&gt;모든 생성자는 상위 클래스의 생성자를 호출&lt;/strong&gt;하게 되는데        &lt;br /&gt;
이를 private로 선언했으니 하위 클래스가 상위 클래스의 생성자에 접근할 길이 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라&quot;&gt;5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라.&lt;/h2&gt;
&lt;p&gt;맞춤법 검사기 SpellChecker은 사전(Dictionary)에 의존한다.   &lt;br /&gt;
이렇게 자원에 의존하는 클래스의 경우 정적 유틸리티 클래스로 구현한 경우를 볼 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정적-유틸리티를-잘못-사용한-경우&quot;&gt;정적 유틸리티를 잘못 사용한 경우&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SpellChecker {
    private static final Lexicon dictionary = ...;
    
    private SpellChecker() {} // 객체 생성 방지
    
    public static boolean isValid(String word) { ... }
    public static List&amp;lt;String&amp;gt; suggestions(String type) { ... }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;싱글톤을-잘못-사용한-경우&quot;&gt;싱글톤을 잘못 사용한 경우&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static SpellChecker INSTANCE = new SpellChecker(...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 예제들은 유연하지 않고 테스트하기도 어렵다.&lt;/p&gt;

&lt;p&gt;사전은 언어별로 따로 있고 특수 어휘용 사전, 테스트용 사전도 필요하다. &lt;br /&gt;
SpellChecker가 여러 사전을 사용할 수 있도록 만들어보자.&lt;/p&gt;

&lt;p&gt;필드에서 final 한정자를 제거하고 다른 사전으로 교체하는 메서드를 추가할 수 있지만 &lt;br /&gt;
이 방식은 오류를 내기 쉽고 멀티 스레드 환경에서는 쓸 수 없다. &lt;br /&gt;
사용하는 자워에 따라 동작이 달라지는 클래스에는 정적 유틸리티 클래스나 싱글톤 방식은 적합하지 않다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 조건을 만족해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클래스가 여러 자원 인스턴스를 지원해야 한다.&lt;/li&gt;
  &lt;li&gt;클라이언트가 원하는 자원을 사용해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 조건을 만족하는 패턴은 인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식으로 의존 객체 주입의 한 형태이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private final Lexicon dictionary;

public SpellChecker(Lexicon dictionary) {
    this.dictionary = Objects.requireNonNull(dictionary);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 의존 객체 주입은 불변을 보장하여 여러 클라이언트가 의존 객체들을 안심하고 공유할 수 있고  &lt;br /&gt;
생성자, 정적 팩토리, 빌더 모두에 똑같이 응용할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;의존 객체 주입이라 하는 기법은 클래스의 유연성, 재사용성, 테스트 용이성을 개선해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-불필요한-객체-생성을-피하라&quot;&gt;6. 불필요한 객체 생성을 피하라.&lt;/h2&gt;
&lt;p&gt;똑같은 기능의 객체를 매번 생성하기보다는 객체 하나를 재사용하는 편이 나을 때가 많다.                     &lt;br /&gt;
재사용은 빠르고 세련되며 특히 불변 객체는 언제든 재사용할 수 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성자 대신 정적 팩토리 메서드를 제공하는 불변 클래스에서는    &lt;br /&gt;
정적 팩토리 메서드를 사용해 불필요한 객체 생성을 피할 수 있다.      &lt;br /&gt;
이는 불변 객체만이 아니라 가변 객체라 해도 사용 중에 변경되지 않을 것임을 안다면 재사용할 수 있다.    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;불변 인스턴스를 클래스 초기화(정적 초기화) 과정에서 직접 생성해 캐싱해두고   &lt;br /&gt;
필요할 때 그 인스턴스를 재사용하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체가 불변이라면 재사용해도 안전함이 명확하다. 그러나 훨씬 덜 명확하거나 심지어 직관에 반대되는 상황도 있다. &lt;br /&gt;
어댑터를 생각해보자. 어댑터는 실제 작업은 뒷단 객체에 위임하고 자신은 제 2의 인터페이스 역할을 해주는 객체이다.  &lt;br /&gt;
어댑터는 뒷단 객체만 관리하면 되기 때문에 뒷단 객체 하나당 어댑터 하나씩만 만들어지면 충분하다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EX1) Map 인터페이스의 KeySet 메서드&lt;/strong&gt;          &lt;br /&gt;
Map 객체 안의 key를 전부 담은 Set 뷰를 반환한다.    &lt;br /&gt;
매번 같은 Set 인스턴스를 반환할까?    &lt;br /&gt;
반환된 Set 인스턴스가 일반적으로 가변이라도 반환된 인스턴스가 기능적으로 모두 똑같다.     &lt;br /&gt;
모두 같은 Map 인스턴스를 대변하기 때문에 KeySet이 뷰 객체를 여러 개 만들어도 상관은 없지만 그럴 필요도 없고 이득도 없다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EX2) 오토박싱(auto boxing)&lt;/strong&gt;     &lt;br /&gt;
오토박싱은 프로그래머가 기본 타입과 박싱된 기본 타입을 섞어 쓸 때 자동으로 상호 변환해주는 기술이다. &lt;br /&gt;
구분을 흐려주지만 완전히 없애주는 것은 아니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static long sum() {
   Long sum = 0L;
   for(long i = 0; i &amp;lt;= Integer.MAX_VALUE; ++i) {
      sum += i;
   }
   
   return sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 프로그램이 정확한 답을 내기는 한다. 하지만 제대로 구현했을 때보다 훨씬 느리다.    &lt;br /&gt;
sum 변수를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt;이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Long&lt;/code&gt;으로 선언해서 불필요한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Long&lt;/code&gt; 인스턴스가 약 231개나 만들어진 것이다.&lt;/p&gt;

&lt;p&gt;박싱된 기본 타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-다-쓴-객체-참조를-해제하라&quot;&gt;7. 다 쓴 객체 참조를 해제하라.&lt;/h2&gt;

&lt;p&gt;메모리 누수에 취약한 상황은 다음과 같다.&lt;/p&gt;

&lt;h3 id=&quot;1-stack&quot;&gt;1) Stack&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Object pop() {
   if(size == 0) {
      throw new EmptyStackException();
   }
   
   return elements[--size];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스택이 커졌다가 줄어들 때 스택에서 꺼내진 객체들을 가비지 컬렉터가 회수하지 않는다.    &lt;br /&gt;
여기서 다 쓴 참조는 elements 배열의 ‘활성 영역’ 밖의 참조들이다.&lt;/p&gt;

&lt;p&gt;가비지 컬렉션 언어에서 메모리 누수를 찾기 까다롭다.   &lt;br /&gt;
객체 참조 하나를 살려두면 가비지 컬렉터는 그 객체 뿐만 아니라    &lt;br /&gt;
그 객체가 참조하는 모든 객체를 회수해가지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;: 참조를 다 썼을 때 null 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-캐시&quot;&gt;2) 캐시&lt;/h3&gt;
&lt;p&gt;객체 참조를 캐시에 넣고 그 객체를 다 쓴 뒤로도 한참을 놔두는 일을 자주 접할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;캐시 외부에서 키를 참조하는 동안만 엔트리가 살아있는 캐시가 필요한 상황이면 WeakHashMap을 사용&lt;/li&gt;
  &lt;li&gt;백그라운드 스레드 활용&lt;/li&gt;
  &lt;li&gt;캐시에 새 엔트리를 추가할 때 부수 작업 수행 (LinkedHashMap의 removeEldestEntry)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-리스너listener-콜백callback&quot;&gt;3) 리스너(listener), 콜백(callback)&lt;/h3&gt;
&lt;p&gt;클라이언트가 콜백을 등록만하고 명확히 해지하지 않으면 콜백이 쌓인다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;: 콜백을 약한 참조(weak reference)로 저장하면 가비지 컬렉터가 즉시 수거한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-finalizer와-cleaner-사용을-피하라&quot;&gt;8. finalizer와 cleaner 사용을 피하라.&lt;/h2&gt;
&lt;p&gt;Java는 두 가지 객체 소멸자를 제공한다.  &lt;br /&gt;
그러나 예측할 수 없고 일반적으로 불필요하기 때문에 기본적으로 쓰지 말아야 한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;즉시 수행된다는 보장이 없다.        &lt;br /&gt;
즉 제때 실행되어야 하는 작업에서 사용하면 안된다.        &lt;br /&gt;
이를 신속히 수행할지는 가비지 컬렉터 알고리즘에 달렸다.      &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;수행 시점 뿐만 아니라 수행 여부조차 보장하지 않는다.     &lt;br /&gt;
접근할 수 없는 일부 객체에 딸린 종료 작업을 전혀 수행하지 못한채 프로그램이 종료될 수도 있다.        &lt;br /&gt;
따라서 프로그램 생애주기와 상관없는 상태를 영구적으로 수정하는 작업에서 finalizer와 cleaner에 의존하면 안된다.     &lt;br /&gt;
예) 데이터베이스와 같은 공유 자원의 영구 락(lock) 해제를 맡기면 안된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.gc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.runFinalization&lt;/code&gt; 메서드에 현혹되면 안된다.     &lt;br /&gt;
finalizer와 cleaner가 실행될 가능성은 높여줄 수 있으나 보장해주진 않는다.     &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;finalizer 동작 중 발생한 예외는 무시되며, 처리할 작업이 남았더라도 그 순간 종료된다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;심각한 성능 문제와 보안 문제를 일으킬 수 있다.        &lt;br /&gt;
finalizer 공격 원리는 생성자나 직렬화 과정에서 예외가 발생하면,     &lt;br /&gt;
이 생성되다 만 객체에서 악의적인 하위 클래스의 finalizer가 수행될 수 있게 한다.       &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;객체 생성을 막으려면 생성자에서 예외를 던지는 것만으로 충분하지만, finalizer가 있다면 그렇지도 않다.     &lt;br /&gt;
final이 아닌 클래스를 finalizer 공격으로부터 방어하려면 아무 일도 하지 않는 finalizer 메서드를 만들고 final로 선언해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;finalizer의-쓰임새&quot;&gt;finalizer의 쓰임새&lt;/h3&gt;
&lt;p&gt;1) 자원의 소유자가 close 메서드를 호출하지 않는 것에 대비한 안전망 역할           &lt;br /&gt;
2) 네이티브 피어(native peer): 자바 객체가 네이티브 메서드를 통해 기능을 위임한 네이티브 객체               &lt;br /&gt;
네이티브 피어는 자바 객체가 아니니 가비지 컬렉터는 그 존재를 알지 못한다.        &lt;br /&gt;
자바 피어를 회수할 때 네이티브 객체까지 회수하지 못하므로 finalizer나 cleaner를 사용          &lt;br /&gt;
단 성능 저하를 감당할 수 없으면 close 메서드를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-파일이나-스레드-등-종료해야-할-자원은-어떻게&quot;&gt;그렇다면 파일이나 스레드 등 종료해야 할 자원은 어떻게?&lt;/h3&gt;
&lt;p&gt;AutoCloseable을 구현해주고, 클라이언트에서 인스턴스를 다 쓰고 나면 close 메서드를 호출하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;9-try-finally-보다는-try-with-resource를-사용하라&quot;&gt;9. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-finally&lt;/code&gt; 보다는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-with-resource&lt;/code&gt;를 사용하라.&lt;/h2&gt;
&lt;p&gt;자바 라이브러리에 close 메서드를 호출해 직접 닫아줘야 하는 자원이 많다. &lt;br /&gt;
ex. InputStream, OutputStream, java.sql.Connection 등  &lt;br /&gt;
자원 닫기는 클라이언트가 놓치기 쉬워서 예측할 수 없는 성능 문제로 이어질 수 있다.&lt;/p&gt;

&lt;p&gt;이런 자원 중 안전망으로 finalizer를 활용하고는 있지만 전통적으로   &lt;br /&gt;
자원이 제대로 닫힘을 보장하는 수단으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-finally&lt;/code&gt;가 쓰였다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BufferedReader br = new BufferedReader(new FileReader(path));

try{
  return br.readLine();
} finally {
  br.close();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;위-메서드-실행-중-기기에-물리적인-문제가-생긴다면&quot;&gt;위 메서드 실행 중 기기에 물리적인 문제가 생긴다면?&lt;/h4&gt;
&lt;p&gt;1) readLine 메서드가 예외를 던진다. &lt;br /&gt;
2) close 메서드도 위와 같은 이유로 실패한다.&lt;/p&gt;

&lt;p&gt;이런 상황이라면 두 번째 예외가 첫 번째 예외를 완전히 집어삼켜 버린다.  &lt;br /&gt;
그러면 스택 추적 내역에 첫 번째 예외에 관한 정보는 남지 않게 되며,       &lt;br /&gt;
실제 시스템에서의 디버깅을 어렵게 한다.&lt;/p&gt;

&lt;p&gt;위 문제는 자바 7에서 등장한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-with-resources&lt;/code&gt;로 해결되었다.   &lt;br /&gt;
이 구조를 사용하려면 해당 자원이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoCloseable&lt;/code&gt; 인터페이스를 구현해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 24 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-05-24/chap2/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-05-24/chap2/</guid>
      </item>
    
      <item>
        <title>JUnit5 시작하기</title>
        <description>&lt;h1 id=&quot;junit-테스트-코드를-작성해보자&quot;&gt;JUnit 테스트 코드를 작성해보자.&lt;/h1&gt;

&lt;p&gt;예전에 진행했던 SNS 프로젝트를 다시 Rest API로 구현하는 중에 JUnit5로 테스트 코드를 작성해보기로 했다.
아직 구현 기능이 많지 않고 이번 프로젝트에서 DB, 서버 배포 등을 구체적으로 결정하지 않았기 때문에
천천히 예제로 테스트 코드를 작성해보고 프로젝트에도 적용할 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;junit5-특징&quot;&gt;JUnit5 특징&lt;/h2&gt;

&lt;p&gt;JUnit4가 단일 jar 였던 것에 반해 JUnit5는 다음과 같은 모듈로 구성되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JUnit Platform
JVM에서 동작하는 테스트 프레임워크
테스트를 발견하고 계획을 생성하고 결과를 보고하는 TestEngine 인터페이스를 정의
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JUnit Jupiter
TestEngine의 실제 구현체, 테스트를 실행시키기 위해 TestEngine을 Platform에 제공
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JUnit Vintage
TestEngine에서 JUnit3 및 JUnit4 기반 테스트를 실행하기 위한 기능을 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gradle-설정&quot;&gt;Gradle 설정&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dependencies {

    . . .

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 JUnit5의 특징에서 알아봤듯이 junit에 3, 4 버전이 포함되어 있기 때문에&lt;/p&gt;

&lt;p&gt;junit5만 사용할 생각이라면 위 gradle 설정처럼 junit을 제외하면 된다.&lt;/p&gt;

&lt;p&gt;그러나 junit5는 jupiter-api, jupiter-engine을 필요로하기 때문에 위와 같은 설정을 추가해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-boot에서는-어떻게&quot;&gt;Spring Boot에서는 어떻게?&lt;/h2&gt;

&lt;p&gt;스프링 부트 2.0에서 일반적인 스프링과 마찬가지로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExtendWith&lt;/code&gt; 어노테이션을 사용하지만
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; 대신에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;을 사용한다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt; 어노테이션은 애플리케이션 컨텍스트를 실행해준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ExtendWith(SpringExtension.class)
@SpringBootTest
class SimpleSpringTest {

    @Autowired
    public MessageComponent messageComponent;

    @Test
    public void test() {
        assertEquals(&quot;Hello world!&quot;, messageComponent.getMessage());
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-boot가-아니라면&quot;&gt;Spring Boot가 아니라면?&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = { MySpringApplication.class })
class SimpleSpringTest {
    . . .
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExtendWith&lt;/code&gt; : spring 또는 Mokito 라이브러리를 확장해서 사용 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ContextConfiguration&lt;/code&gt; : 이 어노테이션으로 컨텍스트 설정 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;junit5와-mockito-사용&quot;&gt;JUnit5와 Mockito 사용&lt;/h2&gt;

&lt;p&gt;Mockito는 개발자가 동작을 직접 제어할 수 있는 가짜(Mock) 객체를 지원하는 테스트 프레임워크다.&lt;/p&gt;

&lt;p&gt;Spring은 여러 객체들 간의 의존성이 존재해 단위 테스트 작성이 어려워질 수 있는데&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 가짜 객체를 주입시키는 Mockito 라이브러리를 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-mock-객체-의존성-주입&quot;&gt;1) Mock 객체 의존성 주입&lt;/h3&gt;

&lt;p&gt;Mockito에서 Mock 객체의 의존성 주입을 위해 어노테이션을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Mock&lt;/code&gt; : Mock 객체를 만들어 반환해주는 어노테이션&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Spy&lt;/code&gt; : Stub하지 않은 메소드들은 원본 메소드 그대로 사용하는 어노테이션&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@InjectMocks&lt;/code&gt; : 가짜 객체를 자동으로 주입시켜주는 어노테이션&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를들어 UserController에 대한 단위 테스트를 작성하고자 할 때, UserService를 사용하고 있다면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Mock&lt;/code&gt; 어노테이션으로 가짜 UserService를 만들고,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@InjectMocks&lt;/code&gt; 어노테이션으로 UserController에 이를 주입시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-stub&quot;&gt;2) Stub&lt;/h3&gt;

&lt;p&gt;의존성이 있는 객체는 가짜 객체를 주입하면 어떤 결과를 반환하라고 정해진 답변을 준비시켜야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Mockito는 다음과 같은 stub 메서드를 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doReturn()&lt;/code&gt; : Mock 객체가 특정한 값을 반환해야 하는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doNothing()&lt;/code&gt; : Mock 객체가 아무것도 반환하지 않는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doThrow()&lt;/code&gt; : Mock 객체가 예외를 발생시키는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를들어 UserService의 findAllUser() 호출 시 빈 ArrayList를 반환해야 한다면 다음과 같이 작성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAllUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-mockito와-junit의-결합&quot;&gt;3) Mockito와 JUnit의 결합&lt;/h3&gt;

&lt;p&gt;Mockito도 테스팅 프레임워크다. 그래서 JUnit과 결합하기 위해 별도의 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;기존의 JUnit4에서 Mockito를 사용하기 위해 클래스 어노테이션으로&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RunWith(MockitoJUnitRunner.class)&lt;/code&gt;를 불여야했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;JUnit5부터는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ExtendWith(MockitoExtention.class)&lt;/code&gt;를 사용해야 결합이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JUnit에 대한 블로그 게시글
&lt;a href=&quot;https://hyerin6.github.io/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/&quot;&gt;https://hyerin6.github.io/2020-01-13/Junit-테스트-구현/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;공식 레퍼런스
&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#overview&quot;&gt;https://junit.org/junit5/docs/current/user-guide/#overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;샘플 코드
&lt;a href=&quot;https://github.com/junit-team/junit5-samples/tree/main/junit5-jupiter-starter-gradle&quot;&gt;https://github.com/junit-team/junit5-samples/tree/main/junit5-jupiter-starter-gradle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mockito
&lt;a href=&quot;https://mangkyu.tistory.com/145&quot;&gt;https://mangkyu.tistory.com/145&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 22 May 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-05-22/JUnit5/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-05-22/JUnit5/</guid>
      </item>
    
      <item>
        <title>모든 객체의 공통 메서드</title>
        <description>&lt;h2 id=&quot;10-equals는-일반-규약을-지켜-재정의-하라&quot;&gt;10. equals는 일반 규약을 지켜 재정의 하라.&lt;/h2&gt;
&lt;p&gt;equals는 재정의하기 쉬워 보이지만 실수하면 결과는 끔찍하다.       &lt;br /&gt;
문제를 회피하는 가장 쉬운 방법은 아예 재정의하지 않는 것이다.      &lt;br /&gt;
다음 상황 중 하나에 해당한다면 재정의하지 않는 것이 최선이다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;각 인스턴스가 본질적으로 고유하다.  &lt;br /&gt;
ex. Thread&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스의 ‘논리적 동치성’을 검사할 일이 없다. &lt;br /&gt;
ex. Pattern&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상위 클래스에서 재정의한 equals가 하위 클래스에도 맞는 경우&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스가 private이거나 package-private이고 equals 메서드를 호출할 일이 없는 경우&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;equals를-재정의해야-할-떄는-언제인가&quot;&gt;equals를 재정의해야 할 떄는 언제인가?&lt;/h4&gt;
&lt;p&gt;객체 식별성(object identity, 물리적으로 같은가)이 아니라 논리적 동치성을 확인해야 하는데,   &lt;br /&gt;
상위 클래스의 equals가 논리적 동치성을 비교하도록 재정의되지 않았을 때다.     &lt;br /&gt;
주로 값을 표현하는 Integer와 String이 해당된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;equals-메서드는-동치-관계를-구현하며-다음을-만족한다&quot;&gt;equals 메서드는 동치 관계를 구현하며, 다음을 만족한다.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;반사성: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.equals(x)&lt;/code&gt;는 true&lt;/li&gt;
  &lt;li&gt;대칭성: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.equals(y)&lt;/code&gt;가 true이면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y.equals(x)&lt;/code&gt;도 true&lt;/li&gt;
  &lt;li&gt;추이성: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.equals(y)&lt;/code&gt;가 true이고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y.equals(z)&lt;/code&gt;가 true이면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.equals(z)&lt;/code&gt;도 true&lt;/li&gt;
  &lt;li&gt;일관성: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.equals(y)&lt;/code&gt;를 반복해서 호출하면 항상 true이거나 false를 반환&lt;/li&gt;
  &lt;li&gt;null 아님: null이 아닌 모든 참조 값 x에 대해, x.equals(null)은 false다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 규약을 어기면 그 객체를 사용하는 다른 객체들이 어떻게 반응할지 알 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-equals를-재정의하려거든-hashcode도-재정의하라&quot;&gt;11. equals를 재정의하려거든 hashCode도 재정의하라.&lt;/h2&gt;
&lt;p&gt;equals를 재정의한 클래스 모두에서 hashCode도 재정의해야 한다.    &lt;br /&gt;
그렇지 않으면 hashCode 일반 규약을 어기게 되어 해당 클래스의 인스턴스를   &lt;br /&gt;
HashMap이나 HashSet 같은 컬렉션의 원소로 사용할 때 문제를 일으킬 것이다.       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음은 Object 명세의 규약이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;equals 비교에 사용되는 정보가 변경되지 않았다면 애플리케이션이 실행되는 동안  &lt;br /&gt;
그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;equals(Object)가 두 객체를 같다고 판단했을 때, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;equals(Object)가 두 객체를 다르다고 판단했더라도 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없다. &lt;br /&gt;
단, 다른 객체에 다른 값을 반환해야 해시테이블의 성능이 좋아진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;hashCode 재정의를 잘못했을 때 크게 문제되는 조항은 두 번째다.    &lt;br /&gt;
즉, 논리적으로 같은 객체는 같은 해시코드를 반환해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-tostring을-항상-재정의하라&quot;&gt;12. toString을 항상 재정의하라.&lt;/h2&gt;
&lt;p&gt;Object의 기본 toString은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스_이름@16진수로_표시한_해시코드&lt;/code&gt;를 반환한다.      &lt;br /&gt;
equals와 hashCode 규약만큼 대단히 중요하진 않지만,    &lt;br /&gt;
toString을 잘 구현한 클래스를 사용한 시스템은 디버깅하기 쉽다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실전에서 toString은 그 객체가 가진 주요 정보 모두를 반환하는 게 좋다.&lt;/li&gt;
  &lt;li&gt;포맷을 명시하든 아니든 여러분의 의도는 명확히 밝혀야 한다.&lt;/li&gt;
  &lt;li&gt;포맷 명시 여부와 상관없이 toString이 반환한 값에 포함된 정보를 얻어올 수 있는 API를 제공하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13-clone-재정의는-주의해서-진행하라&quot;&gt;13. clone 재정의는 주의해서 진행하라.&lt;/h2&gt;
&lt;p&gt;Cloneable은 복제해도 되는 클래스임을 명시하는 용도의 믹스인 인터페이스(mixin interface)이다. &lt;br /&gt;
아쉽게 의도한 목적을 제대로 이루지 못했다.&lt;/p&gt;

&lt;p&gt;가장 큰 문제는 clone 메서드가 선언된 곳이 Cloneable이 아니라 Object이고, &lt;br /&gt;
protected에 있다는 것이다. 그래서 Cloneable을 구현하는 것만으로는 외부 객체에서 &lt;br /&gt;
clone 메서드를 호출할 수 없다.      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;메서드가-하나도-없는-cloneable-인터페이스는-무슨일을-할까&quot;&gt;메서드가 하나도 없는 Cloneable 인터페이스는 무슨일을 할까?&lt;/h4&gt;
&lt;p&gt;인터페이스를 구현한다는 것은 일반적으로 해당 클래스가 그 인터페이스에서 정의한 기능을 제공한다고 선언하는 행위다.        &lt;br /&gt;
그런데 Cloneable의 경우 상위 클래스에 정의된 (Object)protected 메서드인 clone의 동작 방식을 결정한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실무에서 Cloneable을 구현한 클래스는 clone 메서드를 public으로 제공하며   &lt;br /&gt;
사용자는 복제가 제대로 이뤄지리라 기대한다.   &lt;br /&gt;
이 기대를 만족시키려면 그 클래스와 모든 상위 클래스는 복잡하고 강제할 수 없고    &lt;br /&gt;
허술하게 기술된 프로토콜을 지켜야만 하는데 그 결과로 깨지기 쉽고 위험하며 모순적인 매커니즘이 탄생한다.         &lt;br /&gt;
생성자를 호출하지 않고도 객체를 생성할 수 있게 되는 것이다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;clone 메서드의 일반 규약은 허술하다.  &lt;br /&gt;
다음 식들은 일반적으로 참이지만, 필수는 아니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.clone() != x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.clone().getClass() == x.getClass()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.clone().equals(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관례상 이 메서드가 반환하는 객체는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super.clone&lt;/code&gt;을 호출해 얻어야 하다. &lt;br /&gt;
이 관예를 다른다면 다음 식도 참이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.clone.getClass() == x.getClass()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;가변-상태를-참조하지-않는-클래스용-clone-메서드&quot;&gt;가변 상태를 참조하지 않는 클래스용 clone 메서드&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override 
public PhoneNumber clone() {
  try {
    return (PhoneNumber) super.clone();
  } catch (CloneNotSuppoertedException e) {
    throw new AssertionError();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 clone 메서드를 가진 상위 클래스를 상속해 Cloneable을 구현한 코드다.   &lt;br /&gt;
위 clone 메서드가 동작하게 하려면 PhoneNumber의 클래스 선언에 Cloneable을 구현한다고 추가하면 된다.   &lt;br /&gt;
그러나 이 코드는 클래스가 가변 객체를 참조하는 순간 재앙으로 돌변한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;가변-상태를-참조하는-클래스용-clone-메서드&quot;&gt;가변 상태를 참조하는 클래스용 clone 메서드&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override 
public Stack clone() {
  try {
    Stack result = (Stack) super.clone();
    result.elements = elements.clone();
    return result;
  } catch (CloneNotSupportedException e) {
    throw new AssertionError();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;clone 메서드가 단순히 super.clone의 결과를 그대로 반환한다면 어떻게 될까?         &lt;br /&gt;
반환된 Stack 인스턴스의 size 필드(int size)는 올바른 값을 갖겠지만,   &lt;br /&gt;
elements 필드(Object[] elements)는 원본 Stack 인스턴스와 똑같은 배열을 참조할 것이다.     &lt;br /&gt;
원본이나 복제본 중 하나를 수정하면 다른 하나도 수정되어 불변식을 해친다.&lt;/p&gt;

&lt;p&gt;Stack 클래스의 생성자를 호출한다면 이러한 상황은 일어나지 않는다.  &lt;br /&gt;
clone 메서드는 사실상 생성자와 같은 효과를 낸다.  &lt;br /&gt;
clone은 원본 객체에 아무런 해를 끼치지 않는 동시에 복제된 객체의 불변식을 보장해야 한다.&lt;/p&gt;

&lt;p&gt;Stack의 clone 메서드가 제대로 동작하게 하려면 스택 내부 정보를 복사해야 하는데   &lt;br /&gt;
가장 쉬운 방법은 elements 배열의 clone을 재귀적으로 호출해주는 것이다.&lt;/p&gt;

&lt;p&gt;한편 elements 필드가 final이었다면 위 방식은 작동하지 않는다. &lt;br /&gt;
이는 근본적인 문제로 직렬화와 마찬가지로 Cloneable 아키텍처는 ‘가변 객체를 참조하는 필드는 final로 선언하라’는 일반 용법과 충돌한다.    &lt;br /&gt;
복제할 수 있는 클래스를 만들기 위해 일부 필드에서 final 한정자를 제거해야 할 수도 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;clone을 재귀적으로 호출하는 것만으로는 충분하지 않을 때도 있다.  &lt;br /&gt;
해시테이블 내부는 버킷들의 배열이고, 각 버킷은 키-값 쌍을 담는 연결 리스트의 첫 번째 엔트리를 참조한다.&lt;/p&gt;

&lt;p&gt;다음은 Stack에서처럼 단순히 버킷 배열의 clone을 재귀적으로 호출한 코드이다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;잘못된-clone-메서드---가변-상태를-공유한다&quot;&gt;잘못된 clone 메서드 - 가변 상태를 공유한다.&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override 
public HashTable clone() {
  try {
    HashTable result = (HashTable) super.clone();
    result.buckets = buckets.clone();
    return result;
  } catch (CloneNotSupportedException e) {
    throw new AssertionError();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;복제본은 자신만의 버킷 배열을 갖지만, 이 배열은 원본과 같은 연결 리스트를 참조하여   &lt;br /&gt;
원본과 복제본 모두 예기치 않게 동작할 가능성이 있다.    &lt;br /&gt;
이를 해결하려면 각 버킷을 구성하는 연결 리스트를 복사해야 한다.&lt;/p&gt;

&lt;p&gt;다음은 일반적인 해법이다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;복잡한-가변-상태를-갖는-클래스용-재귀적-clone-메서드&quot;&gt;복잡한 가변 상태를 갖는 클래스용 재귀적 clone 메서드&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class HashTable implements Cloneable {
  private Entry[] buckets = ...;
  
  private static class Entry {
    final Object key;
    Object value;
    Entry next;
    
    Entry(Object key, Object value, Entry next) {
      this.key = key;
      this.value = value;
      this.next = next;
    }
    
    // 이 엔트리가 가리키는 연결 리스트를 재귀적으로 복사  
    Entry deepCopy() {
      return new Entry(key, value, next == null ? null : next.deepCopy());
    }
  }
  
  @Override
  public HashTable clone() {
    try {
      HashTable result = (HashTable) super.clone();
      result.buckets = new Entry[buckets.length];
      for(int i = 0; i &amp;lt; buckets.length; ++i) {
        if(buckets[i] != null) {
          result.buckets[i] = buckets.deepCopy();
        }
      }
      return result;
    } catch (CloneNotSupportedException e) {
      throw new AssertionError();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Entry의 deepCopy 메서드는 자신이 가리키는 연결 리스트 전체 복사를 위해 자신을 재귀적으로 호출한다.  &lt;br /&gt;
이 기법은 간단하지만 연결 리스트를 복제하는 방법으로는 그다지 좋지 않다.  &lt;br /&gt;
재귀 호출 때문에 원소 수만큼 스택 프레임을 소비하며, 리스트가 길면 스택 오버플로를 일으킬 수도 있다.  &lt;br /&gt;
이 문제를 피하려면 deepCopy를 재귀 호출 대신 반복자를 써서 순회하는 방법을 사용해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Entry deepCopy() {
  Entry result = new Entry(key, value, next);
  for (Entry p = result; p.next != null; p = p.next) {
    p.next = new Entry(p.next.key, p.next.value, p.next.next);
  }
  return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cloneable을 이미 구현한 클래스를 확장한다면 어쩔 수 없이 clone을 잘 작동하도록 구현해야 한다. &lt;br /&gt;
그렇지 않은 상황에서는 복사 생성자와 복사 팩토리라는 더 나은 객체 복사 방식을 제공할 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;복사-생성자&quot;&gt;복사 생성자&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Yum(Yum yum) { ... };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;복사 생성자란 단순히 자신과 같은 클래스의 인스턴스를 인수로 받는 생성자를 말한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;복사-팩토리&quot;&gt;복사 팩토리&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Yum newInstance(Yum yum) { ... };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;p&gt;새로운 인터페이스를 만들 때 Cloneable을 확장해서는 안 되며,   &lt;br /&gt;
새로운 클래스도 이를 구현해서는 안 된다.     &lt;br /&gt;
final 클래스라면 Cloneable을 구현해도 위험이 크지 않지만   &lt;br /&gt;
성능 최적화 관점에서 검토한 후 별다른 문제가 없을 때만 드물게 허용해야 한다.   &lt;br /&gt;
기본 원칙은 ‘복제 기능은 생성자와 팩토리를 이용하는 게 좋다.’라는 것이다.    &lt;br /&gt;
단, 배열은 clone 메서드 방식이 가능 깔끔한, 규칙의 합당한 예외라 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;14-comparable을-구현할지-고려하라&quot;&gt;14. Comparable을 구현할지 고려하라.&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Comparable&amp;lt;T&amp;gt; {
  int compareTo(T t);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Comparable 인터페이스의 유일한 메서드는 compareTo이다.&lt;/li&gt;
  &lt;li&gt;compareTo는 Object의 메서드는 아니지만 두 가지 성격을 제외하면 equals와 같다.&lt;/li&gt;
  &lt;li&gt;compareTo는 단순 동치성 비교에 더해 순서까지 비교할 수 있으며, 제네릭하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리-1&quot;&gt;정리&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;순서를 고려해야 하는 값 클래스를 작성&lt;/strong&gt;한다면 꼭 Comparable 인터페이스를 구현하여,&lt;br /&gt;
그 인스턴스들을 쉽게 정렬하고 검색, 비교 기능을 제공하는 컬렉션과 어우러지도록 해야 한다.&lt;/p&gt;

&lt;p&gt;compareTo 메서드에서 필드의 값을 비교할 때 **&lt;와&gt; 연산자는 쓰지 말아야 한다.**      
그 대신 박싱된 기본 타입 클래스가 제공하는 정적 compare 메서드나    
Comparator 인터페이스가 제공하는 비교자 생성 메서드를 사용하자.&lt;/와&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Apr 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-04-01/chap3/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-04-01/chap3/</guid>
      </item>
    
      <item>
        <title>lowerBound &amp; upperBound</title>
        <description>&lt;h2 id=&quot;binarysearch&quot;&gt;BinarySearch&lt;/h2&gt;
&lt;p&gt;다음은 일반적으로 원하는 값(Key)을 찾을 때 사용하는 binarySearch이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;key 값을 찾으면 바로 index를 return 하고 못 찾으면 -1을 return 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lowerbound-upperbound&quot;&gt;lowerBound, upperBound&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lowerBound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upperBound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;lowerbound&quot;&gt;lowerBound&lt;/h4&gt;
&lt;p&gt;범위 [begin, end] 안의 원소들 중, 특정 key보다 크거나 같은 첫번째 원소의 인덱스를 리턴한다.      &lt;br /&gt;
만약 그런 원소가 없다면 end 인덱스를 리턴한다.&lt;/p&gt;

&lt;h4 id=&quot;upperbound&quot;&gt;upperBound&lt;/h4&gt;
&lt;p&gt;범위 [begin, end] 안의 원소들 중, 특정 key보다 큰 첫번째 원소의 인덱스를 리턴한다.     &lt;br /&gt;
만약 그런 원소가 없다면 end 인덱스를 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;관련-문제&quot;&gt;관련 문제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/10816&quot;&gt;https://www.acmicpc.net/problem/10816&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;풀이 코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10816.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10816.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;upperbound에서 key보다 큰 인덱스값을 뽑아내는 이유는    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upperBound - lowerBound&lt;/code&gt;를 통해서 중복값의 개수를 구하기 위해서이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-01-20/lowerBound&upperBound/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-01-20/lowerBound&upperBound/</guid>
      </item>
    
      <item>
        <title>Counting Sort &amp; Radix Sort</title>
        <description>&lt;h1 id=&quot;counting-sort-계수-정렬&quot;&gt;Counting Sort (계수 정렬)&lt;/h1&gt;

&lt;p&gt;보통 빠르다는 정렬 알고리즘으로는 대표적으로    &lt;br /&gt;
퀵 정렬(Quick Sort), 힙 정렬(Heap Sort), 합병 정렬(Merge Sort) 등이 있다.    &lt;br /&gt;
정렬은 보통 데이터끼리 비교하는 경우가 많아 𝚶(nlogn)보다 작아질 수 없는 것이 한계다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정렬-방법&quot;&gt;정렬 방법&lt;/h3&gt;
&lt;p&gt;(1) 정렬할 배열에 들어있는 값들 각각의 수를 세기 위한 count 배열을 생성한다.  &lt;br /&gt;
값의 종류가 많지 않다면, count 배열의 크기도 크지 않을 것이다.&lt;/p&gt;

&lt;p&gt;(2) 정렬할 배열을 선형 탐색하며, 각 값들의 수를 센다.&lt;/p&gt;

&lt;p&gt;(3) 각 값들의 수는 알고 있다는 것은, 정렬 결과 배열에 각 값들이 순서대로 몇 개씩 들어있어야 하는지 안다는 것이다. 정렬 결과 배열을 생성한다.&lt;/p&gt;

&lt;p&gt;두 수를 비교하는 과정이 없기 때문에 빠른 배치가 가능하지만 count 배열이라는 새로운 배열을 선언해야 한다.        &lt;br /&gt;
배열 안에 있는 max값의 범위에 따라 counting 배열의 길이가 달라지게 된다.       &lt;br /&gt;
예로들어 10개의 원소를 정렬하고자 하는데, 수의 범위가 0~1억이라면 메모리가 매우 낭비가 된다.&lt;/p&gt;

&lt;p&gt;즉 Counting Sort가 효율적인 상황에서 쓰려면 수열의 길이보다 수의 범위가 극단적으로 크면 메모리가 엄청 낭비 될 수 있다는 것이다.  &lt;br /&gt;
상황에 맞게 정렬 알고리즘을 써야하고 Quick 정렬의 경우 시간복잡도 평균값이 𝚶(nlogn)으로 빠른편이면서 배열도 하나만 사용하기 때문에 
공간복잡도는 𝚶(𝑛)으로 시간과 메모리 둘 다 효율적이라 대표적으로 많이 쓰인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;수행시간&quot;&gt;수행시간&lt;/h3&gt;
&lt;p&gt;수행시간: O(n + m)  &lt;br /&gt;
메모리 요구량: O(n + m)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;n &amp;gt; m        &lt;br /&gt;
수행시간: O(n)  &lt;br /&gt;
메모리 요구량: O(n)  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;n &amp;lt; m          &lt;br /&gt;
수행시간: O(m)  &lt;br /&gt;
메모리 요구량: O(m)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;treemap&quot;&gt;TreeMap&lt;/h3&gt;
&lt;p&gt;counting sort를 구현할 때, 자바의 TreeMap 클래스가 유용하다.  &lt;br /&gt;
Map 인터페이스를 implements 했기 때문에 사용법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 데이터 저장: map.put(key, value)
- 데이터 값 조회: map.get(key)
- 데이터 제거: map.remove(key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;HashMap 클래스는 해시 테이블 자료구조로 구현되었고, put, get, remove 모두 O(1) 이다.&lt;/li&gt;
  &lt;li&gt;TreeMap 클래스는 레드 블랙 트리 자료구조로 구현되었다. put, get, remove 모두 O(log N) 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;레드 블랙 트리는 이진 트리이므로, TreeMap 클래스의 데이터 목록은 키(key) 값을 기준으로 정렬되어 있다.        &lt;br /&gt;
그러기 때문에 별도에 정렬은 하지 않고 TreeMap에 값을 순차적으로 출력하면 된다.  &lt;br /&gt;
하지만 TreeMap은 Key값이 중복이 되지 않기 때문에 값의 갯수를 value에 넣어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;radix-sort기수-정렬&quot;&gt;Radix Sort(기수 정렬)&lt;/h1&gt;

&lt;p&gt;낮은 자리 수 부터 비교하여 정렬해 간다는 것을 기본 개념으로 하는 정렬 알고리즘이다.        &lt;br /&gt;
자릿수가 고정되어 있으니, 안전성이 있고(이때 데이터들 간의 상대적 순서는 보존되어야 한다.)      &lt;br /&gt;
기수 정렬은 비교 연산을 하지 않으며, 무엇보다도 전체 시간복잡도 역시 O(dn)이어서, 정수와 같은 자료의 정렬 속도가 매우 빠르다.      &lt;br /&gt;
정렬할 데이터의 radix가 작은 경우에 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만, 데이터 전체 크기에 기수 테이블의 크기만한 메모리가 더 필요하다.       &lt;br /&gt;
기수 정렬은 정렬 방법의 특수성 때문에, 부동소수점 실수처럼 특수한 비교 연산이 필요한 데이터에는 적용할 수 없지만, 사용 가능할 때에는 매우 좋은 알고리즘이다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;digit &lt;br /&gt;
십진수의 digit는 10개이다. (0,1,2,3,4,5,6,7,8,9) &lt;br /&gt;
이진수의 digit는 2개이다. (0,1)  &lt;br /&gt;
16진수의 digit는 16개이다. (0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;radix    &lt;br /&gt;
digit의 수를 radix라고 한다.&lt;br /&gt;
십진수의 radix는 10 이다.&lt;br /&gt;
이진수의 radix는 2 이다.&lt;br /&gt;
16진수의 radix는 16 이다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;(1)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;(2)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;(3)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;(4)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0123&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;156&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;strong&gt;0&lt;/strong&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;strong&gt;0&lt;/strong&gt;04&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2154&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;215&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;strong&gt;2&lt;/strong&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;strong&gt;0&lt;/strong&gt;61&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;123&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0222&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;106&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;strong&gt;2&lt;/strong&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;strong&gt;1&lt;/strong&gt;23&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;222&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0004&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;022&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;21&lt;strong&gt;5&lt;/strong&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;strong&gt;1&lt;/strong&gt;50&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;0&lt;/strong&gt;283&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0283&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;012&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;21&lt;strong&gt;5&lt;/strong&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;strong&gt;1&lt;/strong&gt;54&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;061&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1560&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;028&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;strong&gt;6&lt;/strong&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;strong&gt;2&lt;/strong&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;560&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1061&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;215&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;strong&gt;6&lt;/strong&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;strong&gt;2&lt;/strong&gt;83&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2150&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;000&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;02&lt;strong&gt;8&lt;/strong&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;strong&gt;5&lt;/strong&gt;60&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2&lt;/strong&gt;154&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(1) 일의 자리를 기준으로 정렬한다.&lt;br /&gt;
(2) 십의 자리를 기준으로 정렬한다.&lt;br /&gt;
(3) 백의 자리를 기준으로 정렬한다.&lt;br /&gt;
(4) 천의 자리를 기준으로 정렬한다. 이 단계에서 정렬이 완료된다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약 배열에 음수도 들어있다면,  &lt;br /&gt;
모든 자릿 수를 정렬한 후에, 부호(+,-)를 고려하여 순서를 변경하는 작업을 추가하거나, &lt;br /&gt;
아니면 미리 양수와 음수를 분리한 후, 양수 부분과 음수 부분을 따로 radix sort해야 한다. &lt;br /&gt;
배열에서 양수와 음수를 분리할 때는 quick sort의 partition을 응용할 수 있다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대부분의 데이터에서 자릿 수는 상수이다.   &lt;br /&gt;
그런데, 각 자리의 정렬을 O(N lo gN) 시간에 한다면, radix sort의 시간도 O(N lo gN) 시간이된다. &lt;br /&gt;
각 자리의 정렬을 O(N) 시간에 한다면, radix sort의 시간도 O(N) 시간이 된다.  &lt;br /&gt;
각 자리의 값의 수는 digit 수와 같다.  &lt;br /&gt;
digit 수는 작기 때문에, digit 값을 기준으로 정렬하는 작업은 counting sort 알고리즘을 적용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;구현&quot;&gt;구현&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/105186134-ba029f00-5b74-11eb-8612-f913e61811e8.png&quot; alt=&quot;carbon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;알고리즘-문제&quot;&gt;알고리즘 문제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1920 수 찾기
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/1920&quot;&gt;https://www.acmicpc.net/problem/1920&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B1920.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B1920.java&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2750 수 정렬하기
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/2750&quot;&gt;https://www.acmicpc.net/problem/2750&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2750.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2750.java&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2751 수 정렬하기 2
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/2751&quot;&gt;https://www.acmicpc.net/problem/2751&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2751.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2751.java&lt;/a&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;10989 수 정렬하기 3
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/10989&quot;&gt;https://www.acmicpc.net/problem/10989&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10989.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10989.java&lt;/a&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;10815 숫자 카드
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/10815&quot;&gt;https://www.acmicpc.net/problem/10815&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드 &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10815.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B10815.java&lt;/a&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2075 N번째 큰 수
    &lt;ul&gt;
      &lt;li&gt;문제 &lt;a href=&quot;https://www.acmicpc.net/problem/2075&quot;&gt;https://www.acmicpc.net/problem/2075&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드1 (priorityQueue 사용) &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2075.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2075.java&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;코드2 (radix sort 사용) &lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2075_v2.java&quot;&gt;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2075_v2.java&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/105185553-fbdf1580-5b73-11eb-8cdc-f6030c0f58bb.png&quot; alt=&quot;스크린샷 2021-01-20 오후 10 53 03&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;제출번호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25490906&lt;/code&gt;: radix sort로 구현한 결과&lt;/li&gt;
  &lt;li&gt;제출번호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25477319&lt;/code&gt;: priorityQueue로 구현한 결과&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-01-20/countingSort/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-01-20/countingSort/</guid>
      </item>
    
      <item>
        <title>ssh config 사용해서 ssh 접속하기</title>
        <description>&lt;p&gt;젠킨스를 도커로 띄워 사용하면서 ssh 접속을 자주 경험했었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이전에 젠킨스 사용하며 ssh 접속 방법 : &lt;a href=&quot;https://hyerin6.github.io/2020-04-24/0424/&quot;&gt;https://hyerin6.github.io/2020-04-24/0424/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;항상 원격 서버에 public key를 등록하고 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/authorized_keys&lt;/code&gt;)                 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh 계정@호스트주소&lt;/code&gt; 명령으로 ssh 접속을 했는데                  &lt;br /&gt;
이번에는 config 파일을 이용해 원격 접속을 더 간단하게 해보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;config-파일을-이용한-원격-접속&quot;&gt;config 파일을 이용한 원격 접속&lt;/h3&gt;

&lt;p&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt;에 config 파일을 생성한다. 접근 권한은 600으로 설정&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/.ssh 
touch config 
chmod 600 config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(2) config 파일 내 원격 접속 정보 추가&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Host : ssh 접속 시 이용할 별명&lt;/li&gt;
  &lt;li&gt;HostName : ip 혹은 host 주소&lt;/li&gt;
  &lt;li&gt;User : (원격 서버) 계정&lt;/li&gt;
  &lt;li&gt;IdentityFile : ssh 접속에 이용할 private key (id_rsa : Private Key file)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 정보를 config 파일에 담아야 하는데 다음과 같이 작성하면 된다.  &lt;br /&gt;
이번 프로젝트에서는 port도 지정해야해서 Port 설정도 추가했다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host woof
  HostName [ip 혹은 host 주소]
  User [계정]
  IdentityFile [private key (위치)]
  Port [port]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별명을 woof로 설정했기 때문에 ssh 접속할 때 다음과 같이 접속하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh woof
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접 설정한 이름을 이용해서 ssh 접속을 간편하게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(3) 패스워드가 있다면 패스워드 입력 후 접속이 가능하다.                        &lt;br /&gt;
Passphrase 는 키의 비밀번호로, 암호화되어 키 생성에 사용된다.&lt;/p&gt;

</description>
        <pubDate>Fri, 15 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-01-15/ssh-config/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-01-15/ssh-config/</guid>
      </item>
    
      <item>
        <title>Gradle vs. Maven</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예전에 안드로이드 실습과 디프만 워밍업 프로젝트에서 gradle을 사용해봤는데    &lt;br /&gt;
우선 왜 gradle이 선택되었는지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;빌드-도구-종류-gradle-vs-maven&quot;&gt;빌드 도구 종류: Gradle vs Maven&lt;/h2&gt;
&lt;p&gt;maven과 gradle은 빌드 관리 도구이다.  &lt;br /&gt;
빌드 관리 도구란 빌드 자동화를 수행해 실행 가능한 프로그램으로 바꿔주는 도구이다. &lt;br /&gt;
즉 코드를 컴파일해서 binary code로 만들고 패키징, 테스트하여 실행 가능한 &lt;br /&gt;
프로그램이 나오기 까지의 과정(빌드)을 자동화하는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Performance 측면에서 gradle이 maven보다 빠른 성능을 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gradle.org/maven-vs-gradle/&quot;&gt;https://gradle.org/maven-vs-gradle/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;maven&quot;&gt;Maven&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;자바용 프로젝트 관리 도구&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; 을 이용한다.&lt;/li&gt;
  &lt;li&gt;사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는데 필요한 다른 라이브러리들까지 네트워크를 통해 자동으로 다운로드한다.&lt;/li&gt;
  &lt;li&gt;정해진 라이프사이클에 의하여 작업을 수행하며, 프로젝트 관리 기능도 포함하고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gradle&quot;&gt;Gradle&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;오픈소스 기반의 build 자동화 시스템&lt;/li&gt;
  &lt;li&gt;JVM 기반의 빌드 도구로 기존의 Ant와 Maven을 보완&lt;/li&gt;
  &lt;li&gt;설정 주입 방식 (Configuration Injection)&lt;/li&gt;
  &lt;li&gt;Groovy 문법 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;           &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gradle-사용을-고려해야할-이유&quot;&gt;Gradle 사용을 고려해야할 이유&lt;/h2&gt;
&lt;h4 id=&quot;1-속도가-빠르다&quot;&gt;(1) 속도가 빠르다.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-build라는-동적인-요소를-xml로-정의하기에는-어려운-부분이-많다&quot;&gt;(2) Build라는 동적인 요소를 XML로 정의하기에는 어려운 부분이 많다.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;설정 내용이 길어지고 가독성이 떨어진다.&lt;/li&gt;
  &lt;li&gt;의존 관계가 복잡한 프로젝트 설정하기에 부적절하다.&lt;/li&gt;
  &lt;li&gt;상속 구조를 이용한 멀티 모듈 구현&lt;/li&gt;
  &lt;li&gt;특정 설정을 소수의 모듈에서 공유하기 위해서는 부모 프로젝트를 생성하여 상속하게 해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-gradle은-groovy를-사용하기-때문에-동적인-빌드는-groovy-스크립트로-플러그인을-호출하거나-직접-코드를-작성하면-된다&quot;&gt;(3) Gradle은 Groovy를 사용하기 때문에 동적인 빌드는 Groovy 스크립트로 플러그인을 호출하거나 직접 코드를 작성하면 된다.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;설정 주입 방식을 사용해서 공통 모듈을 상속해서 사용하는 단점을 커버한다.&lt;/li&gt;
  &lt;li&gt;설정 주입 시 프로젝트의 조건을 체크할 수 있어서 프로젝트별로 주입되는 설정을 다르게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-성능&quot;&gt;(4) 성능&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Incrementality: gradle은 가능한 경우 변경된 파일만 작업해 중복을 피한다.&lt;/li&gt;
  &lt;li&gt;build cache: 동일한 입력에 대해서 gradle 빌드를 재사용한다.&lt;/li&gt;
  &lt;li&gt;gradle 데몬: 빌드 정보를 메모리에 유지하는 프로세스를 구동한다.&lt;/li&gt;
  &lt;li&gt;Performance 측면에서 gradle이 maven보다 빠른 성능을 보여준다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gradle.org/maven-vs-gradle/&quot;&gt;https://gradle.org/maven-vs-gradle/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;           &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/java_library_plugin.html&quot;&gt;https://docs.gradle.org/current/userguide/java_library_plugin.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tomgregory.com/how-to-use-gradle-api-vs-implementation-dependencies-with-the-java-library-plugin/&quot;&gt;https://tomgregory.com/how-to-use-gradle-api-vs-implementation-dependencies-with-the-java-library-plugin/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/mindorks/implementation-vs-api-in-gradle-3-0-494c817a6fa&quot;&gt;https://medium.com/mindorks/implementation-vs-api-in-gradle-3-0-494c817a6fa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/4.6/release-notes.html&quot;&gt;https://docs.gradle.org/4.6/release-notes.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.gradle.org/incremental-compiler-avoidance#about-annotation-processors&quot;&gt;https://blog.gradle.org/incremental-compiler-avoidance#about-annotation-processors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 06 Jan 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021-01-06/buildtool/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-01-06/buildtool/</guid>
      </item>
    
      <item>
        <title>Index</title>
        <description>&lt;p&gt;예전에 교내 수업에서 프로젝트를 하면서 인덱스를 적용해보면서     &lt;br /&gt;
어떤 경우에 인덱스를 타지 않는지 주의 사항에 대해서는 알게 되었지만     &lt;br /&gt;
어떻게 생성해야 최적으로 생성할 수 있는지는 헷갈리기 때문에  &lt;br /&gt;
더 알아보고 제대로 설정해보고자 Real MySQL을 읽어보기로 했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;인덱스란&quot;&gt;인덱스란?&lt;/h3&gt;

&lt;p&gt;데이터베이스 테이블의 모든 데이터를 검색해서 원하는 결과를 가져오려면 시간이 오래 걸린다.   &lt;br /&gt;
그래서 칼럼의 값과 해당 레코드가 저장된 주소를 키와 값의(key-value) 쌍으로 인덱스를 만들어두는 것이다.  &lt;br /&gt;
최대한 빠르게 찾아갈 수 있게 칼럼의 값을 주어진 순서로 미리 정렬해서 보관한다.&lt;/p&gt;

&lt;p&gt;SortedList는 DBMS의 인덱스와 같은 구조이고 ArrayList는 데이터 파일과 같은 자료구조를 사용한다. &lt;br /&gt;
인덱스는 저장되는 컬럼의 값을 이용해 항상 정렬된 상태로 유지한다. &lt;br /&gt;
때문에 데이터가 저장될 때마다 항상 값이 정렬되서 저장하는 과정이 복잡하고 느리지만, &lt;br /&gt;
이미 정렬돼 있어서 빨리 원하는 값을 찾아올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-tree-인덱스-키-검색&quot;&gt;B-Tree 인덱스 키 검색&lt;/h3&gt;

&lt;p&gt;B-Tree 인덱스를 이용한 검색은 100%일치 또는 값이 앞부분만 일치하는 경우에 사용할 수 있다. &lt;br /&gt;
부등호 비교나 값의 뒷부분이 일치하는 경우에는 B-Tree 인덱스를 이용한 검색이 불가능하다. &lt;br /&gt;
또한 인덱스의 키값에 변형이 가해진 후 비교되는 경우에는 절대 B-Tree의 빠른 검색 기능을 사용할 수 없다. &lt;br /&gt;
따라서 함수나 연산을 수행한 결과로 정렬한다거나 검색하는 작업은 B-Tree의 장점을 이용할 수 없다.&lt;/p&gt;

&lt;p&gt;인덱스 조회 주의사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫번째 인덱스 컬럼이 조회 쿼리에 없으면 인덱스를 타지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; 연산자는 각 조건들이 읽어와야할 ROW 수를 줄이는 역할을 하지만,  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; 연산자는 비교해야할 ROW가 더 늘어나기 때문에 풀 테이블 스캔이 발생할 확률이 높다.&lt;/li&gt;
  &lt;li&gt;인덱스로 사용된 컬럼값 그대로 사용해야만 인덱스가 사용된다.   &lt;br /&gt;
ex. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where salary * 10 &amp;gt; 150000;&lt;/code&gt; 는 인덱스를 못타지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where salary &amp;gt; 150000 / 10;&lt;/code&gt; 은 인덱스를 사용&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; 값의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is null&lt;/code&gt; 조건으로 인덱스 레인지 스캔 가능&lt;/li&gt;
  &lt;li&gt;인덱스 순서와 조회 순서를 지킬 필요는 없다. 조회조건에 포함되어 있는지가 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;선택도-기수성&quot;&gt;선택도 (기수성)&lt;/h3&gt;

&lt;p&gt;모든 인덱스 키값 가운데 유니크한 값의 수를 의미한다.            &lt;br /&gt;
전체 인덱스 기값은 100개인데 그중에서 유니크한 값의 수는 10개라면 기수성은 10이다.             &lt;br /&gt;
중복된 값이 많아지면 기수성은 낮아지고 선택도 또한 떨어진다.                     &lt;br /&gt;
인덱스는 선택도가 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;읽어야-하는-레코드의-건수&quot;&gt;읽어야 하는 레코드의 건수&lt;/h3&gt;

&lt;p&gt;인덱스를 통해 테이블의 레코드를 읽는 것은 인덱스를 거치지 않고 바로 테이블의 레코드를 읽는 것보다 높은 비용이 드는 작업이다.   &lt;br /&gt;
테이블에 레코드가 100만 건이 저장돼 있는데, 그중에서 50만 건을 읽어야 하는 쿼리가 있다고 가정하자.   &lt;br /&gt;
이 작업은 필요 없는 50만 건을 버리는 것이 효율적일지, 인덱스를 통한 필요한 50만 건만 일어 오는 것이 효율적일지 판단해야 한다.&lt;/p&gt;

&lt;p&gt;일반적인 DBMS의 옵티마이저에서는 인덱스를 통해, 테이블에서   &lt;br /&gt;
직접 레코드 1건을 읽는 것보다 4~5배 정도 더 비용이 많이 드는 작업으로 예측된다.     &lt;br /&gt;
인덱스를 통해 읽어야 할 레코드의 건수가 전체 테이블 코드의 20~25%를 넘어서면 인덱스를 이용하지 않고   &lt;br /&gt;
직접 테이블을 모두 읽어서 필요한 레코드만 가져내는(필터링) 방식으로 처리하는 것이 효율적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-tree-인덱스를-통한-데이터-읽기&quot;&gt;B-Tree 인덱스를 통한 데이터 읽기&lt;/h3&gt;

&lt;p&gt;인덱스 사용을 결정하려면 MySQL(각 스토리지 엔진)이 어떻게 인덱스를 이용해서 레코드를 읽어오는지 알아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) 인덱스 레인지 스캔&lt;/strong&gt;  &lt;br /&gt;
인덱스를 통해 레코드를 한 건만 읽는 경우와 한 건 이상을 읽는 경우 각각 다른 이름으로 구분하지만 &lt;br /&gt;
모두 묶어서 “인덱스 레인지 스캔”이라고 표현할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT * FROM employees WHERE first_name BETWEEN 'Ebbe' AND 'Gad'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;인덱스 레인지 스캔은 검색해야 할 인덱스 범위가 결정되었을 때 사용하는 방식이다.   &lt;br /&gt;
검색하려는 값의 수나 검색 결과와는 관계없이 레인지 스캔이라고 표현한다.   &lt;br /&gt;
루트 노드에서부터 비교를 시작해 브랜치 노드를 거치고 최종적으로   &lt;br /&gt;
리프 노드까지 찾아 들어가면 실제로 원하는 시작 지점을 찾을 수 있다.     &lt;br /&gt;
시작 위치를 찾으면 그때부터 리프 노드의 레코드만 순서대로 읽으면 된다.&lt;/p&gt;

&lt;p&gt;중요한 것은 인덱스의 리프 노드에서 검색 조건에 일치하는 건들은 데이터 파일에서 레코드를 읽어오는 과정이 필요하다는 것이다.  &lt;br /&gt;
이때 리프 노드에 저장된 레코드 주소로 데이터 파일의 레코드를 읽어오는데 레코드 한 건 한 건 단위로 랜덤 I/O가 한 번씩 실행된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) 인덱스 풀 스캔&lt;/strong&gt;&lt;br /&gt;
인덱스 레인지 스캔과 마찬가지로 인덱스를 사용하지만 인덱스 레인지 스캔과 다르게 인덱스의 처음부터 끝까지 모두 읽는 방식을 인덱스 풀 스캔이라고 한다. &lt;br /&gt;
쿼리의 조건절에 사용된 컬럼이 인덱스의 첫 번째 컬럼이 아닌 경우 인덱스 풀 스캔 방식이 사용된다.&lt;/p&gt;

&lt;p&gt;일반적으로 인덱스의 크기는 테이블의 크기보다 작으므로 직접 테이블을 처음부터 끝까지 읽는 것보다는 인덱스만 읽는 것이 효율적이다.  &lt;br /&gt;
쿼리가 인덱스에 명시된 컬럼만으로 조건을 처리할 수 있는 경우 주로 이 방식이 사용된다.&lt;/p&gt;

&lt;p&gt;먼저 인덱스 리프 노드의 제일 앞 또는 제일 뒤로 이동한 후,   &lt;br /&gt;
인덱스의 리프 노드를 연결하는 Linked list를 따라서 처음부터 끝까지 스캔하는 방식을 인덱스 풀 스캔이라고 한다.       &lt;br /&gt;
이 방식은 인덱스 레인지 스캔보다는 빠르지 않지만 테이블 풀 스캔보다는 효율적이다.   &lt;br /&gt;
인덱스에 포함된 컬럼만으로 쿼리를 처리할 수 있으면 테이블의 레코드를 읽을 필요가 없기 때문에 적은 디스크 I/O로 쿼리를 처리할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주의 &lt;br /&gt;
인덱스 풀 스캔 방식은 인덱스를 사용하는 것이지만 효율적인 방법은 아니며 일반적으로 인덱스를 생성하는 목적은 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3) 루스 인덱스 스캔&lt;/strong&gt;  &lt;br /&gt;
루스 인덱스 스캔은 말 그대로 느슨하게 혹은 듬성듬성하게 인덱스를 읽는 것을 의미한다.   &lt;br /&gt;
루스 인덱스 스캔은 인덱스 레인지 스캔과 비슷하게 작동하지만, &lt;br /&gt;
중간마다 필요치 않은 인덱스 키값은 무시하고 다음으로 넘어가는 형태로 처리한다. &lt;br /&gt;
일반적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; 또는 집합 함수 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAX()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIN()&lt;/code&gt; 함수에 대해 최적화하는 경우 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-tree-인덱스의-가용성과-효율성&quot;&gt;B-Tree 인덱스의 가용성과 효율성&lt;/h3&gt;
&lt;p&gt;쿼리의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; 조건이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GROUP BY&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; 절이 어떤 경우에 인덱스를 사용할 수 있고   &lt;br /&gt;
어떤 방식으로 사용할 수 있는지 식별할 수 있어야 한다.     &lt;br /&gt;
그래야 쿼리의 조건을 최적화하거나 역으로 쿼리에 맞게 인덱스를 최적으로 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) 비교 조건의 종류와 효율성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다중 칼럼 인덱스에서 각 칼럼의 순서와 그 칼럼에 사용된 조건이 동등 비교(“=”)인지 &lt;br /&gt;
아니면 크다(“&amp;gt;”) 또는 작다(“&amp;lt;”)와 같은 범위 조건인지에 따라 각 인덱스 칼럼의 활용 형태가 달라지며,  &lt;br /&gt;
효율 또한 달라진다. 예제로 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM dept_emp 
WHERE dept_no='d002' AND emp_no &amp;gt;= 10114;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 쿼리를 위해 dept_emp 테이블에 각각 칼럼의 순서만 다른 2가지 케이스로 인덱스를 생성했다고 가정하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;케이스 A : dept_no + emp_no&lt;/li&gt;
  &lt;li&gt;케이스 B : emp_no + dept_no&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;케이스 A는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dept_no='d002' AND emp_no &amp;gt;= 10114&lt;/code&gt; 인 레코드를 찾고 &lt;br /&gt;
그 이후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dept_no='d002'&lt;/code&gt;가 아닐 때까지 인덱스를 읽기만 하면 된다. &lt;br /&gt;
이 경우 읽은 레코드가 모두 사용자가 원하는 결과임을 알 수 있다. &lt;br /&gt;
즉 5건의 레코드를 찾는 데 꼭 필요한 5번의 비교 작업만 수행한 것이므로 상당히 효율적으로 인덱스를 이용한 것이다.&lt;/p&gt;

&lt;p&gt;하지만 케이스 B는 우선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emp_no &amp;gt;= 10144 AND dept_no='d022'&lt;/code&gt;인 레코드를 찾고, &lt;br /&gt;
그 이후 모든 레코드에 대해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dept_no='d022'&lt;/code&gt;가 맞는지 비교하는 과정을 거쳐야 한다.   &lt;br /&gt;
이처럼 인덱스를 통해 읽은 레코드가 나머지 조건에 맞는지 비교하면서 취사선택을 하는 작업을 필터링이라고도 한다.&lt;/p&gt;

&lt;p&gt;작업 범위를 결정하는 조건은 많으면 많을수록 쿼리의 처리 성능을 높이지만 체크 조건은 많다고 해서    &lt;br /&gt;
(최종적으로 가져오는 레코드는 작게 만들지 몰라도) 쿼리의 처리 성능을 높이지는 못한다.    &lt;br /&gt;
오히려 쿼리 실행을 더 느리게 만들 때가 많다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) 인덱스의 가용성&lt;/strong&gt;  &lt;br /&gt;
B-Tree 인덱스의 특징은 왼쪽 값에 기준해서 오른쪽 값이 정렬돼 있다는 것이다. &lt;br /&gt;
여기서 왼쪽이라 함은 하나의 컬럼 내에서뿐만 아니라 다중 칼럼 인덱스의 칼럼에 대해서도 함께 적용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;케이스 A : INDEX (first_name)&lt;/li&gt;
  &lt;li&gt;케이스 B : INDEX (dept_no, emp_no)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM employees WHERE first_name LIKE '%mer';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 인덱스 레인지 스캔 방식으로 인덱스를 이용할 수는 없다. &lt;br /&gt;
그 이유는 first_name 칼럼에 지정된 값의 왼쪽부터 한 글자씩 비교해 가면서 일치하는 레코드를 찾아야 하는데. &lt;br /&gt;
조건절에 주어진 상수값에는 왼쪽 부분이 고정되지 않았기 때문이다.&lt;/p&gt;

&lt;p&gt;다음은 케이스 B의 인덱스가 지정된 dept_emp 테이블에 대한 쿼리이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM dept_emp WHERE emp_no &amp;gt;= 10144;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인덱스가 (dept_no, emp_no) 칼럼 순서대로 생성돼 있다면 인덱스의 선행 칼럼인 dept_no 값 없이 &lt;br /&gt;
emp_no 값으로만 검색하면 인덱스를 효율적으로 사용할 수 없다. &lt;br /&gt;
케이스 B의 인덱스는 다중 칼럼으로 인덱스가 만들어졌기 때문에 dept_no에 대해 먼저 정렬한 후, &lt;br /&gt;
다시 emp_no 칼럼으로 정렬돼있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;project&quot;&gt;project&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE INDEX IDX_USER_PET ON User (petId);   
CREATE INDEX IDX_USER_LOCATION ON User (locationId);  

CREATE INDEX IDX_PROFILE_PET ON PetProfile (petId);  
CREATE INDEX IDX_PROFILE_USER ON UserProfile (userId);  

CREATE INDEX IDX_BREED_PET ON PetBreed (petId);  
CREATE INDEX IDX_CHARACTER_PET ON PetCharacter (petId);   
CREATE INDEX IDX_INTEREST_PET ON PetInterest (petId);  

CREATE SPATIAL INDEX IDX_LOCATION_POINT ON Location (point);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 자주 조회하고 중복이 없는 key에 index를 생성했고  &lt;br /&gt;
사용자의 주소 좌표를 저장하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt;는 가까이에 있는 사용자를 조회해야 하기 때문에   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPATIAL INDEX&lt;/code&gt;로 생성했다.   &lt;br /&gt;
나중에 거리 계산 로직이 결정되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt;으로 key가 원하는대로 나오는지 확인이 필요하다.&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-12-06/index/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-12-06/index/</guid>
      </item>
    
      <item>
        <title>동네 반려견 탐색 기능을 위한 주소 저장</title>
        <description>&lt;p&gt;우리집에서 가까이 있는 반려동물을 탐색하는 기능을 구현하기 위해 &lt;br /&gt;
kakao map api를 사용하여 주소를 저장해보기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;kakao-map-api&quot;&gt;Kakao Map Api&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.kakao.com/&quot;&gt;developers.kakao&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.kakao.com/tool/rest-api/open/get/v2-local-geo-coord2address.%7Bformat%7D&quot;&gt;좌표로 주소 변환하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내 애플리케이션 생성 후 승인키를 발급 받아 좌표로 주소를 변환하는 api에 헤더로 넘겨주면 된다. &lt;br /&gt;
내 애플리케이션에서 승인키 발급 뿐만 아니라 도메인과 IP 설정을 해줘야 api 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;좌표와-주소를-어떻게-저장할까&quot;&gt;좌표와 주소를 어떻게 저장할까&lt;/h3&gt;

&lt;p&gt;클라이언트에서 x, y 좌표를 받아 주소를 변환하는 것까지 테스트를 마치고 &lt;br /&gt;
DB에 좌표를 저장하고 가까이 있는 반려동물을 조회해야 하는데 &lt;br /&gt;
MySQL에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; 타입으로 저장하고 조회할 수 있다는 사실을 알게 되었다.&lt;/p&gt;

&lt;p&gt;다음과 같이 설정하여 공간 데이터 타입을 사용할 수 있으며   &lt;br /&gt;
공간 데이터 타입을 활용하여 위치 데이터를 인덱싱할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pom.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.vividsolutions&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jts&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-spatial&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:  
    jpa:  
        database-platform: org.hibernate.spatial.dialect.mysql.MySQL56InnoDBSpatialDialect  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;INDEX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; 타입은 다음과 같이 인덱스 생성이 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE SPATIAL INDEX [index_name] ON [table_name] ([index_column]);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-12-03/address/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-12-03/address/</guid>
      </item>
    
      <item>
        <title>AWS S3, BULK INSERT</title>
        <description>&lt;h1 id=&quot;aws-s3--프로필-이미지-저장&quot;&gt;AWS S3 : 프로필 이미지 저장&lt;/h1&gt;

&lt;h3 id=&quot;설계&quot;&gt;설계&lt;/h3&gt;

&lt;p&gt;사용자가 kakao, naver로 회원가입을 하지만 따로 프로필 이미지를 지정하고 싶은 경우   &lt;br /&gt;
이미지 파일을 받는다. 반려견은 3장의 이미지 파일을 등록할 수 있다.   &lt;br /&gt;
3장의 이미지 파일은 우선순위가 있다는 것이 주의할 점이다.&lt;/p&gt;

&lt;p&gt;그래서 이미지와 사용자, 반려견의 연관관계에 대해 고민이 많았는데     &lt;br /&gt;
나중에 서비스에 sns 기능을 추가할 생각이 있기 때문에   &lt;br /&gt;
다음 두가지 방법 중 2번째 방법으로 구현하기로 했다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;방법1 : Image 테이블에 모든 정보 넣기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100311808-08bc0e80-2ff4-11eb-8c6e-edd7f3b560e6.png&quot; alt=&quot;스크린샷 2020-11-26 오후 2 30 45&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;방법2 : 우선순위, 카테고리 별로 테이블 따로 두기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100624431-d0576000-3366-11eb-9b4c-5f7c74aac4f1.png&quot; alt=&quot;스크린샷 2020-11-30 오후 11 49 47&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-s3&quot;&gt;AWS S3&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;모든 종류의 데이터를 원하는 형식으로 저장 가능하다.&lt;/li&gt;
  &lt;li&gt;저장할 수 있는 데이터의 전체 볼륨과 객체 수에 제한이 없다.&lt;/li&gt;
  &lt;li&gt;key 기반의 객체 스토리지, 데이터 저장 및 검색에 사용되는 고유 키가 할당된다.   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;object-storage-s3&quot;&gt;Object Storage, S3&lt;/h4&gt;

&lt;p&gt;S3의 가장 큰 특징인 내구성과 가용성을 이해하기 위해 객체 스토리지(Object Storage)가 어떤 방식으로 설계되었는지 이해해보자.   &lt;br /&gt;
다음은 일반적인 스토리지의 예시이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100711538-c54b1100-33f4-11eb-8cd5-ceff6e32b418.png&quot; alt=&quot;스크린샷 2020-12-01 오후 4 35 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;한 사용자가 데이터를 업로드하고 또 다른 사용자가 해당 데이터를 다운로드 하려는데   &lt;br /&gt;
시간이 지나 수명이 다했더나 물리적인 손상으로 인해 데이터가 있는 영역이 손상되었다고 가정하자.&lt;/p&gt;

&lt;p&gt;이제 그 공간에 놓인 데이터는 내구성이 손상되었으며, 사용할 수 없게 되었으므로 가용성 또한 훼손되었다.    &lt;br /&gt;
물리적인 저장 공간이 어떻게 설계되었느냐에 따라 손상될 확률에 차이가 있겠지만    &lt;br /&gt;
물리 장비의 한계상 결국 언젠가 데이터의 내구성과 가용성에 문제가 생길 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;그래서 이런 물리적인 한계를 논리적인 방식으로 극복하고자 한 구성이 객체 스토리지이다.       &lt;br /&gt;
객체 스토리지는 기본적으로 내부 복제를 전제로 한다. (내부 복제가 고유 특징이라고 할 수는 없다.)&lt;/p&gt;

&lt;p&gt;하나의 단위 객체가 업로드되면 자동적으로 내부의 여러 위치에 복제본을 생성한다. &lt;br /&gt;
S3의 경우 동일 Region 내의 여러 AZ에 걸쳐 복제본을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100712148-a436f000-33f5-11eb-895b-866ae0742382.png&quot; alt=&quot;스크린샷 2020-12-01 오후 4 46 09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내부적으로 복제가 수행되면 어느 한 객체에 손상이 발생하더라도 손상되지 않은 복제본이 있기 때문에 내구성이 상승한다. &lt;br /&gt;
가용성 또한 향상된다. 복제본도 원본과 동일하게 실제 다운로드 요청에 응답하는데 사용되기 때문이다.&lt;/p&gt;

&lt;p&gt;하지만 내부 복제에는 일정한 시간이 소요되기 때문에 내부 복제가 모두 완료(Fully Propagated)되기 이전에는   &lt;br /&gt;
각기 다른 객체의 위치에서 응답하므로 사용자별로 일관되지 않은 응답이 발생할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로 쓰기(create)의 경우 일부 요청에 객체 목록이 표시되지 않음&lt;/li&gt;
  &lt;li&gt;덮어쓰기의 경우 일부 요청에 이전 버전의 객체를 응답할 수 있음&lt;/li&gt;
  &lt;li&gt;삭제의 경우 일부 요청에 삭제되기 전의 객체가 표시되거나 응답할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 현상은 일시적인 것이며, 일정 시간이 지난 후에는 내부 복제가 모두 완료되어 모든 사용자에게 일관된 응답을 제공하게 된다.    &lt;br /&gt;
이것을 Eventual Consistency(최종 일관성)를 제공한다고 말하며, 이는 객체 스토리지의 특성이자 S3의 특성이 된다.&lt;/p&gt;

&lt;p&gt;객체 스토리지 및 S3의 공통적인 특성은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체의 생성, 삭제만 지원한다. 수정은 지원하지 않는다.&lt;/li&gt;
  &lt;li&gt;덮어쓰기가 가능하지만 내부적으로 수정처리하는 것이 아니라 동일한 경로로 재생성하는 방식이다.&lt;/li&gt;
  &lt;li&gt;객체 데이터와 관련도니 부가정보는 객체 데이터 외부에 별도로 저장하여 관리한다.   &lt;br /&gt;
부가정보를 Metadata라고 부르며 “Key-Value” 형태로 항목을 자유롭게 추가하여 관리할 수 있다.&lt;/li&gt;
  &lt;li&gt;HTTP(S) 프로토콜을 사용하여 업로드/다운로드할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://acstory.tistory.com/33&quot;&gt;https://acstory.tistory.com/33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aws-s3-bulk-upload&quot;&gt;aws s3 bulk upload&lt;/h3&gt;

&lt;p&gt;그동안 AWS S3를 2번 정도 사용해봤는데 여러 이미지를 저장해야 하는 경우가 없어서   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;putObject()&lt;/code&gt; 메소드만 사용해서 하나의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MultipartFile&lt;/code&gt;만 저장했었다.&lt;/p&gt;

&lt;p&gt;이번에는 반려동물의 프로필 이미지 3개를 한번에 저장해야 했기 때문에   &lt;br /&gt;
이미지 리스트를 한번에 저장할 수 있는 기능이 있는지 찾아봤다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransferManager&lt;/code&gt;를 사용하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;File&amp;gt;&lt;/code&gt;을 한번에 넘겨주니   &lt;br /&gt;
랜덤 문자열로 지정한 폴더와 이미지가 잘 저장된다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/HLuploadFileJava.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/HLuploadFileJava.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bulk-insert&quot;&gt;BULK INSERT&lt;/h1&gt;

&lt;p&gt;대용량 데이터를 로드하는 방법은 다양하다. 그 중 많이 사용하는 BULK INSERT에 대해 알아보기로 했다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO T VALUES(a, b, c);
INSERT INTO T VALUES(d, e, f);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 INSERT 는 다음과 같이 바꿀 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO T VALUES (a, b, c), (d, e, f);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 JPA에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GeneratedValue(strategy = GenerationType.IDENTITY)&lt;/code&gt; 이렇게 Auto Increment로 설정했을 때        &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;saveAll()&lt;/code&gt; 을 사용해서 List로 저장하면 bulk insert로 저장될거라고 생각했는데 데이터 개수만큼 Insert 또는 Update 쿼리가 나간다.&lt;/p&gt;

&lt;p&gt;Hibernate에서 Auto Increment인 경우 bulk insert를 지원하지 않는다고 하는데       &lt;br /&gt;
Entity의 Id를 알 수 없는 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transactional write behind&lt;/code&gt;     &lt;br /&gt;
(쓰기 지연 : 트랜잭션이 커밋되기 전까지 쿼리 저장소에 모아뒀다가 한번에 실행)과 충돌이 발생하기 때문이다.&lt;/p&gt;

&lt;p&gt;Ex. OneToMany의 Entity를 Insert하는 경우     &lt;br /&gt;
(1) 부모 Entity를 Insert하고 생성된 Id 리턴     &lt;br /&gt;
(2) 자식 Entity에서 부모의 Id를 전달받아 Fk에 채워서 Insert&lt;/p&gt;

&lt;p&gt;이 과정에서 쿼리를 모아서 실행하는게 Hibernate의 방식인데      &lt;br /&gt;
부모 Entity를 한번에 대량 등록하면, Fk에 어떤 부모의 Id를 매핑해야 되는지 알 수 없기 때문에 bulk insert가 불가능하다.          &lt;br /&gt;
(그래서 Hibernate가 JDBC 수준에서 batch insert를 비활성화한다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;왜 IDENTITY 방식을 권장할까?&lt;/strong&gt;  &lt;br /&gt;
bulk insert를 위해 TABLE이나 SEQUENCE(mysql에는 sequence가 없음) 방식으로 바꿔야 하나 잠시 고민했는데     &lt;br /&gt;
채번에 따른 부하가 상당해서 IDENTITY 방식보다 더 느린 결과가 나올 수 있다고 한다. (+ 성능상 이슈와 Dead Lock에 대한 이슈)           &lt;br /&gt;
참고 : &lt;a href=&quot;https://github.com/HomoEfficio/dev-tips/blob/master/JPA-GenerationType-%EB%B3%84-INSERT-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90.md&quot;&gt;JPA GenerationType에 따른 INSERT 성능 차이&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어떤 변경없이 IDENTITY 방식을 그대로 사용할거지만      &lt;br /&gt;
왜 IDENTITY를 사용해야 하는지 알아볼 수 있는 좋은 경험이었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vladmihalcea.com/why-you-should-never-use-the-table-identifier-generator-with-jpa-and-hibernate/&quot;&gt;https://vladmihalcea.com/why-you-should-never-use-the-table-identifier-generator-with-jpa-and-hibernate/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/507&quot;&gt;https://jojoldu.tistory.com/507&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-26/review3/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-26/review3/</guid>
      </item>
    
      <item>
        <title>Jenkins 배포 자동화</title>
        <description>&lt;p&gt;어쩌다보니 배포 자동화도 하게 되었는데 ci와 마찬가지로 스크립트를 작성해서 꼼꼼하게 배포 과정을 공부해보기로 했다.
처음에는 젠킨스가 docker로 띄워진줄 모르고 ssh key를 생성하고 배포용 서버에 넣어줬는데 &lt;br /&gt;
다음과 같은 메시지가 뜨면서 실패해서 당황했지만   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host key verification failed.Host key verification failed.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;젠킨스를 docker로 띄웠을 때는 ssh key를 jenkins_home에서 생성해야 한다는 것을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;script&quot;&gt;Script&lt;/h2&gt;

&lt;p&gt;아직 완성된건 아니지만 원하는 git branch 로 언제든지 배포용 서버에 배포될 수 있게 젠킨스 설정을 마쳤다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash 

#원하는 브랜치에서 clone받아 배포해볼 수 있게 파라미터로 브랜치만 받는다. 
git clone -b $branch --single-branch https://github.com/depromeet/8th-final-team5-backend.git

#properties를 생성하는 쉘 파일을 만들 계획인데 프로젝트 진행을 위해 일단 다음과 같이 생성했다. 
cd 8th-final-team5-backend
./mvnw clean package
cd ./target
mkdir config
cd ./config
touch application.properties

#active를 prod로 설정해줘야 디폴트 파일로 실행되지 않는다. 
echo &quot;spring.profiles.active=prod&quot; &amp;gt;&amp;gt; application.properties
echo &quot;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&quot; &amp;gt;&amp;gt; application.properties
echo &quot;spring.datasource.url=jdbc:mysql://dodo.mysql.database.azure.com:3306/dodo?useUnicode=yes&amp;amp;characterEncoding=UTF-8&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=Asia/Seoul&quot; &amp;gt;&amp;gt; application.properties
echo &quot;spring.datasource.username=&quot; &amp;gt;&amp;gt; application.properties
echo &quot;spring.datasource.password=&quot; &amp;gt;&amp;gt; application.properties
echo &quot;spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl&quot; &amp;gt;&amp;gt; application.properties

#배포용 서버에 있던 이전 파일들을 삭제한다. 
ssh dangdang@20.196.153.12 &quot;rm -rf ~/dodo/*&quot;

#jar파일과 properties가 들어있는 config 디렉토리를 배포용 서버로 보내준다. 
cd ../
scp -r -P 22 config dangdang@20.196.153.12:dodo
scp -P 22 5th-final-0.0.1-SNAPSHOT.jar dangdang@20.196.153.12:dodo

#우선 java가 들어가는 프로세스를 kill하는데 이 부분도 어떻게 해결해야 할지 아직 고민중이다.
ssh dangdang@20.196.153.12 &quot;pkill -9 java&quot;   

#배포, log는 dodo 디렉토리의 tomcat.log에 저장된다. 
ssh dangdang@20.196.153.12 &quot;cd dodo; nohup java -jar 5th-final-0.0.1-SNAPSHOT.jar &amp;gt;&amp;gt; tomcat.log &amp;amp;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아직 많은 부분을 수정해야 하지만 원하는 브랜치를 젠킨스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build With Parameters&lt;/code&gt;에서 파라미터로 넘겨 빌드시키면    &lt;br /&gt;
자동으로 배포용 서버에 jar와 config를 생성해 넘겨 배포되는 자동 배포가 완성되었다.&lt;/p&gt;

&lt;p&gt;properties 파일을 생성하는 부분과 실행 중인 프로세스를 kill하는 부분을 조금 더 고민해보고 수정할 예정이다.&lt;/p&gt;

</description>
        <pubDate>Sat, 21 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-21/jenkins-cd/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-21/jenkins-cd/</guid>
      </item>
    
      <item>
        <title>ResponseEntity &amp; Generic</title>
        <description>&lt;p&gt;이미지 저장, 주소 저장, 인기 반려동물과 탐색 정렬 기준 등 &lt;br /&gt;
회의해야 할 게 아직 많이 남았지만 간단하게 필요한 데이터와 관계를 정리해봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/99406407-312b7500-2931-11eb-8f82-499aa1f31823.png&quot; alt=&quot;스크린샷 2020-11-17 오후 11 59 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;responseentity&quot;&gt;ResponseEntity&lt;/h1&gt;

&lt;p&gt;ResponseEntity는 HttpEntity를 상속받아 HttpHeader와 body를 가질 수 있다.      &lt;br /&gt;
status field를 가지기 때문에 상태 코드도 리턴해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new ResponseEntity&amp;lt;&amp;gt;(&quot;success&quot;, HttpStatus.OK); // 메시지(String)과 상태코드(200)를 리턴
new ResponseEntity&amp;lt;&amp;gt;(message, HttpStatus.INTERNAL_SERVER_ERROR); // 객체와 상태코드를 오류로 리턴         
new ResponseEntity(HttpStatus.OK);  // 상태코드(200)만 리턴   
new ResponseEntity(header, HttpStatus.OK);  // header와 상태코드(200) 리턴   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참고&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#ResponseEntity-T-org.springframework.util.MultiValueMap-org.springframework.http.HttpStatus-&quot;&gt;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html#ResponseEntity-T-org.springframework.util.MultiValueMap-org.springframework.http.HttpStatus-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;generic&quot;&gt;Generic&lt;/h1&gt;

&lt;p&gt;이번 프로젝트에서도 클라이언트에 ResponseEntity로 응답하는데     &lt;br /&gt;
제네릭이 사용되서 제네릭에 대해 공부해봐야 겠다는 생각이 들었고       &lt;br /&gt;
먼저 ResponseEntity도 같이 가볍게 정리해봤다. 😊😊&lt;/p&gt;

&lt;p&gt;제네릭을 검색해 본적이 많은데 프로그래밍에서 뜻이나 문법만 나와서 &lt;br /&gt;
이펙티브 자바에 제네릭을 왜 사용하는지, 장단점이나 주의할 내용이 있는지 찾아봤더니 역시 관련된 내용이 있었다.   &lt;br /&gt;
아직 2장을 읽는 중이라 몰랐는데 5장 전체가 제네릭에 관련된 내용이었다..   &lt;br /&gt;
먼저 제네릭 부분부터 읽어보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-이왕이면-제네릭-타입으로-만들라&quot;&gt;1. 이왕이면 제네릭 타입으로 만들라.&lt;/h3&gt;

&lt;p&gt;다음은 단순한 스택 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Stack {  
    private Object[] elements;    
        
    . . .  

}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스를 제네릭으로 바꾼다고 해도 클라이언트에는 아무런 해가 없다. &lt;br /&gt;
오히려 위 코드는 클라이언트가 스택에서 꺼낸 객체를 형변환해야 하는데, 이때 런타임 오류가 날 위험이 있다.&lt;/p&gt;

&lt;p&gt;일반 클래스를 제네릭 클래스로 만드는 첫 단계는 클래스 선언에 타입 매개변수를 추가하는 일이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Stack&amp;lt;E&amp;gt; {
    private E[] elements;
    private static final int DEFAULT_INITIAL_CAPACITY = 16;

    public stack() {
        elements = new E[DEFAULT_INITIAL_CAPACITY];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 상태에서 컴파일하면 다음과 같은 오류가 밟생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Stack.java:8: generic array creation 
    elements = new E[DEFAULT_INITIAL_CAPACITY];
                ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;E와 같은 실체화 불가 타입으로는 배열을 만들 수 없다.   &lt;br /&gt;
배열을 사용하는 코드를 제네릭으로 만들려 할 때 이 문제가 항상 발목을 잡을 것이다.&lt;/p&gt;

&lt;p&gt;해결책은 두 가지가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1) 제네릭 배열 생성을 금지하는 제약을 대놓고 우회하는 방법&lt;/strong&gt; &lt;br /&gt;
Object 배열을 생성한 다음 제네릭 배열로 형변환해보자. &lt;br /&gt;
컴파일러는 오류 대신 경고를 내보낼 것이다. (일반적으로) 타입 안전하지 않다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Stack.java8: warning: [unchecked] unchecked cast 
found: Object[], required: E[]  
elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];
              ^  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일러는 타입 안전한지 증명할 방법이 없지만 우리는 할 수 있다. &lt;br /&gt;
따라서 이 비검사 형변환이 프로그램의 타입 안전성을 해치지 않음을 우리 스스로 확인해야 한다. &lt;br /&gt;
배열 elements는 private 필드에 저장되고, 클라이언트로 반환되거나 다른 메서드에 전달되는 일은 전혀 없다. &lt;br /&gt;
push 메서드를 통해 배열에 저장되는 원소의 타입은 항상 E다. 따라서 이 비검사 형변환은 확실히 안전하다.&lt;/p&gt;

&lt;p&gt;비검사 형변환이 안전함을 직접 증명했다면 범위를 좁혀 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SuppressWarnings&lt;/code&gt; 어노테이션으로 해당 경고를 숨긴다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@SuppressWarnings(&quot;unckecked&quot;)
public Stack() {
    elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY];  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) elements 필드의 타입을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E[]&lt;/code&gt; 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object[]&lt;/code&gt;로 바꾸는 방법&lt;/strong&gt;      &lt;br /&gt;
이렇게 하면 첫 번째와는 다른 오류가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Stack.java:19: incompatible types 
found: Object, required: E
    E result = elements[--size];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;배열이 반환한 원소를 E로 형변환하면 오류 대신 경고가 뜬다.&lt;/p&gt;

&lt;p&gt;E는 실체화 불가 타입이므로 컴파일러는 런타임에 이뤄지는 형변환이 안전한지 증명할 방법이 없다. &lt;br /&gt;
이번에도 개발자가 직접 증명하고 경고를 숨길 수 있다.&lt;br /&gt;
pop 메서드 전체에서 경고를 숨기지 않고 비검사 형변환을 수행하는 할당문에서만 숨기는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public E pop() {  
    if(size == 0)   
        throw new EmptyStackException();
    
    @SuppressWarnings(&quot;unckecked&quot;) E result = (E) elements[--size];

    elements[size] = null; //  다 쓴 참조 해제  
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫 번째 방법은 가독성이 좋고 코드가 짧기 때문에 자주 사용되는 방법이지만   &lt;br /&gt;
(E가 Object가 아닌 한) 배열의 런타임 타입이 컴파일타임 타입과 달라 힙 오염(heap pollution)을 일으킨다. &lt;br /&gt;
힙 오염이 맘에 걸리는 개발자는 두 번째 방법을 사용하기도 한다. &lt;br /&gt;
그러나 두 번째 방법은 배열에서 원소를 읽을 때마다 어노테이션을 붙여줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정리&lt;/strong&gt;  &lt;br /&gt;
클라이언트에서 직접 형변환해야 하는 타입보다 제네릭 타입이 더 안전하고 쓰기 편하다.  &lt;br /&gt;
그러니 새로운 타입을 설계할 때는 형변환 없이도 사용할 수 있도록 하자. &lt;br /&gt;
그렇게 하려면 제네릭 타입으로 만들어야 할 경우가 많다. 기존 타입 중 제네릭이있어야 하는 게 있다면 제네릭 타입으로 변경하자. &lt;br /&gt;
기존 클라이언트에게 아무 영향을 주지 않으면서 새로운 사용자를 편하게 해줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-이왕이면-제네릭-메서드로-만들라&quot;&gt;2. 이왕이면 제네릭 메서드로 만들라.&lt;/h3&gt;

&lt;p&gt;클래스와 마찬가지로 메서드도 제네릭으로 만들 수 있다.      &lt;br /&gt;
매개변수화 타입을 받는 정적 유틸리티 메서드는 보통 제네릭이다.&lt;/p&gt;

&lt;p&gt;다음은 두 집합의 합집합을 반환하는 문제가 있는 메서드다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Set union(Set s1, Set s2) {
    Set result = new HashSet(s1);
    result.addAll(s2);
    return result;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일은 되지만 경고가 두 개 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HashSet(Collection&amp;lt;? extends E&amp;gt;) as a member of raw type HashSet 
    Set result = new HashSet(s1);
                 ^

addAll(Collection&amp;lt;? extends E&amp;gt;) as a member of raw type Set
    result.addAll(s2);
                 ^ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;경고를 없애려면 이 메서드를 타입 안전하게 만들어야 한다. &lt;br /&gt;
메서드 선언에서의 세 집합(입력 2개, 반환 1개)의 원소 타입을 타입 매개변수로 명시하고, &lt;br /&gt;
메서드 안에서도 이 타입 매개변수만 사용하게 수정하면 된다. &lt;br /&gt;
(타입 매개변수들을 선언하는) 타입 매개변수 목록은 메서드의 제한자와 반환 타입 사이에 온다.&lt;/p&gt;

&lt;p&gt;다음 코드에서 타입 매개변수 목록은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;E&amp;gt;&lt;/code&gt; 이고 반환 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&amp;lt;E&amp;gt;&lt;/code&gt; 이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; union(Set&amp;lt;E&amp;gt; s1, Set&amp;lt;E&amp;gt; s2) {
    Set&amp;lt;E&amp;gt; result = new HashSet&amp;lt;&amp;gt;(s1);
    result.addAll(s2);
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접 형변환하지 않아도 어떤 오류나 경고 없이 컴파일된다.&lt;/p&gt;

&lt;p&gt;불변 객체를 여러 타입으로 활용할 수 있게 만들어야 할 때가 있다. &lt;br /&gt;
제네릭은 런타임에 타입 정보가 소거되므로 하나의 객체를 어떤 타입으로든 매개변수화할 수 있다. &lt;br /&gt;
하지만 이렇게 하려면 요청한 타입 매개변수에 맞게 매번 그 객체의 타입을 바꿔주는 정적 팩터리를 만들어야 한다. &lt;br /&gt;
이 패턴은 싱글톤 팩터리라고 하며, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collections.reverseOrder&lt;/code&gt; 같은 함수 객체나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collections.emptySet&lt;/code&gt; 같은 컬렉션용으로 사용된다.&lt;/p&gt;

&lt;p&gt;다음은 제네릭 싱글톤 팩터리 패턴의 예제 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static UnaryOperator&amp;lt;Object&amp;gt; IDENTITY_FN = (t) -&amp;gt; t;

@SuppressWarnings(&quot;unckecked&quot;)
public static &amp;lt;T&amp;gt; UnaryOperator&amp;lt;Object&amp;gt; identityFunction() {
    return (UnaryOperator&amp;lt;T&amp;gt;) IDENTITY_FN;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDENTITY_FN&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnaryOperator&amp;lt;T&amp;gt;&lt;/code&gt;로 형변환하면 비검사 형변환 경고가 발생한다.    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;가 어떤 타입이든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnaryOperator&amp;lt;Object&amp;gt;&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnaryOperator&amp;lt;T&amp;gt;&lt;/code&gt;가 아니기 때문이다.   &lt;br /&gt;
하지만 항등함수한 입력 값을 수정 없이 그대로 반환하는 특별한 함수이므로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;가 어떤 타입이든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnaryOperator&amp;lt;T&amp;gt;&lt;/code&gt;를 사용해도 타입 안전하다.   &lt;br /&gt;
이 사실을 알고 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SuppressWarnings(&quot;unckecked&quot;)&lt;/code&gt; 어노테이션을 추가하면 오류나 경고 없이 컴파일 된다.&lt;/p&gt;

&lt;p&gt;자기 자신이 들어간 표현식을 사용하여 타입 매개변수의 허용 범위를 한정할 수 있다. &lt;br /&gt;
재귀적 타입 한정(recursive type bound)이라는 개념이다. &lt;br /&gt;
재귀적 타입 한정은 주로 타입의 자연적 순서를 정하는 Comparable 인터페이스와 함께 쓰인다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface Comparable&amp;lt;T&amp;gt; {  
    int compareTo(T o);  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 타입 매개변수 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Comparable&amp;lt;T&amp;gt;&lt;/code&gt;를 구현한 타입이 비교할 수 있는 원소의 타입을 정의한다. &lt;br /&gt;
실제로 거의 모든 타입은 자신과 같은 타입의 원소와만 비교할 수 있다.&lt;/p&gt;

&lt;p&gt;다음은 이 제약을 코드로 표현한 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static &amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; E max(Collection&amp;lt;E&amp;gt; c);  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;타입 한정인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt;&lt;/code&gt;는 “모든 타입 E는 자신과 비교할 수 있다.”라고 읽을 수 있다. &lt;br /&gt;
상호 비교 가능하다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-한정적-와일드카드를-사용해-api-유연성을-높여라&quot;&gt;3. 한정적 와일드카드를 사용해 API 유연성을 높여라.&lt;/h3&gt;

&lt;p&gt;매개변수화 타입은 불공변(invariant)이다.  &lt;br /&gt;
즉 서로 다른 타입 Type1과 Type2가 있을 떄 List&lt;Type1&gt;은 List&lt;Type2&gt;의 하위 타입도 상위 타입도 아니다.     
예를들어 `List&lt;String&gt;`은 `List&lt;object&gt;`의 하위 타입이 아니라는 뜻이다.  
`List&lt;object&gt;`에는 어떤 객체든 넣을 수 있지만 `List&lt;String&gt;`에는 문자열만 넣을 수 있다.   
즉 `List&lt;String&gt;`은 `List&lt;object&gt;`가 하는 일을 제대로 수행하지 못하니 하위 타입이 될 수 없다. (리스코프 치환 원칙에 어긋난다.)&lt;/object&gt;&lt;/String&gt;&lt;/String&gt;&lt;/object&gt;&lt;/object&gt;&lt;/String&gt;&lt;/Type2&gt;&lt;/Type1&gt;&lt;/p&gt;

&lt;p&gt;Stack의 public API를 추려보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Stack&amp;lt;E&amp;gt; {
    public Stack();
    public void push(E e);
    public E pop();
    public boolean isEmpty();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기에 일련의 원소를 스택에 넣는 메서드를 추가해야 한다고 해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;와일드카드 타입을 사용하지 않는 pushAll 메서드 (결함있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void pushAll(Iterable&amp;lt;E&amp;gt; src) {
    for(E e : src)
        push(e);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 메서드는 깨끗하게 컴파일되지만 완벽하진 않다. Iterable src의 원소 타입이 스택의 원소 타입과 일치하면 잘 작동한다. &lt;br /&gt;
하지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stack&amp;lt;Number&amp;gt;&lt;/code&gt;로 선언한 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushAll(intVal)&lt;/code&gt;을 호출하면 다음과 같은 오류 메시지가 뜬다. (intVal은 Integer타입이다.)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StackTest.java7: error: incompatible types: Iterable&amp;lt;Integer&amp;gt;
cannot be converted to Iterable&amp;lt;Number&amp;gt;
    numberStack.pushAll(integers);
                        ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Integer는 Number의 하위 타입이므로 잘 작동할 것 같지만 매개변수화 타입이 불공변이기 때문에 오류 메시지가 뜬다.&lt;/p&gt;

&lt;p&gt;이런 상황은 한정적 와일드카드 타입이라는 매개변수화 타입으로 해결할 수 있다.  &lt;br /&gt;
pushAll의 입력 매개변수 타입은 ‘E의 Iterable’이 아니라 ‘E의 하위 타입의 Iterable’이어야 하며,     &lt;br /&gt;
와일드카드 타입 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&amp;lt;? extends E&amp;gt;&lt;/code&gt;가 위와 같은 뜻이 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void pushAll(Iterable&amp;lt;? extends E&amp;gt; src) {  
    . . .  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에는 popAll 메서드를 구현하면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stack&amp;lt;Number&amp;gt;&lt;/code&gt;의 원소를 Object용 컬렉션은로 옮긴다고 가정해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void popAll(Collection&amp;lt;E&amp;gt; dst) {
     . . .
}

Stack&amp;lt;Number&amp;gt; numberStack = new Stack&amp;lt;&amp;gt;();
Collection&amp;lt;Object&amp;gt; objects - ...;
numberStack.popAll(objects);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드를 컴파일하면 “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;Object&amp;gt;&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;Number&amp;gt;&lt;/code&gt;의 하위 타입이 아니다.” 라는 &lt;br /&gt;
pushAll을 사용했을 때와 비슷한 오류가 발생한다. &lt;br /&gt;
이번에는 pushAll의 입력 매개변수의 타입이 ‘E의 Collection’이 아니라 ‘E의 상위 타입의 Collection’이어야 한다. &lt;br /&gt;
(모든 타입은 자기 자신의 상위 타입이다.) 
와일드카드 타입을 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;? super E&amp;gt;&lt;/code&gt;가 정확히 이런 의미이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void popAll(Collection&amp;lt;? super E&amp;gt; dst) {
     . . .
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Stack과 클라이언트 코드 모두 말끔히 컴파일된다. &lt;br /&gt;
유연성을 극대화하려면 원소의 생상자나 소비자용 입력 매개변수에 와일드카드 타입을 사용하자.&lt;/p&gt;

&lt;p&gt;한편, 입력 매개변수가 생산자와 소비자 역할을 동시에 한다면 와일드카드 타입을 써도 좋을 게 없다.   &lt;br /&gt;
타입을 정확히 지정해야 하는 상황으로 이때는 와일드카드 타입을 쓰지 말아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-20/response&generic/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-20/response&generic/</guid>
      </item>
    
      <item>
        <title>순열 permutation</title>
        <description>&lt;h3 id=&quot;소수-찾기&quot;&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42839&quot;&gt;소수 찾기&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;한자리 숫자가 적힌 종이 조각이 흩어져있습니다.     
흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.    
각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때,    
종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.     

ex. INPUT : &quot;17&quot; RETURN : 3      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에라토스테네스의 체를 이용해서 소수인지 아닌지 검사하는 알고리즘은 예전에 풀어본 적이 있어        &lt;br /&gt;
쉽게 떠올랐지만 문자열을 조합해서 숫자를 만드는 것은 쉽지 않았다.&lt;/p&gt;

&lt;p&gt;먼저 순열 알고리즘을 공부해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;순열&quot;&gt;순열&lt;/h3&gt;

&lt;p&gt;순열이란 n개의 값 중에서 r개의 숫자를 모든 순서대로 뽑는 경우를 말한다. &lt;br /&gt;
예를들어 [1, 2, 3] 이라는 배열에서 길이가 2인 숫자를 만든다고 가정하면&lt;/p&gt;

&lt;p&gt;[1, 2]  &lt;br /&gt;
[1, 3]    &lt;br /&gt;
[2, 1]  &lt;br /&gt;
[2, 3]   &lt;br /&gt;
[3, 1]  &lt;br /&gt;
[3, 2]&lt;/p&gt;

&lt;p&gt;총 6개의 숫자가 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;swap을-이용한-순열&quot;&gt;swap을 이용한 순열&lt;/h3&gt;

&lt;p&gt;배열의 첫번째 값부터 하나씩 바꾸며 모든 값을 한번씩 swap 한다. &lt;br /&gt;
depth를 기준 인덱스로 depth 보다 작으면 고정, 크면 다시 swap 한다.&lt;/p&gt;

&lt;p&gt;순서는 보장되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void permutation(int[] arr, int depth, int n, int r) {  
    if (depth == r) {  
        print(arr, r);  
        return;  
    }  
 
    for (int i=depth; i&amp;lt;n; i++) {  
        swap(arr, depth, i);  
        permutation(arr, depth + 1, n, r);   
        swap(arr, depth, i);    
    }  
}   

static void swap(int[] arr, int depth, int i) {  
    int temp = arr[depth];  
    arr[depth] = arr[i];  
    arr[i] = temp;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;visited-배열을-이용한-순열&quot;&gt;visited 배열을 이용한 순열&lt;/h3&gt;

&lt;p&gt;swap을 이용한 구현과는 다르게 사전식으로 순열을 구할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arr : r개를 뽑기 위한 n개의 값&lt;/li&gt;
  &lt;li&gt;output : 뽑힌 r개의 값&lt;/li&gt;
  &lt;li&gt;visited : 중복해서 뽑지 않기 위해 체크하는 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DFS를 돌면서 모든 인덱스를 방문하여 output에 값을 넣는다. &lt;br /&gt;
이미 들어간 값은 visited를 true로 바꿔서 중복을 방지한다. &lt;br /&gt;
depth값은 output에 들어간 숫자의 길이이다.&lt;br /&gt;
depth의 값이 r만큼 되면 output에 들어있는 값을 출력하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void perm(int[] arr, int[] output, boolean[] visited, int depth, int n, int r) {    
    if (depth == r) {    
        print(output, r);    
        return;    
    }    
 
    for (int i=0; i&amp;lt;n; i++) {    
        if (visited[i] != true) {    
            visited[i] = true;    
            output[depth] = arr[i];    
            perm(arr, output, visited, depth + 1, n, r);           
            visited[i] = false;;    
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;에라토스테네스의-체&quot;&gt;에라토스테네스의 체&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static boolean isPrime(int num){  
		// 에라토스테네스의 체를 이용  
		for(int i = 2; i &amp;lt;= Math.sqrt(num); i++){  
			for(int j = 2; j * i &amp;lt;= num ; j++){  
				NUMBER[j * i] = false;  
			}  
		}  
		return NUMBER[num];  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;참고&quot;&gt;참고&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://bcp0109.tistory.com/14&quot;&gt;https://bcp0109.tistory.com/14&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 13 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-13/permutation/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-13/permutation/</guid>
      </item>
    
      <item>
        <title>탐색 알고리즘</title>
        <description>&lt;h2 id=&quot;2차원-지도-탐색&quot;&gt;2차원 지도 탐색&lt;/h2&gt;

&lt;h4 id=&quot;백준-2178-미로-탐색-문제&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2178&quot;&gt;백준 2178 미로 탐색 문제&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;미로의 각 칸이 탐색 대상 노드이기 때문에 BFS로 풀어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2178_v1.java&quot;&gt;구현1&lt;/a&gt;          &lt;br /&gt;
Location 객체를 HashSet에 보관하려면 hashCode, equals 메소드를 재정의해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2178_v2.java&quot;&gt;구현2&lt;/a&gt;         &lt;br /&gt;
Node 객체를 만들어 Queue에 저장하며 조건에 맞는지 검사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2178_v3.java&quot;&gt;구현3&lt;/a&gt;             &lt;br /&gt;
모든 칸을 Node로 생성하여 Queue에 저장하지 않고 탐색해야 하는 칸만 Node 객체로 생성&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;최장거리를-구현해보자&quot;&gt;최장거리를 구현해보자.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2178_v4.java&quot;&gt;구현4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;촤장거리 탐색도 BFS로 구현해야 한다.&lt;/p&gt;

&lt;p&gt;목적지에 도착하자마자 distance를 리턴하는게 아니다. 도착하자마자 리턴하면 최단 거리가 된다.         &lt;br /&gt;
마지막 distance 값이 최대거리이기 때문에 queue가 empty가 될 때까지 탐색을 계속한 후    &lt;br /&gt;
max 값을 리턴해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;반복문으로-dfs-구현&quot;&gt;반복문으로 DFS 구현&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/Baekjoon/src/training/B2178_v5.java&quot;&gt;구현5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;반복문으로 깊이 우선 탐색을 구현하라.&lt;br /&gt;
last in, first out =&amp;gt; BFS&lt;br /&gt;
last in, last out =&amp;gt; DFS&lt;br /&gt;
깊이 우선 탐색의 리턴값 distance는 최단거리가 아니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;비숫한-문제--프로그래머스-카카오프렌즈-컬러링북&quot;&gt;비숫한 문제 : &lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/1829&quot;&gt;프로그래머스 카카오프렌즈 컬러링북&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyerin6/Algorithm/blob/master/programmers/src/programmers/lv2/%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%94%84%EB%A0%8C%EC%A6%88_%EC%BB%AC%EB%9F%AC%EB%A7%81%EB%B6%81.java&quot;&gt;BFS 구현 코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/98902271-b7daef00-24f8-11eb-9ad4-42512256f43c.png&quot; alt=&quot;스크린샷 2020-11-11 오후 2 01 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력 예제를 직접 그려보면 영역은 이렇게 나타난다.&lt;/p&gt;

&lt;p&gt;백준 문제를 풀고 이 문제를 풀어보니 쉽게 이해할 수 있었다.   &lt;br /&gt;
목적지 없이 전부 탐색해야 한다는 점과 색이 같으면 Node를 생성해 Queue에 넣어준다는 점만 다르고 풀이 방식은 똑같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀어볼-문제-목록&quot;&gt;풀어볼 문제 목록&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/7562&quot;&gt;https://www.acmicpc.net/problem/7562&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/6593&quot;&gt;https://www.acmicpc.net/problem/6593&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2589&quot;&gt;https://www.acmicpc.net/problem/2589&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/7576&quot;&gt;https://www.acmicpc.net/problem/7576&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/7569&quot;&gt;https://www.acmicpc.net/problem/7569&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/3055&quot;&gt;https://www.acmicpc.net/problem/3055&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4179&quot;&gt;https://www.acmicpc.net/problem/4179&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2206&quot;&gt;https://www.acmicpc.net/problem/2206&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/10026&quot;&gt;https://www.acmicpc.net/problem/10026&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2468&quot;&gt;https://www.acmicpc.net/problem/2468&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2667&quot;&gt;https://www.acmicpc.net/problem/2667&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2583&quot;&gt;https://www.acmicpc.net/problem/2583&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2146&quot;&gt;https://www.acmicpc.net/problem/2146&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2573&quot;&gt;https://www.acmicpc.net/problem/2573&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-11-12/search/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-11-12/search/</guid>
      </item>
    
      <item>
        <title>Jenkins 테스트 자동화</title>
        <description>&lt;p&gt;로그인 기능 개발을 시작하면서 젠킨스를 이용한 자동 배포와 테스트 자동화를 해보기로 했고 테스트 자동화(ci)를 담당하게 되었다.&lt;/p&gt;

&lt;p&gt;우선 작업(job)을 새로 만들고 git repogitory와 연동했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-jenkins--git-연동&quot;&gt;1. Jenkins &amp;amp; Git 연동&lt;/h2&gt;

&lt;p&gt;jenkins의 첫 화면에서 사람 &amp;gt; user 선택 &amp;gt; 설정 &amp;gt; token 생성     &lt;br /&gt;
위와 같은 경로로 들어가 jenkins에서 토큰을 만들어주고&lt;/p&gt;

&lt;p&gt;git webhook에서 Payload URL을 다음과 같이 작성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://&amp;lt;jenkins_user_name&amp;gt;:&amp;lt;jenkins_token&amp;gt;@&amp;lt;jenkins_ip&amp;gt;/job/&amp;lt;jenkins_job&amp;gt;/buildWithParameters?token=&amp;lt;Authentication_Token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jenkins_user_name은 젠킨스 유저 ID,     &lt;br /&gt;
jenkins_token은 젠킨스 유저 설정에서 생성한 token,     &lt;br /&gt;
Authentication_Token은 젠킨스 job에서 빌드 유발을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;빌드를 원격으로 유발&lt;/code&gt; 로 선택했을 때      &lt;br /&gt;
내가	&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication Token&lt;/code&gt; 에 적은 문자열이다.&lt;/p&gt;

&lt;p&gt;다음 화면에서 원하는 문자열을 입력하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/97872903-24682800-1d5a-11eb-9e3d-b45ec542b776.png&quot; alt=&quot;스크린샷 2020-11-02 오후 10 22 55&quot; /&gt;&lt;/p&gt;

&lt;p&gt;git webhook에서 Pull request를 선택하고 저장하면      &lt;br /&gt;
pr에 이벤트가 발생할 때 젠킨스에서 스크립트 실행이 가능해진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-젠킨스-설정&quot;&gt;2. 젠킨스 설정&lt;/h2&gt;

&lt;p&gt;젠킨스에서 dangdang_ci라는 job을 만들고 git 연동까지 완료했다.     &lt;br /&gt;
플러그인을 사용하지 않고 스크립트를 직접 작성하며 공부해보기로 했기 때문에 &lt;br /&gt;
젠킨스에 특별한 설정은 필요없고 매개변수 설정이랑 스크립트 작성, 빌드 전 workspace(git clone 받은 것) 삭제 설정만 하면된다.&lt;/p&gt;

&lt;p&gt;다만, pr 테스트 결과를 git에 다시 보내려면 git에서 token을 발급 받아야 한다. (한번만 보여주니까 저장해둬야함)  &lt;br /&gt;
git 계정 Settings &amp;gt; Developer settings &amp;gt; Personal access tokens 에서 토큰을 생성해서    &lt;br /&gt;
헤더에 다음과 같은 형식으로 보내주면 된다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization: token &amp;lt;TOKEN&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(url에 query string(access_token)으로 보내도 되는데 git에서 권장하지 않기 때문에 언제든지 작동하지 않을 수 있다는 메일이 날아온다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-script&quot;&gt;3. Script&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash -li

#git pr 정보를 payload 매개변수로 받아 payload.txt 파일로 저장합니다.    
echo $payload &amp;gt; payload.txt 

#pr 의 상태를 action 변수에 저장합니다. (ex. opened, closed)
action='python -c 'import json, os; d = json.loads(open(&quot;payload.txt&quot;).read()); print d[&quot;action&quot;]'' 

#pr의 상태가 opened이나 reopened, edited이 아니면 테스트를 진행하지 않습니다.   
if [ $action != &quot;opened&quot; ] || [ $action != &quot;reopened&quot; ] || [ $action != &quot;edited&quot; ]; then exit ; fi

#ci 결과를 다시 git에 보내주기 위해 payload로 받은 정보를 파싱합니다. 
pr_branch='python -c 'import json, os; d = json.loads(open(&quot;payload.txt&quot;).read()); print d[&quot;pull_request&quot;][&quot;head&quot;][&quot;ref&quot;]'' 

#payload로 받은 statuses_url을 사용하여 pr 상태를 변경할 수 있다.   
curl_url='python -c 'import json, os; d = json.loads(open(&quot;payload.txt&quot;).read()); print d[&quot;pull_request&quot;][&quot;statuses_url&quot;]'' 

#pr branch의 코드만 가져옵니다. 
git clone -b $pr_branch --single-branch https://github.com/depromeet/8th-final-team5-backend.git

cd 8th-final-team5-backend 

#테스트 진행, 결과가 실패인지 result 변수에 저장합니다. (테스트 실패하면 result에 0이 저장됨)
result=`echo \`./mvnw test\` | grep -q &quot;BUILD FAILURE&quot;; echo $?`

#$BUILD_NUMBER 는 jenkins에서 제공하는 변수다. git에서 detail 링크를 누르면 스크립트 결과를 바로 볼 수 있다.     
#테스트 결과 성공하면 state를 success 실패하면 failure로 git에 전달   
if [ $result == &quot;1&quot; ]; then \
	curl &quot;${curl_url}&quot; \
  		-H &quot;Content-Type: application/json&quot; \
  		-H &quot;Authorization: token &amp;lt;TOKEN&amp;gt;&quot; \
  		-X POST \
  		-d &quot;{\&quot;state\&quot;: \&quot;success\&quot;,\&quot;context\&quot;: \&quot;continuous-integration/jenkins\&quot;, \&quot;description\&quot;: \&quot;Jenkins\&quot;, \&quot;target_url\&quot;: \&quot;http://20.194.0.141/job/dangdang_ci/$BUILD_NUMBER/console\&quot;}&quot;; \
else \ 
	curl &quot;${curl_url}&quot; \ 
  		-H &quot;Content-Type: application/json&quot; \
  		-H &quot;Authorization: token &amp;lt;TOKEN&amp;gt;&quot; \
  		-X POST \
  		-d &quot;{\&quot;state\&quot;: \&quot;failure\&quot;,\&quot;context\&quot;: \&quot;continuous-integration/jenkins\&quot;, \&quot;description\&quot;: \&quot;Jenkins\&quot;, \&quot;target_url\&quot;: \&quot;http://20.194.0.141/job/dangdang_ci/$BUILD_NUMBER/console\&quot;}&quot;; \
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v2/GitHub-GitHub-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85&quot;&gt;https://git-scm.com/book/ko/v2/GitHub-GitHub-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://applitools.com/blog/how-to-update-jenkins-build-status-in-github-pull-requests-step-by-step-tutorial/&quot;&gt;https://applitools.com/blog/how-to-update-jenkins-build-status-in-github-pull-requests-step-by-step-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 21 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-21/jenkins-ci/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-21/jenkins-ci/</guid>
      </item>
    
      <item>
        <title>WebClient, Nested Class</title>
        <description>&lt;p&gt;카카오 로그인 기능을 담당하게 되어 약 일주일 동안 기능 구현과 함께 코드리뷰를 받았다.&lt;/p&gt;

&lt;h3 id=&quot;webclient에서-요청을-날릴-때-exchange-vs-retrieve&quot;&gt;WebClient에서 요청을 날릴 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exchange&lt;/code&gt; VS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieve&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieve&lt;/code&gt;는 바로 response body를 처리 할 수 있고 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exchange&lt;/code&gt;는 상태값, 헤더 등 client response 자체를 전달해줘서 세밀하게 제어할 수 있는 차이가 있다.&lt;/p&gt;

&lt;p&gt;그런데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exchange&lt;/code&gt;는 성공, exception, 예상치 못한 응담이라도 response를 처리하지 않으면 메모리 누수가 발생한다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieve&lt;/code&gt;와 달리 4XX, 5XX와 같은 응답에 대한 자동 처리가 없어 상태 코드를 확인해야 하는데 그 과정에서 개발자가 실수하게 되면 메모리릭이 발생하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieve&lt;/code&gt; 사용을 권장한다고 한다.&lt;/p&gt;

&lt;p&gt;이번 프로젝트에서 kakao의 일부 api만 사용할 것이고 거의 대부분 문제가 되는 응답은 상태가 4XX이라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onStatus()&lt;/code&gt; 에서 에러를 처리가 가능해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retrieve&lt;/code&gt;를 사용했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;       &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nested-class&quot;&gt;Nested Class&lt;/h3&gt;

&lt;p&gt;이펙티브 자바, 토비의 스프링 등을 읽으면서 inner class는 static으로 구현하라는 것을 많이 봤다.&lt;/p&gt;

&lt;p&gt;inner class로 인해 메모리릭이 발생하는 경우는 (비동기) outer class와 inner class의 스레드가 돌아가는중에  &lt;br /&gt;
outer class의 작업이 끝나면 inner class의 outer class 객체 참조로 인해 메모리가 해제되지 않아 생긴다~&lt;/p&gt;

&lt;p&gt;static class는 외부 클래스의 객체 생성 없이 내부 클래스의 객체를 생성할 수 있고&lt;br /&gt;
암시적인 outer class 객체 참조를 하지 않는다~&lt;/p&gt;

&lt;p&gt;위와 같은 이유로 static으로 구현하라는 것이었는데       &lt;br /&gt;
단지 response로만 사용하는 경우에는 고려하지 않아도 될 문제였다.     &lt;br /&gt;
그래도 inner class에 대해 다시 한 번 공부할 수 있는 계기가 되었다.&lt;/p&gt;

&lt;p&gt;이참에 다시 정리해보자.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nested Class      &lt;br /&gt;
클래스 안에 클래스라는 의미로 이를 사용하는 이유는 &lt;br /&gt;
외부 클래스의 멤버들을 쉽게 접근할 수 있고 외부에는 불필요한 클래스 파일을 감춰서(캡슐화) 코드의 복잡성을 줄일 수 있다는 점이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;종류&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 클래스(instance class)    &lt;br /&gt;
외부 클래스의 멤버변수 선언 위치에 선언   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스태틱 클래스(static class)  &lt;br /&gt;
외부 클래스의 멤버변수 선언 위치에 선언 &lt;br /&gt;            &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;외부클래스명.내부클래스명 객체명 = new 외부클래스명.내부클래스명();&lt;/code&gt;  &lt;br /&gt;
위와 같이 외부 클래스 객체 없이 내부 클래스 객체 생성이 가능하다.          &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지역 클래스(local class)   &lt;br /&gt;
외부 클래스의 메서드나 초기화 블럭에서 선언     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;익명 클래스(anonymous inner class)      &lt;br /&gt;
클래스의 선언과 객체 생성을 동시에 하는 이름이 없는 클래스&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 17 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-17/review2/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-17/review2/</guid>
      </item>
    
      <item>
        <title>Spring webflux</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;회의 결과 카카오 로그인과 네이버 로그인을 사용하여 회원 인증을 하기로 했다.   &lt;br /&gt;
나의 담당은 카카오 로그인이고 아직 프론트 개발자분들과 회의를 하기 전이라 자세한건 변경될 수 있지만 &lt;br /&gt;
access token으로 사용자 정보를 가져오는 &lt;a href=&quot;https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api#req-user-info&quot;&gt;kakao api&lt;/a&gt;를 사용하는걸 미리 구현해봤다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-webflux&quot;&gt;Spring webflux&lt;/h2&gt;

&lt;p&gt;Spring MVC는 기본적으로 블로킹이고 동기방식을 사용한다. 비동기 처리 기능이 스프링 프레임워크3에서 추가되었지만   &lt;br /&gt;
서블릿은 응답을 기다리는 동안 pool의 스레드들은 여전히 지연시킬 수 있기 때문에 전체 stack이 reactive 해야 하는 요구를 충족시킬 수 없다.       &lt;br /&gt;
이러한 문제를 해결할 수 있도록 스프링 프레임워크5에 도입된 대안적인 모듈이 webflux이다. &lt;br /&gt;
웹 요청을 reactive하게 다루는데에 초점이 맞춰져있다.&lt;/p&gt;

&lt;p&gt;기존의 서블릿 기반의 spring boot는 tomcat을 기반으로 동작한다. &lt;br /&gt;
반면 spring boot webflux는 여러가지 고를 수 있는데 디폴트로 netty를 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat - 하나의 요청에 하나의 스레드가 동작&lt;/li&gt;
  &lt;li&gt;Netty - 1개의 이벤트를 받는 스레드와 다수의 worker 스레드로 동작&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 내용은 webflux에 대해 알아보면서 메모한 것이고 다음 포스팅들을 참고했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.linecorp.com/ko/blog/reactive-streams-with-armeria-1/&quot;&gt;라인 테크 블로그 - Reactive Streams와 놀자!&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web-reactive.html#webflux&quot;&gt;spring.io - webflux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/96071771-c4f6c500-0edd-11eb-8cf7-e24cee35b390.jpeg&quot; alt=&quot;KakaoTalk_Photo_2020-10-15-11-58-28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;kakao api 중 사용자 정보 요청 (/v2/user/me)을 사용했는데 response가 조금 복잡해보인다.        &lt;br /&gt;
우선 error response는 static inner class로 작성했고, kakao_account는 따로 클래스를 만들어주고 inner class로 Profile을 정의했다.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-14/login/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-14/login/</guid>
      </item>
    
      <item>
        <title>Maven Wrapper, 상수화, 테스트</title>
        <description>&lt;p&gt;디프만 파이널 프로젝트를 시작하면서 회원가입 기능을 구현해보며 코드리뷰를 했다.    &lt;br /&gt;
SNS 로그인 기능을 사용하기로해서 처음 구현한 코드는 프로젝트에서 사용하지 않지만 &lt;br /&gt;
코드리뷰를 다시 보면서 공부하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;maven-wrapper의-용도&quot;&gt;Maven Wrapper의 용도&lt;/h2&gt;

&lt;p&gt;Apache Maven은 자바 프로젝트 의존성 관리 도구이다.   &lt;br /&gt;
이를 좀 더 쉽게 최신 버전을 유지하기 위해 Maven Wrapper가 나왔다.   &lt;br /&gt;
Maven Wrapper(mvnw)가 설정된 프로젝트는 maven 설치 없이도 빌드가 가능하다.   &lt;br /&gt;
즉 Apache Maven을 프로젝트에서 요구하는 버전으로 유지하기 위해 사용하는 도구이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;실행&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 Maven은 다음 명령어로 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mvnw가 설정된 프로젝트는 다음 명령어로 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./mvnw clean package   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;항상-같은-값을-리턴하는-경우&quot;&gt;항상 같은 값을 리턴하는 경우&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Controller에서 위 코드를 반복하게 되었고, 상수화하면 불필요한 객체 생성을 줄일 수 있다는걸 알게 되었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BAD_REQUEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;단위테스트--통합테스트&quot;&gt;단위테스트 &amp;amp; 통합테스트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;단위 테스트 : 클래스를 하나씩 따로 테스트하는 것&lt;/li&gt;
  &lt;li&gt;통합 테스트 : 클래스들의 객체를 서로 연결하여 같이 테스트하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Junit 테스트에 대한 것은 이미 블로그에 정리해둔 것이 있다.   &lt;br /&gt;
&lt;a href=&quot;https://hyerin6.github.io/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/&quot;&gt;Junit Test 블로그 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-10-14/code-review/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-10-14/code-review/</guid>
      </item>
    
      <item>
        <title>정규화</title>
        <description>&lt;h3 id=&quot;정규화란&quot;&gt;정규화란?&lt;/h3&gt;

&lt;p&gt;테이블을 올바른 형태로 만들고 분리하는 데이터베이스의 설계를 재구성하는 테크닉이다.&lt;/p&gt;

&lt;h3 id=&quot;정규화가-왜-필요할까&quot;&gt;정규화가 왜 필요할까?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;불필요한 데이터(redundancy)를 제거 : 중복 데이터 제거(무결성)&lt;/li&gt;
  &lt;li&gt;데이터 저장을 논리적으로 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결과적으로 데이터베이스 크기가 줄어들고 찾아야 할 데이터가 적어져 쿼리가 빨라진다.&lt;/p&gt;

&lt;h3 id=&quot;정규화되지-않은-구조의-테이블&quot;&gt;정규화되지 않은 구조의 테이블&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Update&lt;br /&gt;
여러 줄의 데이터를 갱신해야 하는데 이로인해 데이터의 불일치(inconsistency)가 발생할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Insert &lt;br /&gt;
특정 컬럼에 NULL이 포함될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delete &lt;br /&gt;
데이터를 삭제하려고 했지만 테이블이 삭제될 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정규화가 제대로 되지 않은 테이블의 경우 갱신/삽입/삭제 시 다양한 문제가 발생할 수 있다.  &lt;br /&gt;
이를 테이블의 구성을 논리적으로 변경하여 해결하고자 하는 것이 정규화이다.&lt;/p&gt;

&lt;p&gt;정규화의 법칙(Normalization Rule)은 1차정규화, 2차정규화, 3차정규화, BCNF, 4차정규화, 5차정규화로 나눌 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;원자값-더-이상-쪼갤-수-없는-조각-정보&quot;&gt;원자값: 더 이상 쪼갤 수 없는 조각 정보&lt;/h3&gt;
&lt;p&gt;속성값은 원자값을 가져야 한다.&lt;/p&gt;

&lt;p&gt;예를 들어 주소는 [ 도 / 시 / 번지 / 아파트명 ]으로 나눠 저장하면 원자값일까?   &lt;br /&gt;
배달 업체인 경우 주소를 [도 시 번지 아파트명] 한 번에 저장하는 것이 원자값이고     &lt;br /&gt;
부동산 업체인 경우 [ 도 / 시 / 번지 / 아파트명 ] 따로 나눠 저장하는 것이 원자값이다.&lt;/p&gt;

&lt;p&gt;각각의 목적에 따라 원자값이 달라질 수 있다.&lt;/p&gt;

&lt;p&gt;원자적 데이터를 사용하면 쿼리 작성이 쉽고 수행 시간이 빨라 쿼리를 효율적으로 수행할 수 있고   &lt;br /&gt;
저장 데이터가 대용량인 경우 더욱 효율적이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원자적 데이터로 구성된 열은 그 열에 같은 타입의 데이터를 여러 개 가질 수 없다.&lt;/li&gt;
  &lt;li&gt;원자적 데이터로 구성된 테이블은 같은 타입의 데이터를 여러 열에 가질 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제1-정규형-1nf&quot;&gt;제1 정규형 (1NF)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;각 행의 데이터들은 원자적 값을 가져야 한다.&lt;/li&gt;
  &lt;li&gt;각 행은 기본 키를 가지고 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제2-정규형-2nf&quot;&gt;제2 정규형 (2NF)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;테이블의 모든 컬럼이 완전 함수적 종속을 만족해야 한다.&lt;/li&gt;
  &lt;li&gt;행으로 중복되는 부분을 찾아내(부분 함수 종속성을 찾아내) 테이블 분할헤야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제3-정규형-3nf&quot;&gt;제3 정규형 (3NF)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본 키 이외의 다른 컬럼이 그외 다른 컬럼을 결정할 수 없어야 한다.&lt;/li&gt;
  &lt;li&gt;기본 키 외에 중복되는 부분을 찾아내 분할해야 한다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 14 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-09-14/%EC%A0%95%EA%B7%9C%ED%99%94/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-09-14/%EC%A0%95%EA%B7%9C%ED%99%94/</guid>
      </item>
    
      <item>
        <title>git 브랜치 병합 전략 : rebase</title>
        <description>&lt;h2 id=&quot;git-rebase&quot;&gt;Git Rebase&lt;/h2&gt;

&lt;p&gt;두개의 브랜치에서 작업할 때 하나의 브랜치를 다른 브랜치로 합치기 위해서 &lt;br /&gt;
git에서 두 가지 방법을 주로 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;merge&lt;/li&gt;
  &lt;li&gt;rebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;merge만 사용했었는데 이번 프로젝트에서 rebase에 대해 알아보고 사용해보기로 했다!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rebase&quot;&gt;Rebase&lt;/h2&gt;

&lt;p&gt;브랜치의 공통 조상이 되는 base를 다른 브랜치의 커밋 지점으로 바꾸는 것이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;기본 전략은 다음과 같다.    &lt;br /&gt;
먼저 rebase하려는 브랜치 커밋들의 변경사항을 patch라는 것으로 만든 다음에    &lt;br /&gt;
어딘가에 저장해 두고 이를 master 브랜치에 하나씩 적용하여 새로운 커밋을 만든다.&lt;/p&gt;

&lt;p&gt;feature를 master 브랜치로 rebase하는 명령어를 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feature                      
git rebase master                   
       
git merge feature             
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;feature 브랜치로 checkout&lt;/li&gt;
  &lt;li&gt;master 브랜치로 rebase&lt;/li&gt;
  &lt;li&gt;feature 브랜치를 master로 fast-forward merge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://velog.io/@godori/Git-Rebase&quot;&gt;https://velog.io/@godori/Git-Rebase&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-08-09/git-rebase/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-08-09/git-rebase/</guid>
      </item>
    
      <item>
        <title>디프만 8기 4조 워밍업 프로젝트 : 꿀단지</title>
        <description>&lt;p&gt;1차 회의 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/89309597-8f985480-d6ae-11ea-8698-75623eeeb20a.png&quot; alt=&quot;스크린샷 2020-08-04 오후 11 59 23&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-07-29/modeling/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-07-29/modeling/</guid>
      </item>
    
      <item>
        <title>Lotto Game</title>
        <description>&lt;p&gt;기본 템플릿: &lt;a href=&quot;https://github.com/hyerin6/java-lotto/tree/master&quot;&gt;https://github.com/hyerin6/java-lotto/tree/master&lt;/a&gt;  &lt;br /&gt;
내가 구현중인 코드: &lt;a href=&quot;https://github.com/hyerin6/java-lotto&quot;&gt;https://github.com/hyerin6/java-lotto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;로또-게임을-만들어보자&quot;&gt;로또 게임을 만들어보자&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;로또 구입 금액을 입력하면 구입 금액에 해당하는 로또를 발급&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수익률을 계산해 출력&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자바 코드 컨벤션 참고&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;else 예약어 사용하지 않기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public/protected/private/package 접근 제어자 적절하게 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;함수(메서드) 길이 10라인 넘기지 않기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;indent(들여쓰기) depth 2 넘지 않기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-일급-컬렉션&quot;&gt;1. 일급 컬렉션&lt;/h3&gt;

&lt;p&gt;Collection을 Wrapping하면서 Wrapping한 Collection 외 다른 멤버변수가 없는 상태를 일급 컬렉션이라 한다.&lt;/p&gt;

&lt;p&gt;Wrapping 함으로써 다음과 같은 이점을 갖는다.     &lt;br /&gt;
(1) 비즈니스에 종속적인 자료구조            &lt;br /&gt;
(2) Collection의 불변성을 보장            &lt;br /&gt;
(3) 상태와 행위를 한 곳에서 관리            &lt;br /&gt;
(4) 이름이 있는 컬렉션&lt;/p&gt;

&lt;p&gt;자세한 설명은 아래 두 글을 참고&lt;br /&gt;
&lt;a href=&quot;https://jojoldu.tistory.com/412&quot;&gt;https://jojoldu.tistory.com/412&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://woowacourse.github.io/javable/2020-05-08/First-Class-Collection&quot;&gt;https://woowacourse.github.io/javable/2020-05-08/First-Class-Collection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-getter-줄이기&quot;&gt;2. getter 줄이기&lt;/h3&gt;

&lt;p&gt;지금까지 거의 모든 프로젝트에서 멤버 변수 접근 제한자를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;로 설정하고  &lt;br /&gt;
getter/setter을 이용해서만 접근이 가능하도록 했다.&lt;/p&gt;

&lt;p&gt;모든 멤버 변수에 lombok을 사용해 getter/settter을 사용했었다.     &lt;br /&gt;
무조건 모든 멤버 변수에 getter을 사용하는 게 좋은 건 아니라고 해서 공부해보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체에 메시지를 보내 객체가 로직을 수행하도록 하자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체는 메시지를 받으면 그에 따른 로직을 수행한다.           &lt;br /&gt;
-&amp;gt; 객체지향 프로그래밍은 객체가 스스로 일을 하도록 하는 프로그래밍이다.&lt;/p&gt;

&lt;p&gt;getter을 사용해 상태값을 꺼내 객체 외부에서 로직을 수행하거나 상태를 바꾸면   &lt;br /&gt;
이는 객체스럽지 못한 것!  &lt;br /&gt;
(Collection 인터페이스를 사용하는 경우 외부에서 getter메서드로 얻은 값을 통해 상태값을 변경할 수 있다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;: &lt;a href=&quot;https://woowacourse.github.io/javable/2020-04-28/ask-instead-of-getter&quot;&gt;https://woowacourse.github.io/javable/2020-04-28/ask-instead-of-getter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-stream-사용&quot;&gt;3. stream 사용&lt;/h3&gt;

&lt;p&gt;lotto game 구현에서 반복문은 전부 for문을 사용했는데 &lt;br /&gt;
stream을 사용해보기로 했다.&lt;/p&gt;

&lt;p&gt;우선 아래 부분만 수정해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;before&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWinningMoney&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;after&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProfit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;             
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Rank:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWinningMoney&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;           
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;           
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;              
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-07-25/lotto/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-07-25/lotto/</guid>
      </item>
    
      <item>
        <title>커서 기반 페이징 구현</title>
        <description>&lt;h1 id=&quot;cursor-기반-페이징-구현&quot;&gt;Cursor 기반 페이징 구현&lt;/h1&gt;

&lt;p&gt;타임라인 기능을 위해 무한 스크롤을 이용한 페이징 방식을 구현해보기로 했다. &lt;br /&gt;
스프링을 공부하면서 pagination을 공부하면서 Offset 기반의 페이징만 구현했는데, &lt;br /&gt;
SNS 같은 무한 스크롤에서 문제가 생길 수 있다고 한다.&lt;/p&gt;

&lt;h3 id=&quot;1-offset&quot;&gt;1. Offset&lt;/h3&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSTS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSTS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSTS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실시간으로 많은 글이 올라오는 환경에서 위 쿼리는 다음고 같은 문제를 발생시킨다.   &lt;br /&gt;
첫번째 쿼리가 실행되고 그 사이에 게시글 하나가 추가되면 두번째 쿼리를 조회할 때 중복될 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;2-cursor&quot;&gt;2. Cursor&lt;/h3&gt;

&lt;p&gt;커서 기반 페이징은 조회할 때 내가 읽은 마지막 요소를 알려줘서 그 뒤의 값을 조회할 수 있도록 하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 쿼리는 litebook 프로젝트에서 사용한 쿼리이다. &lt;br /&gt;
최신 10개의 게시글을 조회하고 이전에 조회한 마지막 id 보다 작은 10개를 가져오라는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rest-api&quot;&gt;REST API&lt;/h1&gt;

&lt;p&gt;litebook은 타임라인 기능을 중심으로 프론트까지 같이 개발했었는데      &lt;br /&gt;
서버 위주로 개발하고 싶은 욕심이 생겨서 rest api로 댓글, 좋아요, 검색, 친구 추천 기능 등등                &lt;br /&gt;
기능을 더 추가해서 설계부터 다시 개발하기로 결심했다!&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-07-14/0714/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-07-14/0714/</guid>
      </item>
    
      <item>
        <title>Transaction</title>
        <description>&lt;h1 id=&quot;transaction&quot;&gt;Transaction&lt;/h1&gt;

&lt;h3 id=&quot;1-배경지식&quot;&gt;1. 배경지식&lt;/h3&gt;

&lt;h5 id=&quot;1-트랜잭션이란&quot;&gt;(1) 트랜잭션이란?&lt;/h5&gt;

&lt;p&gt;트랜잭션이란 더 이상 나눌 수 없는 단위 작업을 말한다. &lt;br /&gt;
작업을 쪼개서 작은 단위로 만들 수 없다는 것은 트랜잭션의 핵심 속성인 원자성을 의미한다.&lt;/p&gt;

&lt;p&gt;SQL 명령이 DB에서 실행되는 것을 트랜잭션이라고도 한다.   &lt;br /&gt;
별도로 지정하지 않으면 SQL 명령 하나가 실행되는 것이 하나의 트랜잭션이 된다.&lt;/p&gt;

&lt;p&gt;SQL 문장 여러개를 묶어서 하나의 트랜잭션을 만들수도 있다.&lt;br /&gt;
예를 들어서 운영체제에서 앱이 실행되는 것을 프로세스(process)라고 부르는 것처럼   &lt;br /&gt;
DMBS에서 SQL 명령이 실행되는 것은 트랜잭션(transaction)이라고 부른다.&lt;/p&gt;

&lt;p&gt;운영체제 프로세스에서 병렬성 문제, 데드락 문제가 발생하는 것과 유사하게 &lt;br /&gt;
DB 트랜잭션에서도 병렬성 문제, 데드락 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-트랜잭션의-속성&quot;&gt;(2) 트랜잭션의 속성&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;원자성(Atomicity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트랜잭션 내부 작업들이 부분 성공 부분 실패하는 일 없이, 전체 성공하거나 전체 실패하는 것이 보장된다. &lt;br /&gt;
예를들어, 자금 이체는 보내는 쪽에서 돈을 빼는 작업과 받는 쪽에 돈을 넣는 작업 중 하나라도 실패하면 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일관성(Consistency)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트랜잭션 실행이 성공적으로 완료되면, 데이터베이스 상태는 모순이 없는 상태가 (consistency) 유지됨이 보장된다. &lt;br /&gt;
즉 트랜잭션은 데이터베이스 상태를 모순이 있는 (inconsistent) 상태로 변경할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고립성(Isolation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DB에서 여러 트랜잭션이 동시에 실행되지만, 트랜잭션이 서로 충돌하지 않고, 마치 혼자 실행되는 것과 &lt;br /&gt;
같은 환경이 보장된다.&lt;/p&gt;

&lt;p&gt;예를들어, 두 트랜잭션이 어떤 레코드를 동시에 쓰려고 할 때. &lt;br /&gt;
어떤 트랜잭션이 수정하고 있는 레코드를 다른 트랜잭션이 읽으려고 할 때 &lt;br /&gt;
충돌 없이 여러 트랜잭션이 동시에 잘 실행될 수 있음이 보장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지속성(Durability)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;성공적으로 수행 종료된 트랜잭션이 저장한 데이터는 시스템 장애 등의 이유로 날아가는 일이 없이 &lt;br /&gt;
계속 유지됨이 보장된다. 혹시 시스템에 장애가 발생하더라도 DBMS의 백업과 복구 기능을 활용하여, &lt;br /&gt;
장애 직전의 상태로 데이터를 전부 복구할 수 있음이 보장된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-구현&quot;&gt;2. 구현&lt;/h3&gt;

&lt;p&gt;spring 기능을 활용하여 트랜잭션을 구현&lt;/p&gt;

&lt;p&gt;(1) application.properties&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring.aop.proxy-target-class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true        &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링 트랜잭션 기능을 구현하기 위해서 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션을 메소드나 클래스에 붙여줄 경우 &lt;br /&gt;
그리고 어노테이션이 사용된 클래스가 부모 interface가 없을 때 &lt;br /&gt;
위 설정이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;transaction-level&quot;&gt;Transaction Level&lt;/h1&gt;

&lt;h3 id=&quot;트랜잭션-전파-propagation&quot;&gt;트랜잭션 전파 (propagation)&lt;/h3&gt;

&lt;p&gt;트랜잭션을 시작하거나 기존 트랜잭션에 참여하는 방법을 결정하는 속성이다.   &lt;br /&gt;
기존 트랜잭션에 참여한다는 것은 현재 트랜잭션에서 다른 트랜잭션으로 이동할 때를 이야기 한다.&lt;/p&gt;

&lt;p&gt;예를들어 AccountService에 트랜잭션이 걸려 있는데 OrderService 에서도 트랜잭션이 걸려 있는 것을 말한다. &lt;br /&gt;
같은 클래스는 해당 사항이 없다.&lt;/p&gt;

&lt;p&gt;트랜잭션 경계의 시작 지점에서 트랜잭션 전파 속성을 참조해서 해당 범위의 트랜잭션을 어떤 식으로 진행시킬지 정할 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같은 속성으로 설정이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REQUIRED&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;디폴트 속성이며 모든 트랜잭션 매니저가 지원한다.    &lt;br /&gt;
미리 시작된 트랜잭션이 있으면 참여하고 없으면 새로 시작한다. &lt;br /&gt;
자연스럽고 간단한 트랜잭션 전파 방식이지만 사용해보면 매우 강력하고 유용하다는 사실을 알 수 있다. &lt;br /&gt;
하나의 트랜잭션이 시작된 후에 다른 트랜잭션 경계가 설정된 메소드를 호출하면 자연스럽게 같은 트랜잭션으로 묶인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SUPPORTS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이미 시작된 트랜잭션이 있으면 참여하고 그렇지 않으면 트랜잭션 없이 진행한다. &lt;br /&gt;
트랜잭션이 없긴 하지만 해당 경계 안에서 Connection이나 하이버네이트 Session 등을 공유할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MANDATORY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REQUIRED와 비슷하게 이미 시작된 트랜잭션이 있으면 참여한다. &lt;br /&gt;
반면에 트랜잭션이 시작된 것이 없으면 새로 시작하는 대신 예외를 발생시킨다. &lt;br /&gt;
혼자서는 독립적으로 트랜잭션을 진행하면 안 되는 경우에 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REQUIRES_NEW&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;항상 새로운 트랜잭션을 시작한다. 이미 진행 중인 트랜잭션이 있으면 트랜잭션을 잠시 보류시킨다. &lt;br /&gt;
JTA 트랜잭션 매니저를 사용한다면 서버의 트랜잭션 매니저에 트랜잭션 보류가 가능하도록 설정되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NOT_SUPPORTED&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트랜잭션을 사용하지 않게 한다. 이미 진행중인 트랜잭션이 있으면 보류시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NEVER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;트랜잭션을 사용하지 않도록 강제한다. 이미 진행 중인 트랜잭션도 존재하면 안된다.&lt;br /&gt;
만약 있다면 보류시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NESTED&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이미 진행중인 트랜잭션이 있으면 중첩 트랜잭션을 시작한다.        &lt;br /&gt;
중첩 트랜잭션은 트랜잭션 안에 다시 트랜잭션을 만드는 것이다.      &lt;br /&gt;
하지만 독립적인 트랜잭션을 만드는 REQUIRES_NEW와는 다르다.&lt;/p&gt;

&lt;p&gt;중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만     &lt;br /&gt;
자신의 커밋과 롤백은 부모 트랜잭션에게 영향을 주지 않는다.&lt;/p&gt;

&lt;p&gt;중첩 트랜잭션은 JDBC 3.0 스펙의 저장포인트(savepoint)를 지원하는 드라이버와  &lt;br /&gt;
DataSourceTransactionManager 를 이용할 경우에 적용 가능하다.   &lt;br /&gt;
또는 중첩 트랜잭션을 지원하는 일부 WAS의 JTA 트랜잭션 매니저를 이용할 때도 적용할 수 있다.  &lt;br /&gt;
유용한 트랜잭션 전파 방식이지만 모든 트랜잭션 매니저에 다 적용 가능한 건 아니므로,  &lt;br /&gt;
적용하려면 사용할 트랜잭션 매니저와 드라이버, WAS의 문서를 참조해 보고,  &lt;br /&gt;
미리 학습 테스트를 만들어서 검증해봐야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션-격리-isolation&quot;&gt;트랜잭션 격리 (isolation)&lt;/h3&gt;

&lt;h4 id=&quot;1-데이터베이스의-lock&quot;&gt;1. 데이터베이스의 Lock&lt;/h4&gt;

&lt;h5 id=&quot;1-데이터베이스에서-락이란&quot;&gt;(1) 데이터베이스에서 락이란?&lt;/h5&gt;

&lt;p&gt;동시에 실행되는 여러 트랜잭션이 서로 충돌하는 일이 벌어질 수 있다.    &lt;br /&gt;
예를 들어 어떤 트랜잭션에서 UPDATE 명령이 실행되어 어느 레코드를 수정하는 도중에,&lt;/p&gt;

&lt;p&gt;다른 트랜잭션에서 그 레코드를 DELETE 해버리면 문제가 발생할 것이다.   &lt;br /&gt;
이런 충돌을 피하기 위해서, 트랜잭션에서 데이터를 읽고 쓸 때,  &lt;br /&gt;
다른 트랜잭션이 방해하지 못하도록 그 데이터를 잠시 잠그는(lock) 것이 필요하다.    &lt;br /&gt;
락(lock)에는 읽기 락과 쓰기 락이 있다&lt;/p&gt;

&lt;h5 id=&quot;2-읽기-락-rread-lock&quot;&gt;(2) 읽기 락 (Rread Lock)&lt;/h5&gt;

&lt;p&gt;트랙잭션이 데이터를 읽기 직전에 그 데이터에 읽기 락을 건다.&lt;/p&gt;

&lt;p&gt;읽기 락은 여러 개가 중복될 수 있다.   &lt;br /&gt;
그래서 동시에 여러 트랜잭션이 같은 데이터를 읽는 것은 가능하다.&lt;/p&gt;

&lt;p&gt;읽기 락과 쓰기 락은 중복될 수 없다.   &lt;br /&gt;
그래서 어떤 트랜잭션이 데이터를 읽는 중이라서 읽기 락이 걸려 있는 데이터를  &lt;br /&gt;
다른 트랜잭션이 수정하는 것은 불가능하다.  &lt;br /&gt;
데이터 읽기가 끝나고 읽기 락이 풀리면, 그때 쓰기 락을 걸고 수정하게 된다.&lt;/p&gt;

&lt;h5 id=&quot;3-쓰기-락-write-lock&quot;&gt;(3) 쓰기 락 (Write Lock)&lt;/h5&gt;

&lt;p&gt;트랜잭션이 데이터를 쓰기 직전에 그 데이터에 쓰기 락을 건다.&lt;/p&gt;

&lt;p&gt;쓰기 락은 여러 개 중복될 수 없다.&lt;br /&gt;
그래서 동시에 여러 트랜잭션이 같은 데이터를 수정하는 것은 불가능하다.&lt;/p&gt;

&lt;p&gt;읽기 락과 쓰기 락은 중복될 수 없다.&lt;br /&gt;
그래서 어떤 트랜잭션이 데이터를 수정하는 중이라서 쓰기 락이 걸려 있는 데이터를 &lt;br /&gt;
다른 트랜잭션이 읽는 것은 불가능하다. &lt;br /&gt;
데이터 수정이 끝나고 쓰기 락이 풀리면, 그때 읽기 락을 걸고 읽게 된다.&lt;/p&gt;

&lt;h5 id=&quot;4-쓰기-락의-범위&quot;&gt;(4) 쓰기 락의 범위&lt;/h5&gt;

&lt;p&gt;트랜잭션이 데이터를 수정할 때 먼저 그 데이터에 자동으로 쓰기 락이 걸리게 된다.     &lt;br /&gt;
데이터 수정 전에 쓰기 락이 걸리는 것은 언제나 자동으로 일어난다.    &lt;br /&gt;
언제나 트랜잭션이 종료될 때 쓰기 락이 풀린다 (unlock).&lt;/p&gt;

&lt;p&gt;즉 쓰기 락은 데이터를 수정하기 직전에 언제나 자동으로 걸리고, &lt;br /&gt;
트랜잭션이 종료될 때 쓰기 락이 풀린다.&lt;/p&gt;

&lt;h5 id=&quot;5-읽기-락의-범위&quot;&gt;(5) 읽기 락의 범위&lt;/h5&gt;

&lt;p&gt;트랜잭션이 데이터를 읽을 때 먼저 그 데이터에 읽기 락이 자동으로 걸려야 한다.&lt;br /&gt;
그런데 읽기 락이 언제나 자동으로 걸리는 것은 아니다.&lt;/p&gt;

&lt;p&gt;읽기 락을 하냐 마냐는 Transaction Isolation Level 설정에 따라 다르다.&lt;br /&gt;
읽기 락이 언제까지 유지할 것인지도 Transaction Isolation Level 설정에 따라 다르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-transaction-isolation-level&quot;&gt;2. Transaction Isolation Level&lt;/h4&gt;

&lt;p&gt;Transaction Isolation Level 설정에 따라, &lt;br /&gt;
트랜잭션이 데이터를 읽기 전에 읽기 락을 할지 말지 읽기 락을 언제까지 유지할지가 결정된다.&lt;/p&gt;

&lt;p&gt;읽기 락을 많이 걸고 오래 유지할 수록 데이터의 안정성은 좋아지지만 성능은 나빠진다. &lt;br /&gt;
돈 거래와 같은 중요한 데이터라면 데이터 안정성이 중요하고, &lt;br /&gt;
게시판 덧글과 같이 별로 중요하지 않은 데이터라면 성능이 더 중요할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;1-transaction-isolation-level-설정-명령&quot;&gt;(1) Transaction Isolation Level 설정 명령&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  

SET TRANSACTION ISOLATION LEVEL READ COMMITTED  

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ  

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 목록에서 아래의 명령일 수록 읽기 락을 좀 더 많이 건다.&lt;/p&gt;

&lt;p&gt;Transaction Isolcation Level을 설정하는 명령을 실행하지 않았다면, &lt;br /&gt;
디폴트 상태는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Oracle : READ COMMITTED&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL Server : READ COMMITTED&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MySQL : REPEATABLE READ&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-read-uncommitted&quot;&gt;(2) Read Uncommitted&lt;/h5&gt;

&lt;p&gt;읽기 락을 전혀 하지 않는다. 그래서 가장 빠르다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dirty Reads 문제 발생&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;읽기 락을 전혀 하지 않기 때문에, 다른 트랜잭션이 수정하고 있어서 쓰기 락이 걸려 있는 데이터도 읽을 수 있다.   &lt;br /&gt;
그래서 게시글 본문이 반쯤 저장된 상태에서 그 게시글 레코드를 읽는 것이 가능하다.&lt;/p&gt;

&lt;p&gt;이렇게 완전하지 않고 반쯤 수정된 데이터가 읽혀질 수 있는 문제를 Dirty Reads 문제라고 부른다.&lt;/p&gt;

&lt;p&gt;읽기 락을 하지 않기 때문에, 어떤 트랜잭션이 읽고 있는 중인 데이터를 &lt;br /&gt;
다른 트랜잭션이 쓰기 락을 걸고 수정하거나 삭제할 수도 있다.&lt;/p&gt;

&lt;p&gt;Read Uncommitted 레벨에서는 Dirty Reads 문제가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하려면, Transaction Isolation Level 을 다음 단계인 Read Committed로 올려야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3-read-committed&quot;&gt;(3) Read Committed&lt;/h5&gt;

&lt;p&gt;데이터를 읽기 직전에 언제나 읽기 락을 한다.    &lt;br /&gt;
그리고 그 SQL 문장이 끝나자 마자 읽기 락을 푼다.    &lt;br /&gt;
즉 읽기 락을 SQL 문장 하나 단위로만 유지한다.&lt;/p&gt;

&lt;p&gt;읽기 락을 걸고 데이터를 읽기 때문에,  &lt;br /&gt;
그리고 읽기 락이 걸려 있는 데이터에 쓰기 락을 걸 수는 없기 때문에,  &lt;br /&gt;
읽는 중인 데이터를 다른 트랜잭션이 수정할 수 없다.  &lt;br /&gt;
따라서 Dirty Reads 문제는 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;Transaction Isolcation Level을 설정하는 명령을 실행하지 않았다면,  &lt;br /&gt;
이것이 디폴트 상태이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-repeatable Reads 문제 발생&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read Committed 단계에서는 Dirty Reads 문제는 해결 되었지만,&lt;br /&gt;
모든 문제가 다 해결된 것은 아니다.&lt;br /&gt;
미묘한 Non-repeatable Reads 문제가 남아있다.&lt;/p&gt;

&lt;p&gt;하나의 트랜잭션에서 어떤 데이터를 처음 읽을 때와 나중에 읽을 때 값이 달라져서   &lt;br /&gt;
문제가 되는 상황을 Non-Repeatable Reads 문제라고 부른다.&lt;/p&gt;

&lt;p&gt;Non-Repeatable Reads 문제를 피하려면  &lt;br /&gt;
다른 트랜잭션이 사이에 끼어 들어와서 데이터를 수정하지 못하게 막아야 한다. &lt;br /&gt;
그러러면 읽기 락을 좀 더 열심히 걸어야 한다.&lt;/p&gt;

&lt;p&gt;Non-Repeatable Reads 문제를 피하려면 &lt;br /&gt;
Transaction Isolation Level 을 다음 단계인 Repeatable Read 단계로 올려야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;4-repeatable-read&quot;&gt;(4) Repeatable Read&lt;/h5&gt;

&lt;p&gt;데이터를 읽기 직전에 읽기 락을 건다. &lt;br /&gt;
그리고 읽기 락을 트랜잭션 끝날 때까지 유지해서 &lt;br /&gt;
다른 트랜잭션이 사이에 끼어 들어와서 데이터를 수정하지 못하게 막는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-repeatable Reads 문제 해결&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;읽기 락이 걸려 있는 데이터에 다른 트랜잭션이 쓰기 락을 걸 수 없지만,    &lt;br /&gt;
읽기 락을 건 바로 그 트랜잭션은, 자신이 걸었던 읽기 락을 쓰기 락으로 변경하는 것이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phantom Reads 문제 발생&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Repeatable Read 단계에서 Non-repeatable Reads 문제는 해결 되었지만&lt;br /&gt;
모든 문제가 다 해결된 것은 아니다.&lt;br /&gt;
아주 미묘한 Phantom Reads 문제가 남아있다.&lt;/p&gt;

&lt;p&gt;예를 들어 수강 신청에서 &lt;br /&gt;
절차1) 먼저 강좌의 수강 레코드 수를 조회하여 최대 수강 인원 수 보다 크거나 같다면, &lt;br /&gt;
그 강좌의 수강 인원이 꽉찬 것이므로 종료.&lt;/p&gt;

&lt;p&gt;절차2) 그렇지 않다면 수강 레코드 삽입(insert)&lt;/p&gt;

&lt;p&gt;위와 같은 순서로 구현했을 때,  &lt;br /&gt;
절차1에서 읽은 수강 레코드들에 읽기 락이 걸리고 트랜잭션이 끝날 때가지 유지된다. &lt;br /&gt;
그 트랜잭션이 끝날 때가지 읽기 락이 걸려 있는 수강 레코들은 수정 될 수 없도록 보호되지만, &lt;br /&gt;
새 수강 레코드가 삽입되는 것은 가능하다.  &lt;br /&gt;
그래서 절차1과 절차2 사이에 다른 트랜잭션이 그 강좌에 새 수강 레코드를 삽입할 수 있다.&lt;/p&gt;

&lt;p&gt;절차1에서 강좌의 수강 레코드 수를 조회할 때는 최대 수강 인원 수 보다 작았는데,&lt;br /&gt;
막상 절차2를 실행할 때는 최대 수강 인원 수와 수강 레코드 수가 같을 수 있다.&lt;br /&gt;
절차1과 절차2 사이에 다른 트랜잭션이 수강 레코드를 등록할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;절차1과 절차2에서 조회한 수강 레코드 수가 동일하려면,   &lt;br /&gt;
절차1과 절차2 사이에 다른 트랜잭션이 그 강좌에 수강 레코드를 등록하지 못하게 막아야 한다.&lt;/p&gt;

&lt;p&gt;이렇게 막는 것은 조금 복잡한 읽기 락(lock)이 필요하다.&lt;/p&gt;

&lt;p&gt;Phantom Reads 문제를 피하려면 &lt;br /&gt;
좀 더 복잡한 읽기 락을 걸어야 한다.  &lt;br /&gt;
Transaction Isolation Level 을 다음 단계인 Serializable 단계로 올려야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;5-serializable&quot;&gt;(5) Serializable&lt;/h5&gt;

&lt;p&gt;Phantom Reads 문제를 피하기 위해 좀 더 복잡한 읽기 락을 건다.  &lt;br /&gt;
그리고 트랜잭션 끝날 때까지 읽기 락을 유지한다.&lt;/p&gt;

&lt;p&gt;테이블에 읽기 락을 걸거나, 테이블 인덱스에 읽기 락을 걸거나, &lt;br /&gt;
WHERE 절 조건식으로 읽기 락을 걸기도 한다.&lt;/p&gt;

&lt;p&gt;테이블에 읽기 락이 걸리면, 그 테이블에 대한 모든 수정(insert, update, delete)은 막힌다.    &lt;br /&gt;
데이블 인덱스에 읽기 락이 걸리면, 그 인덱스에 변화를 초래하는 수정(insert, update, delete)은 막힌다.  &lt;br /&gt;
WHERE 절 조건식으로 읽기 락이 걸리면, WHERE 절 조건식의 true/false 값이 변할 만한 수정(insert, update, delete)은 막힌다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phantom Reads 문제 해결&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;수강 신청에서 절차를 다시 생각해 보자.  &lt;br /&gt;
절차1) 먼저 강좌의 수강 레코드 수를 조회하여 최대 수강 인원 수 보다 크거나 같다면,     &lt;br /&gt;
그 강좌의 수강 인원이 꽉찬 것이므로 종료.&lt;/p&gt;

&lt;p&gt;절차2) 그렇지 않다면 수강 레코드 삽입(insert)&lt;/p&gt;

&lt;p&gt;강좌의 수강 레코드 수 조회 SQL 문은 다음과 같은 형태일 것이.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;SELECT COUNT(*) FROM 수강 WHERE lectureId = #{lectureId}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;절차1에서 읽은 강좌 레코드 수를 조회하는 WHERE 절의 조건식에 읽기 락이 걸린다. &lt;br /&gt;
위 WHERE 조건식의 값이, 어떤 명령의 실행 전과 후에 달라지다면, 락에 의해서 그 명령의 실행은 막힌다.  &lt;br /&gt;
위 WHERE 조건식이 true인 레코드를 delete 하는 것도 막힌다. &lt;br /&gt;
위 WHERE 조건식이 true인 레코드를 insert 하는 것도 막힌다.&lt;/p&gt;

&lt;p&gt;따라서 절차1과 절차2 사이에 다른 레코드가 끼어 들어와서 그 강좌에 새 수강 레코드를 삽입할 수 없다.&lt;/p&gt;

&lt;p&gt;Serializable 단계는 모든 읽기 문제가 다 해결된 단계이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;요약&quot;&gt;요약&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;read uncommitted&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 트랜잭션이 수정한 내용이 아직 commit 되기 전부터,&lt;/p&gt;

&lt;p&gt;다른 트랜잭션들에게 그 값이 보임. (dirty read 문제)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read committed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 트랜잭션이 수정한 내용이 commit 된 이후에만.&lt;/p&gt;

&lt;p&gt;다른 트랜잭션들에게 그 값이 보임. (dirty read 해결됨)&lt;/p&gt;

&lt;p&gt;어떤 트랜잭션이 한 번 읽은 레코드를, 트랜잭션 실행 도중 다시 읽었을 때,&lt;/p&gt;

&lt;p&gt;그 사이에 다른 트랜잭션이 그 레코드를 수정하고 commit 했다면,&lt;/p&gt;

&lt;p&gt;다시 읽은 값은 처음 읽은 값과 달라진다. (nonrepeatable read 문제)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;repeatable read&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 트랜잭션이 한 번 읽은 레코드를, 트랜잭션 실행 도중 다시 읽었을 때,&lt;/p&gt;

&lt;p&gt;그 사이에 다른 트랜잭션이 그 레코드를 수정하고 commit 했더라도,&lt;/p&gt;

&lt;p&gt;처음 읽은 값과 다시 읽은 값이 동일함이 보장된다. (nonrepeatable read 해결됨)&lt;/p&gt;

&lt;p&gt;어떤 트랜잭션이 아직 읽지 않은 레코드를,&lt;/p&gt;

&lt;p&gt;다른 트랜잭션이 수정하는 것이 허용된다.&lt;/p&gt;

&lt;p&gt;예를 들어, 어떤 소프트웨어공학과 학생 수를 세기 위해&lt;/p&gt;

&lt;p&gt;소프트웨어공학과 학생 레코드들을 읽으면,&lt;/p&gt;

&lt;p&gt;그 사이에 다른 트랜잭션이 그 레코드를 수정하고 commit 했더라도,&lt;/p&gt;

&lt;p&gt;처음 읽은 값과 다시 읽은 값이 동일함이 보장된다.&lt;/p&gt;

&lt;p&gt;하지만,&lt;/p&gt;

&lt;p&gt;다른 트랜잭션이 소프트웨어공학과 학생 레코드가 새로 추가하고 commit 한 후에,&lt;/p&gt;

&lt;p&gt;다시 소프트웨어공학과 학생 수를 세면, 처음 세었을 때 보다 1 증가했을 것이다.&lt;/p&gt;

&lt;p&gt;(phantom read 문제)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serializable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;phantom read 문제도 해결됨.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-13/transaction/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-13/transaction/</guid>
      </item>
    
      <item>
        <title>토비의 스프링 (3)</title>
        <description>&lt;h1 id=&quot;3장-템플릿&quot;&gt;3장 템플릿&lt;/h1&gt;

&lt;p&gt;확장에는 자유롭게 열려 있고 변경에는 굳게 닫혀 있다는 객체지향 설계의 핵심 원칙인 &lt;br /&gt;
개방 폐쇄 원칙을 다시 생각해보자.&lt;/p&gt;

&lt;p&gt;이 원칙은 코드에서 어떤 부분은 변경을 통해 그 기능이 다양해지고 확장하려는 성질이 있고, &lt;br /&gt;
어떤 부분은 고정되어 있어 변하지 않으려는 설징이 있음을 말해준다.&lt;/p&gt;

&lt;p&gt;변화의 특성이 다른 부분을 구분해주고, 각각 다른 목적과 다른 이유에 의해 다른 시점에 독립적으로 변경될 수 있는       &lt;br /&gt;
효율적인 구조를 만들어주는 것이 바로 이 개방 폐쇄 원칙이다.&lt;/p&gt;

&lt;p&gt;템플릿이란 이렇게 바뀌는 성질이 다른 코드 중에서 변경이 거의 일어나지 않으며 일정한 패턴으로 &lt;br /&gt;
유지되는 특성을 가진 부분을 자유롭게 변경되는 성질을 가진 부분으로부터 독립시켜 &lt;br /&gt;
효과적으로 활용할 수 있도록 하는 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;분리와-재상용을-위한-디자인-패턴-적용&quot;&gt;분리와 재상용을 위한 디자인 패턴 적용&lt;/h3&gt;

&lt;p&gt;다음은 개선할 deleteAll() 메서드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 


&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete from users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 변하는 부분 &lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변하는 부분을 재외하면 나머지 코드는 변하지 않는다.&lt;/p&gt;

&lt;p&gt;이 로직에 따라 변하는 부분을 변하지 않는 나머지 코드에서 분리하는 것이 어떨까?   &lt;br /&gt;
변하지 않는 부분을 재사용할 수 있는 부분이 있지 않을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;메소드-추출&quot;&gt;메소드 추출&lt;/h3&gt;

&lt;p&gt;먼저 생각해볼 수 있는 방법은 변하는 부분을 메소드로 빼는 것이다.&lt;/p&gt;

&lt;p&gt;자주 바뀌는 부분을 메서드로 독립시키는 것은 별 이득이 없어 보인다. &lt;br /&gt;
왜냐면 보통 메소드 추출 리팩토링을 적용하는 경우에는 분리시킨 메서드를 다른 곳에서 재사용할 수 있어야 하는데 &lt;br /&gt;
반대로 분리시키고 남은 메서드가 재사용이 필요한 부분이기 때문이다.         &lt;br /&gt;
분리된 메서드는 DAO 로직마다 새롭게 만들어서 확장돼야 하는 부분이기 때문에 뭔가 반대로 됐다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;템플릿-메소드-패턴의-적용&quot;&gt;템플릿 메소드 패턴의 적용&lt;/h3&gt;

&lt;p&gt;템플릿 메서드 패턴은 상속을 통해 기능을 확장해서 사용하면 된다. &lt;br /&gt;
변하는 부분을 추상 메서드로 정의해두고 서브클래스에서 재정의하여 사용하면 된다.&lt;/p&gt;

&lt;p&gt;하지만 템플릿 메서드 패턴으로서의 접근은 제한이 많다.&lt;/p&gt;

&lt;p&gt;가장 큰 문제는 DAO 로직마다 상속을 통해 새로운 클래스를 만들어야 한다는 점이다. &lt;br /&gt;
만약 이런 방식으로 구현한다면 JDBC 메서드가 4개일 경우 4개의 서브 클래스를 만들어서 사용해야 한다.&lt;/p&gt;

&lt;p&gt;두 번째 문제는 확장구조가 이미 클래스를 설계하는 시점에서 고정되어 버린다는 점이다. &lt;br /&gt;
변하지 않는 코드와 서브 클래스들(변하는 코드)이 이미 클래스 레벨에서 컴파일 시점에 이미 그 관계가 결정되어 있다. &lt;br /&gt;
따라서 그 관계에 대한 유연성이 떨어져 버린다. &lt;br /&gt;
상속을 통해 확장을 꾀하는 템플릿 패턴의 단점이 고스란히 드러난다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;전략-패턴-사용&quot;&gt;전략 패턴 사용&lt;/h3&gt;

&lt;p&gt;개방 폐쇄 원칙을 잘 지키는 구조이면서도 템플릿 메서드 패턴보다 유연하고 확장성이 뛰어난 것이,  &lt;br /&gt;
오브젝트를 아예 둘로 분리하고 클래스 레벨에서는 인터페이스를 통해서만 의존하도록 만드는 전략 패턴이다.&lt;/p&gt;

&lt;p&gt;전략 패턴은 OCP 관점에 보면 확장에 해당하는    &lt;br /&gt;
변하는 부분을 별도의 클래스로 만들어 추상화된 인터페이스를 통해 위임하는 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;StatementStrategy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeleteAllStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makePreparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 그럭저럭 전략 패턴을 적용한 것으로 볼 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 전략 패턴은 필요에 따라 컨텍스트는 그대로 유지되면서 전략을 바꿔쓸 수 있어야 한다. &lt;br /&gt;
이렇게 컨텍스트 안에서 이미 구체적인 전략 클래스인 DeleteAllStatement를 사용하도록 고정되어 있다면 뭔가 이상하다.  &lt;br /&gt;
전략 패턴과 OCP에 잘 들어맞지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;di-적용을-위한-클라이언트--컨텍스트-분리&quot;&gt;DI 적용을 위한 클라이언트 / 컨텍스트 분리&lt;/h3&gt;

&lt;p&gt;문제를 해결하기 위해 전략 패턴의 실제적인 사용 방법을 더 살펴보자.&lt;/p&gt;

&lt;p&gt;전략 패턴에 따르면 Context가 어떤 전략을 사용하게 할 것인지는 Context를 사용하는 앞단의 Client가 결정하는 게 일반적이다.    &lt;br /&gt;
Client가 구체적인 전략의 하나를 선택하고 오브젝트를 만들어서 Context에 전달하는 것이다.&lt;/p&gt;

&lt;p&gt;결국 전략 오브젝트 생성과 컨텍스트로의 전달을 담당하는 책임을 분리시킨 것이 바로 ObjectFactory이며 &lt;br /&gt;
이를 일반화한 것이 이전 장에서 살펴봤던 의존관계 주입(DI)이었다.&lt;/p&gt;

&lt;p&gt;DI란 이러한 전략 패턴의 장점을 일반적으로 활용할 수 있도록 만든 구조라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;의존관계 주입(DI)은 다양한 형태로 적용할 수 있다. &lt;br /&gt;
가장 중요한 개념은 제 3자의 도움을 통해 두 오븢게트 사이의 유연한 관계가 설정되도록 만든다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;전략과-클리이언트의-동거&quot;&gt;전략과 클리이언트의 동거&lt;/h3&gt;

&lt;p&gt;지금까지 공부한 내용으로 구현한 코드에 더 개선할 부분이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DAO 메서드마다 새로운 StatementStrategy 구현 클래스를 만들어야 한다는 점이다.  &lt;br /&gt;
이렇게 되면 기존 UserDao 때보다 클래스 파일의 개수가 더 늘어난다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이래서는 런타임 시에 다이내믹하게 DI해준다는 점을 제외하면 로직마다 상속을 사용하는 &lt;br /&gt;
템플릿 메서드 패턴을 적용했을 때보다 그다지 나을 게 없다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DAO 메서드에서 StatementStrategy에 전달할 User와 같은 부가적인 정보가 있는 경우,              &lt;br /&gt;
이를 위해 오브젝트를 전달받는 생성자와 이를 저장해둘 인스턴스 변수를 번거롭게 만들어야 한다는 점이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 오브젝트가 사용되는 시점은 컨텍스트가 전략 오브젝트를 호출할 때라서 잠시라도 어딘가에 다시 저장해둘 수밖애 없다.&lt;/p&gt;

&lt;p&gt;이 문제점들을 해결해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;로컬-클래스&quot;&gt;로컬 클래스&lt;/h3&gt;

&lt;p&gt;클래스 파일이 많아지는 문제점은 간단하게 해결할 수 있다. &lt;br /&gt;
내부 클래스로 정의해버리는 것이다.&lt;/p&gt;

&lt;p&gt;마치 로컬 변수를 선언하듯이 사용하면 된다. &lt;br /&gt;
로컬 클래스는 선언된 메서드 내에서만 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;메서드 안에서 클래스 생성 로직을 함께 볼 수 있어 코드를 이해하기 좋고, &lt;br /&gt;
내부 클래스이기 때문에 자신이 선언된 곳의 정보에 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;다만, 내부 클래스에서 외부의 변수를 사용할 때는 외부 변수는 반드시 final로 선언해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;익명-내부-클래스&quot;&gt;익명 내부 클래스&lt;/h3&gt;

&lt;p&gt;더 욕심을 내보자면, 더 간결하게 클래스 이름도 제거할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;인터페이스이름&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;클래스&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;본문&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;컨텍스트와-di&quot;&gt;컨텍스트와 DI&lt;/h3&gt;

&lt;h5 id=&quot;jdbccontext의-분리&quot;&gt;JdbcContext의 분리&lt;/h5&gt;

&lt;p&gt;전략 패턴의 구조로 보자면 UserDao의 메소드가 클라이언트고, 익명 내부 클래스로 만들어지는 것이 개별적인 전략이고       &lt;br /&gt;
JdbcContextWithStatementStrategy() 메서드는 컨텍스트이다. &lt;br /&gt;
컨텍스트 메서드는 UserDao 내의 PreparedStatement를 실행하는 기능울 가진 메서드에서 공유할 수 있다.&lt;/p&gt;

&lt;p&gt;그런데 JdbcContextWithStatementStrategy()는 다른 DAO에서도 사용 가능하다.  &lt;br /&gt;
밖으로 독립시켜 모든 DAO가 사용할 수 있게 해보자.&lt;/p&gt;

&lt;p&gt;분리해서 만든 클래스는 JdbcContextfkrh gkwk. &lt;br /&gt;
JdbcContext에 UserDao에 있던 컨텍스트 메서드를 workWithStatementStrategy()라는 이름으로 옮겨놓는다.&lt;/p&gt;

&lt;p&gt;JdbcContext가 DataSource에 의존하고 있으므로 DataSource 타입 빈을 DI 받을 수 있게 해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;빈-의존관계-변경&quot;&gt;빈 의존관계 변경&lt;/h5&gt;

&lt;p&gt;새롭게 변경된 의존관계를 살펴보자. &lt;br /&gt;
UserDao는 이제 JdbcContext에 외존한다. 그런데 JdbcContext는 인터페이스인 DataSource와는 달리 구체 클래스다.&lt;/p&gt;

&lt;p&gt;스프링 DI는 기본적으로 인터페이스를 사에이 두고 의존 클래스를 바꿔서 사용할 수 있도록 하는 게 목적이다.        &lt;br /&gt;
하지만 이 경우 JdbcContext는 그 자체로 독립적인 JDBC 컨텍스트를 제공해주는 서비스 오브젝트로서 의미가 있을 뿐이고       &lt;br /&gt;
구현 방법이 바뀔 가능성은 없다.&lt;/p&gt;

&lt;p&gt;따라서 인터페이스를 구현하도록 하지 않았고, UserDaodjl JdbcContext는 인터페이스를 사이에 두지 않고 DI를 적용하는 특별한 구조가 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;스프링-빈으로-di&quot;&gt;스프링 빈으로 DI&lt;/h5&gt;

&lt;p&gt;JdbcContext를 UserDao와 DI 구조로 만들어야 할 이유를 생각해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;JdbcContext가 스프링 컨테이너의 싱글톤 레지스트리에서 관리되는 싱글톤 빈이 되기 때문이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JdbcContext가 DI를 통해 다른 빈에 의존하고 있기 때문이다.   &lt;br /&gt;
JdbcContext는 dataSource 프로퍼티를 통해 DataSource 오브젝트를 주입받도록 되어 있다. &lt;br /&gt;
DI를 위해서는 주입되는 오브젝트와 주입받는 오브젝트 양쪽 모두 스프링 빈으로 등록돼야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스프링이 생성하고 관리하는 IoC 대상이어야 DI에 참여할 수 있기 떄문이다.    &lt;br /&gt;
따라서 JdbcContext가 다른 빈을 받기 위해서라도 스프링 빈으로 등록돼야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;왜 인터페이스를 사용하지 않았을까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;인터페이스가 없다는 건 UserDao와 JdbcContext가 매우 긴밀한 관계를 가지고        &lt;br /&gt;
강하게 결합되어 있다는 것이다.&lt;/p&gt;

&lt;p&gt;클래스는 구분되어 있지만 강한 응집도를 갖고 있다. &lt;br /&gt;
JDBC 방식 대신 JPA나 하이버네이트 같은 ORM을 사용해야 한다면 JdbcContext도 통쨰로 바뀌어야 한다.&lt;/p&gt;

&lt;p&gt;이런 경우는 굳이 인터페이스를 두지 말고 강력한 결합을 가진 관계를 허용하면서 위에서 말한 두 가지 이유인, &lt;br /&gt;
싱글톤으로 만드는 것과 JdbcContext에 대한 DI 필요성을 위해 스프링의 빈으로 등록해서 UserDao에 DI되도록 만드는 것도 좋다.&lt;/p&gt;

&lt;p&gt;단, 이런 클래스를 바로 사용하는 코드 구성을 DI에 적용하는 것은 가장 마지막 단계에서 고려해볼 사항이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;템플릿과-콜백&quot;&gt;템플릿과 콜백&lt;/h3&gt;

&lt;p&gt;전략 패턴은 바뀌지 않는 일정한 패턴을 갖는 작업 흐름이 존재하고 그중 일부분만 자주 바꿔서 사용해야 하는 경우에 적합한 구조다.       &lt;br /&gt;
전략 패턴의 기본 구조에 익명 내부 클래스를 활용한 방식이다.  &lt;br /&gt;
이런 방식을 스프링에서는 템플릿/콜백 패턴이라고 부른다.    &lt;br /&gt;
전략 패턴의 컨텍스트를 템플릿이라 부르고, 익명 내부 클래스로 만들어지는 오브젝트를 콜백이라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;템플릿콜백의-동작원리&quot;&gt;템플릿/콜백의 동작원리&lt;/h5&gt;

&lt;p&gt;템플릿은 고정된 작업 흐름을 가진 코드를 재사용한다는 의미에서 붙인 이름이다.     &lt;br /&gt;
콜백은 템플릿 안에서 값을 참조하기 위한 것이 아니라 특정 로직을 담는 것을 목적으로   &lt;br /&gt;
호출되는 오브젝트를 말한다.&lt;/p&gt;

&lt;p&gt;템플릿 메서드 패턴은 고정된 틀의 로직을 가진 템플릿 메소드를 슈퍼클래스에 두고,      &lt;br /&gt;
바뀌는 부분을 서브 클래스의 메서드에 두는 구조로 이뤄진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;템플릿/콜백의 특징&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전략 패턴의 전략은 여러 개의 메소드를 가진 일반적인 인터페이스를 사용할 수 있다. &lt;br /&gt;
템플릿/콜백 패턴의 콜백은 보통 단일 메소드 인터페이스를 사용한다.&lt;/p&gt;

&lt;p&gt;작업 흐름 중 특정 기능을 위해 한 번 호출되는 경우가 일반적이기 때문이다. &lt;br /&gt;
하나의 템플릿 안에서 여러 전략을 사용한다면 하나 이상의 콜백 오브젝트를 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;콜백은 일반적으로 하나의 메서드를 가진 인터페이스를 구현한 익명 내부 클래스로 만들어진다고 보면된다.&lt;/p&gt;

&lt;p&gt;콜백 인터페이스의 메서드에는 보통 파라미터가 있다. &lt;br /&gt;
이 파라미터는 템플릿의 작업 흐름 중에 만들어지는 컨텍스트 정보를 전달받을 때 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;템플릿/콜백의 작업 흐름&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;클아이언트의 역할은 템플릿 안에서 실행될 로직을 담은 콜백 오브젝트를 만들고,  &lt;br /&gt;
콜백이 참조할 정보를 제공하는 것이다. &lt;br /&gt;
만들어진 콜백은 클라이언트가 템플릿의 메소드를 호출할 때 파라미터로 전달된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;템플릿은 정해진 작업 흐름을 따라 작업을 진행하다가 내부에서 생성한 참조정보를 가지고 콜백 오브젝트의 메소드를 호출한다. &lt;br /&gt;
콜백은 클라이언트 메서드에 있는 정보와 템플릿이 제공한 참조정보를 이용해서 작업을 수행하고 그 결과를 다시 템플릿에 돌려준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;템플릿은 콜백이 돌려준 정보를 사용해서 작업을 마저 수행한다.      &lt;br /&gt;
경우에 따라 최종 결과를 클라이언트에 다시 돌려주기도 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;복잡한 과정같지만 DI 방식의 전략 패턴 구조로 보면 간단하다. &lt;br /&gt;
클라이언트가 템플릿 메소드를 호출하면서 콜백 오브젝트를 전달하는 것은 메소드 레벨에서 일어나는 DI이다. &lt;br /&gt;
일반적인 DI는 의존 오브젝트를 수정자 메서드로 받아서 사용할 것인데 &lt;br /&gt;
템플릿/콜백 방식에서는 매번 메서드 단위로 사용할 오브젝트를 받는 것이 특징이다.&lt;/p&gt;

&lt;p&gt;콜백 오브젝트가 내부 클래스로서 자신을 생성한 클라이언트 메소드 내의 정보를 직접 참조한다는 것도 템플릿/콜백의 고유한 특징이다.   &lt;br /&gt;
클라이언트와 콜백이 강하게 결합된다는 면에서도 일반적인 DI와 조금 다르다.&lt;/p&gt;

&lt;p&gt;이 패턴에 녹아있는 전략 패턴과 수동 DI 를 이해할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;템플릿콜백의-응용&quot;&gt;템플릿/콜백의 응용&lt;/h5&gt;

&lt;p&gt;고정된 작업 흐름을 갖고 있으면서 여기저기서 자주 반복되는 코드가 있다면, &lt;br /&gt;
중복되는 코드를 분리할 방법을 생각해보는 습관을 기르자.&lt;/p&gt;

&lt;p&gt;먼저 메소드로 분리할 방법을 생각해보고,   &lt;br /&gt;
그중 일부 작업을 필요에 따라 바꾸어 사용해야 하나면   &lt;br /&gt;
인터페이스를 사이에 두고 분리해서 전략 패턴을 적용하고 DI로 의존관계를 관리하도록 만든다.&lt;/p&gt;

&lt;p&gt;그런데 바뀌는 부분이 한 애플리케이션 안에서 동시에 여러 종류가 만들어질 수 있다면 &lt;br /&gt;
템플릿/콜백 패턴을 적용하는 것을 고려해볼 수 있다.&lt;/p&gt;

&lt;p&gt;가장 전형적인 템플릿/콜백 패턴의 후보는 try/catch/finally 블록을 사용하는 코드다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;정리&quot;&gt;정리&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JDBC와 같은 예외가 발생할 가능성이 있으면 공유 리소스의 반환이 필요한 코드는 반드시 try/catch/finally 블록으로 관리해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일정한 작업 흐름이 반복되면서 그중 일부 기능만 바뀌는 코드가 존재한다면 전략 패턴을 적용한다. &lt;br /&gt;
바뀌지 않는 부분은 컨텍스트로 바뀌는 부분은 전략으로 만들고 인터페이스를 통해 유연하게 전략을 변경할 수 있도록 구성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;같은 애플이케이션 안에서 여러 가지 종류의 전략을 다이내믹하게 구성하고 사용해야 한다면 컨텍스트를 이용하는 &lt;br /&gt;
클라이언트 메서드에서 직접 전략을 제공하게 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트 메소드 안에 익명 내부 클래스를 사용해서 전략 오브젝트를 구현하면 코드도 간결해지고 메소드의 정보를 직접 사용할 수 있어서 편리하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨텍스트가 하나 이상의 클라이언트 오브젝트에서 사용된다면 클래스를 분리해서 공유하도록 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨텍스트는 별도의 빈으로 등록해서 DI 받거나 클라이언트 클래스에서 직접 생성해서 사용한다. &lt;br /&gt;
클래스 내부에서 컨텍스트를 사용할 때 컨텍스트가 의존하는 외부의 오브젝트가 있다면 코드를 이용해서 직접 DI 해줄 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단일 전략 메소드를 갖는 전략 패턴이면서 익명 내부 클래스를 사용해서 매번 전략을 새로 만들어 사용하고, &lt;br /&gt;
컨텍스트 호출과 동시에 전략 DI를 수행하는 방식을 템플릿/콜백 패턴이라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;콜백의 코드에도 일정한 패턴이 반보된다면 콜백을 템플릿에 넣고 재활용하는 것이 편리하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;템플릿과 콜백의 타입이 다양하게 바뀔 수 있다면 제네릭스를 이용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;탬플릿은 한 번에 하나 이상의 콜백을 사용할 수 있고, 하나의 콜백을 여러 번 호출할 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;템플릿/콜백을 설계할 때는 템플릿과 콜백 사이에 주고받는 정보에 관심을 둬야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 13 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-13/template/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-13/template/</guid>
      </item>
    
      <item>
        <title>토비의 스프링 (4)</title>
        <description>&lt;h2 id=&quot;예외의-종류와-특징&quot;&gt;예외의 종류와 특징&lt;/h2&gt;

&lt;p&gt;예외를 어떻게 다뤄야 할까?  &lt;br /&gt;
가장 큰 이슈는 체크 예외라고 불리는 명시적인 처리가 필요한 예외를 사용하고 다루는 방법이다. &lt;br /&gt;
자바에서 throw를 통해 발생시킬 수 있는 예외는 크게 세 가지가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;첫째는 java.lang.Error 클래스의 서브클래스들이다. 에러는 시스템에 뭔가 비정상적인 상황이 발생했을 경우에 사용된다. &lt;br /&gt;
주로 자바 VM에서 발생시키는 것이고 애플리케이션 코드에서 잡으려고 하면 안 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutOfMemoryError&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThreadDeath&lt;/code&gt;같은 에러는 catch 블록으로 잡아봤자 아무런 대응 방법이 없기 때문이다. &lt;br /&gt;
따라서 시스템 레벨에서 특별한 작업을 하는 게 아니라면 애플리케이션에서는 이런 에러에 대한 처리는 신경 쓰지 않아도 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exception과 체크 예외&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;java.lang.Exception 클래스와 그 서브클래스로 정의되는 예외들은 에러와 달리 &lt;br /&gt;
개발자들이 만든 애플리케이션 코드의 작업 중에 예외상황이 발생했을 경우에 사용된다.&lt;/p&gt;

&lt;p&gt;Exception 클래스는 다시 체크 예외와 언체크 예외로 구분된다. &lt;br /&gt;
전자는 Exception 클래스의 서브클래스이면서 RuntimeException 클래스를 상속하지 않은 것들이고, &lt;br /&gt;
후자는 RuntimeException을 상속한 클래스들을 말한다.&lt;/p&gt;

&lt;p&gt;RuntimeException은 Exception의 서브클래스이므로 Exception의 일종이긴 하지만 
자바는 이 RuntimeException과 그 서브클래스는 특별하게 다룬다.&lt;/p&gt;

&lt;p&gt;일반적으로 예외라고 하면 Exception 클래스의 서브클래스 중에서 RuntimeException을 상속하지 않은 것만을 말하는 &lt;br /&gt;
체크 예외라고 생각해도 된다. &lt;br /&gt;
체크 예외가 발생할 수 있는 메소드를 사용할 경우 반드시 예외를 처리하는 코드를 함께 작성해야 한다. &lt;br /&gt;
그렇지 않으면 컴파일 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RuntimeException과 언체크/런타임 예외&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;java.lang.RuntimeException 클래스를 상속한 예외들은 &lt;br /&gt;
명시적인 예외처리를 강제하지 않기 때문에 언체크 예외라고 불린다. &lt;br /&gt;
또는 대표 클래스 이름을 따서 런타임 예외라고도 한다.&lt;/p&gt;

&lt;p&gt;에러와 마찬가지로 이 런타임 예외는 catch 문으로 잡거나 throws로 선언하지 않아도 된다. &lt;br /&gt;
물론 명ㅁ시적으로 잡거나 throws로 선언해도 상관없다.&lt;/p&gt;

&lt;p&gt;런타임 예외는 주로 프로그램의 오류가 있을 떄 발생하도록 의도된 것들이다. &lt;br /&gt;
대표적으로 오브젝트를 할당하지 않은 레퍼런스 변수를 사용하려고 시도했을 때 발생하는 NullException이나, &lt;br /&gt;
허용되지 않는 값을 사용해서 메소드를 호출할 때 발생하는 IllegalArgumentException 등이 있다.&lt;/p&gt;

&lt;p&gt;이런 예외는 코드에서 미리 조건을 체크하도록 주의 깊게 만든다면 피할 수 있다.   &lt;br /&gt;
피할 수 있지만 개발자가 부주의해서 발생할 수 있는 경우에 발생하도록 만든 것이 런타임 예외이다.&lt;/p&gt;

&lt;p&gt;따라서 런타임 예외는 예상하지 못했던 예외상황에서 발생하는 게 아니기 때문에      &lt;br /&gt;
굳이 catch나 throws를 사용하지 않아도 되도록 만든 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예외처리-방법&quot;&gt;예외처리 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;예외 복구&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;첫 번째 예외처리 방법은 예외상황을 파악하고 문제를 해결해서 정상 상태로 돌려놓는 것이다.&lt;/p&gt;

&lt;p&gt;사용자에게 상황을 알려주고 다른 작업 흐름으로 자연스럽게 유도해서 예외상황을 해결하는 방법이다.&lt;/p&gt;

&lt;p&gt;네트워크가 불안해서 가끔 서버에 접속이 잘 안되는 열악한 환경에 있는 시스템이라면 &lt;br /&gt;
원격 DB 서버에 접속하다 실패해서 SQLException이 발생하는 경우에 재시도를 해볼 수 있다. &lt;br /&gt;
네트워크 접속이 원활하지 않아서 예외가 발생했다면 일정 시간 대기했다가 다시 접속을 시도해보는 방법을 사용해서 &lt;br /&gt;
예외상황으로부터 복구를 시도할 수 있다.  &lt;br /&gt;
물론 정해진 횟수만큼 재시도해서 실패했다면 예외 복구는 포기한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예외처리 회피&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두 번째 방법은 예외처리를 자신이 담당하지 않고 자신을 호출한 쪽으로 던져버리는 것이다. &lt;br /&gt;
throws 문으로 선언해서 예외가 발생하면 알아서 던져지게 하거나 catch 문으로 일단 예외를 잡은 후에 &lt;br /&gt;
로그를 남기고 다시 예외를 던지는 것이다.&lt;/p&gt;

&lt;p&gt;빈 catch 블록으로 잡아서 예외가 발생하지 않은 것처럼 만드는 경우는, 드물지만 특별한 의도를 가지고 예외를 복구했거나 &lt;br /&gt;
아무 개념이 없어서 그런 것이지 회피한 것은 아니다. &lt;br /&gt;
예외처리를 회피하려면 반드시 다른 오브젝트나 메소드가 예외를 대신 처리할 수 있도록 던져줘야 한다.&lt;/p&gt;

&lt;p&gt;예외를 회피하는 것은 예외를 복구하는 것처럼 의도가 분명해야 한다. &lt;br /&gt;
콜백/템플릿처럼 긴밀한 관계에 있는 다른 오브젝트에게 예외처리 책임을 분명히 지게 하거나, &lt;br /&gt;
자신을 사용하는 쪽에게 예외를 다루는 게 최선의 방법이라는 분명한 확신이 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예외 전환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마지막으로 예외를 처리하는 방법은 예외 전환을 하는 것이다. &lt;br /&gt;
예외 회피와 비슷하게 예외를 복구해서 정상적인 상태로는 만들 수 없기 때문에 예외를 메소드 밖으로 던지는 것이다. &lt;br /&gt;
하지만 에외회피와는 달리 발생한 예외를 그대로 넘기는 게 아니라 적절한 예외로 전환해서 던진다는 특징이 있다.&lt;/p&gt;

&lt;p&gt;보통 두 가지 목적으로 사용된다.&lt;/p&gt;

&lt;p&gt;(1) 내부에서 발생한 예외를 그대로 던지는 것이 그 예외상황에 대한 적절한 의미를 부여해주지 못하는 경우, &lt;br /&gt;
의미를 분명하게 해줄 수 있는 예외로 바꿔주기 위해서이다.&lt;/p&gt;

&lt;p&gt;보통 전환하는 예외에 원래 발생한 예외를 담아서 중첩 예외로 만드는 것이 좋다.&lt;/p&gt;

&lt;p&gt;(2) 예외를 처리하기 쉽고 단순하게 만들기 위해 포장하는 방법이 있다.  &lt;br /&gt;
중첩 예외를 이용해 새로운 예외를 만들고 원인이 되는 예외를 내부에 담아서 던지는 방식은 같다.&lt;/p&gt;

&lt;p&gt;하지만 의미를 명확하게 하려고 전환하는 것이 아니다. &lt;br /&gt;
주로 예외처리를 강제하는 체크 예외를 언체크 에외인 런타임 예외로 바꾸는 경우에 사용한다.&lt;/p&gt;

&lt;p&gt;대표적으로 EJBException을 들 수 있다. EJB 컴포넌트 코드에서 발생하는 대부분의 체크 예외는 &lt;br /&gt;
비즈니스 로직으로 볼 때 의미 있는 예외이거나 복구 가능한 예외가 아니다. &lt;br /&gt;
이런 경우에는 런타임 예외인 EJBException으로 포장해서 던지는 편이 낫다.&lt;/p&gt;

&lt;p&gt;RuntimeException클래스를 상속한 런타임 예외라서 &lt;br /&gt;
런타임 예외로 만들어서 전달하면 EJB는 이를 시스템 익셉션으로 인식하고 트랜잭션을 자동으로 롤밷해주기 때문이다.&lt;/p&gt;

&lt;p&gt;반대로 애플리케이션 로직상에서 예외조건이 발견되거나 예외상황이 발생할 수도 있다. &lt;br /&gt;
이런 것은 API가 던지는 예외가 아니라 애플리케이션 코드에서 의도적으로 던지는 예외이다. &lt;br /&gt;
이때는 체크 예외를 사용하는 것이 적절하다.    &lt;br /&gt;
비즈니스적인 의미가 있는 예외는 이에 대한 적절한 대웅이나 복구 작업이 필요하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예외처리의-전략&quot;&gt;예외처리의 전략&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;런타임 예외의 보편화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반적으로 체크 예외가 일반적인 예외를 다루고, 언체크 예외는 시스템장애나 프로그램상의 오류에 사용된다고 했다. &lt;br /&gt;
문제는 체크 예외는 복구할 가능성이 조금이라도 있는 예외적인 상황이기 때문에 자바는 이를 처리하는 catch 블록이나 &lt;br /&gt;
throws 선언을 강제하고 있다는 것이다.&lt;/p&gt;

&lt;p&gt;하지만 자바 엔터프라이즈 서버환경에서 수만은 사용자가 동시에 요청을 보내고 각 요청이 독립적인 작업으로 취급된다.    &lt;br /&gt;
하나의 요청을 처리하는 중에 예외가 발생했다면 해당 작업만 중지시키면 되지만,  &lt;br /&gt;
서버의 특정 계층에서 예외가 발생할 때 작업을 일시 중지하고 사용자와 바로 커뮤니케이션하면서 예외상활을 복구할 수 있는 방법이 없다.&lt;/p&gt;

&lt;p&gt;차라리 애플리케이션 차원에서 예외상황을 미리 파악하고, 예외가 발생하지 않도록 차단하는 것이 좋다. &lt;br /&gt;
자바의 환경이 서버로 이동하면서 체크 예외의 활용도와 가치는 점점 떨어지고 있다. &lt;br /&gt;
자칫하면 throws Exception으로 아무런 의미도 없는 메소드들을 낳을 뿐이다. &lt;br /&gt;
그래서 대응이 불가능한 체크 예외라면 빨리 런타임 예외로 전환해서 던지는 게 낫다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션 예외&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;시스템 또는 외부의 예외상황이 아니라 애플리케이션 자체의 로직에 의해 의도적으로 발생시키고, &lt;br /&gt;
반드시 catch 해서 무엇인가 조치를 취하도록 요구하는 예외도 있다. &lt;br /&gt;
이런 예외들을 일반적으로 애플이케이션의 예외라고 한다.&lt;/p&gt;

&lt;p&gt;예를들어, 사용자가 요청한 금액을 계좌에서 출금하는 기능을 가진 메서드를 구현한다고 생각해보자.&lt;br /&gt;
계좌에 남아있는 금액보다 더 큰 금액을 출금하려고 한다면 출금 작업은 중단되어야 한다. &lt;br /&gt;
이런 기능을 담은 메소드를 설계하는 방법 두 가지가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 정상적인 출금처리를 했을 경우와 잔고 부족이 발생했을 경우에 각각 다른 종류의 리턴 값을 돌려주는 것 &lt;br /&gt;
이렇게 리턴 값으로 결과를 확인하고 예외상황을 체크하면 불편한 점이 있다.&lt;/p&gt;

&lt;p&gt;우선 예외상황에 대한 리턴 값을 명확하게 코드화하고 잘 관리하지 않으면 혼란이 생길 수 있다. &lt;br /&gt;
사전에 상수로 정의해둔 표준 코드를 사용하지 않는다면 자칫 개발자 사이의 의사소통 문제로 인해 제대로 작동하지 않을 위험이 있다.&lt;/p&gt;

&lt;p&gt;또 한가지 문제는 조건문이 너무 자주 등장한다는 것이다. &lt;br /&gt;
코드는 지저분해지고 흐름을 파악하고 이해하기가 힘들어질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 정상적인 흐름을 따르는 코드는 두고, 잔고 부족과 같은 예외 상황에서는 비즈니스적인 의미를 띤 예외를 던지도록 만드는 것이다. &lt;br /&gt;
잔고 부족인 경우라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InsufficientBalanceException&lt;/code&gt; 등을 던진다.&lt;/p&gt;

&lt;p&gt;예외상황을 처리하는 catch 블록을 메소드 호출 직후에 둘 필요는 없다.   &lt;br /&gt;
정상적인 흐름을 따르지만 예외가 발생할 수 있는 코드를 try 블록 안에 깔끔하게 정리해두고   &lt;br /&gt;
예외상황 처리는 catch 블록에 모아둘 수 있기 떄문에 코드를 이해하기도 편하다.&lt;/p&gt;

&lt;p&gt;이때 사용하는 예외는 의도적으로 체크 예외로 만든다.  &lt;br /&gt;
그래서 개발자가 잊지 않고 자주 발생 가능한 예외상황에 대한 로직을 구현할 수 있도록   &lt;br /&gt;
강제해주는 게 좋다.&lt;/p&gt;

</description>
        <pubDate>Sat, 13 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-13/exception/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-13/exception/</guid>
      </item>
    
      <item>
        <title>Process &amp; Thread</title>
        <description>&lt;p&gt;프로세스와 스레드                    &lt;br /&gt;
멀티 스레드              &lt;br /&gt;
동기와 비동기의 차이                &lt;br /&gt;
synchronized &amp;amp; volatile&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;프로세스와-스레드&quot;&gt;프로세스와 스레드&lt;/h1&gt;

&lt;h3 id=&quot;프로세스&quot;&gt;프로세스&lt;/h3&gt;

&lt;p&gt;일반적으로 CPU에 의해 처리되는 사용자 프로그램, 시스템 프로그램 즉 실행중인 프로그램을 의미하며, 
작업(Job) 태스크(Task)라고도 한다.&lt;/p&gt;

&lt;p&gt;즉 프로세스는 운영체제로부터 자원을 할당받는 작업이 단위이다.&lt;/p&gt;

&lt;p&gt;프로그램에서 프로세스로 메모리에 올라올 때 운영체제로부터 프로세스를 운영하기 위해 &lt;br /&gt;
필요한 주소 공간, 메모리(Text, Data, Heap, Stack 공간)을 부여 받는다.&lt;/p&gt;

&lt;h3 id=&quot;스레드&quot;&gt;스레드&lt;/h3&gt;

&lt;p&gt;한 프로세스 내에서 동작되는 여러 실행의 흐름으로,       &lt;br /&gt;
프로세스 내의 주소 공간이나 자원들을 같은 프로세스 내의 스레드끼리 공유하며 실행된다.&lt;/p&gt;

&lt;p&gt;스레드는 프로세스 내에서 각각의 스택 공간을 제외한 나머지 공간과 시스템 자원을 공유한다. &lt;br /&gt;
프로세스를 이용하여 동시에 처리하던 일을 스레드로 구현할 경우 메모리 공간과 시스템 자원 소모도 현격히 줄어들게 된다.&lt;/p&gt;

&lt;p&gt;하나의 프로세스에서 여러 스레드가 존재하게 되니 스레드 간의 통신이 필요한 경우 별도의 자원을 이용하는 것이 아니라 &lt;br /&gt;
메모리 공간을 공유하므로 데이터 세그먼트, 즉 전역 변수를 이용하여 구현한다.&lt;/p&gt;

&lt;p&gt;그런데 전역 변수를 여러 스레드가 함께 사용하게 되면 충돌이 발생하게 되서 동기화 문제를 해결해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;스레드-사용-이유&quot;&gt;스레드 사용 이유&lt;/h3&gt;

&lt;p&gt;하나의 프로세스에 1 ~ N 개의 스레드가 생성된다.     &lt;br /&gt;
스레드는 가벼운 프로세스라고도 불리고 프로세스에서 만들어 사용하고 있는 메모리를 공유한다.&lt;/p&gt;

&lt;p&gt;멀티 프로세스로 실행되는 작업을 멀티 스레드로 실행하게 되면 프로세스를 생성하여 자원을 할당하는 과정도 줄어들 뿐더러    &lt;br /&gt;
프로세스를 컨텍스트 스위칭(Context Switching)하는 것 보다 오버헤드를 더 줄일 수 있게 된다.&lt;/p&gt;

&lt;p&gt;뿐만 아니라 프로세스간의 통신 비용보다 하나의 프로세스 내에서 여러 스레드간의 통신 비용이 훨씬 적으므로       &lt;br /&gt;
작업들 간의 통신 부담을 줄일 수 있게 된다.&lt;/p&gt;

&lt;h3 id=&quot;프로세스와-스레드의-차이&quot;&gt;프로세스와 스레드의 차이&lt;/h3&gt;

&lt;p&gt;프로세스와 스레드의 근본적인 차이는 프로세스는 운영체제로부터 독립된 시간, 공간 자원을 할당 받아 실행된다는 점이고,     &lt;br /&gt;
스레드는 한 프로세스 내에서 많은 자원을 공유하면서 병렬적으로(Concurrently) 실행된다는 것이다.      &lt;br /&gt;
다른 차이는 모두 이 근본적인 차이에서 비롯된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스 / 스레드&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자원 할당 여부 : 실행 시마다 새로운 자원을 할당	/ 자신을 실행한 프로세스의 자원을 공유&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자원 공유 여부 : 일반적으로 자원을 공유하지 않는다. 같은 프로그램의 프로세스일 경우 코드를 공유하기는 한다. /      &lt;br /&gt;
같은 프로세스 내 스레드들은 스택을 제외한 나머지 세 영역을 공유한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;독립성 여부 : 일반적으로 독립적 / 일반적으로 프로세스의 하위 집합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주소 소유 여부 : 별개의 주소 공간을 갖는다 / 주소 공간을 공유한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;통신 여부 : 오직 시스템이 제공하는 IPC 방법으로만 통신 / 공유 변수 수정 등 자유롭게 다른 스레드와 소통&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context Switch :  일반적으로 프로세스보다 스레드의 Context Switching이 더 빠를 수 있다.   &lt;br /&gt;
하지만 상황에 따라 그렇지 않을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;멀티-스레드&quot;&gt;멀티 스레드&lt;/h1&gt;

&lt;p&gt;멀티 스레드는 하나의 프로세스 내에서 둘 이상의 스레드가 동시에 작업을 수행하는 것을 의미한다.        &lt;br /&gt;
멀티 프로세스(multi process)는 여러 개의 CPU를 사용하여 여러 프로세스를 동시에 수행하는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;멀티 스레드와 멀티 프로세스 모두 여러 흐름을 동시에 수행한다는 공통점이 있다.          &lt;br /&gt;
그러나 멀티 프로세스는 각 프로세스가 독립적인 메모리를 가지고 별도로 실행되지만,          &lt;br /&gt;
멀티 스레드는 각 스레드가 자신이 속한 프로세스의 메모리를 공유한다는 점이 다릅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문맥 교환(context switching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;컴퓨터에서 동시에 처리할 수 있는 최대 작업 수는 CPU의 코어(core) 수와 같습니다.             &lt;br /&gt;
만약 CPU의 코어 수보다 더 많은 스레드가 실행되면,    &lt;br /&gt;
각 코어가 정해진 시간 동안 여러 작업을 번갈아가며 수행하게 됩니다.&lt;/p&gt;

&lt;p&gt;이때 각 스레드가 서로 교체될 때 스레드 간의 문맥 교환(context switching)이라는 것이 발생합니다.    &lt;br /&gt;
문맥 교환이란 현재까지의 작업 상태나 다음 작업에 필요한 각종 데이터를 저장하고 읽어오는 작업을 가리킵니다.&lt;/p&gt;

&lt;p&gt;이러한 문맥 교환에 걸리는 시간이 커지면 커질수록, 멀티 스레딩의 효율은 저하됩니다.    &lt;br /&gt;
오히려 많은 양의 단순한 계산은 싱글 스레드로 동작하는 것이 더 효율적일 수 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 많은 수의 스레드를 실행하는 것이 언제나 좋은 성능을 보이는 것은 아니라는 점을 유의해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;동기와-비동기&quot;&gt;동기와 비동기&lt;/h1&gt;

&lt;h3 id=&quot;동기-synchronous&quot;&gt;동기 (synchronous)&lt;/h3&gt;

&lt;p&gt;동시에 일어난다는 뜻으로 요청과 그 결과가 동시에 일어난다는 것이다. &lt;br /&gt;
시간이 얼마가 걸리던지 요청한 자리에서 결과가 주어져야 한다.&lt;/p&gt;

&lt;p&gt;요청한 결과가 한 자리에서 동시에 일어난다. 
= A노드와 B노드 사이의 작업 처리 단위(transaction)을 동시에 맞춘다.&lt;/p&gt;

&lt;p&gt;예를들어,          &lt;br /&gt;
어떤 객체 또는 함수 내부에서 다른 함수를 호출했을 때        &lt;br /&gt;
이 함수의 결과를 호출한 쪽에서 처리하면 동기입니다.&lt;/p&gt;

&lt;p&gt;일반적으로 싱글 스레드를 사용한 처리방식이 이에 해당한다.&lt;/p&gt;

&lt;h3 id=&quot;비동기-asynchronous&quot;&gt;비동기 (Asynchronous)&lt;/h3&gt;

&lt;p&gt;동시에 일어나지 않는다를 의미한다. 요청과 결과가 동시에 일어나지 않는다.&lt;/p&gt;

&lt;p&gt;요청한 그 자리에서 결과가 주어지지 않음 &lt;br /&gt;
= 노드 사이의 작업 처리 단위를 동시에 맞추지 않아도 된다.&lt;/p&gt;

&lt;p&gt;예를들어,         &lt;br /&gt;
어떤 객체 또는 함수 내부에서 다른 함수를 호출했을 때      &lt;br /&gt;
이 함수의 결과를 호출한 쪽에서 처리하지 않으면 비동기입니다.&lt;/p&gt;

&lt;h3 id=&quot;동기와-비동기의-차이&quot;&gt;동기와 비동기의 차이&lt;/h3&gt;

&lt;p&gt;동기방식은 매우 설계가 간단하고 직관적이지만   &lt;br /&gt;
결과가 주어질 때까지 아무것도 못하고 대기해야 한다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;비동기방식은 좀 더 복잡하지만 결과가 주어지는 시간이 길어져도 그 시간 동안 다른 작업을 할 수 있어서 
좀 더 효율적으로 자원을 사용할 수 있는 장점이 있다.&lt;/p&gt;

&lt;p&gt;작업 요청한 스레드가 결과를 받을 때까지 멈추느냐 아니냐의 차이가 있다.    &lt;br /&gt;
단, 싱글 스레드의 경우 작업을 요청한 스레드에서 처리해야 하므로 스레드가 멈추지는 않는다.&lt;/p&gt;

&lt;h3 id=&quot;블로킹-blocking&quot;&gt;블로킹 (Blocking)&lt;/h3&gt;

&lt;p&gt;네트워크 통신에서 요청이 발생하고 완료될 때까지 모든 일을 중단한 상태로 &lt;br /&gt;
대기해야 하는 것을 블로킹 방식이라고 한다.&lt;/p&gt;

&lt;p&gt;자신의 수행결과가 끝날 때까지 제어권을 갖고 있는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;작업이 끝날 때까지 대기했다가 결과를 반환 받아서 처리한다.&lt;/p&gt;

&lt;h3 id=&quot;논블로킹-non-blocking&quot;&gt;논블로킹 (Non-blocking)&lt;/h3&gt;

&lt;p&gt;자신이 호출되었을 때 제어권을 바로 자신을 호출한 쪽으로 넘겨&lt;br /&gt;
자신을 호출한 쪽에서 다른 일을 할 수 있도록 하는 것이다.&lt;/p&gt;

&lt;p&gt;예를들어, setTimeout(hyerin, 300) 함수를 호출했을 떄 &lt;br /&gt;
3초 후에 hyerin() 함수가 호출되는데 제어권을 반납했기 떄문에  &lt;br /&gt;
3초 동안 다른 일을 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;네트워크 통신이 완료될 때까지 기다리지 않고 다른 작업을 수행할 수 있어      &lt;br /&gt;
경우에 따라 효율이나 반응속도가 뛰어나다.       &lt;br /&gt;
반면 설계가 복잡해진다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;synchronized--volatile&quot;&gt;synchronized &amp;amp; volatile&lt;/h1&gt;

&lt;h3 id=&quot;synchronized&quot;&gt;synchronized&lt;/h3&gt;

&lt;p&gt;하나의 객체에 여러 객체가 동시에 접근하여 처리하는 상황이 발생할 때 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성자의 식별자로는 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;하나의 객체를 여러 스레드에서 동시에 사용할 경우&lt;/li&gt;
  &lt;li&gt;static으로 선언한 객테를 여러 스레드에서 동시에 사용할 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jvm-내에서-synchronization은-어떻게-동작할까&quot;&gt;JVM 내에서 synchronization은 어떻게 동작할까?&lt;/h3&gt;

&lt;p&gt;자바의 HotSpot VM은 ‘자바 모니터’를 제공함으로써 스레드들이 ‘상호 배제 프로토콜’에 참여할 수 있도록 돕는다.&lt;/p&gt;

&lt;p&gt;자바 모니터는 잠긴 상태(lock)나 풀림(unlocked) 중 하나이며, 동일한 모니터에 진입한 여러 스레드들 중에서 &lt;br /&gt;
한 시점에서 단 하나의 스레드만 모니터를 가질 수 있다.&lt;/p&gt;

&lt;p&gt;모니터를 가진 스레드만 모니터에 의해서 보호되는 영역에 들어가서 작업을 할 수 있다.     &lt;br /&gt;
여기서 보호된 영역이란 앞서 설명한 synchronized 로 감싸진 블록들을 의미한다.&lt;/p&gt;

&lt;p&gt;모니터를 보유한 스레드가 보호 영역에서의 작업을 마치면, 모니터는 다른 대기중인 스레드에게 넘어간다.&lt;/p&gt;

&lt;h3 id=&quot;volatile&quot;&gt;volatile&lt;/h3&gt;

&lt;p&gt;volatile 키워드는 java 변수를 메인 메모리에 저장하겠다는 것을 명시하는 것이다. &lt;br /&gt;
매번 변수의 값을 read할 때마다 CPU cache에 저장한 값이 아닌 메인 메모리에서 읽는 것이다. &lt;br /&gt;
또한 write 할 때도 메인 메모리에 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. 왜 volatile 키워드가 필요할까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 변수를 사용하고 있지 않은 멀티 스레드 어플리케이션에서는 Tack를 수행하는 동안 &lt;br /&gt;
성능 향상을 위해 메인 메모리에서 읽은 변수 값을 CPU cache에 저장하게 된다.&lt;/p&gt;

&lt;p&gt;만약에 멀티 스레드 환경이라면 스레드가 변수 값을 읽어올 때 &lt;br /&gt;
각각의 CPU cache에 저장된 값이 다르기 때문에 변수 값 불일치 문제가 발생하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 키워드를 추가하게 되면 메인 메모리에 저장하고 읽어오기 때문에       &lt;br /&gt;
변수 값 불일치 문제를 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. 언제 volatile이 적합할까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;멀티 스레드 환경에서 하나의 스레드만이 read&amp;amp;write하고 나머지 스레드가 read하는 상황에서 &lt;br /&gt;
가장 최신의 값을 보장해야 할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;여러 스레드가 write 하는 상황에서는   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 를 통해 변수 read&amp;amp;write의 원자성을 보장해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q. volatile는 성능에 어떤 영향이 있을까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;는 변수의 read와 write를 메인 메모리에서 진행하게 된다.     &lt;br /&gt;
CPU cache보다 메인 메모리가 비용이 더 크기 때문에     &lt;br /&gt;
변수 값 일치를 보장해야 하는 경우에만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;를 사용하는 것이 좋다.&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-12/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80%EC%8A%A4%EB%A0%88%EB%93%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-12/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80%EC%8A%A4%EB%A0%88%EB%93%9C/</guid>
      </item>
    
      <item>
        <title>자바 객체지향의 원리와 이해 (3)</title>
        <description>&lt;p&gt;Ioc/DI &lt;br /&gt;
AOP&lt;br /&gt;
PSA&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;iocdi--제어의-역전의존성-주입&quot;&gt;Ioc/DI : 제어의 역전/의존성 주입&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;의존성은 new 이다.&lt;/li&gt;
  &lt;li&gt;전체가 부분에 의존한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자동차가 생성되고 내부적으로 타이어를 생산한다고 가정하자.&lt;/p&gt;

&lt;p&gt;자동차 클래스 내부에 Tire 속성이 있다.    &lt;br /&gt;
자동차 클래스의 생성자에서 타이어를 생산한다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Tire()&lt;/code&gt; 에서 타이어를 생산하는 new 부분에서 의존 관계가 일어나고 있다.&lt;/p&gt;

&lt;p&gt;결론은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자동차는 타이어에 의존한다.&lt;/li&gt;
  &lt;li&gt;운전자는 자동차를 사용한다.&lt;/li&gt;
  &lt;li&gt;운전자는 자동차에 의존한다고 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링 없이 의존성 주입하기 1 - 생성자를 통한 주입&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;운전자가 자동차를 생산하면서 타이어를 장창한다고 가정하자.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car car = new Car(tire);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;주입이란, 외부에서라는 말을 내포하고 있다.  &lt;br /&gt;
외부에서 생산된 타이어를 자동차에 장착하는 작업이 주입이다. &lt;br /&gt;
앞서 Car 객체가 Tire를 직접 생산하는 것은          &lt;br /&gt;
Tire에 대한 의존성을 자체적으로 해결하는 방식이었다.&lt;/p&gt;

&lt;p&gt;이번에는 외부에서 생산된 tire 객체를 자동차 생성자의 인자로 주입(장착)하는 형태로 구현해보자. &lt;br /&gt;
달라지는 것은 자동차의 생성자에 인자가 생기는 것이다.&lt;/p&gt;

&lt;p&gt;변경된 코드에서의 장점은   &lt;br /&gt;
기존에는 Car가 구체적으로 한국 타이어를 생산할지 미국 타이어를 생산할지 결정했다. &lt;br /&gt;
그러면 코드는 유연성이 떨어진다.&lt;/p&gt;

&lt;p&gt;Car는 한국 타이어와 미국 타이어에 대해 정확히 알고 있어야만 그에 해당하는 &lt;br /&gt;
객체를 생성할 구 있었다.&lt;/p&gt;

&lt;p&gt;의존성 주입을 적용할 경우, 그저 Tire 인터페이스를 구현한 어떤 객체가 들어오면 정상적으로 작동된다. &lt;br /&gt;
의존성을 주입할 경우 확장성도 좋아지는데, Car.java 코드를 변경할 필요도 없어진다.&lt;/p&gt;

&lt;p&gt;실제 제품화하게 되면 더 많은 코드를 재배포할 필요가 없도록 구성해야 코드 재컴파일과 재배포에 대한 부담을 줄일 수 있다. &lt;br /&gt;
이것은 인터페이스를 구현(준수)했기에 얻는 이점이라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;표준화했다고 이해하면 될것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링 없이 의존성 주입하기2 - 속성을 통한 의존성 주입&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바로 표현 - 속성 접근자 메서드 사용&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KoreaTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성자를 통해 의존성을 주입하는 것은 교체의 방법이 없다. &lt;br /&gt;
이러한 문제점을 해결하기 위해 속성을 통한 의존성 주입이 필요하다.&lt;/p&gt;

&lt;p&gt;그러나 최근 속성을 통한 의존성 주입보다 생성자를 통한 의존성 주입을 선호하는 사람들이 많은데,  &lt;br /&gt;
이는 프로그램에서는 한번 주입된 의존성을 계속 사용하는 경우가 더 일반적이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링을 통한 의존성 주입 - XML 파일 사용&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 시나리오를 갖는다고 가정하자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;운전자가 종합 쇼핑몰에서 타이어를 구매한다.&lt;/li&gt;
  &lt;li&gt;운전자가 종합 쇼핑몰에서 자동차를 구매한다.&lt;/li&gt;
  &lt;li&gt;운전자가 자동차에 타이어를 장착한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링을 통한 의존성 주입은 생성자를 통한 의존성 주입과 속성을 통한 의존성 주입을 모두 지원하는데 &lt;br /&gt;
속성을 통한 의존성 주입만 살펴보자.&lt;/p&gt;

&lt;p&gt;스프링을 도입해서 달라지는 것은 Driver.java 클래스와 스프링 설정 파일 하나를 추가해 주는 것 뿐이다.&lt;/p&gt;

&lt;p&gt;종합 쇼핑몰의 역할이 스프링 프레임워크라고 생각하면 된다.     &lt;br /&gt;
그래서 Driver.java 에 상품을 구매할 종합 쇼핑몰에 대한 정보가 필요한 것이다.&lt;/p&gt;

&lt;p&gt;XML 파일에 상품을 등록해놓는데.  &lt;br /&gt;
상품을 등록할 때 bean 태그를 이용해 등록한다.&lt;/p&gt;

&lt;p&gt;각 상품을 구분하기 위한 id 속성과 그 상품을 어떤 클래스를 통해      &lt;br /&gt;
생산(인스턴스화) 해야 할지 나타내는 class 속성을 함께 지정하면 된다.&lt;/p&gt;

&lt;p&gt;KoreaTire.java가 XML 파일에서 id=tire인 bean 태그와 연결돼 있고,&lt;/p&gt;

&lt;p&gt;Driver.java 의 main() 메서드에서 아래 코드로 연결돼 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tire&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 아래와 같이 해석된다.  &lt;br /&gt;
“KoreaTire라고 하는 상품이 tire라는 이름으로 진열돼 있고, 구매(getBean)할 수 있다.”&lt;/p&gt;

&lt;p&gt;스프링을 도입해서 얻는 이득은 무엇일까?        &lt;br /&gt;
가장 큰 이득은 자동차의 타이어 브랜드를 변경할 때      &lt;br /&gt;
그 무엇도 재컴파일/재배포하지 않아도 XML 파일만 수정하면 프로그램의 실행 결과를 바꿀 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링을 통한 의존성 주입 - 스프링 설정 파일(XML)에서 속성 주입&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XML 파일에 property 속성을 사용해보자. &lt;br /&gt;
자바에서 접근자 및 설정자 메서드를 속성 메서드라고 하는데 영어로 속성은 property다. &lt;br /&gt;
결국 car.setTire(tire)라고 하던 부분을 XML 파일의 property 태그를 이용해 대체하는 것이다.&lt;/p&gt;

&lt;p&gt;그래서 Driver.java 에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Car car = context.getBean(&quot;car&quot;, Car.class);&lt;/code&gt; 코드만 남는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링을 통한 의존성 주입 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 를 통한 속성 주입&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;반드시 설정자 메서드를 통해서 Tire 값을 주입해야 하는 걸까?   &lt;br /&gt;
스프링의 속성 주입 방법 가운데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 이용하는 방법을 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;의 의미를 이해해보자.  &lt;br /&gt;
이것은 스프링 설정 파일을 보고 자동으로 속성의 설정자 메서드에 해당하는 &lt;br /&gt;
역할을 해주겠다는 의미이다.&lt;/p&gt;

&lt;p&gt;이렇게 구현하면 XML 설정 파일에서 property 태그가 필요없다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 통해 자동으로 엮어줄 수 있기(의존성 주입) 때문이다.&lt;/p&gt;

&lt;p&gt;(1) 그렇가면 AmericaTire로 변경해서 사용하려면 어떻게 해야할까?  &lt;br /&gt;
bean 태그의 class 속성을 AmericaTire로 변경한다.&lt;/p&gt;

&lt;p&gt;(2) KoreaTire 부분을 완전히 삭제하고, AmaricaTire의 bean 태그에서 id를 삭제하면 어떻게 될까?  &lt;br /&gt;
정상적으로 구동된다.&lt;/p&gt;

&lt;p&gt;빈의 id 속성이 없는데 어떻게 매칭된걸까?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;는 type 기준 매칭이 우선되기 때문이다.     &lt;br /&gt;
만약 같은 타입으로 구현한 클래스가 여러 개 있다면 그때 빈 태그의 id로 구분하여 매칭한다.           &lt;br /&gt;
type을 구현한 빈이 있고 하나라면 그 유일한 빈을 객체에 할당한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링을 통한 의존성 주입 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;를 통한 속성 주입&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt; 는 자바 표준 어노테이션이다. &lt;br /&gt;
매칭 우선순위는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 다르게 id가 더 높다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;마무리&lt;/strong&gt;   &lt;br /&gt;
변수에 값을 할당하는 모든 곳에 의존 관계가 생긴다. &lt;br /&gt;
의존 대상이 내부에 있을 수도, 외부에 있을 수도 있다. &lt;br /&gt;
DI는 외부에 있는 의존 대상을 주입하는 것을 말한다.&lt;/p&gt;

&lt;p&gt;의존 대상을 구현하고 배치할 때 SOLID 와 응집도는 높이고 결합도는 낮추라는 기본 원칙에 충실해야 한다. &lt;br /&gt;
그래야 프로젝트의 구현과 유지보수가 수월해진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;aop---aspect-관점-핵심-관심사-횡단-관심사&quot;&gt;AOP - Aspect? 관점? 핵심 관심사? 횡단 관심사?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-02-14/spring-AOP/&quot;&gt;AOP 글 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;psa-potable-service-abstraction-일관성있는-서비스-추상화&quot;&gt;PSA (Potable Service Abstraction) 일관성있는 서비스 추상화&lt;/h1&gt;

&lt;p&gt;PSA는 일관성 있는 추상화이다.&lt;/p&gt;

&lt;p&gt;서비스 추상화의 예로 JDBC를 들 수 있다. JDBC라고 하는 표준 스펙이 있기 때문에 오라클을 사용하든, MySQL을 사용하든,     &lt;br /&gt;
Connection, Statement, ResultSet을 이용해 공통된 방식으로 코드를 작성할 수 있다.   &lt;br /&gt;
데이터베이스 종류에 관계없이 같은 방식으로 제어할 수 있는 이유는 어댑터 패턴을 활용했기 때문이다.   &lt;br /&gt;
이처럼 어댑터 패턴을 적용해 같은 일을 하는 다수의 기술을 공통의 인터페이스로 제어할 수 있게한 것을 서비스 추상화라고 한다.&lt;/p&gt;

&lt;p&gt;스프링은 ORM, 캐시, 트랜잭션 등 다양한 기술에 대한 PSA를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%82%BC%EA%B0%81%ED%98%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-10/%EC%8A%A4%ED%94%84%EB%A7%81%EC%82%BC%EA%B0%81%ED%98%95/</guid>
      </item>
    
      <item>
        <title>Java8</title>
        <description>&lt;h1 id=&quot;lambda&quot;&gt;Lambda&lt;/h1&gt;

&lt;p&gt;자바 8은 많은 변화를 맞이했다. &lt;br /&gt;
특히 함수형 프로그래밍 지원을 위한 람다의 도입이 두드러진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;람다가-도입된-이유&quot;&gt;람다가 도입된 이유&lt;/h2&gt;

&lt;p&gt;핫해진 용어 가운데 빅데이터가 있다.  &lt;br /&gt;
프로그래머들에게 빅데이터를 프로그램적으로 다룰 수 있는 방법이 필요해졌다.     &lt;br /&gt;
그래서 멀티 코어를 활용한 분산 처리 즉, 병렬화 기술이 필요해졌다.&lt;/p&gt;

&lt;p&gt;하나의 CPU안에 다수의 코어를 삽입하는 멀티 코어 프로세서들이 등장하면서 &lt;br /&gt;
프로그래머들에게 병렬화 프로그래밍에 대한 필요성이 생기기 시작했다.&lt;/p&gt;

&lt;p&gt;자바 8에서는 병렬화를 위해 컬렉션(배열, List, Map, Set)을 강화했고, &lt;br /&gt;
이러한 컬렉션을 더 효율적으로 사용하기 위해 스트림(Stream)을 강화했다. &lt;br /&gt;
또 스트림을 효율적으로 사용하기 위해 함수형 프로그래밍이, &lt;br /&gt;
다시 함수형 프로그래밍을 위해 람다가, 람다를 위해 인터페이스의 변화가 수반됐다.&lt;/p&gt;

&lt;p&gt;람다를 지원하기 위한 인터페이스를 함수형 인터페이스라고 한다.&lt;/p&gt;

&lt;p&gt;(위 설명에서 ‘~를 위해 ~가 생겼다.’ 가 무조건 그렇다는 것은 아니다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lambda-람다란-무엇인가&quot;&gt;Lambda 람다란 무엇인가?&lt;/h2&gt;

&lt;p&gt;코드 블럭을 변수처럼 사용할 수 있다는 것이다. &lt;br /&gt;
별도의 클래스 정의 없이 코드 블록인 메서드를 사용하고자 할 때 많이 사용되던 익명 객체를 사용하는 방법이다. &lt;br /&gt;
자바 8에서는 익명 객체조차 없이 바로 코드 블록만 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;myTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Lambda!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;       
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기존 방식으로 Runnable 인터페이스 구현체를 사용하는 코드이다. &lt;br /&gt;
main 메서드에서 MyTest 클래스 객체를 생성하여 run() 메서드를 호출한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기존 방식의 코드 블록을 사용해보자. - 익명 객체 생성&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Lambda!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별도의 클래스 정의 없이 코드 블록인 메서드를 사용하고자 할 때 많이 사용되던 익명 객체를 사용하는 방법이다.  &lt;br /&gt;
자바 8에서는 더 나은 방법을 사용할 수 있다. &lt;br /&gt;
즉, 익명 객체조차 없이 바로 코드 블록만 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;새로운 방식의 코드 블록 사용 - lambda&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello Lambda!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Runnable 타입으로 참조 변수 r을 만들고 있으니 new Runnable()은 컴파일러가 알아낼 수 있다. &lt;br /&gt;
굳이 코드로 작성할 필요가 없다.&lt;/p&gt;

&lt;p&gt;마지막으로 화살표 기호 -&amp;gt; &lt;br /&gt;
이는 람다의 구조가 다음과 같기 때문에 추가되었다.&lt;/p&gt;

&lt;p&gt;(인자목록) -&amp;gt; { 로직 }&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;함수형-인터페이스&quot;&gt;함수형 인터페이스&lt;/h2&gt;
&lt;p&gt;추상 메서드를 하나만 갖는 인터페이스를 자바 8부터 함수형 인터페이스라고 한다. &lt;br /&gt;
함수형 인터페이만 람다식으로 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;MyFunctionalInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;MyFunctionalInterface.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFunctionalInterface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt; 어노테이션을 붙이는 것은 옵션이다. &lt;br /&gt;
이 어노테이션이 붙은 경우 컴파일러는 &lt;br /&gt;
인터페이스가 함수형 인터페이스의 조건에 맞는지 검사한다. &lt;br /&gt;
즉, 단 하나의 추상 메서드만 갖고 있는지 확인한다.&lt;/p&gt;

&lt;p&gt;가장 간단하게 구현하는 방법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;MyFunctionalInterface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mfi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메서드-호출-인자로-람다-사용&quot;&gt;메서드 호출 인자로 람다 사용&lt;/h2&gt;

&lt;p&gt;람다식을 변수에 저장하는 것이 가능하다면 당연히 메서드의 인자로도 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;람다식을 단 한번만 사용한다면 굳이 변수에 할당할 필요도 없이 &lt;br /&gt;
인자로 넘겨주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;doIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메서드-반환값으로-람다-사용&quot;&gt;메서드 반환값으로 람다 사용&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFunctionalInterface&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reutrn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;컬렉션-스트림에서-람다-사용&quot;&gt;컬렉션 스트림에서 람다 사용&lt;/h2&gt;

&lt;p&gt;람다는 다양한 용도가 있지만 그 중에서도 컬렉션 스트림을 위한 기능에 크게 초점이 맞춰져 있다. &lt;br /&gt;
컬렉션 스트림과 람다를 통해 더 적은 코드로 더 안정적인 코드를 만들어 보자.&lt;/p&gt;

&lt;p&gt;예제 : 컬렉션 스트림을 활용해서, age 배열에서 20세 미만인 사람들을 거르는 상황을 구현해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fomat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age %d ! Can't enter\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제에서 기존 for, if를 사용하는 것보다 좋아진 점은 How가 아닌 What을 지정했다는 것이다.&lt;/p&gt;

&lt;p&gt;함수형 프로그래밍의 장점인 선언적 프로그래밍을 활용하는 것이다.   &lt;br /&gt;
‘어떻게 하라’를 명령하는게 아니라 ‘무엇을 원한다’라고 선언하는 것과 같다.&lt;/p&gt;

&lt;p&gt;또한 스트림은 메서드 체인 패턴을 이용해 최종 연산이 아닌 모든 중간 연산은 다시 스트림으로 반환해 &lt;br /&gt;
코드를 간략하게 작성할 수 있게 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메서드-레퍼런스와-생성자-레퍼런스&quot;&gt;메서드 레퍼런스와 생성자 레퍼런스&lt;/h2&gt;

&lt;p&gt;위 스트림, 람다 예제에서 아래 코드로도 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드를 람다식으로 표현하면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 람다식은 인자를 아무런 가공없이 그대로 출력한다. &lt;br /&gt;
이런 코드를 사용할 때 메서드 레퍼런스라고 하는 간략한 형식을 사용할 수 있다.   &lt;br /&gt;
메서드 레퍼런스에는 다음과 같은 세 가지 유형이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스::인스턴스메서드  &lt;br /&gt;
람다식의 인자는 인스턴스 메서드의 인자가 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스::정적메서드 &lt;br /&gt;
람다식의 인자는 정적 메서드의 인자가 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스::인스턴스메서드 &lt;br /&gt;
람다의 첫 번째 인자는 인스턴스가 되고      &lt;br /&gt;
그 다음 인자(들)은 인스턴스 메서드의 인자(들)가 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마지막으로 메서드 레퍼런스와 유사한 생성자 레퍼런스가 있다. &lt;br /&gt;
&lt;strong&gt;클래스::new&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예제를 통해 사용법을 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;B016&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;B016:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ERROR &lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;B016:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫 번째 코드에서 ERROR가 발생하는 이유는        &lt;br /&gt;
생성자 레퍼런스로 생성한 것은 B016 클래스의 객체가 아니라       &lt;br /&gt;
함수형 인터페이스 구현 객체이기 때문이다.&lt;/p&gt;

&lt;p&gt;기본 생성자(인자가 없는 생성자)이기에            &lt;br /&gt;
이를 만족하는 Supplier 함수형 인터페이스를 사용해 생성자 자체에 대한 참조가 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인터페이스의-디폴트-메서드와-정적-메서드&quot;&gt;인터페이스의 디폴트 메서드와 정적 메서드&lt;/h2&gt;

&lt;p&gt;자바 8 이전에는 인터페이스가 가질 수 있는 멤버는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정적 상수&lt;/li&gt;
  &lt;li&gt;추상 인스턴스 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데 자바 8에서는 인터페이스에 큰 변화가 있었다. &lt;br /&gt;
자바 8에서 인터페이스가 가질 수 있는 멤버는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정적 상수&lt;/li&gt;
  &lt;li&gt;추상 인스턴스 메서드&lt;/li&gt;
  &lt;li&gt;구체 인스턴스 메서드 - 디폴트 메서드&lt;/li&gt;
  &lt;li&gt;(구체) 정적 메서드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 인터페이스도 몸체를 가진 인스턴스 메서드를 가질 수 있게 됐다. &lt;br /&gt;
이를 디폴트 메서드라고 하고 default 키워드를 메서드 정의에 사용한다.&lt;/p&gt;

&lt;p&gt;또한, (구체) 정적 메서드를 가질 수 있게 되었고 static 키워드를 메서드 정의에 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자바 8에서 언어적으로 가장 큰 변화를 꼽으라면 바로 인터페이스의 스펙 변화를 꼽을 수 있다.&lt;/p&gt;

&lt;p&gt;이로 인해 람다가 가능해졌고, 연쇄적으로 더 강화된 컬렉션 API를 사용할 수 있게 됐을뿐만 아니라     &lt;br /&gt;
함수형 프로그래밍이 가능해졌기 때문이다.&lt;/p&gt;

&lt;p&gt;그럼 왜 인터페이스에 디폴트 메서드와 정적 메서드를 추가한걸까? &lt;br /&gt;
컬렉션 API를 강화하면서 컬렉션의 공통 조상인 Collection의 슈퍼 인터페이스인 스
Iterable 인터페이스에는 많은 변화가 필요했다.&lt;/p&gt;

&lt;p&gt;한 예로 내부 반복을 가능하게 하는 forEach의 도입이 있다.&lt;br /&gt;
그런데 인터페이스에 변화를 주게 되면,   &lt;br /&gt;
즉 새로운 추상 인스턴스 메서드를 추가하게 되면    &lt;br /&gt;
기존에 해당 인터페이스를 구현한 모든 사용자 정의 클래스는 이를 추가적으로 구현해야만 한다.&lt;/p&gt;

&lt;p&gt;이전 JDK를 기반으로 작성된 프로그램도 자바 8 JVM에서 구동될 수 있게     &lt;br /&gt;
디폴트 메서드라고 하는 새로운 개념을 인터페이스 스펙에 추가한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;stream&quot;&gt;Stream&lt;/h1&gt;

&lt;p&gt;간결하게 컬렉션의 데이터를 처리하는 기능이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Before      &lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;           
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;           
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stream-api--병렬-연산을-지원하는-스트림이라는-새로운-api&quot;&gt;Stream API : 병렬 연산을 지원하는 스트림이라는 새로운 API&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스크림이란 한번에 한개씩 만들어지는 연속적인 데이터 항목들의 모임이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스트림 파이프라인을 이용해서 입력부분을 여러 CPU 코어에 쉽게 할당할 수 있다.     &lt;br /&gt;
(Thread Safe한 병렬성을 얻을 수 있다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;parallel-stream&quot;&gt;Parallel Stream&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Stream을 병렬로 처리가능하도록 하는 기능이다.&lt;/li&gt;
  &lt;li&gt;여러 쓰레드에서 처리할 수 있도록 분할한 Stream 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shapes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;optional&quot;&gt;Optional&lt;/h1&gt;

&lt;p&gt;간단하게 아래와 같이 설명할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;값을 Optional&lt;T&gt;로 캡슐화하여 NullPointerException을 막는다.&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;값이 존재한다면 Optional 클래스는 값을 감싼다.&lt;/li&gt;
  &lt;li&gt;값이 없다면 Optional.empty 메서드로 Optional을 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;변수의 값이 null인지 아닌지 확인하는 것을 더 간결하게 구현하고자 &lt;br /&gt;
자바 8에서는 Optional 인터페이스가 추가되었다.&lt;/p&gt;

&lt;p&gt;JPA Repository의 findOne, findById 등 메소드의 리턴타입이     &lt;br /&gt;
엔터티 클래스이어도 되고, Optional&lt;엔터티클래스&gt; 이어도 된다.&lt;/엔터티클래스&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;리턴 값이 Student 인 경우에, 해당 학생이 존재하지 않을 경우에, null 이 리턴된다.&lt;/p&gt;

&lt;p&gt;리턴 값이 Optional&lt;Student&gt;인 경우에, 해당 학생이 존재하지 않을 경우에는,        
내부 값이 비어있는 Optional 객체가 리턴된다.        
내부 값이 비어 있는 경우에, Optional 객체의 ifPresent() 메소드는 false를 리턴한다.       
내부 값이 들어있는 경우에, Optional 객체의 get() 메소드는 그 값을 리턴한다.&lt;/Student&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional - 오라클 공식 문서 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findOne/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Music&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;musicService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Music&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;      
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 findById 메소드의 리턴 타입이 다음과 같았다면,          &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Music findById(Stirng id);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;액션 메소드의 마지막 return 문은 다음과 같아야 한다.          &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return result == null ? new Misuc() : result;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위와 같이, null 인지 아닌지 검사하는 코드를 간결하게 구현하기 위해서,            &lt;br /&gt;
Optional 을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JPA Repository&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최신 버전&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최신 버전&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;서비스나 컨트롤러에서&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 과거 코드&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최신 코드&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최신 코드 &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 과거&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최신&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// StudentService.java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studnetRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// StudentController.java &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;studnet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 10 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-10/java8/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-10/java8/</guid>
      </item>
    
      <item>
        <title>자바 객체지향의 원리와 이해 (2)</title>
        <description>&lt;p&gt;자바가 객체지향을 확장하기 위해 사용하는 키워드를 살펴보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;자바가-확장한-객체-지향&quot;&gt;자바가 확장한 객체 지향&lt;/h1&gt;

&lt;h3 id=&quot;abstract-키워드---추상-메서드와-추상-클래스&quot;&gt;abstract 키워드 - 추상 메서드와 추상 클래스&lt;/h3&gt;

&lt;p&gt;동물 클래스가 있고 동물의 울음소리를 출력하는 추상 메서드인 울어보세요() 라는 메소드가 있다고 하자.   &lt;br /&gt;
오리, 말, 고양이, 강아지 등의 동물들은 동물 클래스를 상속받아서 울음소리를 출력해야 한다.&lt;/p&gt;

&lt;p&gt;우리에게는 두 문제가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동물 객체는 어떻게 울어야 하지? / 누가 실수로 동물 객체를 만들면 어떡하지?&lt;/li&gt;
  &lt;li&gt;동물 참조 변수 배열로 모든 동물을 울게 하려면 하위 클래스에서 오버라이딩할 울어보세요() 메서드가 동물 클래스에 필요한데..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 두 문제가 추상 메서드와 추상 클래스로 한 번에 해결된다.  &lt;br /&gt;
그뿐만 아니라 만약 동물을 상속한 하위 클래스가 울어보세요() 메서드를 오버라이딩하지 않으면 &lt;br /&gt;
컴파일 시점에서 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;abstract 키워드에 대한 내용을 정리하면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;추상 클래스는 인스턴스, 즉 객체를 만들 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추상 메서드는 하위 클래스에게 메서드의 구현을 강제한다. &lt;strong&gt;오버라이딩 강제&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추상 메서드를 하나라도 포함하고 있는 클래스는 반드시 추상 클래스여야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;생성자&quot;&gt;생성자&lt;/h3&gt;

&lt;p&gt;클래스의 인스턴스, 즉 객체를 만들 때마다 new 키워드를 사용한다.    &lt;br /&gt;
우선 기억해야 할 자바의 특징이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개발자가 아무런 생성자도 만들지 않으면 자바는 인자가 없는 기본생성자를 자동으로 만들어준다.&lt;/li&gt;
  &lt;li&gt;인자가 있는 생성자를 하나라도 만들면 자바는 기본 생성자를 만들어주지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성자는 개발자가 필요한 만큼 오버로딩해서 만들 수 있다.        &lt;br /&gt;
또한, 우리는 생성자라고 줄여서 부르지만 정확히는 &lt;strong&gt;객체 생성자 메서드&lt;/strong&gt;임을 잊지 말자.&lt;/p&gt;

&lt;h3 id=&quot;클래스-생성-시의-실행-블록-static-블록&quot;&gt;클래스 생성 시의 실행 블록, static 블록&lt;/h3&gt;

&lt;p&gt;객체가 생성자가 있는 것이지 클래스 생성자는 없다.         &lt;br /&gt;
그러나 클래스가 스태틱 영역에 배치될 때 실행되는 코드 블록이 있다. 바로 static 블록이다.&lt;/p&gt;

&lt;p&gt;static 블록에서 사용할 수 있는 속성과 메서드는 당연하게 static 멤버 뿐이다.  &lt;br /&gt;
예전에 작성한 게시글을 보면 이해할 수 있다.  &lt;br /&gt;
T 메모리를 보면 객체 멤버에 접근할 방법이 없음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;객체 멤버는 클래스가 static 영역에 자리 잡은 후에 객체 생성자를 통해 힙에 생성된다.            &lt;br /&gt;
클래스의 static 블록이 실행되고 있을 때는 해당 클래스의 객체는 하나도 존재하지 않기 때문에               &lt;br /&gt;
static 블록에서는 객체 멤버에 접근할 수 없다.&lt;/p&gt;

&lt;p&gt;당연한 이야기지만 어떤 클래스에 static 블록이 있으면,     &lt;br /&gt;
그 블록은 객체가 생성될 때 실행되고 인스턴스 여러 개가 만들어져도 static 블록은 한 번만 실행된다.&lt;/p&gt;

&lt;p&gt;클래스가 제일 처음 사용될 떄는 다음 중 하나이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클래스의 정적 속성을 사용할 때&lt;/li&gt;
  &lt;li&gt;클래스의 정적 메서드를 사용할 때&lt;/li&gt;
  &lt;li&gt;클래스의 인스턴스를 최초로 만들 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;왜 프로그램이 실행될 때 바로 클래스들의 정보를 T 메모리의 static 영역에 로딩하지 않고 &lt;br /&gt;
해당 클래스가 처음 사용될 때 로딩할까?   &lt;br /&gt;
스태틱 영역도 메모리이기 때문이다. 메모리는 최대한 늦게 사용을 시작하고 최대한 빨리 반환하는 것이 정석이다.&lt;/p&gt;

&lt;h3 id=&quot;final-키워드&quot;&gt;final 키워드&lt;/h3&gt;

&lt;p&gt;final 키워드가 나타날 수 있는 곳은 딱 세 군데다. &lt;br /&gt;
클래스, 변수, 메서드&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;final과 클래스 &lt;br /&gt;
상속을 허락하지 않겠다는 의미다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;final과 변수 &lt;br /&gt;
변경 불가능한 상수이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;final과 메서드&lt;br /&gt;
재정의, 즉 오버라이딩을 금지한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;interface-키워드와-implements-키워드&quot;&gt;interface 키워드와 implements 키워드&lt;/h3&gt;

&lt;p&gt;인터페이스는 public 추상 메서드와 public 정적 상수만 가질 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 인터페이스는 메서드에 public과 abstract,     &lt;br /&gt;
속성에 public과 static, final을 붙이지 않아도 자동으로 자바가 알아서 붙여준다.&lt;/p&gt;

&lt;h3 id=&quot;this-키워드&quot;&gt;this 키워드&lt;/h3&gt;

&lt;p&gt;this는 객체가 자기 자신을 지칭할 때 쓰는 키워드다.     &lt;br /&gt;
아래 내용을 기억해두자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;지역 변수와 속성의 이름이 같은 경우 지역 변수가 우선이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체 변수와 이름이 같은 지역 변수가 있는 경우 객체 변수를 사용하려면 this를 접두사로 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정적 변수와 이름이 같은 지역 변수가 있는 경우 정적 변수를 사용하려면 클래스명을 접두사로 사용한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;super-키워드&quot;&gt;super 키워드&lt;/h3&gt;

&lt;p&gt;바로 위 상위 클래스의 인스턴스를 지칭하는 키워드다. &lt;br /&gt;
super 키워드로 바로 위의 상위 클래스 인스턴스에만 접근할 수 있다. &lt;br /&gt;
super.super 과 같은 형태는 안된다.&lt;/p&gt;

&lt;h3 id=&quot;클래스명객체메서드명&quot;&gt;클래스명.객체메서드명()&lt;/h3&gt;

&lt;p&gt;객체 메서드를 호출할 때 스택 정보를 보면   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;객체명.객체메서드명()&lt;/code&gt;이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스명.객체메서드명()&lt;/code&gt;임을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 객체가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a[100]&lt;/code&gt; 처럼 요소가 100개인 배열이라면 힙 영역에 생기는 객체는 100개가 되고 &lt;br /&gt;
메서드도 각 객체에 따라 100개가 만들어져야 한다. &lt;br /&gt;
하지만 메서드가 객체에 따라 달라지는 것은 아니다. 객테 멤버 메서드에서 사용하는 객체 멤버 속성의 값만 다를 뿐이다. &lt;br /&gt;
메서드를 힙 영역에 100개나 만드는 것은 심각한 메모리 낭비라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 JVM은 객체 멤버 메서드를 스태틱 영역에 단 하나만 보유한다. &lt;br /&gt;
그리고 눈에 보이지는 않지만 메서드를 호출할 때 객체 자신을 나타내는 this 객체 참조 변수를 넘긴다.&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-09/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9E%85%EB%AC%B8%EC%9D%84%EC%9C%84%ED%95%9C(2)/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-09/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9E%85%EB%AC%B8%EC%9D%84%EC%9C%84%ED%95%9C(2)/</guid>
      </item>
    
      <item>
        <title>자바 객체지향의 원리와 이해 (1)</title>
        <description>&lt;p&gt;OOP 특징&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;OOP란?&lt;/strong&gt;  &lt;br /&gt;
Object Oriented Programming = 객체 지향 프로그래밍&lt;/p&gt;

&lt;p&gt;컴퓨터 프로그램을 “객체(Object)”들의 모임으로 파악하고자 하는 프로그래밍의 패러다임 중에 하나이다.   &lt;br /&gt;
각 “객체(Object)” 들은 서로 메시지를 주고 받을 수 있으며 데이터를 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OOP 장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램을 유연하고 변경이 용이하게 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램의 개발과 보수를 간편하게 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;직관적인 코드 분석을 가능하게 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;자바와-절차적--구조적-프로그래밍&quot;&gt;자바와 절차적 / 구조적 프로그래밍&lt;/h1&gt;

&lt;p&gt;JVM의 존재와 역할을 아는 것이 자바 개발 환경을 이해하는 데 필수적이다. JVM은 이름 그대로 가상기계다.  &lt;br /&gt;
현실 세계에서 컴퓨터를 구동하기 위해서는 물리적 컴퓨터인 하드웨어와 운영체제, 그리고 그 위에서 구동될 소프트웨어가 필요하다. &lt;br /&gt;
거기에 더해 소프트웨어를 개발할 수 있는 개발 도구가 필요하다. 자바의 가상 세계는 다음과 같이 현실 세계를 모방하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;현실 세계 -&amp;gt; 가상 세계(자바 월드)&lt;/strong&gt;           &lt;br /&gt;
소프트웨어 개발 도구 -&amp;gt; JDK : 자바 개발 도구   &lt;br /&gt;
운영체제 -&amp;gt; JRE : 자바 실행 환경   &lt;br /&gt;
하드웨어(물리적 컴퓨터) -&amp;gt; JVM : 자바 가상 기계&lt;/p&gt;

&lt;p&gt;현실 세계에서 소프트웨어, 즉 프로그램은 개발자가 개발 도구를 이용해 개발하고 운영체제를 통해 물리적 컴퓨터인 하드웨어 상에서 구동된다. &lt;br /&gt;
자바가 만들어 주는 가상 세계도 이와 마찬가지다. &lt;br /&gt;
자바 개발 도구인 JDK를 이용해 개발된 프로그램은 JRE에 의해 가상의 컴퓨터인 JVM 상에서 구동된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/97141212-a88e3e80-17a1-11eb-8c3c-af6aeaffd489.png&quot; alt=&quot;스크린샷 2020-10-26 오후 3 40 42&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JDK는 자바 소스 컴파일러인 java.exe를 포함하고 있고 JRE는 자바 프로그램 실행기인 java.exe를 포함하고 있다.        &lt;br /&gt;
자바 개발자는 본인이 사용 중인 플랫폼에 설치된 JVM용으로 프로그램을 작성하고 배포하면       &lt;br /&gt;
각 플랫폼에 맞는 JVM이 중재자로서 각 플랫폼에서 프로그램을 구동하는 데 아무 문제가 없게끔 만들어주는 것이다.&lt;/p&gt;

&lt;p&gt;JDK: Java Development Kit / 자바 개발 도구  &lt;br /&gt;
JRE: Java Runtime Environment / 자바 실행 환경   &lt;br /&gt;
JVM: Java Virtual Machine / 자바 가상 기계&lt;/p&gt;

&lt;h3 id=&quot;main-메서드--메서드-스택-프레임&quot;&gt;main() 메서드 : 메서드 스택 프레임&lt;/h3&gt;
&lt;p&gt;main() 메서드는 프로그램이 실행되는 시작점이다. &lt;br /&gt;
main() 메서드가 실행될 때 메모리, 특히 T 메모리에서 어떤 일이 일어날까?&lt;/p&gt;

&lt;p&gt;JRE는 먼저 프로그램 안에 main() 메서드가 있는지 확인한다. &lt;br /&gt;
main() 메서드가 확인되면, JRE는 프로그램 실행을 위한 사전 준비에 착수한다.&lt;/p&gt;

&lt;p&gt;JVM에 전원을 넣어 부팅하는 것이다. &lt;br /&gt;
JVM은 부팅되면 목적 파일을 받아 실행시킨다.&lt;/p&gt;

&lt;p&gt;JVM이 맨 먼저 하는 일을 전처리 과정이라고 하는데, &lt;br /&gt;
모든 자바에 반드시 포함되는 패키지가 있다. &lt;strong&gt;java.lang&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JVM은 가장 먼저 java.lang 패키지를 T 메모리의 스태틱 영역에 가져다 놓는다.&lt;/p&gt;

&lt;p&gt;main() 메서드가 실행되기 전 JVM에서 수행하는 전처리 작업들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;java.lang 패키지 T 메모리의 스태틱 영역에 배치하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;import된 패키지를 T 메모리의 스태틱 영역에 배치하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램 상의 모든 클래스를 T 메모리의 스태틱 영역에 배치하기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;main() 메서드가 끝나면 JRE는 JVM을 종료하고 JRE 자체도 운영체제 상의 메모리에서 사라진다. &lt;br /&gt;
T 메모리도 사라지게 된다. &lt;br /&gt;
&lt;strong&gt;T 메모리 소멸, JVM 기동 중지, JRE가 사용했던 시스템 자원 운영체제에 반납&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;T 메모리의 힙 영역은 다음에 같이 공부하기로 하자.&lt;/p&gt;

&lt;h3 id=&quot;지역-변수와-메모리--스택-프레임이-갇혔어요-&quot;&gt;지역 변수와 메모리 : 스택 프레임이 갇혔어요 !&lt;/h3&gt;

&lt;p&gt;변수는 메모리에 있다. &lt;br /&gt;
지역 변수, 클래스 멤버 변수, 객체 멤버 변수로 다른 목적을 갖고 있는데 &lt;br /&gt;
스태틱 영역, 스택 영역, 힙 영역 각각 있는 곳도 다르다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클래스 멤버 변수&lt;/strong&gt;는 스태틱 영영에 한번 자리 잡으로 JVM이 종료될 때까지 고정된(static)&lt;br /&gt;
상태로 그 자리를 지킨다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체 멤버 변수&lt;/strong&gt;는 힙에서 일생을 보낸다. &lt;br /&gt;
객체와 함께 가비지 컬렉터라고 불리는 메모리 회수기에 의해 일생을 마치게 된다.&lt;/p&gt;

&lt;p&gt;한 가지 기억할 결론은 &lt;br /&gt;
외부 스택 프레임에서 내부 스택 프레임의 변수에 접근하는 것은 불가능하지만 &lt;br /&gt;
그 역은 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;멀티-스레드--멀티-프로세스의-이해&quot;&gt;멀티 스레드 / 멀티 프로세스의 이해&lt;/h3&gt;

&lt;p&gt;멀티 스레드의 T 메모리 모델은 스택 영역을 스레드 개수만큼 분할해서 쓰는 것이다.    &lt;br /&gt;
멀티 프로세스는 다수의 데이터 저장 영역, 즉 다수의 T 메모리를 갖는 구조이다.&lt;/p&gt;

&lt;p&gt;멀티 프로세스는 각 프로세스마다 각자의 T 메모리가 있어 &lt;br /&gt;
각자 고유의 공간이므로 서로 참조할 수 없다.   &lt;br /&gt;
멀티 스레드는 하나의 T 메모리만 사용하는데 스택 영역만 분할해서 사용하는 구조이다.   &lt;br /&gt;
그래서 하나의 스레드에서 다른 스레드의 스택 영역에는 접근할 수 없지만 스태틱 영역과 힙 영역은 공유해서 사용하는 구조다.&lt;/p&gt;

&lt;p&gt;따라서 멀티 프로세스 대비 멀티 스레드는 메모리를 적게 사용할 수 있는 구조이다.&lt;/p&gt;

&lt;h1 id=&quot;자바와-객체-지향&quot;&gt;자바와 객체 지향&lt;/h1&gt;

&lt;h3 id=&quot;객체-지향의-4대-특성---캡-상추다&quot;&gt;객체 지향의 4대 특성 - 캡! 상추다&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;캡슐화(Encapsulation) : 정보 은닉 (information hiding)&lt;/li&gt;
  &lt;li&gt;상속 : 재사용&lt;/li&gt;
  &lt;li&gt;추상화(Abstraction) : 모델링&lt;/li&gt;
  &lt;li&gt;다형성(Polymorphism) : 사용 편의&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추상화는-모델링이다&quot;&gt;추상화는 모델링이다.&lt;/h3&gt;
&lt;p&gt;추상화란 구체적인 것을 분해해서 관찰자가 관심 있는 특성만 가지고 재조합하는 것이라고 정리할 수 있다.&lt;/p&gt;

&lt;p&gt;중요한 부분만 적어보자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OOP의 추상화는 모델링이다.&lt;/li&gt;
  &lt;li&gt;클래스 : 객체 = 펭귄 : 뽀로로&lt;/li&gt;
  &lt;li&gt;클래스 설계에서 추상화가 사용된다.&lt;/li&gt;
  &lt;li&gt;클래스 설계를 위해서는 애플리케이션 경계부터 정해야 한다.&lt;/li&gt;
  &lt;li&gt;객체 지향에서 추상화의 결과는 클래스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;추상화를 넓게 본다면 아래의 내용도 포함이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;상속을 통한 추상화, 구체화&lt;/li&gt;
  &lt;li&gt;인터페이스를 통한 추상화&lt;/li&gt;
  &lt;li&gt;다형성을 통한 추상화&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;상속--재상용--확장&quot;&gt;상속 : 재상용 + 확장&lt;/h3&gt;
&lt;p&gt;상속 관계에서 반드시 만족해야 할 문장이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하위 클래스는 상위 클래스다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예를들어, 조직도와 분류도로 나눠 생각해보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;조직도&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아버지는 할아버지다??&lt;/li&gt;
  &lt;li&gt;아들은 아버지다??&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 예시는 이상하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;분류도&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;포유류는 동물이다.&lt;/li&gt;
  &lt;li&gt;고래는 포유류다.&lt;/li&gt;
  &lt;li&gt;고래는 동물이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자연스러운 예시이다.&lt;/p&gt;

&lt;p&gt;“하위 클래스는 상위 클래스다.” 라는 문장과 객체지향 설계 5원칙 중 LSP를 나타내는 말이다.&lt;/p&gt;

&lt;p&gt;마지막으로 정리해보자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체 지향의 상속은 상위 클래스의 특성을 재사용하는 것이다.&lt;/li&gt;
  &lt;li&gt;객체 지향의 상속은 상위 클래스의 특성을 확장하는 것이다.&lt;/li&gt;
  &lt;li&gt;객체 지향의 상속은 is a kind of 관계 (-는 -의 한 분류이다.)를 만족해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다중-상속과-자바&quot;&gt;다중 상속과 자바&lt;/h3&gt;
&lt;p&gt;왜 자바는 다중 상속을 지원하지 않을까?&lt;/p&gt;

&lt;p&gt;인어공주를 예로 들어보자. &lt;br /&gt;
인어는 사람과 물고기를 상속한다고 생각해보자.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;545&quot; alt=&quot;스크린샷 2020-06-09 오후 5 30 12&quot; src=&quot;https://user-images.githubusercontent.com/33855307/84125009-eb5fac00-aa76-11ea-9d1d-6648c1598e7d.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물고기와 사람은 수영을 할 수 있다.   &lt;br /&gt;
그런데 인어에게 “수영해!” 라고 했을 때, 인어는 팔과 다리로 헤엄칠까 아니면 지느러미로 헤엄칠까..?      &lt;br /&gt;
어떤 부모의 헤엄 방법을 사용해야 하는지 충돌이 일어났다.&lt;/p&gt;

&lt;p&gt;이와 같은 문제를 다중 상속의 다이아몬드 문제라고 한다.        &lt;br /&gt;
결국 자바는 인터페이스를 도입해 다중 상속의 득은 취하고 실은 과감히 버렸다.&lt;/p&gt;

&lt;h3 id=&quot;상속과-인터페이스&quot;&gt;상속과 인터페이스&lt;/h3&gt;
&lt;p&gt;그럼 인터페이스는 왜 다중 상속이 가능할까?        &lt;br /&gt;
인터페이스는 ‘무엇을 할 수 있는’ 이라는 표현의 형태로 만들어져 &lt;br /&gt;
기능에 대한 선언만 있기 때문에 다중 상속에서 전혀 문제될게 없다.&lt;/p&gt;

&lt;p&gt;그렇가면 아래의 문제들에는 어떤게 정답일까?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;상위 클래스는 하위 클래스에게 물려줄 특성이 많을수록 좋을까? 적을수록 좋을까?&lt;/li&gt;
  &lt;li&gt;인터페이스는 구현을 강제할 메서드가 많을수록 좋을까? 적을수록 좋을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정답은,  &lt;br /&gt;
상위 클래스는 물려줄 특성이 많으면 많을수록 좋고 &lt;br /&gt;
인터페이스는 구현을 강제할 메서드의 수가 적은게 좋다.&lt;/p&gt;

&lt;p&gt;상위 클래스가 풍성할수록 좋은 이유는 LSP 에 따른 이유이고,  &lt;br /&gt;
인터페이스 메서드가 적을수록 좋은 이유는 ISP에 따른 이유라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-01-08/solid/&quot;&gt;객체 지향 설계 5원칙 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;캡슐화--정보-은닉&quot;&gt;캡슐화 : 정보 은닉&lt;/h3&gt;
&lt;p&gt;자바에서 정보 은닉이라고 하면 접근 제어자들이 생각난다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;private : 본인만 접근 가능&lt;/li&gt;
  &lt;li&gt;default : 같은 패키지 내의 클래스에서 접근 가능&lt;/li&gt;
  &lt;li&gt;protected : 상속, 같은 패키지 내의 클래스에서 접근 가능&lt;/li&gt;
  &lt;li&gt;public : 모두가 접근 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단순하게 마무리 해보자면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체 멤버의 접근 제어자 &lt;br /&gt;
자신의 멤버가 아닌 다른 객체의 멤버에 접근하는 경우에 다른 객체를 생성한 후 접근해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정적 멤버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스명.정적멤버&lt;/code&gt; 형식으로 접근하는 것을 권장한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참조-변수의-복사&quot;&gt;참조 변수의 복사&lt;/h3&gt;

&lt;p&gt;기본 자료형 변수를 복사하는 경우 Call By Value (값에 의한 호출)에 의해 그 값이 복사되며 &lt;br /&gt;
두 개의 변수는 서로에게 영향을 주지 않는다.&lt;/p&gt;

&lt;p&gt;그렇다면 기본 자료형이 아닌 객체를 저장하고 있는 객체 참조 변수를 복사하는 경우는 어떨까?&lt;/p&gt;

&lt;p&gt;기본 자료형 변수는 저장하고 있는 값을 그 값 자체로 해석하는 반면, &lt;br /&gt;
객체 참조 변수는 저장하고 있는 값을 주소로 해석한다는 차이가 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 정리해보면,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기본 자료형 변수는 값을 값 자체로 판단한다.&lt;/li&gt;
  &lt;li&gt;참조 자료형 변수는 값을 주소로 판단한다.&lt;/li&gt;
  &lt;li&gt;기본 자료형 변수를 복사할 때, 참조 자료형 변수를 복사할 때 일어나는 일은 같다. &lt;br /&gt;
즉, 가지고 있는 값을 그대로 복사해서 넘겨 준다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-09/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9E%85%EB%AC%B8%EC%9D%84%EC%9C%84%ED%95%9C(1)/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-09/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9E%85%EB%AC%B8%EC%9D%84%EC%9C%84%ED%95%9C(1)/</guid>
      </item>
    
      <item>
        <title>GC는 언제 발생할까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc란&quot;&gt;GC란?&lt;/h2&gt;

&lt;p&gt;자바에서 메모리 관리를 누가 해야 하는가에 대한 생각을 해보자.   &lt;br /&gt;
자바에서 메모리를 GC라는 알고리즘을 통하여 관리하기 때문에, &lt;br /&gt;
개발자가 메모리를 처리하기 위한 로직을 만들 필요가 없고 만들어서는 안된다.&lt;/p&gt;

&lt;p&gt;Garbage Collection 은 말그대로 쓰레기를 정리하는 작업이다.     &lt;br /&gt;
자바 프로그래밍을 할 때 쓰레기란 어떤 것일까?   &lt;br /&gt;
자바에서 쓰레기는 객체이다. 하나의 객체는 메모리를 점유하고, 필요하지 않으면 메모리에서 해제되어야 한다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;메로리 점유는 다음과같이 쉽게 할 수 있다.   &lt;br /&gt;
이러한 코드에서는 a라는 객체가 만들어쟈 메모리의 한 부분을 점유하게 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 다음의 코드를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryPre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Select * from table_a where a='&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryPost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;' order by c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryPre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 메서드를 호출한 후 수행이 완료되면 queryPre 객체와 queryPost 객체는 더 이상 필요가 없는 객체, &lt;br /&gt;
즉 쓰레기가 된다.   &lt;br /&gt;
이 쓰레기 객체를 효과적으로 처리하는 작업을 GC라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;자바의-runtime-data-area는-이렇게-구성된다&quot;&gt;자바의 Runtime data area는 이렇게 구성된다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;PC 레지스터&lt;/li&gt;
  &lt;li&gt;JVM 스택&lt;/li&gt;
  &lt;li&gt;힙(Heap)&lt;/li&gt;
  &lt;li&gt;메서드 영역&lt;/li&gt;
  &lt;li&gt;런타임 상수(constant) 풀&lt;/li&gt;
  &lt;li&gt;네이티브 메서드 스택&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 영역 중에서도 GC가 발생하는 부분이 바로 힙 영역이다.    &lt;br /&gt;
거꾸로 말하면, 나머지는 GC 대상이 아니라는 것이다.&lt;/p&gt;

&lt;p&gt;다음은 이 영역들을 그림으로 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;img width=&quot;525&quot; alt=&quot;스크린샷 2020-06-08 오후 2 59 29&quot; src=&quot;https://user-images.githubusercontent.com/33855307/83997153-b5e49100-a998-11ea-80f3-2efa338380c5.png&quot; /&gt;          &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클래스 로더 서브 시스템 : 클래스나 인터페이스를 JVM으로 로딩하는 기술을 수행&lt;/li&gt;
  &lt;li&gt;실행 엔진 : 로딩된 클래스의 메서드들에 포함되어 있는 모든 인스트럭션 정보를 실행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그림은 복잡해 보이지만, 자바의 메모리 영역은 단순하게 ‘Heap 메모리’와 ‘Non-heap 메모리’로 나뉜다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Heap 메모리 &lt;br /&gt;
클래스 인스턴스, 배열이 이 메모리에 쌓인다. &lt;br /&gt;
이 메모리는 ‘공유 메모리’라고도 부르며 여러 스레드애서 공유하는 데이터들이 저장되는 메모리다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Non-heap 메모리  &lt;br /&gt;
이 메모리는 자바의 내부 처리를 위해서 필요한 영역이다. &lt;br /&gt;
주된 영역이 바로 메서드 영역이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;메서드 영억: 메서드 영억은 모든 JVM 스레드에서 공유한다.         &lt;br /&gt;
이 영역에서 공유되는 데이터들은 다음과 같다.           &lt;br /&gt;
런타임 상수 풀, 필드 정보에는 메서드 데이터, 메서드와 생성자 코드가 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;JVM 스택     &lt;br /&gt;
스레드가 시작할 때 JVM 스택이 생성된다.     &lt;br /&gt;
이 스택에는 메서드가 호출되는 정보인 프레임이 저장된다.  &lt;br /&gt;
지역변수와 임시 결과, 메서드 수행과 리턴에 관련된 정보들도 포함된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;네이티브 메서드 스택   &lt;br /&gt;
자바 코드가 아닌 다른 언어로된 코드들이 실행하게 될 때의 스택 정보를 관리한다.    &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;PC 레지스터     &lt;br /&gt;
자바의 스레드들은 각각의 pc(Program Counter) 레지스터를 갖는다. &lt;br /&gt;
네이티브한 코드를 제외한 모든 자바 코드들이 수행될 때 JVM의 인트럭션 주소를 pc 레지스터에 보관한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 Heap 영역과 메서드 영역은 JVM이 시작될 때 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc의-원리&quot;&gt;GC의 원리&lt;/h2&gt;
&lt;p&gt;GC 작업을 하는 가비지 콜렉터는 다음의 역할을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 할당&lt;/li&gt;
  &lt;li&gt;사용 중인 메모리 인식&lt;/li&gt;
  &lt;li&gt;사용하지 않는 메모리 인식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용하지 않는 메모리를 인식하는 작업을 수행하지 않으면, &lt;br /&gt;
할당한 메모리 영역이 꽉 차서 JVM에 행(Hang)이 걸리거나 더 많은 메모리를 할당하려는 현상이 발생할 것이다.&lt;/p&gt;

&lt;p&gt;JVM의 메모리는 여러 영역으로 나뉘는데, GC와 관련된 부분은 힙이다.    &lt;br /&gt;
따라서 가비지 콜렉터가 인식하고 할당하는 자바의 힙 영역에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-03-23/GC(2)/&quot;&gt;힙 영역 구조 참고&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Young 영역에서 Old 영역으로 넘어가는 객체 중에서 Survivor 영억을 거치지 않고 바로 Old 영역으로 이동하는 객체가 있을 수 있는데,&lt;br /&gt;
객체의 크기가 아주 큰 경우이다.  &lt;br /&gt;
Survivor 영역의 크키가 16MB 라고 가정했을 때 20MB를 점유하는 객체는 Survivor 영역으로 옮겨갈 수 없다.  &lt;br /&gt;
이런 객체들은 바로 Old 영역으로 이동하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc의-종류&quot;&gt;GC의 종류&lt;/h2&gt;
&lt;p&gt;크게 두 가지 타입으로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마이너GC : Young 영역에서 발생하는 GC&lt;/li&gt;
  &lt;li&gt;메이저GC : Old 영역이나 Perm 영역에서 발생하는 GC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 두 가지 GC가 어떻게 상호작용하느냐에 따라서 GC 방식에 차이가 나며, 성능에도 영향을 준다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;GC가 발생하거나 객체가 각 영역에서 다른 영역으로 이동할 때 애플리케이션의 병목이 발생하면서 성능에 영향을 주게 된다.  &lt;br /&gt;
그래서 핫 스팟 JVM 에서는 스레드 로컬 할당 버퍼라는 것을 사용한다. &lt;br /&gt;
이를 통하여 각 스레드별 메모리 버퍼를 사용하면 다른 스레드에 영향을 주지 않는 메모리 할당 작업이 가능해 진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5가지-gc-방식&quot;&gt;5가지 GC 방식&lt;/h2&gt;
&lt;p&gt;JDK 7 이상에서 지원하는 GC 방식에는 다섯 가지가 있다.&lt;/p&gt;

&lt;p&gt;Java VM(Virtual Machine) 내부에서 garbage collection 작업을 수행하는 엔진을 garbage collector라고 부른다.   &lt;br /&gt;
Java VM 내부에 garbage collector가 여러 개 구현되어 있고,    &lt;br /&gt;
Java VM을 실행할 때 command line parameter로 garbage collector를 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[참고]&lt;/strong&gt;                   &lt;br /&gt;
5가지 방식 자세한 설명 : &lt;a href=&quot;https://hyerin6.github.io/2020-03-23/GC(2)/&quot;&gt;https://hyerin6.github.io/2020-03-23/GC(2)/&lt;/a&gt;      &lt;br /&gt;
GC 과정에 대한 Naver D2 글 : &lt;a href=&quot;https://d2.naver.com/helloworld/1329&quot;&gt;https://d2.naver.com/helloworld/1329&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-serial-gc-시리얼-콜렉터&quot;&gt;1. Serial GC 시리얼 콜렉터&lt;/h3&gt;
&lt;p&gt;mark-sweep-compact 알고리즘을 사용해 Old 영역의 GC를 수행한다. &lt;br /&gt;
첫 단계에서 Old 영역에 살아있는 객체를 식별하고 힙의 앞부분부터 확인하여 살아있는 객체는 남긴다. &lt;br /&gt;
마지막 단계에서 각 객체가 연속되게 쌓이도록 살아있는 객체들을 한 곳으로 모은다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;적은 메모리와 CPU 코어 개수가 적을 때 적합한 방식이다.&lt;/strong&gt;            &lt;br /&gt;
그러나 운영 서버에서 절대 사용하면 안 되는 방식이 Serial GC다.         &lt;br /&gt;
Serial GC는 데스크톱의 CPU 코어가 하나만 있을 때 사용하기 위해서 만든 방식이다.         &lt;br /&gt;
Serial GC를 사용하면 애플리케이션의 성능이 많이 떨어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-parallel-gc-패러랠-콜렉터-병렬-콜렉터&quot;&gt;2. Parallel GC 패러랠 콜렉터 (병렬 콜렉터)&lt;/h3&gt;
&lt;p&gt;스루풋 콜렉터(throughtput collector)라고도 부른다.    &lt;br /&gt;
시리얼 콜렉터와 기본적인 알고리즘은 같은데 이 방식은 Young 영역을 병렬로 처리한다.&lt;/p&gt;

&lt;p&gt;이 방식의 목표는 다른 CPU가 대기 상태로 남아있는 것을 최소화하는 것이다. &lt;br /&gt;
시리얼 GC는 GC를 처리하는 스레드가 하나이지만, Parallel GC는 여러개이기 때문에  &lt;br /&gt;
Parallel GC는 GC의 부하를 줄이고 빠르게 처리량을 증가시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메모리가 충분하고 코어 개수가 많을 때 유리하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-parallel-old-gc&quot;&gt;3. Parallel Old GC&lt;/h3&gt;
&lt;p&gt;Parallel GC와는 Old 영역의 GC 과정만 다르다.        &lt;br /&gt;
이 방식은 Mark-Summary-Compact 단계를 거친다.    &lt;br /&gt;
Summary 단계는 앞서 GC를 수행한 영역에 대해서               &lt;br /&gt;
별도로 살아있는 객체를 식별한다는 점에서 Mark-sweep-Compact 알고리즘의 sweep 단계와 다르게 조금 더 복잡하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;병렬 콜렉터와 동일하게 이 방식도 여러 CPU를 사용하는 서버에 적합하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-cms-gc&quot;&gt;4. CMS GC&lt;/h3&gt;
&lt;p&gt;로우 레이턴시 콜렉터(low-latency-collector)로도 알려져 있다. &lt;br /&gt;
힙 메모리 영역이 클 때 적합하다. &lt;br /&gt;
Young 영역에 대한 GC는 병렬 콜렉터와 동일하다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;old 영역에 대한 GC는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;초기 Initial Mark 단계에서는 클래스 로더에서 가장 가까운 객체 중 살아있는 객체만 찾고 끝낸다.  &lt;br /&gt;
이는 대기 시간이 매우 짧다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Concurrent Mark 단계에서는 방금 살아있다고 확인한 객체에서 참조하는 있는 객체들을 따라가면서 확인한다. &lt;br /&gt;
특징은 다른 스레드가 실행중인 상태에서 동시에 실행된다는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remark 단계에서는 새로 추가 되거나 참조가 끊긴 객체를 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Concurrent Sweep 단계에서는 쓰레기를 정리하는 단계이다.     &lt;br /&gt;
특징은 Concurrent Mark 단계와 마찬가지로 다른 스레드가 실행하는 동시에 실행된다는 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CMS GC는 stop-the-world 시간이 짧다는 장점에 반해 다음과 같은 단점이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;다른 GC 방식보다 메모리와 CPU를 더 많이 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compaction 단계가 기본적으로 제공되지 않는다.  &lt;br /&gt;
조각난 메모리가 많아 Compaction 작업을 실행하면        &lt;br /&gt;
다른 GC 방식의 stop-the-world 시간보다 stop-the-world 시간이 더 길기 때문에       &lt;br /&gt;
Compaction 작업이 얼마나 자주, 오랫동안 수행되는지 확인해야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;이 방식은 2개 이상의 프로세서를 사용하는 서버에 적당하다. (예 - 웹 서버)&lt;/strong&gt;                  &lt;br /&gt;
&lt;strong&gt;Young 영역의 GC를 더 잘게 쪼개서 대기 시간을 줄일 수 있다.&lt;/strong&gt;               &lt;br /&gt;
&lt;strong&gt;모든 애플리케이션의 응답 속도가 매우 중요할 경우에 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-g1-gc&quot;&gt;5. G1 GC&lt;/h3&gt;
&lt;p&gt;Garbage First 는 지금까지의 GC(Young, Old)와는 다른 영역으로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1 GC의 Young GC&lt;/strong&gt;  &lt;br /&gt;
(1) 몇 개의 구역을 선정하여 Young 영역으로 지정한다. &lt;br /&gt;
(2) 이 Linear 하지 않은 구역에 객체가 생성되면서 데이터가 쌓인다.  &lt;br /&gt;
(3) Young 영역으로 할당된 구역에 데이터가 꽉차면 GC를 수행한다. &lt;br /&gt;
(4) 살아남은 객체는 Sirvivor 구역으로 이동한다.&lt;/p&gt;

&lt;p&gt;Old 영역 GC는 CMS GC 와 비슷하게 진행되며 여섯 단계로 나뉜다. &lt;br /&gt;
여기서 STW라고 표시된 단계는 모두 Stop the world가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1 GC의 Old GC&lt;/strong&gt;   &lt;br /&gt;
(1) 초기 표시 (STW) : Old 영역에 있는 객체에서 Survivor 영역의 객체를 참조하고 있는 객체들을 표시한다.&lt;/p&gt;

&lt;p&gt;(2) 기본 구역 스캔 단계 : Old 영역 참조를 위해서 Survivor 영역을 훑는다.            &lt;br /&gt;
참고로 이 작업은 Young GC가 발생하기 전에 수행 된다.&lt;/p&gt;

&lt;p&gt;(3) 컨커런트 표시 단계 : 전체 힙 영역에 살아있는 객체를 찾는다.            &lt;br /&gt;
만약 이때 Young GC가 발생하면 잠시 멈춘다.&lt;/p&gt;

&lt;p&gt;(4) 재표시 단계 (STW) : 힙에 살아있는 객체들의 표시 작업을 완료한다.            &lt;br /&gt;
이 떄 snapshot-at-the-beginning(SATB)라는 알고리즘을 사용하며, 이는 CMS GC에서 사용하는 방식보다 빠르다.&lt;/p&gt;

&lt;p&gt;(5) 청소 단계 (STW) : 살아있는 객체와 비어 있는 구역을 식별하고, 필요 없는 객체들을 지운다.&lt;br /&gt;
그리고 비어 있는 구역은 초기화한다.&lt;/p&gt;

&lt;p&gt;(6) 복사 단계 (STW) : 살아있는 객체들을 비어 있는 구역으로 모은다.&lt;/p&gt;

&lt;p&gt;G1은 CMS GC의 단점을 보완하기 위해 만들어졌으며 성능도 매우 빠르다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;gc가-어떻게-수행되고-있는지-보고-싶다면&quot;&gt;GC가 어떻게 수행되고 있는지 보고 싶다면&lt;/h1&gt;

&lt;p&gt;시스템을 분석하려면 관련된 툴을 사용해야 한다. &lt;br /&gt;
여러 방법이 있는데 jstat 이라는 명령을 사용하여 실시간으로 보거나 verbosegc 옵션을 사용하여 로그를 남길 수도 있다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;자바-인스턴스-확인을-위한-jps&quot;&gt;자바 인스턴스 확인을 위한 jps&lt;/h2&gt;
&lt;p&gt;jps는 해당 머신에서 운영 중인 JVM의 목록을 보여준다.     &lt;br /&gt;
JDK의 bin 디렉터리에 있으며, 사용법이 매우 간단하다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jps [-q] [-mlvV] [-Joption] [&amp;lt;hostid&amp;gt;]     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc-상황을-확인하는-jstat&quot;&gt;GC 상황을 확인하는 jstat&lt;/h2&gt;
&lt;p&gt;jstat는 GC가 수행되는 정보를 확인하기 위한 명령어이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jstat -&amp;lt;option&amp;gt; [-t] [-h&amp;lt;lines&amp;gt;] &amp;lt;vmid&amp;gt; [&amp;lt;interval&amp;gt; [&amp;lt;count&amp;gt;]]       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Garbage Collection 모니터링 방법 Naver D2 글 : https://d2.naver.com/helloworld/6043&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;gc-튜닝을-항상-할-필요는-없다&quot;&gt;GC 튜닝을 항상 할 필요는 없다.&lt;/h1&gt;

&lt;p&gt;결론부터 이야기하면 모든 Java 기반의 서비스에서 GC 튜닝을 진행할 필요는 없다.&lt;/p&gt;

&lt;p&gt;GC 튜닝이 필요 없다는 이야기는 운영 중인 Java 기반 시스템의 옵션과 동작이 다음과 같다는 의미이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xms&lt;/code&gt; 옵션과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;–Xmx&lt;/code&gt; 옵션으로 메모리크기를 지정했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-server&lt;/code&gt; 옵션이 포함되어있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시스템에 Timeout 로그와찍 같은 로그가 남지않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(여기서 타임아웃이란 DB 작업과 관련된 타임아웃, 다른 서버와의 통신시 타임아웃)&lt;/p&gt;

&lt;p&gt;즉, JVM 메모리 크기도 지정하지 않았고 Timeout 로그가 수도 없이 많이 출력되었다면 GC 튜닝을 하는 것이 좋다. &lt;br /&gt;
그러나 한 가지 명심해야 할 것은 GC 튜닝은 가장 마지막에 하는 작업이라는 것이다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;GC 튜닝을 하는 이유가 무엇인지 근본적인 원인을 생각해 보자.          &lt;br /&gt;
Java에서 생성된 객체는 가비지 컬렉터(Garbage Collector)가 처리해서 지운다.          &lt;br /&gt;
생성된 객체가 많으면 많을수록 가비지 컬렉터가 가 처리해야 하는 대상도 많아지고, GC를 수행하는 횟수도 증가한다.          &lt;br /&gt;
즉, 여러분이 운영하고 만드는 시스템이 GC를 적게 하도록 하려면 객체 생성을 줄이는 작업을 먼저 해야 한다.          &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;운영하고 만드는 시스템이 GC를 적게 하도록 하려면 객체 생성을 줄이는 작업이 먼저 필요하다.&lt;/p&gt;

&lt;p&gt;예를 들어, 이 책의 본문에 나오는 대부분의 내용을 지키면 된다.    &lt;br /&gt;
String 대신 StringBuilder 나 StringBuffer 사용하거나,    &lt;br /&gt;
로그를 최대한 적게 쌓도록 하는 등 임시 메모리를 적게 사용하도록 하는 작업은 중요하다.&lt;/p&gt;

&lt;p&gt;만약 애플리케이션 메모리 사용도 튜닝을 많이 해서      &lt;br /&gt;
어느 정도 만족할 만한 상황이 되었다면, 본격적으로 GC 튜닝을 시작하면 된다.&lt;/p&gt;

&lt;p&gt;GC 튜닝의 목적을 두 가지로 나눠보자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Old 영역으로 넘어가는 객체의 수 최소화하기&lt;/li&gt;
  &lt;li&gt;Full GC의 실행 시간을 줄이기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-old-영역으로-넘어가는-객체의-수-최소화하기&quot;&gt;(1) Old 영역으로 넘어가는 객체의 수 최소화하기&lt;/h3&gt;

&lt;p&gt;Old 영역의 GC는 New 영역의 GC에 비하여 상대적으로 시간이 오래 소요되기 때문에 &lt;br /&gt;
Old 영역으로 이동하는 객체의 수를 줄이면 Full GC가 발생하는 빈도를 많이 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;객체를 New 영역에만 남긴다는 것은 아니고,     &lt;br /&gt;
New 영역의 크기를 잘 조절함으로써 큰 효과를 볼 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-full-gc-시간-줄이기&quot;&gt;(2) Full GC 시간 줄이기&lt;/h3&gt;
&lt;p&gt;Full GC 수행 시간은 상대적으로 Young GC에 비하여 길다. &lt;br /&gt;
그래서 Full GC 실행에 오랜 시간이 소요되면 연계된 여러 부분에서 타임아웃이 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 Old 영역의 크기를 줄여버리면 OutOfMemoryError가 발생하거나 Full GC 횟수가 늘어난다.  &lt;br /&gt;
반대로 크기를 늘리면 Full GC 횟수는 줄어들지만 실행 시간이 늘어난다.   &lt;br /&gt;
Old 영역의 크기를 적절하게 잘 설정해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc의-성능을-결정하는-옵션들&quot;&gt;GC의 성능을 결정하는 옵션들&lt;/h2&gt;

&lt;p&gt;이런 저런 옵션을 많이 설정한다고 시스템의 GC 수행 속도가 월등히 빨라지진 않는다.      &lt;br /&gt;
오히려 더 느려질 확률이 높다. 두 대 이상의 서버에 GC 옵션을 다르게 적용해서 비교해 보고,       &lt;br /&gt;
옵션을 추가한 서버의 성능이나 GC 시간이 개선된 때에만 옵션을 추가하는 것이 GC 튜닝의 기본 원칙다.       &lt;br /&gt;
절대로 잊지 말자!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xms&lt;/code&gt; 옵션(JVM 시작 시 힙 영역 크기)과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xmx&lt;/code&gt; 옵션(최대 힙 영역 크기)은 필수로 지정해야 하는 옵션이다.        &lt;br /&gt;
그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewRatio&lt;/code&gt; 옵션(New영역과 Old 영역의 비율)을 어떻게 설정하느냐에 따라서 GC 성능에 많은 차이가 발생한다.&lt;/p&gt;

&lt;p&gt;GC 방식 중에서 특별히 신경쓸 필요가 없는 방식은 Serial GC다.     &lt;br /&gt;
Serial GC는 클라이언트 장비에 최적화되어 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gc-튜닝의-절차&quot;&gt;GC 튜닝의 절차&lt;/h2&gt;

&lt;p&gt;(1) GC 상황 모니터링 &lt;br /&gt;
GC 상황을 모니터링하며 현재 운영되는 시스템의 GC 상황을 확인해야 한다.&lt;/p&gt;

&lt;p&gt;(2) 모니터링 결과 분석 후 GC 튜닝 여부 결정    &lt;br /&gt;
분석한 결과를 확인했는데 GC 수행에 소요된 시간이 0.1~0.3초 밖에 안 된다면 굳이 GC 튜닝에 시간을 낭비할 필요는 없다.&lt;/p&gt;

&lt;p&gt;하지만 GC 수행 시간이 1~3초, 심지어 10초가 넘는 상황이라면 GC 튜닝을 진행해야 한다.&lt;/p&gt;

&lt;p&gt;그런데 만약 Java의 메모리를 10GB 정도로 할당해서 사용하고 있고 메모리의 크기를 줄일 수 없다면    &lt;br /&gt;
방법은 없을 것 같다. &lt;br /&gt;
GC 튜닝 전에 시스템의 메모리를 왜 높게 잡아야 하는지에 생각해 봐야 한다.&lt;/p&gt;

&lt;p&gt;튜닝 여부 결정에 대한 자세한 내용은 책을 한번 더 확인…&lt;/p&gt;

&lt;p&gt;(3) GC 방식 / 메모리 크기 지정 &lt;br /&gt;
GC 튜닝을 진행하기로 결정했다면 GC 방식을 선정하고 메모리의 크기를 지정한다. &lt;br /&gt;
이때 서버가 여러 대이면 서버에 GC 옵션을 서로 다르게 지정해서 GC 옵션에 따른 차이를 확인하는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;(4) 결과 분석    &lt;br /&gt;
운이 좋으면 해당 시스템에 가장 적합한 GC 옵션을 찾을 수 있지만 그렇지 않다면 &lt;br /&gt;
로그를 분석해 메모리가 어떻게 할당되는지 확인해야 한다. &lt;br /&gt;
그 다음에 GC 방식 / 메모리 크기를 변경해 가면서 최적의 옵션을 찾아 나간다.&lt;/p&gt;

&lt;p&gt;(5) 결과가 만족스러울 경우 전체 서버에 반영 및 종료&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-2-단계--gc-상황-모니터링-및-결과-분석하기&quot;&gt;1, 2 단계 : GC 상황 모니터링 및 결과 분석하기&lt;/h2&gt;

&lt;p&gt;다음의 조건에 모두 부합한다면 GC 튜닝이 필요 없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minor GC의 처리 시간이 빠르다.&lt;/li&gt;
  &lt;li&gt;Minor GC 주기가 빈번하지 않다.&lt;/li&gt;
  &lt;li&gt;Full GC의 처리 시간이 빠르다.&lt;/li&gt;
  &lt;li&gt;Full GC 주기가 빈번하지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주의할 점은 GC 상황을 확인할 때 시간만 보면 안 된다는 점이다. &lt;br /&gt;
GC 가 수행되는 횟수도 확인해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;31-단계--gc-방식-지정&quot;&gt;3.1 단계 : GC 방식 지정&lt;/h2&gt;

&lt;p&gt;Serial GC는 운영에서 사용하지 못해 제외되고, JDK 7이 아니면 G1 GC도 제외되어    &lt;br /&gt;
Parallel GC, Parallel Compacting GC, CMS GC 중에서 하나를 선택해야 한다.&lt;/p&gt;

&lt;p&gt;가장 좋은 방법은 세 가지 방식을 모두 적용해 보는 것이다. &lt;br /&gt;
일반적으로 CMS GC가 다른 Parallel GC 보다 작업 속도가 빠르다.&lt;/p&gt;

&lt;p&gt;하지만 항상 빠른 것은 아니다.  &lt;br /&gt;
Concurrent mode failure 이 발생하면 다른 Parallel GC 보다 느려진다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrent mode failure 이란?&lt;/strong&gt; &lt;br /&gt;
Parallel GC와 CMS GC의 가장 큰 차이점은 압축(Compaction) 작업 여부이다.    &lt;br /&gt;
압축 작업은 메모리 할당 공간 사이에 사용하지 않는 빈 공간이 없도록 옮겨서 메모리 단편화를 제거하는 작업이다.&lt;/p&gt;

&lt;p&gt;CMS GC는 메모리에 빈 공간이 여기저기 생긴다. 그렇기 때문에 크기가 큰 객체가 들어갈 수 있는 공간이 없을 수도 있다.       &lt;br /&gt;
예를들어, Old 영역에 남아 있는 크기가 300MB 인데도 10MB짜리 객체가 연속적로 들어갈 공간이 없을 수 있다.&lt;/p&gt;

&lt;p&gt;그럴 때 Concurrent mode failure 라는 경고가 발생하면서 압축 작업을 수행한다. &lt;br /&gt;
그런데, CMS GC를 사용할 때는 압축 시간이 다른 Parallel GC 보다 더 오래 소요된다. &lt;br /&gt;
그래서 오히려 더 문제가 될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32-단계--메모리-크기&quot;&gt;3.2 단계 : 메모리 크기&lt;/h2&gt;

&lt;p&gt;메모리 크기와 GC 발생 횟수, GC 수행 시간의 관계는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- 메모리 크기가 크면,&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GC 발생 횟수는 감소한다.&lt;/li&gt;
  &lt;li&gt;GC 수행 시간은 길어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;- 메모리 크기가 작으면,&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GC 발생 시간는 짧아진다.&lt;/li&gt;
  &lt;li&gt;GC 수행 횟수는 증가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메모리 크기를 크게 설정할 것인지, 작게 설정할 것인지에 대한 정답은 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4단계--gc-튜닝-결과-분석&quot;&gt;4단계 : GC 튜닝 결과 분석&lt;/h2&gt;
&lt;p&gt;분석할 때에는 다음의 사항을 중심으로 살펴보는 것이 좋다.    &lt;br /&gt;
GC 옵션을 결정하는 데 가장 큰 비중을 차지하는 것은 1번 항목인 Full GC 수행 시간이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Full GC 수행시간&lt;/li&gt;
  &lt;li&gt;Minor GC 수행시간&lt;/li&gt;
  &lt;li&gt;Full GC 수행간격&lt;/li&gt;
  &lt;li&gt;Minor GC 수행간격&lt;/li&gt;
  &lt;li&gt;전체 Full GC 수행시간&lt;/li&gt;
  &lt;li&gt;전체 Minor GC 수행시간&lt;/li&gt;
  &lt;li&gt;전체 GC 수행시간&lt;/li&gt;
  &lt;li&gt;Full GC 수행횟수&lt;/li&gt;
  &lt;li&gt;Minor GC 수행횟수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;운이 좋아서 한 번에 가장 적합한 GC 옵션을 찾으면 좋지만, 그렇지 못한 경우가 대부분이다.    &lt;br /&gt;
한 번에 끝내려다가 잘못하면 서비스에 OutOfMemoryError가 발생할 수 있으니 조심해서 GC 튜닝을 진행하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;같이 보면 좋은 GC 관련 블로그 글&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-03-23/GC/&quot;&gt;https://hyerin6.github.io/2020-03-23/GC/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-03-23/GC(2)/&quot;&gt;https://hyerin6.github.io/2020-03-23/GC(2)/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 08 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-08/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-GC/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-08/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-GC/</guid>
      </item>
    
      <item>
        <title>서버를 어떻게 세팅해야 할까?</title>
        <description>&lt;h2 id=&quot;설정해야-하는-대상&quot;&gt;설정해야 하는 대상&lt;/h2&gt;

&lt;p&gt;개발하는 것만큼 중요한 것이 서버의 세팅이다. 개발된 프로그램이 0.1초 걸린다고 해도 서버 세팅을 잘못하면 1초가 걸릴 수도 있다.          &lt;br /&gt;
이러한 문제를 진단하는 가장 좋은 방법은 성능 테스트를 통해서 병목 지점을 미리 파악하는 것이다.&lt;/p&gt;

&lt;p&gt;무조건 애플리케이션 위주로 병목을 찾는 것보다, 일단 문제가 될만한 세팅 값을 먼저 진단하는 것이 가장 효율적이다.       &lt;br /&gt;
웹 기반의 시스템에서 성능에 영향을 줄만한 세팅을 나열해 보면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;웹 서버 세팅&lt;/li&gt;
  &lt;li&gt;WAS 서버 세팅&lt;/li&gt;
  &lt;li&gt;DB 서버 세팅&lt;/li&gt;
  &lt;li&gt;장비 세팅&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;아파치-웹-서버의-설정&quot;&gt;아파치 웹 서버의 설정&lt;/h2&gt;

&lt;p&gt;웹 서버는 반드시 WAS 앞에 두어야 한다. &lt;br /&gt;
웹에서 사용하는 어플리케이션 서버이지 웹 서버가 아니다. 정적인 부분은 웹 서버에서 처리해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;웹-서버의-keep-alive&quot;&gt;웹 서버의 Keep Alive&lt;/h2&gt;
&lt;p&gt;웹 서버와 웹 브라우저가 연결이 되었을 때 KeepAlive 기능이 켜져 있지 않으면, 매번 HTTP 연결을 맺었다 끊었다 하는 작업을 반복한다. &lt;br /&gt;
KeepAlive 기능이 켜져 있으면 두 개 정도의 연결을 열어서 끊지 않고, 연결을 계속 재사용한다.&lt;/p&gt;

&lt;p&gt;KeepAlive 설정을 할 때 반드시 같이 해야 하는 설정이 있다. &lt;br /&gt;
KeepAlive-Timeout 설정이다.        &lt;br /&gt;
마지막 연결이 끝난 이후에 다음 연결이 될 때까지 얼마나 기다릴지를 설정한다.&lt;/p&gt;

&lt;p&gt;하지만 무조건 KeepAlive 옵션을 켜야 성능이 좋게 나오는 것은 아니다. 상황에 맞게 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db-connection-pool-및-스레드-개수-설정&quot;&gt;DB Connection Pool 및 스레드 개수 설정&lt;/h2&gt;
&lt;p&gt;DB Connection Pool 과 스레드 개수에 대해서 알아보자.  &lt;br /&gt;
이 두 항목의 개수는 메모리와 관련이 있다.&lt;/p&gt;

&lt;p&gt;많이 사용할수록 메모리를 많이 점유하게 된다.   &lt;br /&gt;
그렇다고 메모리를 위해서 DB Connection Pool 과 스레드 개수를 적게 지정하면,     &lt;br /&gt;
서버에서는 많은 요청을 처리하지 못하고 대기할 수밖에 없다.&lt;/p&gt;

&lt;p&gt;대부분의 WAS에서 DB Connection Pool의 개수를 최소치, 증가치, 최대치 등으로 지정할 수 있다.   &lt;br /&gt;
최소치는 서버가 기동될 때 연결을 수행하는 개수이다.     &lt;br /&gt;
최소 개수가 많으면 많을수록 서버 기동하는 시간이 오래 소요된다.&lt;/p&gt;

&lt;p&gt;운영 중에는 최소 및 최대 값을 동일하게 하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;대부분 DB Connection Pool 보다 스레드 개수를 10개 정도 더 지정하는데, &lt;br /&gt;
이유는 스레드 개수가 DB Connection Pool 의 개수보다 적으면 적은 수만큼의 연결은 필요 없기 때문이다.&lt;/p&gt;

&lt;p&gt;쉽게 스레드는 입구이고 DB Connection Pool은 출구라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-%EC%84%9C%EB%B2%84%EC%84%B8%ED%8C%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-%EC%84%9C%EB%B2%84%EC%84%B8%ED%8C%85/</guid>
      </item>
    
      <item>
        <title>제대로 알고 써야하는 synchronized</title>
        <description>&lt;h1 id=&quot;자바에서-스레드는-어떻게-사용하나&quot;&gt;자바에서 스레드는 어떻게 사용하나?&lt;/h1&gt;
&lt;p&gt;WAS는 여러 개의 스레드가 동작하도록 되어 있다. synchronized를 자주 사용한다.           &lt;br /&gt;
synchronized를 쓴다고 무조건 안정적인 것은 아니며 성능에 영향을 미치는 부분도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로세스와-스레드&quot;&gt;프로세스와 스레드&lt;/h2&gt;
&lt;p&gt;클래스를 하나 수행시키거나 WAS를 기동하면 서버에 자바 프로세스가 하나 생성된다.    &lt;br /&gt;
하나의 프로세스에는 여러 개의 스레드가 생성된다.    &lt;br /&gt;
단일 스레드가 생성되어 종료될 수도 있고, 여러 개의 스레드가 생성되어 수행될 수도 있다.    &lt;br /&gt;
프로세스와 스레드의 관계는 1:N 관계라고 보면 된다.&lt;/p&gt;

&lt;p&gt;스레드는 가벼운 프로세스라고도 하며, 프로세스에서 만들어 사용하고 있는 메모리를 공유한다.        &lt;br /&gt;
그래서 별개의 프로세스가 하나씩 뜨는 것보다는 성능이나 자원 사용에 있어서 많은 도움이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;synchronized를-이해하자&quot;&gt;Synchronized를 이해하자.&lt;/h2&gt;
&lt;p&gt;웹 기반의 시스템에서 스레드 관련 부분 중 가장 많이 사용하는 것은 synchronized일 것이다.   &lt;br /&gt;
synchronized는 동시에 처리한다는 의미로 하나의 객체에 여러 객체가 동시에 접근하여 처리하는 상황에 사용한다.   &lt;br /&gt;
하나의 객체에 여러 요청이 동시에 들어오면 한 명씩 들어오라고 해당 메서드나 블록에서 제어하게 된다.&lt;/p&gt;

&lt;p&gt;synchronized와 static을 연결해서 생각하면 더욱 복잡해진다.   &lt;br /&gt;
synchronized는 절대로 생성자의 식별자로는 사용할 수 없다는 점을 기억하자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sampleMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sampleBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단하게 synchronized라는 식별자로 동기화할 수 있다.         &lt;br /&gt;
그럼 언제 동기화를 사용해야 할까?&lt;/p&gt;

&lt;p&gt;(1) 하나의 객체를 여러 스레드에서 동시에 사용할 경우            &lt;br /&gt;
(2) static으로 선언한 객체를 여러 스레드에서 동시에 사용할 경우&lt;/p&gt;

&lt;p&gt;위의 경우가 아니면 동기화를 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;동기화-사용법-1-동일-객체-접근-시&quot;&gt;동기화 사용법: (1) 동일 객체 접근 시&lt;/h2&gt;
&lt;p&gt;예를들어, 여러 기부자가 어떤 기부금을 처리하는 단체에 기부금을 낸다고 가정하자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;총 기부금 : amount&lt;/li&gt;
  &lt;li&gt;기부자 : Contributor&lt;/li&gt;
  &lt;li&gt;기부단체 : Contribution&lt;/li&gt;
  &lt;li&gt;기부금 받는 창구 : donate()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Contribution {
    private int amount = 0;
    
    public void donate() {
        amount++;
    }
    
    public int getTotal() {
        return amount;
    }
}

public class Contributor extends Thread {
    private Contribution myContribution;
    private String myName;
    
    . . .
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;동기화하기-전-기부단체-10개-1000원씩-출력&quot;&gt;동기화하기 전 기부단체 10개 (1000원씩 출력)&lt;/h3&gt;
&lt;p&gt;1인당 1원씩 1,000번 기부하고 기부가 완료되면 전체 기부금을 프린트한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    Contributor[] cts = new Contributor[10];
    
    // 기부자, 단체 초기화 
    for(int i = 0; i &amp;lt; 10; ++i) {
        Contribution group = new Contribution();
        crs[i] = new Contributor(group, &quot;Contributor &quot; + i);
    }
    
    // 기부 실행 
    for(int i = 0; i &amp;lt; 10; ++i) {
        crs[i].start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 기부금을 받는 단체인 group 객체를 매번 생성했기 때문에     &lt;br /&gt;
10명의 객체가 각기 다른 단체에 기부하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;동기화하기-전-기부-단체-1개-10000원-출력-x&quot;&gt;동기화하기 전 기부 단체 1개 (10,000원 출력 X)&lt;/h3&gt;
&lt;p&gt;기부 단체가 하나인 경우 어떻게 될까?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Contribution group = new Contribution();

for(int i = 0; i &amp;lt; 10; ++i) {
    crs[i] = new Contributor(group, &quot;Contributor &quot; + i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;총 기부금 금액은 10,000원이 출력되어야 하는데 예상대로 출력되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;예상대로-출력되지-않는-이유는&quot;&gt;예상대로 출력되지 않는 이유는?&lt;/h3&gt;
&lt;p&gt;예상대로라면 1000원씩 기부했기 때문에 총 10,000원이 프린트되어야 하는데  &lt;br /&gt;
대부분 10,000원이 프린트되지 않는다.&lt;/p&gt;

&lt;p&gt;그 이유는 10개의 Contributor 객체에서 하나의 Contribution 객체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;donate()&lt;/code&gt; 메서드를   &lt;br /&gt;
동시에 접근할 수 있도록 되어 있기 때문이다.         &lt;br /&gt;
이 오류를 수정하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;donate()&lt;/code&gt; 메서드에 synchronized를 써서 동기화 식별자를 추가해야 한다.&lt;/p&gt;

&lt;p&gt;위 예제들을 성능 테스트해보면 필요 없는 부분에 synchronized를 사용하면 약간이지만 성능에 영향을 준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;      &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;동기화-사용법-2-static-사용-시&quot;&gt;동기화 사용법: (2) static 사용 시&lt;/h2&gt;
&lt;p&gt;앞 예제에서 amount를 static으로 선언하고 synchronized를 사용하면 어떻게 될까?    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;동기화-전-기부-단체-10개에-기부하는-경우-synchronized-사용-x&quot;&gt;동기화 전: 기부 단체 10개에 기부하는 경우 (synchronized 사용 X)&lt;/h3&gt;
&lt;p&gt;총 10,000원이 출력되어야 하는데 원하는 결과가 안나온다.  &lt;br /&gt;
각 단체에 기부하는 케이스라 하더라도 amount를 static으로 선언하면 &lt;br /&gt;
각 기부 단체에 따로 기부하는 것은 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;donate-메서드-동기화-기부-단체-10개에-기부하는-경우-synchronized-사용-o&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;donate()&lt;/code&gt; 메서드 동기화: 기부 단체 10개에 기부하는 경우 (synchronized 사용 O)&lt;/h3&gt;
&lt;p&gt;이번에도 원하는 결과가 나오지 않는다.  &lt;br /&gt;
synchronized는 각각의 객체에 대한 동기화를 하는 것이기 때문에  &lt;br /&gt;
각각의 단체에 대한 동기화는 되었지만 amount에 대한 동기화는 되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;donate-메서드-동기화-static-추가&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;donate()&lt;/code&gt; 메서드 동기화, static 추가&lt;/h3&gt;
&lt;p&gt;amount는 클래스의 변수이지 객체의 변수가 아니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static synchronized void donate() {
    amount++;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 원하는 대로 결과가 나왔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;항상 변하는 값에 대해서 static으로 선언하여 사용하면 위험하다.  &lt;br /&gt;
synchronized도 꼭 필요할 때만 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;동기화를-위해서-자바에서-제공하는-것들&quot;&gt;동기화를 위해서 자바에서 제공하는 것들&lt;/h2&gt;

&lt;p&gt;JDK 5.0부터 추가된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.concurrent&lt;/code&gt; 패키지에 대해서 간단히 알아보자.   &lt;br /&gt;
이 패키지에 주요 개념 4가지가 포함되어 있다.&lt;/p&gt;

&lt;p&gt;(1) Lock : 실행 중인 스레드를 간단한 방법으로 정지시켰다가 실행시킨다. 상호참조로 인해 발생하는 데드락을 피할 수 있다.&lt;/p&gt;

&lt;p&gt;(2) Execute : 스레드를 더 효율적으로 관리할 수 있는 클래스들을 제공한다.&lt;/p&gt;

&lt;p&gt;(3) Concurrent 콜렉션 : 앞서 살펴본 콜렉션의 클래스들을 제공한다.&lt;/p&gt;

&lt;p&gt;(4) Atomic 변수 : 동기화가 되어 있는 변수를 제공한다. 이 변수를 사용하면, synchronized 식별자를 메서드에 지정할 필요가 없이 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;동일한 객체를 공유하거나, static을 사용한 변수를 공유할 경우 반드시 synchronized를 사용해야 한다.   &lt;br /&gt;
synchronized는 여러 스레드에서 접근하는 것을 막아주는 장점이 있지만, &lt;br /&gt;
성능 저하가 발생한다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-synchronized/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-synchronized/</guid>
      </item>
    
      <item>
        <title>왜 String을 쓰지 말라는 걸까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stringbuffer-클래스와-stringbuilder-클래스&quot;&gt;Stringbuffer 클래스와 StringBuilder 클래스&lt;/h3&gt;

&lt;p&gt;StringBuffer 클래스나 StringBuilder 클래스에서 제공하는 메서드는 동일하다.&lt;/p&gt;

&lt;p&gt;차이점은 무엇일까?&lt;/p&gt;

&lt;p&gt;StringBuffer 클래스는 스레드에 안전하게 설계 되어 있으므로,      &lt;br /&gt;
여러 개의 스레드가 하나의 StringBuffer 객체를 처리해도 전혀 문제가 되지 않는다.&lt;/p&gt;

&lt;p&gt;하지만 StringBuilder는 단일 스레드에서의 안전성만 보장한다.   &lt;br /&gt;
그렇기 때문에 여러 개의 스레드에서 하나의 StringBuilder 객체를 처리하면 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;string-vs-stringbuffer-vs-stringbuilder&quot;&gt;String VS. StringBuffer VS. StringBuilder&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;String    &lt;br /&gt;
Stirng은 짧은 문자열을 더할 경우 사용한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;StirngBuffer     &lt;br /&gt;
StringBuffer은 스레드에 안전한 프로그램이 필요할 때나,     &lt;br /&gt;
개발 중인 시스템의 부분이 스레드에 안전한지 모를 경우 사용하면 좋다. &lt;br /&gt;           &lt;br /&gt;
만약 클래스에 static으로 선언한 문자열을 변경하거나, singleton으로 선언된 클래스&lt;br /&gt;
(JVM에 객체가 하나만 생성되는 클래스)에 선언된 문자열일 경우에는 이 클래스를 사용해야만 한다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;StringBuilder   &lt;br /&gt;
StringBuilder는 스레드에 안전한지의 여부와 관계 없는 프로그램을 개발할 때 사용하면 좋다. &lt;br /&gt;
만약 메서드 내에서 변수를 선언했다면, 해당 변수는 그 메서드 내에서만 살아있기 때문에 StringBuilder를 사용하면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;p&gt;메모리를 가장 많이 차지하고 응답 시간에 많은 영향을 주는 것은 String 클래스이다.                 &lt;br /&gt;
String 클래스를 쓰는 대신 스레드와 관련이 있으면 StringBuffer를,                  &lt;br /&gt;
스레드 안전 여부와 상관이 없으면 StringBuilder를 사용하는 것을 권장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-string/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-string/</guid>
      </item>
    
      <item>
        <title>static 잘 활용하기</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자바 프로그래밍에서 성능을 향상시키는 방법 중 하나는 static을 사용하는 것이다.      &lt;br /&gt;
그러나 잘 모르고 사용하면 더 느려지거나 오류가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static의-특징&quot;&gt;static의 특징&lt;/h2&gt;

&lt;p&gt;자바에서 static으로 지정한 것은 해당 메서드나 변수가 정적이라는 의미다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;static으로 선언한 변수 = 클래스 변수&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 JVM이나 WAS 인스턴스에서 동일한 주소 값을 참조한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GC의 대상이 되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-잘-활용하기&quot;&gt;static 잘 활용하기&lt;/h2&gt;

&lt;h4 id=&quot;1-자주-사용하고-절대-변하지-않는-변수는-final-static으로-선언하자&quot;&gt;(1) 자주 사용하고 절대 변하지 않는 변수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final static&lt;/code&gt;으로 선언하자.&lt;/h4&gt;
&lt;p&gt;자주 변경되지 않고, 경우의 수가 단순한 쿼리 문장이 있다면 final static이나 static으로 선언하여 사용하자.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-설정-파일-정보도-static으로-관리하자&quot;&gt;(2) 설정 파일 정보도 static으로 관리하자.&lt;/h4&gt;
&lt;p&gt;클래스의 객체를 생성할 때마다 설정 파일을 로딩하면 엄청난 성능 저하가 발생하게 된다.       &lt;br /&gt;
이럴 때는 반드시 static으로 데이터를 읽어서 관리해야 한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-코드성-데이터는-db에서-한-번만-읽자&quot;&gt;(3) 코드성 데이터는 DB에서 한 번만 읽자.&lt;/h4&gt;
&lt;p&gt;부서가 적은 회사의 코드나, 건수가 그리 많지 않되 조회 빈도가 높은 코드성 데이터는   &lt;br /&gt;
DB에서 한 번만 읽어서 관리하는 것이 성능 측면에서 좋다.       &lt;br /&gt;
만약 코드가 수정되었을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateCodes()&lt;/code&gt; 같은 메소드를 호출해서 코드 정보를 다시 읽으면 된다.      &lt;br /&gt;
그런데 만약 서버 인스턴스가 하나만 있다면 코드가 변경되는 것을 걱정하지 않아도 된다.     &lt;br /&gt;
하지만 서로 다른 JVM에 올라가 있는 코드 정보는 수정된 코드와 상이하므로 그 부분에 대한 대책을 마련해 놓아야 한다.&lt;/p&gt;

&lt;p&gt;이러한 JVM 간에 상이한 결과가 나오는 것을 방지하기 위해서 요즘에는 mem-cached, EhCache 등의 캐시를 많이 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static을-잘-못-사용한-경우&quot;&gt;static을 잘 못 사용한 경우&lt;/h2&gt;
&lt;h4 id=&quot;1-쿼리-관리용-클래스에서-사용한-static-string-queryurl--&quot;&gt;(1) 쿼리 관리용 클래스에서 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static String queryURL = ...;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;여러 화면에서 호출하는 경우 queryURL이 그때 그때 바뀌게 된다.   &lt;br /&gt;
모든 스레드에서 동일한 주소를 가리키게 되어 문제가 발생한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-private-static-boolean-successflag&quot;&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private static boolean successFlag;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;성공 여부를 담기 위해 successFlag를 만들었다.  &lt;br /&gt;
개발자 PC에서 테스트 하거나 성능, 통합 테스트를 할 때 문제점을 발견하지 못할 수도 있다.   &lt;br /&gt;
수십명이 동시에 정보 확인을 위해 위 서블릿을 호출하면 &lt;br /&gt;
다른 사용자에 의해 나의 정보가 바뀔 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static과-메모리-릭&quot;&gt;static과 메모리 릭&lt;/h2&gt;
&lt;p&gt;static으로 선언한 부분은 GC가 되지 않는다.&lt;/p&gt;

&lt;p&gt;그럼 만약 어떤 클래스에 데이터를 Vector나 ArrayList에 담을 때   &lt;br /&gt;
해당 Collection 객체를 static으로 선언하면 어떻게 될까?&lt;/p&gt;

&lt;p&gt;만약 지속적으로 해당 객체에 데이터가 쌓이는데 GC가 되지 않으면 시스템은 OutOfMemoryError를 발생시킨다. &lt;br /&gt;
이렇게되면 시스템을 재시작해야 하고 해당 인스턴스는 더 이상 서비스할 수 없다.&lt;/p&gt;

&lt;p&gt;더 이상 사용 가능한 메모리가 없어지는 현상을 메모리 릭(Memory Leak)이라고 하는데,
static과 Collection 객체를 잘못 사용하면 메모리 릭이 발생한다.&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-static/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-static/</guid>
      </item>
    
      <item>
        <title>JSP와 서블릿, Spring에서 발생할 수 있는 문제점</title>
        <description>&lt;p&gt;JSP와 Servlet의 기본적인 동작원리를 알아보자.  &lt;br /&gt;
일반적으로 JSP와 같은 웹 화면단을 처리하는 부분에서 소요되는 시간은 많지 않다.  &lt;br /&gt;
JSP의 경우 가장 처음에 호출되는 경우에만 시간이 소요되는 이후에는 컴파일된 서블릿 클래스가 수행되기 때문이다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jsp-라이프-사이클&quot;&gt;JSP 라이프 사이클&lt;/h2&gt;
&lt;p&gt;(1) JSP URL 호출       &lt;br /&gt;
(2) 페이지 번역          &lt;br /&gt;
(3) JSP 페이지 컴파일         &lt;br /&gt;
(4) 클래스 로드        &lt;br /&gt;
(5) 인스턴스 생성        &lt;br /&gt;
(6) jspInit 메서드 호출        &lt;br /&gt;
(7) _jspService 메서드 호출        &lt;br /&gt;
(8) jspDestory 메서드 호출        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;해당 JSP 페이지가 이미 컴파일되어 있고 클래스 로드되어 있고           &lt;br /&gt;
JSP 파일이 변경되지 않았다면 가장 많은 시간이 소요되는 (2)~(4) 프로세스는 생략된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;서블릿-라이프-사이클&quot;&gt;서블릿 라이프 사이클&lt;/h2&gt;
&lt;p&gt;WAS의 JVM이 시작한 후에는,&lt;/p&gt;

&lt;p&gt;Servlet 객체가 자동으로 생성되거나 초기화 되거나 &lt;br /&gt;
사용자가 해당 Servlet을 처음으로 호출했을 때 생성되고 초기화 된다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/125027854-f0e85500-e0c1-11eb-806a-b577d0bb09e0.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-09-14-25-47&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 계속 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;사용 가능&lt;/code&gt; 상태로 대기한다.    &lt;br /&gt;
중간에 예외가 발생하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;사용 불가능&lt;/code&gt; 상태로 빠졌다가 다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;사용 가능&lt;/code&gt; 상태로 변환되기도 한다.    &lt;br /&gt;
해당 서블릿이 더 이상 필요 없을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;파기&lt;/code&gt; 상태로 넘어간 후 JVM에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;제거&lt;/code&gt; 된다.&lt;/p&gt;

&lt;p&gt;서블릿은 JVM에 여러 객체로 생성되지 않는다.  &lt;br /&gt;
다시 말해 WAS가 시작하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;사용 가능&lt;/code&gt; 상태가 된 이상 대부분의 서블릿은 JVM에 살아있고,    &lt;br /&gt;
여러 스레드에서 해당 서블릿의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드를 호출하여 공유한다.&lt;/p&gt;

&lt;p&gt;만약 서블릿 클래스이 메서드 내에 선언한 지역 변수가 아닌 멤버 변수 (인스턴스 변수)를 선언하여  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드에서 사용하면 어떤 일이 벌어질까?&lt;/p&gt;

&lt;p&gt;static을 사용하는 것과 거의 동일한 결과를 나타낸다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service()&lt;/code&gt; 메서드를 구현할 때는 멤버 변수나 static한 클래스 변수를 선언하여 &lt;br /&gt;
지속적으로 변경하는 작업은 피해야한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;--스프링-프레임워크-간단-정리&quot;&gt;- 스프링 프레임워크 간단 정리&lt;/h4&gt;

&lt;p&gt;스프링 프레임워크는 데스크톱과 웹 어플리케이션, 작고 간단한 애플리케이션부터          &lt;br /&gt;
여러 서버와 연동하여 동작해야 하는 엔터프라이즈 애플리케이션도 범용적인 애플리케이션 프레임워크이다.&lt;/p&gt;

&lt;p&gt;Spring의 가장 큰 특징은 복잡한 애플리케이션도 POJO(Plain Old Java Object)로 개발할 수 있다는 점이다. &lt;br /&gt;
서블릿을 개발하려면 반드시 HttpServlet이라는 클래스를 상속해야 한다. &lt;br /&gt;
하지만 스프링을 사용하면 HttpServlet을 확장하지 않아도 웹 요청을 처리할 수 있는 클래스를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;스프링의-핵심-기술&quot;&gt;스프링의 핵심 기술&lt;/h2&gt;
&lt;p&gt;Dependency Injection, &lt;br /&gt;
Aspect Oriented Programming, &lt;br /&gt;
Portable Service Abstraction 으로 함축할 수 있다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) Dependency Injection   &lt;br /&gt;
‘의존성 주입’ 이라고 한다.  &lt;br /&gt;
객체간의 관계를 관리하는 기술로 생각하면 된다.   &lt;br /&gt;
어떤 객체가 필요로 하는 객체를 자기 자신이 직접 생성하여 사용하는 것이 아니라  &lt;br /&gt;
외부에 있는 다른 무언가로부터 필요로 하는 객체를 주입 받는 기술이다.&lt;/p&gt;

&lt;p&gt;(2) AOP (Aspect Oriented Programming)  &lt;br /&gt;
‘관점 지향 프로그래밍’ 이라고 부른다. &lt;br /&gt;
대부분은 비슷한 코드가 중복되고 코드를 읽는 데 방해가 된다. &lt;br /&gt;
이런 코드를 실제 비즈니스 로직과 분리할 수 있도록 도와주는 것이 바로 AOP이다.&lt;/p&gt;

&lt;p&gt;자바에서 가장 유명한 AOP 프레임워크로는 AspectJ가 있다.&lt;/p&gt;

&lt;p&gt;(3) PSA (Portable Service Abstraction)  &lt;br /&gt;
스프링은 비슷한 기술을 모두 아우를 수 있는 추상화 계층을 제공하여, 사용하는 기술이 바뀌더라도 &lt;br /&gt;
비즈니스 로직의 변화가 없도록 도와준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;스프링-프레임워크를-사용하면서-발생할-수-있는-문제점들&quot;&gt;스프링 프레임워크를 사용하면서 발생할 수 있는 문제점들&lt;/h2&gt;

&lt;p&gt;스프링 프레임워크를 사용할 때 성능 문제가 가장 많이 발생하는 부분은 &lt;strong&gt;프록시(proxy)&lt;/strong&gt; 와 관련이 있다. &lt;br /&gt;
스프링 프록시는 기본적으로 실행 시에 생성된다.   &lt;br /&gt;
따라서 요청량이 많은 운영 상황으로 넘어가면 문제가 나타날 수 있다.&lt;/p&gt;

&lt;p&gt;스프링이 프록시를 사용하게 하는 주요 기능은 &lt;strong&gt;트랜잭션&lt;/strong&gt;이다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transaction&lt;/code&gt; 어노테이션을 사용하면 해당 어노테이션을 사용한 클래스의 인스턴스를 처음 만들 때 프록시 객체를 만든다. &lt;br /&gt;
개발자가 직접 스프링 &lt;strong&gt;AOP&lt;/strong&gt;를 사용해서 별도의 기능을 추가하는 경우에도 프록시를 사용하는데, &lt;br /&gt;
이 부분에서 문제가 많이 발생한다.&lt;/p&gt;

&lt;p&gt;따라서, 간단한 부하 툴을 사용해서라도 성능적인 면을 테스트해야만 한다.&lt;/p&gt;

&lt;p&gt;추가로, 스프링이 &lt;strong&gt;내부 매커니즘에서 사용하는 캐시&lt;/strong&gt;도 조심해야 한다. &lt;br /&gt;
예를들어 스프링 MVC에서 작성하는 메서드의 리턴 타입으로 다음과 같은 문자열을 사용할 수 있다. &lt;br /&gt;
이 때 매번 동일한 문자열에 대한 뷰 객체를 새로 찾기 보다는 이미 찾아본 뷰 객체를 캐싱해두면    &lt;br /&gt;
다음에도 동일한 문자열이 반환됐을 때 훨씬 빠르게 뷰 객체를 찾을 수 있다.&lt;/p&gt;

&lt;p&gt;스프링이 제공하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewResolver&lt;/code&gt; 중에 자주 사용되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InternalResourceViewResolver&lt;/code&gt;에는 그러한 캐싱 기능이 내장되어 있다. &lt;br /&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewResolver&lt;/code&gt;는 뷰 이름과 지역화를 위한 Locale을 파라미터로 전달받으며,      &lt;br /&gt;
매핑되는 View 객체를 리턴한다. 만약, 매핑되는 View 객체가 존재하지 않으면 null을 리턴한다.)&lt;/p&gt;

&lt;p&gt;만약 매번 다른 문자열이 생성될 가능성이 높고, 상당히 많은 수의 키 값으로 캐싱 값이 생성될 여지가 있는 상황에서는 &lt;br /&gt;
문자열을 반환하는 게 메모리에 치명적일 수 있다.&lt;/p&gt;

&lt;p&gt;이런 상황에서는 뷰 이름을 문자열로 변환하기보다는 뷰 객체 자체를 반환하는 방법이 메모리 릭을 방지하는 데 도움이 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/members/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedirectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/members/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-spring/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-spring/</guid>
      </item>
    
      <item>
        <title>클래스와 메서드의 정보를 확인할 수 있는 API</title>
        <description>&lt;h1 id=&quot;클래스-정보-어떻게-알아낼-수-있나&quot;&gt;클래스 정보, 어떻게 알아낼 수 있나?&lt;/h1&gt;
&lt;p&gt;자바에는 클래스와 메서드의 정보를 확인할 수 있는 API가 있다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reflection-관련-클래스들&quot;&gt;reflection 관련 클래스들&lt;/h3&gt;
&lt;p&gt;자바 API에는 reflection 이라는 패키지가 있다.  &lt;br /&gt;
이 패키지에 있는 클래스들을 사용하면 JVM에 로딩되어 있는 클래스와 메서드 정보를 읽어 올 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;class-클래스&quot;&gt;Class 클래스&lt;/h3&gt;
&lt;p&gt;Class 클래스는 클래스에 대한 정보를 얻을 때 사용하기 좋고, 생성자는 따로 없다. &lt;br /&gt;
ClassLoader 클래스의 defineClass() 메서드를 이용해서 클래스 객체를 만들 수도 있지만, 좋은 방법은 아니다.   &lt;br /&gt;
그보다는 Object 클래스에 있는 getClass() 메서드를 사용하는 것이 일반적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;method-클래스&quot;&gt;Method 클래스&lt;/h3&gt;
&lt;p&gt;Method 클래스를 사용하면 메서드에 대한 정보를 얻을 수 있다. &lt;br /&gt;
하지만 Method 클래스에는 생성자가 없으므로 Method 클래스의 정보를 얻기 위해서 &lt;br /&gt;
Class 클래스의 getMethod() 메서드를 사용하거나 getDeclaredMethod() 메서드를 써야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;field-클래스&quot;&gt;Field 클래스&lt;/h3&gt;
&lt;p&gt;Field 클래스는 클래스에 있는 변수들의 정보를 제공하기 위해서 사용한다.  &lt;br /&gt;
Method 클래스와 마찬가지로 생성자가 존재하지 않으므로 Class 클래스와 함께 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reflection-클래스를-잘못-사용한-사례&quot;&gt;reflection 클래스를 잘못 사용한 사례&lt;/h3&gt;
&lt;p&gt;일반적으로 로그를 프린트할 때 클래스 이름을 알아내기 위해 다음과 같은 Class 클래스를 많이 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법은 getClass() 메서드를 호출할 때 Class 객체를 만들고,         &lt;br /&gt;
그 객체의 이름을 가져오는 메서드를 수행하는 시간과 메모리를 사용할 뿐이다.&lt;/p&gt;

&lt;p&gt;응답 속도에 그리 많은 영향을 주지는 않지만, 많이 사용하면 필요 없는 시간을 낭비하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;reflection 관련 클래스를 사용하면 클래스의 정보 및 여러 가지 세부 정보를 알 수 있어 매우 편리하다. &lt;br /&gt;
하지만 로그에서 사용하기 위해서라면, instanceof를 사용하는 것이 클래스의 이름으로 해당 객체의 타입을 비교하는 방법보다 낫다.&lt;/p&gt;

&lt;p&gt;추가적으로 클래스의 메타 데이터 정보는 JVM의 Perm 영역에 저장된다.          &lt;br /&gt;
만약 Class 클래스를 사용하여 엄청나게 많은 클래스를 동적으로 생산하는 일이 벌어지면        &lt;br /&gt;
Perm 영역이 더 이상 사용할 수 없게 되어 OutOfMemoryError가 발생할 수도 있어 조심해야 한다.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-reflection/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-reflection/</guid>
      </item>
    
      <item>
        <title>JSON도 잘 쓰자</title>
        <description>&lt;h2 id=&quot;json과-파서들&quot;&gt;JSON과 파서들&lt;/h2&gt;

&lt;p&gt;JSON 데이터는 다음과 같은 두 가지의 구조를 기본으로 하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name/value 형태의 쌍으로 collection 타입&lt;/li&gt;
  &lt;li&gt;값의 순서가 있는 목록 타입&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSON도 많은 CPU와 메모리를 점유하며 응답 시간도 느리다.&lt;/p&gt;

&lt;p&gt;많은 종류의 자바 기반 JSON 파서들이 존재하는데, 가장 많이 사용되는 JSON 파서로는 Jackson JSON과 google-gson 등이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jackson JSON 에 대해 알아보자.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JSON을 파싱하는 코드의 성능 비교 결과를 보면 XML 파싱이 JSON 보다 매우 느리다고 생각할 수 있지만,&lt;br /&gt;
데이터를 전송하기 위해서 XML 및 JSON 데이터를 Serialize와 Deserialize 할 경우도 있다.&lt;/p&gt;

&lt;p&gt;그런데 JSON 데이터는 Serialize와 Deserialize를 처리하는 성능이 좋지 않다. &lt;br /&gt;
XML 파서보다 JSON 파서가 느린 경우가 대부분이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JSON 데이터를 자바로 파싱하는 라이브러리들의 성능을 비교하는 여러 글을 읽어봤는데       &lt;br /&gt;
대용량 환경에서는 Jackson을 마이크로 서비스와 분산아키텍처 설정등과 같이 작은 용량의 많은           &lt;br /&gt;
json 파일을 처리하는 환경이라면 GSON을 사용하는 것이 좋다는 결론이 많았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;p&gt;XML 이나 JSON을 데이터 처리 기준으로 선정한다면, 메모리 및 CPU 사용량 손실을 반드시 염두에 둬야한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-json/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-json/</guid>
      </item>
    
      <item>
        <title>Collection과 Map</title>
        <description>&lt;h1 id=&quot;어디에-담아야-하는지&quot;&gt;어디에 담아야 하는지?&lt;/h1&gt;

&lt;p&gt;배열은 처음부터 크기를 지정해야 하지만,    &lt;br /&gt;
Collection의 객체 대부분은 그럴 필요 없이 객체들이 채워질 때마다 자동으로 크기가 증가된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;collection-및-map-인터페이스의-이해&quot;&gt;Collection 및 Map 인터페이스의 이해&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Collection : 가장 상위 인터페이스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set : 중복을 허용하지 않는 집합을 처리하기 위한 인터페이스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SortedSet : 오름차순을 갖는 Set 인터페이스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List : 순서가 있는 집합을 처리하기 위한 인터페이스이기 때문에 인덱스가 있어 위치를 지정하여 값을 찾을 수 있다. &lt;br /&gt;
중복을 허용하며, List 인터페이스를 상속받는 클래스 중에 가장 많이 사용하는 것으로 ArrayLIst가 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Queue : 여러 개의 객체를 처리하기 전에 담아서 처리할 때 사용하기 위한 인터페이스이다.      &lt;br /&gt;
이 객체는 중복되는 키를 허용하지 않는다. 기본적으로 FIFO를 따른다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SortedMap : 키를 오음차순으로 정렬하는 Map 인터페이스이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-인터페이스&quot;&gt;Set 인터페이스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;HashSet : 데이터를 해쉬 테이블에 담는 클래스로 순서 없이 저장된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TreeSet: red-black 이라는 크리에 데이터를 담는다. &lt;br /&gt;
값에 따라 순서가 정해진다.  &lt;br /&gt;
데이터를 담으면서 동시에 정렬을 하기 떄문에 HashSet보다 성능상 느리다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LinkedHashSet : 해쉬 테이블에 데이터를 담는데, 저장된 순서에 따라서 순서가 결정된다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HashSet과 LinkedHashSet의 성능이 비슷하고, TreeSet의 순서로 성능 차이가 발생한다.   &lt;br /&gt;
(LinkedHashSet &amp;gt; HashSet &amp;gt; TreeSet)&lt;/p&gt;

&lt;p&gt;TreeSet은 데이터를 저장하면서 정렬한다. &lt;br /&gt;
데이터를 순서에 따라 탐색해야 하는 경우에는 TreeSet을 사용하는 것이 좋다. &lt;br /&gt;
하지만 그럴필요가 없을 때는 HashSet이나 LinkedHashSet을 사용하는 것을 권장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;list-인터페이스&quot;&gt;List 인터페이스&lt;/h3&gt;
&lt;p&gt;구현된 클래스에는 ArrayList와 Linked-List 클래스가 있으며, 원조 클래스 격인 Vector 클래스가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Vector : 객체 생성시에 크기를 지정할 필요가 없는 배열 클래스이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayList : Vector과 비슷하지만, 동기화 처리가 되어 있지 않다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LinkedList : ArrayList와 동일하지만, Queue 인터페이스를 구현했기 때문에 FIFO 큐 작업을 수행한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) 데이터를 넣는 속도 비교 &lt;br /&gt;
데이터를 넣은 것은 어떤 클래스든 큰 차이가 없다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(2) 순차적으로 결과를 받아오는 속도 비교 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list.get(index)&lt;/code&gt;)               &lt;br /&gt;
ArrayList가 가장 빠르고, Vector과 LinkedList는 속도가 매우 느리다.        &lt;br /&gt;
LinkedList가 Queue 인터페이스를 상속받기 때문이다.                           &lt;br /&gt;
이를 수정하기 위해서는 순차적으로 결과를 받아오는 peek()나 poll() 메서드를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;수정 후, 테스트를 다시 해보면  &lt;br /&gt;
ArrayList, LinkedList, Vector 순으로 빠르게 바뀐다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; ArrayList와 Vector의 성능 차이는 왜 이렇게 큰가?  &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; Vector은 여러 스레드에서 접근할 경우를 방지하기 위해서   &lt;br /&gt;
get() 메서드에 synchronized가 선언되어 있다.    &lt;br /&gt;
그래서 성능 저하가 발생할 수밖에 없다.   &lt;br /&gt;
ArrayList는 여러 스레드에서 접근할 경우 문제가 발생할 수 있다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(3) 데이터를 삭제하는 시간 비교   &lt;br /&gt;
첫 번째 값 삭제와 마지막 값 삭제 속도의 차이가 크다.&lt;/p&gt;

&lt;p&gt;LinkedList는 별 차이가 없지만, ArrayList나 Vector은 실제로 그 안에 배열을 사용한다. &lt;br /&gt;
그래서 ArrayList와 Vector의 첫번째 값을 삭제하면 느릴 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;map-인터페이스&quot;&gt;Map 인터페이스&lt;/h3&gt;
&lt;p&gt;Map은 key-value 쌍으로 저장되는 구조체이다.   &lt;br /&gt;
그래서 Map은 단일 객체만 저장하는 다른 Collection API들과는 다르게 따로 분리되어 있다.&lt;/p&gt;

&lt;p&gt;구현한 클래스들은 HashMap, TreeMap, LinkedHashMap 세 가지와  &lt;br /&gt;
원조 클래스 격인 Hashtable 클래스가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hashtable : 데이터를 해쉬 테이블에 담는 클래스이다. 내부에서 관리하는데 해쉬 테이블 객체가 동기화되어 있으므로, &lt;br /&gt;
동기화가 필요한 부분에서는 이 클래스를 사용하기 바란다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HashMap : 데이터를 해쉬 테이블에 담는 클래스이다. &lt;br /&gt;
Hashtable 클래스와 다른 점은 null 값을 허용한다는 것과 동기화되어 있지 않다는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TreeMap : red-blak 트리에 데이터를 담는다. &lt;br /&gt;
TreeSet과 다른 점은 키에 의해서 순서가 정해진다는 점이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LinkedHashMap : HashMap과 거의 동일하며 이중 연결 리스트라는 방식을 사용하여 데이터를 담는다는 점만 다르다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대부분의 클래스가 동일하지만,   &lt;br /&gt;
트리 형태로 처리하는 TreeMap 클래스가 가장 느리다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;queue-인터페이스&quot;&gt;Queue 인터페이스&lt;/h3&gt;
&lt;p&gt;Queue는 데이터를 담아 두었다가 먼저 들어온 데이터부터 처리하기 위해서 사용된다. &lt;br /&gt;
List의 큰 단점은 데이터가 많은 경우 처리 시간이 늘어난다는 점이다. &lt;br /&gt;
가장 앞에 있는 데이터를 지우면 한 칸씩 옮기는 작업을 수행해야 하므로 느리다.&lt;/p&gt;

&lt;p&gt;Queue 인터페이스를 구현한 클래스는 두 가지로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;java.util 패키지에 속하는 LinkedList와 PriorityQueue -&amp;gt; 일반적인 목적의 큐 클래스&lt;/li&gt;
  &lt;li&gt;java.util.concurrent 패키지에 속하는 클래스들 -&amp;gt; 컨커런트 큐 클래스   &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Queue 구현 클래스&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Priority Queue : 큐에 추가된 순서와 상관없이 먼저 생성된 객체가 먼저 나오도록 되어 있는 큐다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LinkedBlockingQueue : 저장할 데이터의 크기를 선택적으로 정할 수도 있는 FIFO 기반의 링크 노드를 사용하는 블로킹 큐다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayBlockingQueue : 저장되는 데이터의 크기가 정해져있는 FIFO 기반의 블로킹 큐다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PriorityBlockingQueue : 저장되는 데이터의 크기가 정해져 있지 않고, 객체의 생성순서에 따라서 순서가 저장되는 블로킹 큐다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DelayQueue : 큐가 대기하는 시간을 지정하여 처리하도록 되어 있는 큐다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SynchronousQueue : put() 메서드를 호출하면, 다른 스레드에서 take() 메서드가 호출될 때까지 대기하도록 되어 있는 큐다. &lt;br /&gt;
이 큐에는 저장되는 데이터가 없다. API에서 제공하는 대부분의 메서드는 0이나 Null을 리턴한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;블로킹 큐(blocking queue)란 크기가 지정되어 있는 큐에 더 이상 공간이 없을 때, &lt;br /&gt;
공간이 생길 때까지 대기하도록 만들어진 큐를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;collection-관련-클래스의-동기화&quot;&gt;Collection 관련 클래스의 동기화&lt;/h3&gt;
&lt;p&gt;HashSet, TreeSet, LinkedHashSet, ArrayList, LinkedList,    &lt;br /&gt;
HashMap, TreeMap, LinkedHashMap은 동기화되지 않은 클래스이다.  &lt;br /&gt;
(JDK 1.2 버전 이후에 만들어짐)&lt;/p&gt;

&lt;p&gt;동기화되어 있는 클래스로는 Vector와 Hashtable이 있다.  &lt;br /&gt;
(JDK 1.0 버전에 만들어짐)&lt;/p&gt;

&lt;p&gt;Collection 클래스에는 최신 버전 클래스들의 동기화를 지원하기 위한 synchronized로 시작하는 메서드들이 있다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt;: 현재 데이터를 사용하고 있는 해당 스레드를 제외하고        &lt;br /&gt;
나머지 스레드들은 데이터에 접근할 수 없도록 막는 개념&lt;/p&gt;

&lt;p&gt;synchronized 키워드를 너무 남발하면 오히려 성능 저하를 일으킬 수 있다.        &lt;br /&gt;
자바 내부적으로 blocking, non-blocking 처리를 하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-collection/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-collection/</guid>
      </item>
    
      <item>
        <title>JVM은 어떻게 구동될까?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹 기반 시스템을 배포할 때 그냥 재시작만 한다면,       &lt;br /&gt;
배포 직후 시스템 사용자들은 엄청나게 느린 응답 시간과 함께 시스템에 대한 많은 불만을 갖게 될 수도 있다.       &lt;br /&gt;
즉, warning up이 필요한데 왜 이런 작업이 필요할까?  &lt;br /&gt;
왜 WAS을 재시작하면 성능이 느린지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음은 반드시 성능과 관련있는 부분은 아니지만 아래 내용은 알아두면 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HotSpot VM 구조&lt;/li&gt;
  &lt;li&gt;JIT 옵티마이저&lt;/li&gt;
  &lt;li&gt;JVM의 구동 절차&lt;/li&gt;
  &lt;li&gt;JVM의 종료 절차&lt;/li&gt;
  &lt;li&gt;클래스 로딩의 절차&lt;/li&gt;
  &lt;li&gt;예외 처리의 절차&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hotspot-vm-은-어떻게-구성되어-있을까&quot;&gt;HotSpot VM 은 어떻게 구성되어 있을까?&lt;/h2&gt;

&lt;p&gt;자바의 성능을 개선하기 위해 Just In Time(JIT) 컴파일러를 만들었고, 이름을 HotSpot이라고 지었다.&lt;/p&gt;

&lt;p&gt;JIT 컴파일러는 프로그램의 성능에 영향을 주는 지점에 대해서 지속적으로 분석한다.  &lt;br /&gt;
분석된 지점은 부하를 최소화하고, 높은 성능을 내기 위한 최적화의 대상이 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JIT를 사용한다는 것&lt;/strong&gt;은 언제나 자바 메서드가 호출되면    &lt;br /&gt;
&lt;strong&gt;바이트 코드를 컴파일&lt;/strong&gt;하고 &lt;strong&gt;실행 가능한 네이티브 코드로 변환&lt;/strong&gt;한다는 의미다.    &lt;br /&gt;
하지만 매번 JIT로 컴파일을 하면 성능 저하가 심하므로, 최적화 단계를 거치게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;HotSpot VM 아키텍처는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/125040269-6825e500-e0d2-11eb-8091-2b80a2c21d9c.jpeg&quot; alt=&quot;KakaoTalk_Photo_2021-07-09-16-25-48&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HotSpot VM 런타임&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC 방식&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JIT 컴파일러&lt;/code&gt;를 끼워 맞춰 사용할 수 있다.    &lt;br /&gt;
이를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VM 런타임&lt;/code&gt;은 JIT 컴파일러용 API와 가비지 컬렉터용 API를 제공한다.   &lt;br /&gt;
JVM을 시작하는 런처와 스레드 관리, JNI 등도 VM 런타임에서 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jit-optimizer라는-게-도대체-뭘까&quot;&gt;JIT Optimizer라는 게 도대체 뭘까?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;HotSpot VM JIT 컴파일러에 대해서 이야기하기 전에 &lt;br /&gt;
Client 버전과 Server 버전으로 나뉜다는 것을 기억하자.
client는 스타트업 시간과 메모리공간에 대한 최적화에 중점을 두고 있고,    &lt;br /&gt;
server는 시작시간은 좀 걸리더라도 다수의 request를 빠르게 처리하는데에 중점을 맞추고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;javac 컴파일러는 소스코드를 바이트코드로 된 class 파일로 변환시켜준다.         &lt;br /&gt;
자바 프로그램을 실행할 때 JVM은 항상 바이트코드로 시작, 동적으로 기계에 의존적인 코드로 변환한다.&lt;/p&gt;

&lt;p&gt;JIT은 애플리케이션에서 각각의 메서드를 컴파일할 만큼 시간적 여유가 없어서      &lt;br /&gt;
모든 코드는 초기에 인터프리터에 의해서 시작되고 해당 코드가 충분히 많이 사용될 경우에 컴파일할 대상이 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;• 인터프리터     &lt;br /&gt;
자바 인터프리터는 JAVAC 명령으로 자바 프로그램을 중간 형태인 자바 바이트코드로 컴파일하고,        &lt;br /&gt;
이를 자바 인터프리터가 한 줄씩 해석하여 기계어로 번역한다.&lt;/p&gt;

  &lt;p&gt;• 컴파일    &lt;br /&gt;
고급언어로 작성된 프로그램을 목적프로그램으로 번역 후 링킹(Linking) 작업을 통해 실행 프로그램을 생성한다.       &lt;br /&gt;
자바는 javac로 컴파일 하고 java로 실행시 중간언어(클래스파일)를 한줄 씩  &lt;br /&gt;
자바 인터프로터가 번역하므로 컴파일 언어이면서 인터프리터 언어이다.&lt;/p&gt;

  &lt;p&gt;• 왜 컴파일과 인터프리터 방식을 병행할까?    &lt;br /&gt;
원래 자바의 JVM에서는 인터프리터 방식만 사용했었다.   &lt;br /&gt;
하지만 성능의 문제가 발생으로 JIT Compiler를 추가해서 성능의 효율을 끌어올렸다.  &lt;br /&gt;
이로 인해 자바는 컴파일과 인터프리터 방식을 병행해서 사용하게 됐다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;HotSpot VM에서 이 작업은 &lt;strong&gt;각 메서드에 있는 카운터를 통해서 통제&lt;/strong&gt;되며,    &lt;br /&gt;
메서드에는 두 개의 카운터가 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수행 카운터 (invocation counter): 메서드를 시작할 때마다 증가.&lt;/li&gt;
  &lt;li&gt;백에지 카운터 (backedge counter): 높은 바이트 코드 인덱스에서 낮은 인텍스로 컨트롤 흐름이 변경될 때마다 증가,       &lt;br /&gt;
메소드에 루프가 존재하는지 확인할 때 사용된다.  &lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;backedge counter는 invocation counter보다 컴파일 우선순위가 더 높다.&lt;/p&gt;

&lt;p&gt;이 카운터들이 인터프리터에 의해 증가될 때마다 그 값들이 한계치에 도달했는지 확인하고 &lt;br /&gt;
도달했을 경우 인터프리터는 컴파일을 요청한다.&lt;/p&gt;

&lt;p&gt;컴파일이 요청되면 컴파일 대상 목록의 큐에 쌓이고, 하나 이상의 컴파일러 스레드가 이 큐를 모니터링한다. &lt;br /&gt;
컴파일러 스레드가 바쁘지 않을 때는 큐에서 대상을 빼내서 컴파일을 시작한다.  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HotSpot VM은 OSR(On Stack Replacement)&lt;/strong&gt; 이라는 특별한 컴파일도 수행한다.       &lt;br /&gt;
이 OSR은 인터프리터에서 수행한 코드 중 오랫동안 루프가 지속되는 경우,        &lt;br /&gt;
중간에 컴파일해야 남은 반복을 빠르게 수행할 수 있기 때문에 사용된다.&lt;/p&gt;

&lt;p&gt;최적화되지 않은 코드가 수행되고 있는 것을 발견하면 인터프리터에 두지 않고, 컴파일된 코드로 변경한다.         &lt;br /&gt;
루프가 끝나지 않고 지속적으로 수행되고 있을 경우에 큰 도움이 된다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;SUN에서 개발한 HotSpot VM을 제외하고도 BAE 시스템에서 개발한 JRockit,    &lt;br /&gt;
IBM에서 개발한 IBM JVM의 JIT 컴파일 방식이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JVM에 대한 더 많은 내용을 다음 글을 참고하면 좋을 것이다.
&lt;a href=&quot;https://d2.naver.com/helloworld/1230&quot;&gt;JVM 에 대한 Naver D2 글&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;        &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jvm-시작-절차&quot;&gt;JVM 시작 절차&lt;/h2&gt;
&lt;p&gt;(1) java 명령어 줄에 있는 옵션 파싱&lt;/p&gt;

&lt;p&gt;(2) 자바 힙 크기 할당 및 JIT 컴파일러 타입 지정 (명령줄에 지정되지 않았을 경우)&lt;/p&gt;

&lt;p&gt;(3) CLASSPATH와 LD_LIBRARY_PATH 같은 환경 변수를 지정한다.&lt;/p&gt;

&lt;p&gt;(4) 자바의 Main 클래스가 지정되지 않았으면, Jar 파일의 mainfest 파일에서 Main 클래스를 확인한다.&lt;/p&gt;

&lt;p&gt;(5) JNI의 표준 API인 JNI_CreateJavaVM를 사용하여 새로 생성한 non-primordial이라는 스레드에서 HotSpot VM을 생성한다.&lt;/p&gt;

&lt;p&gt;(6) HotSpot VM이 생성되고 초기화되면, Main 클래스가 로딩된 런처에서는 main() 메서드의 속성 정보를 읽는다.&lt;/p&gt;

&lt;p&gt;(7) CallStaticVoidMethod는 네이티브 인터페이스를 불러 HotSpot VM에 있는 main() 메서드가 수행된다. &lt;br /&gt;
이떄 자바 실행 시 Main 클래스 뒤에 있는 값들이 전달된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jvm-종료-절차&quot;&gt;JVM 종료 절차&lt;/h2&gt;
&lt;p&gt;VM이 시작할 때 오류가 있어 시작을 중지할 때나, JVM에 심각한 에러가 있어서 중지할 필요가 있을 때는 &lt;br /&gt;
DestroyJavaVM이라는 메서드를 HotSpot 런처에서 호출한다.&lt;/p&gt;

&lt;p&gt;HotSpot VM의 종료는 다음의 DestroyJavaVM 메서드의 종료 절차를 따른다.&lt;/p&gt;

&lt;p&gt;(1) HotSpot VM이 작동중인 상황에서는 단 하나의 데몬이 아닌 스레드가 수행될 때까지 대기한다.&lt;/p&gt;

&lt;p&gt;(2) java.lang 패키지에 있는 Shutdown 클래스의 shutdown() 메서드가 수행된다. &lt;br /&gt;
이 메서드가 수행되면 자바 레벨의 shutdown hook이 수행되고, &lt;br /&gt;
finalization-on-exit 이라는 값이 true일 경우에 자바 객체 finalizer를 수행한다.&lt;/p&gt;

&lt;p&gt;(3) HotSpot VM 레벨의 shutdown hook을 수행함으로써 HotSpot VM의 종료를 준비한다. &lt;br /&gt;
이 작업은 JVM_OnExit() 메서드를 통해서 지정된다. &lt;br /&gt;
그리고, HotSpot VM의 profiler, stat sampler, watcher, garbage collector 스레드를 종료시킨다. &lt;br /&gt;
이 작업들이 종료되면 JVMTI를 비활성화하며, Signal 스레드를 종료시킨다.&lt;/p&gt;

&lt;p&gt;(4) HotSpot의 JavaThread::exit() 메서드를 호출하여 JNI 처리 블록을 해제한다.  &lt;br /&gt;
그리고, guard pages, 스레드 목록에 있는 스레드들을 삭제한다.  &lt;br /&gt;
이 순간부터는 HotSpot VM에서는 자바 코드를 실행하지 못한다.&lt;/p&gt;

&lt;p&gt;(5) HotSpot VM 스레드를 종료한다. 
이 작업을 수행하면 HotSpot VM에 남아 있는 HotSpot VM 스레드들을 safepoint로 옮기고, JIT 컴파일러 스레드들을 중지시킨다.&lt;/p&gt;

&lt;p&gt;(6) JNI, HotSpot VM, JVMTI barrier에 있는 추적 기능을 종료시킨다.&lt;/p&gt;

&lt;p&gt;(7) 네이티브 스레드에서 수행하고 있는 스레드들을 위해서 HotSpot의 “vm exited” 값을 설정한다.&lt;/p&gt;

&lt;p&gt;(8) 현재 스레드를 삭제한다.&lt;/p&gt;

&lt;p&gt;(9) 입출력 스트림을 삭제하고, PerfMemory 리소스 연결을 해제한다.&lt;/p&gt;

&lt;p&gt;(10) JVM 종료를 호출한 호출자로 복귀한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;클래스-로딩-절차&quot;&gt;클래스 로딩 절차&lt;/h2&gt;
&lt;p&gt;(1) 주어진 클래스의 이름으로 클래스 패스에 있는 바이너리로 된 자바 클래스를 찾는다.&lt;/p&gt;

&lt;p&gt;(2) 자바 클래스를 정의한다.&lt;/p&gt;

&lt;p&gt;(3) 해당 클래스를 나타내는 java.lang 패키지의 Class 클래스의 객체를 생성한다.&lt;/p&gt;

&lt;p&gt;(4) 링크 작업이 수행된다. 이 단계에서 static 필드를 생성 및 초기화하고, 메서드 테이블을 할당한다.&lt;/p&gt;

&lt;p&gt;(5) 클래스의 초기화가 진행되며, 클래스의 static 블록과 static 필드가 가장 먼저 초기화 된다.  &lt;br /&gt;
해당 클래스가 초기화 되기 전에 부모 클래스의 초기화가 먼저 이루어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;내부-클래스-로딩-데이터의-관리&quot;&gt;내부 클래스 로딩 데이터의 관리&lt;/h2&gt;
&lt;p&gt;HotSpot VM은 클래스 로딩을 추적하기 위해 다음 3개의 해시 테이블을 관리한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SystemDictionary
    &lt;ul&gt;
      &lt;li&gt;로드된 클래스를 포함한다.&lt;/li&gt;
      &lt;li&gt;클래스 이름과 초기화한 로더의 정보, 클래스 일므과 정의한 로더의 정보도 포함한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PlaceholderTable
    &lt;ul&gt;
      &lt;li&gt;현재 로딩된 클래스에 대한 정보를 관리한다.&lt;/li&gt;
      &lt;li&gt;이 테이블은 ClassCircularityError를 체크할 때 사용&lt;/li&gt;
      &lt;li&gt;다중 스레드에서 클래스를 로딩하는 클래스 로더에서도 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LoaderConstraintTable
    &lt;ul&gt;
      &lt;li&gt;타입 체크시의 제약 사항을 추정하는 용도로 사용된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;예외는-jvm에서-어떻게-처리될까&quot;&gt;예외는 JVM에서 어떻게 처리될까?&lt;/h2&gt;
&lt;p&gt;JVM은 자바 언어의 제약을 어겼을 때 예외(exception)라는 시그널로 처리한다.   &lt;br /&gt;
HotSpot VM 인터프리터, JIT 컴파일러, 다른 HotSpot VM 컴포넌트는 예외 처리와 모두 관련되어 있다.&lt;/p&gt;

&lt;p&gt;일반적인 예외 처리 경우는 아래 두 가지 경우다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;예외를 발생한 메서드에서 잡을 경우&lt;/li&gt;
  &lt;li&gt;호출한 메서드에 의해서 잡힐 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;후자의 경우에는 보다 복잡하며, 스택을 뒤져서 적당한 핸들러를 찾는 작업을 필요로 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;VM이 예외가 던져졌다는 것을 알아차렸을 때, 해당 예외를 처리하는 가장 가까운 핸들러를 찾기 위해서 &lt;br /&gt;
HotSpot VM 런타임 시스템이 수행된다.&lt;/p&gt;

&lt;p&gt;핸들러를 찾기 위해 다음 3가지 정보가 사용된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;현재 메서드&lt;/li&gt;
  &lt;li&gt;현재 바이트 코드&lt;/li&gt;
  &lt;li&gt;예외 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 현재 메서드에서 핸들러를 찾지 못하면 현재 수행되는 스택 프레임을 통해 &lt;br /&gt;
이전 프레임을 찾는 작업을 수행한다.    &lt;br /&gt;
적당한 핸들러를 찾으면 HotSpot VM 수행 상태가 변경되며 HotSpot VM은 핸들러로 이동하고 자바 코드 수행은 계속된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-JVM/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-JVM/</guid>
      </item>
    
      <item>
        <title>DB를 사용하면서 발생 가능한 문제점</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자바 기반 애플리케이션의 성능을 진단해 보면, 응답 속도를 지연시키는 대부분의 요인은 DB 쿼리 수행 시간과 결과를 처리하는 시간이다.&lt;/p&gt;

&lt;p&gt;이 책의 저자는 애플리케이션에서의 DB 접속 관련 공지가 있었다고 한다.   &lt;br /&gt;
주된 내용은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DB Connection을 할 경우에는 반드시 공통 유틸리티를 사용할 것.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 모듈별 DataSource를 사용하여 리소스가 부족한 현상이 발생하지 않아도록 할 것.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;반드시 Connection, Statement 관련 객체, ResultSet을 close할 것.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이지 처리를 하기 위해서 ResultSet객체.last() 메서드를 사용하지 말 것.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;왜 위와 같은 조치를 취해야 하는지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db-connection-과-connection-pool-datasource&quot;&gt;DB Connection 과 Connection Pool, DataSource&lt;/h2&gt;
&lt;p&gt;일반적으로 DB에 연결하여 사용하는 방법에서 가장 느린 부분은 Connection 객체를 얻는 부분이다. &lt;br /&gt;
DB와 WAS 사이에는 통신을 해야 하기 때문이다. &lt;br /&gt;
사용자가 갑자기 증가하면 Connection 객체를 얻기 위한 시간이 엄청나게 소요될 것이며, 많은 화면이 예외를 발생시킬 것이다.&lt;/p&gt;

&lt;p&gt;이러한 부담을 줄이기 위해 사용하는 것이 DB Connection Pool이다.&lt;/p&gt;

&lt;p&gt;가능하면 안정되고 검증된 WAS에서 제공하는 DB Connection Pool이나 DataSource를 사용하자.&lt;/p&gt;

&lt;p&gt;Statement와 거의 동일하게 사용할 수 있는 Statement 인터페이스의 자식 클래스로 PreparedStatement가 있다. &lt;br /&gt;
그리고 PL/SQL을 처리하기 위해서 사용하는 PreparedStatement의 자식 클래스로 CallableStatement가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statement VS. PreparedStatement&lt;/strong&gt;&lt;br /&gt;
이 둘의 가장 큰 차이점은 캐시(cache) 사용 여부이다. &lt;br /&gt;
이 둘을 사용할 때는 다음과 같은 프로세스를 거친다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;쿼리 문장 분석&lt;/li&gt;
  &lt;li&gt;컴파일&lt;/li&gt;
  &lt;li&gt;실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Statement를 사용하면 매번 쿼리를 수행할 때마다 1~3 단계를 거치고 &lt;br /&gt;
PreparedStatement는 처음 한 번만 세 단계를 거친 후 캐시에 담아서 재사용 한다는 것이다.&lt;/p&gt;

&lt;p&gt;만약 같은 쿼리를 반복적으로 수행한다면 PreparedStatement가 DB에 훨씬 적은 부하를 주며, 성능도 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;db를-사용할-때-닫아야-하는-것들&quot;&gt;DB를 사용할 때 닫아야 하는 것들&lt;/h2&gt;
&lt;p&gt;일반적으로 각 객체를 얻는 순서는 Connection, Statement, ResultSet 순이며,  &lt;br /&gt;
객체를 닫는 순서는 ResultSet, Statement, Connection 순이다.&lt;/p&gt;

&lt;p&gt;먼저 ResultSet 객체가 닫히는 경우는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드 호출&lt;/li&gt;
  &lt;li&gt;GC의 대상이 되어 GC되는 경우&lt;/li&gt;
  &lt;li&gt;관련된 Statement 객체의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드가 호출되는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 왜 굳이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 를 해야 하는가?&lt;/p&gt;

&lt;p&gt;Connection, Statement 관련 인터페이스, ResultSet 인터페이스에서 close() 메서드를 호출하는 이유는 &lt;br /&gt;
자동으로 호출되기 전에 관련된 DB와 JDBC 리소스를 해제하기 위함이다.&lt;/p&gt;

&lt;p&gt;Statement 객체는 Connection 객체를 close() 한다고 자동으로 닫히지 않는다. &lt;br /&gt;
다음 두 경우에만 닫히므로, 반드시 close() 메서드를 호출해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드 호출&lt;/li&gt;
  &lt;li&gt;GC의 대상이 되어 GC되는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;가장 문제가 되는 Connection 인터페이스의 객체에 대해 알아보자.  &lt;br /&gt;
다음 세 가지 경우에 닫힌다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드 호출&lt;/li&gt;
  &lt;li&gt;GC의 대상이 되어 GC되는 경우&lt;/li&gt;
  &lt;li&gt;치명적인 에러가 발생하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;더 이상 사용할 수 있는 연결이 없으면, 여유가 생길 때까지 대기한다. &lt;br /&gt;
그러다가 어느 정도 시간이 지나면 오류가 발생한다.&lt;/p&gt;

&lt;p&gt;GC가 될 때까지 기다리면 Connection Pool이 부족해지는 것은 시간 문제다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같은 방법으로 이를 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 예는 throws 예외 구문이 있다는 가정 하에 작성되었다.&lt;/p&gt;

&lt;p&gt;무엇보다도 가장 좋은 방법은 DB와 관련된 처리를 담당하는 관리 클래스를 만드는 것이다. &lt;br /&gt;
보통 DBManager 이라는 이름의 클래스를 많이 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jdk-7-에서-등장한-autoclosable-인터페이스&quot;&gt;JDK 7 에서 등장한 AutoClosable 인터페이스&lt;/h2&gt;

&lt;p&gt;JDK 7부터 등장한 java.lang 패키지에 AutoClosable이라는 인터페이스가 있다.&lt;/p&gt;

&lt;p&gt;AutoClosable 인터페이스에는 리턴 타입이 void인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드 단 한 개만 선언되어 있다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드의 설명은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-with-resources&lt;/code&gt; 문장으로 관리되는 객체에 대해서 자동적으로 close() 처리를 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterruptedException&lt;/code&gt;을 던지지 않도록 하는 것을 권장한다.&lt;/li&gt;
  &lt;li&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; 메서드를 두 번 이상 호출할 경우 뭔가 눈에 보이는 부작용이 나타나도록 해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;가장 중요한 것은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-with-resources&lt;/code&gt; 이다. &lt;br /&gt;
try 블록이 시작될 때 소괄호 안에 close() 메서드를 호출하는 객체를 생성해 주면 &lt;br /&gt;
별도로 finally 블록에서 close() 메서드를 호출할 필요가 없어졌다는 의미다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resultsetlast-메서드&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResultSet.last()&lt;/code&gt; 메서드&lt;/h2&gt;
&lt;p&gt;이 메서드는 “ResultSet 객체가 갖고 있는 결과의 커서(Corsor)를 맨 끝으로 옮겨라” 라는 지시를 하는 메서드이다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rs.next()&lt;/code&gt;가 다음 커서로 옮기는 것과 비교하면 이해하기가 쉬울 것이다.&lt;/p&gt;

&lt;p&gt;이 메서드를 수행하는 이유가 뭘까?     &lt;br /&gt;
대부분의 이유는 다음과 같이 사용하기 위해서이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;nc&quot;&gt;ResultArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResultArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체 데이터 개수를 확인하고 배열에 담아서 사용하기 위해서라면 양호한 편..     &lt;br /&gt;
배열을 Vector로 변경하고 사용하면 되기 때문이다.      &lt;br /&gt;
하지만 게시판과 같은 화면을 구성할 때 전체 수를 확인하기 위해서라면    &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select count(*) from ...&lt;/code&gt; 과 같은 쿼리를 한 번 더 던져서 확인하는 것이 훨씬 빠르다.&lt;/p&gt;

&lt;p&gt;그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rs.last()&lt;/code&gt; 에는 문제가 있을까?  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rs.last()&lt;/code&gt; 메서드의 수행 시간은 데이터의 건수 및 DB와의 통신 속도에 따라서 달라진다. &lt;br /&gt;
건수가 많으면 많을 수록 대기 시간이 증가하기 때문에 rs.next()를 수행할 때와 비교할 수 없을 정도로 속도 차이가 나기 때문에, &lt;br /&gt;
이 메서드의 사용은 자제해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-DB/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-06-07/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D-DB/</guid>
      </item>
    
      <item>
        <title>JPA 연관관계</title>
        <description>&lt;h1 id=&quot;연관관계-매핑-기초&quot;&gt;연관관계 매핑 기초&lt;/h1&gt;

&lt;p&gt;엔티티들은 대부분 다른 엔티티와 연관관계가 있다. &lt;br /&gt;
그런데 객체는 참조(주소)를 사용해서 관계를 맺고 테이블은 외래키를 사용해서 관계를 맺는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방향
    &lt;ul&gt;
      &lt;li&gt;단방향 : 한 쪽만 참조&lt;/li&gt;
      &lt;li&gt;양방향 : 양쪽 모두 서로 참조&lt;br /&gt;
방향은 객체 관계에서만 존재하고 테이블 관계에서는 항상 양방향이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다중성    &lt;br /&gt;
다대일, 일대다, 일대일, 다대다 다중성이 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;연관관계의 주인   &lt;br /&gt;
객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-단방향-연관관계&quot;&gt;1. 단방향 연관관계&lt;/h2&gt;
&lt;h3 id=&quot;1-1-다대일n1-단방향-관계&quot;&gt;1-1 다대일(N:1) 단방향 관계&lt;/h3&gt;
&lt;p&gt;예) Member —(N, 1)— Team&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;객체 연관관계와 테이블 연관관계의 가장 큰 차이  &lt;br /&gt;
참조를 통한 연관관계는 언제나 단방향이다. 객체간에 연관관계를 양방향으로 만들고 싶으면 &lt;br /&gt;
반대쪽에도 필드를 추가해서 참조를 보관해야 한다. 결국 연관관계를 하나 더 만들어야 한다. &lt;br /&gt;
하지만 이는 서로 다른 반방향 관계 2개라고 할 수 있다. &lt;br /&gt;          &lt;br /&gt;
반면에 테이블은 외래키 하나로 양방향으로 조인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체 연관관계 vs 테이블 연관관계            &lt;br /&gt;
객체 연관관계는 데이터를 조회할 때       &lt;br /&gt;
객체는 참조(주소)를 사용하지만 테이블은 조인(JOIN)을 사용한다.   &lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;참조를 사용하는 객체의 연관관계는 단방향이다.&lt;/li&gt;
      &lt;li&gt;객체를 양방향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다.   &lt;br /&gt;       &lt;br /&gt;
  A -&amp;gt; B (a.b)  &lt;br /&gt;     &lt;br /&gt;
  B -&amp;gt; A (b.a)  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;외래 키를 사용하는 테이블의 연관관계는 양방향이다.   &lt;br /&gt;                       &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A JOIN B&lt;/code&gt; 가 가능하면 반대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B JOIN A&lt;/code&gt; 도 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제 코드&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Member.java   &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt; 
&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEAM_ID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Team.java &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;manytoone&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ManyToOne&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;다대일 관계라는 매핑 정보이다.  &lt;br /&gt;
연관관계를 매핑할 때 이렇게 다중성을 나타내는 어노테이션을 필수로 사용해야 한다.&lt;/p&gt;

&lt;h5 id=&quot;joincolumnnameteam_id&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JoinColumn(name=&quot;TEAM_ID&quot;)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;조인 컬럼은 외래 키를 매핑할 때 사용한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; 속성에는 매핑할 외래 키 이름을 지정한다. &lt;br /&gt;
이 어노테이션은 생략할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;2-양방향-연관관계&quot;&gt;2. 양방향 연관관계&lt;/h2&gt;
&lt;p&gt;회원에서 팀으로 접근하고 반대 방향인 팀에서도 회원으로 접근할 수 있도록 양방향 연관관계로 매핑해보자.&lt;/p&gt;

&lt;h4 id=&quot;객체-연관관계&quot;&gt;객체 연관관계&lt;/h4&gt;
&lt;p&gt;일대다 관계는 여러 건과 연관관계를 맺을 수 있으므로 컬렉션을 사용해야 한다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Team.members&lt;/code&gt;를 List 컬렉션으로 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;객체 연관관계를 정리하면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;회원 -&amp;gt; 팀 (Member.team)&lt;/li&gt;
  &lt;li&gt;팀 -&amp;gt; 회원 (Team.members)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;테이블-연관관계&quot;&gt;테이블 연관관계&lt;/h4&gt;
&lt;p&gt;데이터베이스 테이블은 외래 키 하나로 양방향으로 조회할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예제 코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Member.java   &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt; 
&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEAM_ID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTeam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Team&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 연관관계 설정   &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Team.java &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;team&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;팀과 회원은 일대다 관계이기 때문에 팀 엔티티에 컬렉션인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Member&amp;gt; members&lt;/code&gt;를 추가했다.  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappedBy&lt;/code&gt; 속성은 양방향 매핑일 때 사용하는데 반대쪽 매핑의 필드 이름을 값으로 주면 된다.&lt;/p&gt;

&lt;p&gt;이렇게 양방향 매핑을 완료하면 팀에서 회원 컬렉션으로 객체 그래프를 탐색할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-연관관계의-주인&quot;&gt;3. 연관관계의 주인&lt;/h2&gt;
&lt;p&gt;`mappedBy’는 왜 필요할까?&lt;/p&gt;

&lt;p&gt;객체에는 양방향 연관관계라는 것이 없다.    &lt;br /&gt;
테이블 연관관계는 다음과 같이 양방향 연관관계가 가능하다.  &lt;br /&gt;
&lt;strong&gt;회원 &amp;lt;-&amp;gt; 팀&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래 키는 하나다. &lt;br /&gt;
그렇다면 둘 중 어떤 관계를 사용해서 외래 키를 관리해야 할까?     &lt;br /&gt;
=&amp;gt; 둘 사이에 차이가 발생&lt;/p&gt;

&lt;p&gt;JPA에서는 두 객체 연관관계 중 하나를 정해서 테이블의 외래 키를 관리해야 하는데         &lt;br /&gt;
이것을 연관관계의 주인이라고 한다.&lt;/p&gt;

&lt;h4 id=&quot;1-양방향-매핑의-규칙--연관관계의-주인&quot;&gt;(1) 양방향 매핑의 규칙 : 연관관계의 주인&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;방향 연관관계 매핑 시 지켜야할 규칙
    &lt;ul&gt;
      &lt;li&gt;두 연관관계 중 하나를 연관관계의 주인으로 정해야 한다.&lt;/li&gt;
      &lt;li&gt;주인만이 데이터베이스 연관관계와 매핑되고 외래 키를 관리(등록, 수정, 삭제)할 수 있다.&lt;/li&gt;
      &lt;li&gt;주인이 아닌 쪽은 읽기만 가능하다.&lt;/li&gt;
      &lt;li&gt;주인이 아닌 쪽에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappedBy&lt;/code&gt; 속성을 사용해서 연관관계의 주인을 지정한다.&lt;/li&gt;
      &lt;li&gt;주인은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mappedBy&lt;/code&gt; 속성을 사용하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 26 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-26/0506/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-26/0506/</guid>
      </item>
    
      <item>
        <title>Spring boot + JSP = 404 ?</title>
        <description>&lt;h3 id=&quot;404-not-found&quot;&gt;404 Not Found&lt;/h3&gt;

&lt;p&gt;계속 jsp 파일을 찾지 못하는 에러 메시지가 뜬다..&lt;/p&gt;

&lt;p&gt;jar 파일을 만들어 docker로 배포했었는데 &lt;br /&gt;
war 파일로 변경한 후 이를 해결할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jar--war&quot;&gt;jar &amp;amp; war&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;jar(Java Archive)     &lt;br /&gt;
.jar 확장자 파일에는 Class와 같은 Java 리소스와 속성 파일,    &lt;br /&gt;
라이브러리 및 액세서리 파일이 포함되어 있다.     &lt;br /&gt;
쉽게 Java 어플리케이션이 동작할 수 있도록    &lt;br /&gt;
자바 프로젝트를 압축한 파일이라고 할 수 있다.     &lt;br /&gt;   &lt;br /&gt;
path등의 경로를 유지하기 때문에 jar파일을 사용하는 사용자들은     &lt;br /&gt;
각 파일들에 대한 path문제에서 벗어날 수 있다.     &lt;br /&gt;
ex) ojdbc14.14, servlet-api, jar 등&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;war(Web Application Archive)         &lt;br /&gt;
.war 확장자 파일은 servlet/jsp 컨테이너에 배치할 수 있는    &lt;br /&gt;
웹 어플리케이션 압축 파일 포맷이다.       &lt;br /&gt;
JSP, Servlet, jar, class, xml, html 등   &lt;br /&gt;
Servlet Context 관련 파일들로 패키징되어 있다.     &lt;br /&gt;
(jar과 같은 맥락으로 servlet context 접근을 위해 관련된 모든 파일들을 패키지화)   &lt;br /&gt;                  &lt;br /&gt;
웹 어플리케이션에 관련된 파일들을 포함한다.    &lt;br /&gt;
ex) jsp, servlet 파일 등   &lt;br /&gt;     &lt;br /&gt;
war는 jar와 달리 WEB-INF 및 META-INF 디렉토리로 사전 정의 된 구조를 사용하고,              &lt;br /&gt;
war를 실행하려면 Tomcat, Weblogic, Websphere 등    &lt;br /&gt;
웹 서버 또는 웹 컨테이너가 필요하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결론--war로-바꾸자-&quot;&gt;결론 : war로 바꾸자 !&lt;/h3&gt;

&lt;p&gt;jar를 생성했을 때 jar에 jsp 파일이 포함되지 않아서     &lt;br /&gt;
계속 404 not found 에러가 발생했었다.&lt;/p&gt;

&lt;p&gt;war를 생성하니까 jsp와 css가 포함되어   &lt;br /&gt;
배포했을 때 정상적으로 파일을 찾았다.&lt;/p&gt;

&lt;p&gt;war 생성을 위해 아래 파일들을 변경해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;change package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;194&quot; alt=&quot;스크린샷 2020-04-26 오후 3 07 02&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80299753-db934d80-87d1-11ea-848a-e751b9a77697.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 처럼 jsp와 css의 경로를 다시 설정해줬다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  profiles:
    active: local
  session:
    store-type: redis
  mvc:
    view:
      prefix: /jsp/
      suffix: .jsp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring.mvc.view.prefix 설정 변경&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8-jdk-alpine
ADD litebook-0.0.1-SNAPSHOT.war litebook.war
EXPOSE 8080

ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;litebook.war&quot;]    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pom.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;326&quot; alt=&quot;스크린샷 2020-04-26 오후 3 27 36&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80299833-7f7cf900-87d2-11ea-88e5-82b5677011a1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-26/0426/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-26/0426/</guid>
      </item>
    
      <item>
        <title>Jenkins &amp; Redis</title>
        <description>&lt;h3 id=&quot;1-jenkins-자동-배포-마무리&quot;&gt;1. jenkins 자동 배포 마무리&lt;/h3&gt;
&lt;p&gt;젠킨스를 도커로 설치해서 젠킨스 서버에서 프로젝트를 배포하고 싶은 서버로   &lt;br /&gt;
ssh 명령어로 배포하려고 한다.&lt;/p&gt;

&lt;p&gt;비밀번호 없이 ssh 명령어를 사용하기 위해     &lt;br /&gt;
SSH Key를 생성하고 등록해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSH key 생성    &lt;br /&gt;
우선 클라이언트 서버(젠킨스 서버)에서 아래 명령어로 SSH key를 생성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;키 페어를 만들려면 OpenSSH에 포함되어 있는 ssh-keygen 유틸리티를 사용한다.   &lt;br /&gt;
디폴트로 2048-bit RSA 키 페어를 만들게 되어 있다.&lt;/p&gt;

&lt;p&gt;위 명령어를 입력하면 키 생성 위치와 비밀번호를 물어보는데  &lt;br /&gt;
따로 설정하지 않아도되서 Enter 누르고 넘어갔다.&lt;/p&gt;

&lt;p&gt;모두 완료하면 private 키와 public 키 쌍이 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서버에 key copy     &lt;br /&gt;
public키를 서버에 넣어줘야 SSH key를 인증에 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-copy-id USER@HOST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 사용해 키를 복사할 수 있다.&lt;/p&gt;

&lt;p&gt;이제 젠킨스에서 ssh로 프로젝트 서버에 접속할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shell Script 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;1426&quot; alt=&quot;스크린샷 2020-04-25 오전 12 59 57&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80232609-24db8400-8690-11ea-8876-3114a6e2b158.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; 파일을 git에 올릴 수 없어서   &lt;br /&gt;
서버에 올려두고 cp 명령어로 복사해줬다..&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh litebook@20.41.76.24 &quot;sudo docker build -t litebook:latest /home/jenkins_home/build&quot;
ssh litebook@20.41.76.24 &quot;sudo docker stop litebook&quot;
ssh litebook@20.41.76.24 &quot;sudo docker rm litebook&quot;
ssh litebook@20.41.76.24 &quot;sudo docker run -d -p 8080:8080 --name litebook litebook:latest&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;762&quot; alt=&quot;스크린샷 2020-04-25 오전 1 05 50&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80233127-f611dd80-8690-11ea-990b-0cd46446d881.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ssh 접속으로 Docker image를 만들고 container 실행까지 완료했다.&lt;/p&gt;

&lt;h3 id=&quot;2-redis-password-설정&quot;&gt;2. Redis password 설정&lt;/h3&gt;
&lt;p&gt;redis 접속 password를 설정하고 싶으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt; 파일을 생성해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;redis.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;requirepass PASSWORD  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker로 설치 &amp;amp; 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run -v /home/litebook:/var/litebook/redis --name redis -d -p 6379:6379 redis redis-server /var/litebook/redis/redis.conf      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;docker로 위 처럼 레디스 설정파일을 지정해줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RedisConfig.java&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RedisProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;redisProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;RedisStandaloneConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRedisPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRedisHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRedisPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisStandaloneConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lettuceConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RedisConnectionFactory도 수정해줬다.&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-24/0424/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-24/0424/</guid>
      </item>
    
      <item>
        <title>Jenkins 사용하기</title>
        <description>&lt;p&gt;프로젝트 자동 배포를 위해 젠킨스를 사용했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;젠킨스를-사용하려면&quot;&gt;젠킨스를 사용하려면?&lt;/h1&gt;
&lt;h3 id=&quot;1-프로젝트-서버에-docker로-jenkins를-설치한다&quot;&gt;1. 프로젝트 서버에 docker로 jenkins를 설치한다.&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 8000:8080 -v /home/jenkins_home:/var/jenkins_home --name jenkins -u root jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker image를 pull 받은 후 docker run해도 되는데 &lt;br /&gt;
image가 없는 상태에서 docker run 명령어를 사용해도 &lt;br /&gt;
image를 pull 해주기 때문에 괜찮다.&lt;/p&gt;

&lt;p&gt;port를 8000으로 설정했기 때문에 &lt;br /&gt;
docker container를 띄우고 나서 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://서버IP:8000/&lt;/code&gt; 여기로 들어가면 젠킨스를 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-플러그인-설치-및-플러그인-설치&quot;&gt;2. 플러그인 설치 및 플러그인 설치&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;828&quot; alt=&quot;스크린샷 2020-04-23 오전 1 13 05&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80006286-a2bc5580-84ff-11ea-8a11-7a7f01e158d4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 화면이 첫 화면인데&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;  &lt;br /&gt;
위 명령어를 통해 password를 얻을 수 있다.&lt;br /&gt;
(주의할 점은 -v 볼륨을 다르게 설정 했다면 위 명령어를 그대로 사용하면 안된다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;854&quot; alt=&quot;스크린샷 2020-04-23 오전 1 17 50&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80006739-473e9780-8500-11ea-97a6-3be9f87befea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Install suggested plugins 를 클릭해서 플러그인을 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;817&quot; alt=&quot;스크린샷 2020-04-23 오전 1 19 02&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80006869-6f2dfb00-8500-11ea-83e8-29f8ca83b4f9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;젠킨스 최신 버전을 설치하지 않으면 위 사진 처럼 플러그인 설치가 자동으로 잘 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-계정-생성&quot;&gt;3. 계정 생성&lt;/h3&gt;
&lt;p&gt;&lt;img width=&quot;817&quot; alt=&quot;스크린샷 2020-04-23 오전 1 21 55&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80007153-d77cdc80-8500-11ea-8169-28b427585967.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞으로 젠킨스 설정을 하기 위해 이 계정으로 로그인해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-로그인&quot;&gt;4. 로그인&lt;/h3&gt;
&lt;p&gt;&lt;img width=&quot;1144&quot; alt=&quot;스크린샷 2020-04-23 오전 1 24 38&quot; src=&quot;https://user-images.githubusercontent.com/33855307/80007508-4b1ee980-8501-11ea-9ba9-8404b570710b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그인하면 위와 같은 화면으로 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-배포를-위한-설정&quot;&gt;5. 배포를 위한 설정&lt;/h3&gt;
&lt;p&gt;git에 올려둔 프로젝트가 업데이트될 때마다 &lt;br /&gt;
젠킨스를 통해 서버에 배포하려면 몇가지 작업이 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;maven&lt;/li&gt;
  &lt;li&gt;JDK&lt;/li&gt;
  &lt;li&gt;Git 연동&lt;/li&gt;
  &lt;li&gt;쉘스크립트 작성   &lt;br /&gt;
(docker로 배포하려고 쉘 스크립트로 배포하는 방식을 선택했다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jdk는 jenkins를 docker로 설치하면서  &lt;br /&gt;
설치되었고 (open jdk 8)&lt;/p&gt;

&lt;p&gt;나머지는 jenkins 서버 안으로 들어가서 설치해줬다.   &lt;br /&gt;
아래 명령어로 접속..&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it jenkins /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;** 아직 쉘스크립트 작성이 완성되지 않아 이후 설정은 나중에 업로드..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-21/0421/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-21/0421/</guid>
      </item>
    
      <item>
        <title>Spring Security : Signin</title>
        <description>&lt;h2 id=&quot;1-spring-security의-구조&quot;&gt;1. Spring Security의 구조&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;967&quot; alt=&quot;스크린샷 2020-04-18 오전 12 28 42&quot; src=&quot;https://user-images.githubusercontent.com/33855307/79586183-bfc1e480-810b-11ea-8ad5-3ddee1094e4b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1.1 유저가 로그인을 시도한다.      &lt;br /&gt;
1.2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt; 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;로 User DB에 접근한다.   &lt;br /&gt;
1.3 DB에 있는 user라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;에서 꺼내 session을 생성한다.   &lt;br /&gt;
1.4 spring security의 인메모리 세션저장소인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;에 저장한다.    &lt;br /&gt;
1.5 user에게 session ID와 함께 응답한다.     &lt;br /&gt;
1.6 이후 사용자의 요청에서는 요청 쿠키에서 JSESSIONID를 검증해 유효하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication&lt;/code&gt;을 준다.&lt;/p&gt;

&lt;h2 id=&quot;2-spring-security---인증-절차-인터페이스&quot;&gt;2. Spring Security - 인증 절차 인터페이스&lt;/h2&gt;
&lt;h3 id=&quot;2-1-userdetails&quot;&gt;2-1. UserDetails&lt;/h3&gt;
&lt;p&gt;각기 다른 어플리케이션의 User에 해당하는 Model에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;를 implements하여 &lt;br /&gt;
spring security가 이애할 수 있는 형태의 User로 만들어줘야 한다.&lt;/p&gt;

&lt;p&gt;로그인 로직에서 사용자가 입력한 정보와 DB에 저장된 사용자의 정보를 비교해야 하는데 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt; 인터페이스는 사용자의 정보를 담아두는 VO 역할을 한다고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt; 인터페이스를 구현하려면 오러바이드해야 하는 메소드들이 있다. &lt;br /&gt;
사용자 정보에 관한 다른 정보를 추가해도 된다. &lt;br /&gt;
(다른 멤버변수들은 getter, setter를 만들어서 사용하면 된다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities()&lt;/code&gt;     &lt;br /&gt;
계정이 갖고있는 권한 목록을 리턴한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String getPassword()&lt;/code&gt;&lt;br /&gt;
계정의 비밀번호를 리턴한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String getUsername()&lt;/code&gt; &lt;br /&gt;
계정의 이름을 리턴한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean isAccountNonExpired()&lt;/code&gt;  &lt;br /&gt;
계정이 만료되지 않았는지 리턴한다. (true : 만료되지 않음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean isAccountNonLocked()&lt;/code&gt;&lt;br /&gt;
계정이 잠겨있지 않았는지 리턴한다. (true : 잠기지 않음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean isCredentialNonExpired()&lt;/code&gt;    &lt;br /&gt;
비밀번호가 만료되지 않았는지 리턴한다. (true : 만료되지 않음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean isEnabled()&lt;/code&gt;   &lt;br /&gt;
계정이 활성화(사용가능)인지 리턴한다. (true: 활성화)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt; 인터페이스는 User Entity 클래스에 구현하지 않고, &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomUserDetails&lt;/code&gt; 클래스에 implements한다.&lt;/p&gt;

&lt;p&gt;CustomUserDetails.java&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomUserDetails&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    
    &lt;span class=&quot;nd&quot;&gt;@Enumerated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EnumType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@ElementCollection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GrantedAuthority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;SimpleGrantedAuthority:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAccountNonExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAccountNonLocked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCredentialsNonExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 이번 프로젝트에서 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt; 인터페이스의 일부이다.&lt;/p&gt;

&lt;h3 id=&quot;2-2-userdetailsservice&quot;&gt;2-2. UserDetailsService&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt; 인터페이스에는   &lt;br /&gt;
DB에서 사용자 정보를 불러오는 메소드를 오버라이드 해야 한다.      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUserByUsername()&lt;/code&gt; 메소드이다.   &lt;br /&gt;
이 메소드에서 사용자 정보를 불러오는 작업을 하면 된다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CustomUserDetails&lt;/code&gt; 타입으로 사용자의 정보를 가져오면 된다.&lt;/p&gt;

&lt;p&gt;사용자 정보 유/무에 따라 예외, 사용자 정보를 리턴하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomUserDetailsService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernameNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernameNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용자를 찾을 수 없습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 이번 프로젝트에서 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt; 인터페이스의 일부이다.&lt;/p&gt;

&lt;h3 id=&quot;2-3-authenticationprovider&quot;&gt;2-3. AuthenticationProvider&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt; 인터페이스는      &lt;br /&gt;
사용자가 입력한 로그인 정보와 DB에서 가져온 사용자의 정보를 비교해주는 인터페이스이다.&lt;/p&gt;

&lt;p&gt;해당 인터페이스에 오버라이드되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 메소드는 
화면에 사용자가 입력한 로그인 정보를 담고있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication&lt;/code&gt; 객체를 갖고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticate()&lt;/code&gt; 메소드에서 로그인 인증을  &lt;br /&gt;
성공하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication&lt;/code&gt; 객체를 리턴하고   &lt;br /&gt;
실패하면 그에 맞는 Exception을 던진다.&lt;/p&gt;

&lt;h3 id=&quot;2-4-authenticationfailurehandler&quot;&gt;2-4. AuthenticationFailureHandler&lt;/h3&gt;
&lt;p&gt;spring security에서 로그인 실패를 담당하는 인터페이스아다.   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityConfig&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formLogin()&lt;/code&gt;에 설정하면 로그인이 실패했을 떄 호출되며 이에 대한 처리를 수행한다.&lt;/p&gt;

&lt;p&gt;사용자가 왜 로그인할 수 없는지 자세한 에러 메시지를 출력해주고 싶어서       &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFailureHandler&lt;/code&gt;를 구현했다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAuthenticationFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                        &lt;span class=&quot;nc&quot;&gt;AuthenticationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidationFailedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users/signin?error=0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernameNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users/signin?error=1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DisabledException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users/signin?error=2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;httpServletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users/signin?error=3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 이번 프로젝트에서 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFailureHandler&lt;/code&gt; 인터페이스의 일부이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validation&lt;/code&gt;으로 에러를 출력해주고 싶은데&lt;br /&gt;
spring security로 로그인 로직을 처리하려고 하니까 &lt;br /&gt;
spring boot가 접근을 못해서 에러 메시지가 출력되지 않았다.&lt;/p&gt;

&lt;p&gt;그래도 사용자에게 자세히 에러 메시지를 출력해주고 싶어서 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ValidationFailedException&lt;/code&gt;을 생성해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendRedirect&lt;/code&gt;로 파라미터에 에러 코드를 전달했다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserSigninDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userSigninDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserSigninDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 사용자가 입력한 form data 형식이 맞는지 검사&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ValidatorFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userSigninDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ValidationFailedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;CustomUserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CustomUserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validation&lt;/code&gt; 을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticate&lt;/code&gt; 메소드의 일부이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userSigninDto).stream().forEach(x -&amp;gt; {&lt;/code&gt; &lt;br /&gt;
이 부분에서 어떤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Validation&lt;/code&gt; 에러 인지 전달하고 싶었는데      &lt;br /&gt;
여러 에러가 발생하는 경우, 여러 메시지를 전달하는건     &lt;br /&gt;
이 메소드 안에서 해결할 수 없어서 일단 사용자에게 입력 형식이 잘못되었다는    &lt;br /&gt;
메시지만 전달하려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;3-spring-security-예외&quot;&gt;3. Spring Security 예외&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BadCredentialException&lt;/code&gt; - 비밀번호가 일치하지 않을 때 던지는 예외&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InternalAuthenticationServiceException&lt;/code&gt; - 존재하지 않는 아이디일 때 던지는 예외&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationCredentialNotFoundException&lt;/code&gt; - 인증 요구가 거부됐을 때 던지는 예외&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LockedException&lt;/code&gt; - 인증 거부 (잠긴 계정)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisabledException&lt;/code&gt; - 인증 거부 (계정 비활성화)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccountExpiredException&lt;/code&gt; - 인증 거부 (계정 유효기간 만료)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CredentialExpiredException&lt;/code&gt; - 인증 거부 (비밀번호 유효기간 만료)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-17/0417/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-17/0417/</guid>
      </item>
    
      <item>
        <title>JPA DB Update 하려면?</title>
        <description>&lt;h3 id=&quot;jpa-usertype-변경하려면&quot;&gt;JPA userType 변경하려면?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;처음 구현했을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;save() 메소드에서 unique로 설정한 email 때문에 오류가 발생했기 때문에  &lt;br /&gt;
처음에 userType 변경을 위 코드로 구현했다.&lt;/p&gt;

&lt;p&gt;하지만 위 코드는 delete와 insert 쿼리가 필요하다. &lt;br /&gt;
jpa update를 하고 싶으면 그냥 Entity 클래스의 setter을 사용해 원하는 값을 넣어주면 된다.&lt;/p&gt;

&lt;p&gt;DB 변경하는 부분에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션이 필요하다는 것도 잊지말자..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수정 후&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUserType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOneByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUserType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IS_AUTHENTICATED_FULLY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 엔티티의 변경사항을 데이터베이스에 자동으로 반영하는 기능을 변경 감지(dirty checking)라 한다.&lt;/p&gt;

&lt;p&gt;JPA는 엔티티를 영속성 컨텍스트에 보관할 때, 최초 상태를 복사해서 저장해두는데 이것을 스냅샷이라고 한다.&lt;br /&gt;
그리고 플러시 시점에 스냅샷과 엔터티를 비교해 변경된 엔티티를 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변경 감지는 영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JPA이ㅡ 기본 전략은 모든 필드를 업데이트 하는 것인데   &lt;br /&gt;
데이터베이스에 보내는 데이터 전송량이 증가하는 단점이 있지만, 다음과 같은 장점이 있기 때문에 &lt;br /&gt;
모든 필드를 업데이트한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;모든 필드를 사용하면 수정 쿼리가 항상 같다.  &lt;br /&gt;
따라서 애플리케이션 로딩 시점에 수정 쿼리를 미리 생성해두고 사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터베이스에 동일한 쿼리를 보내면 데이터베이스는 이전에 한 번 파싱된 쿼리를 재사용할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 14 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-14/0414/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-14/0414/</guid>
      </item>
    
      <item>
        <title>생성자 주입 &amp; 필드 주입</title>
        <description>&lt;h3 id=&quot;1-생성자-주입-constructor-injection--필드-주입-field-injection-이란&quot;&gt;1. 생성자 주입 (Constructor Injection) &amp;amp; 필드 주입 (Field Injection) 이란?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Field Injection (필드 주입)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Constructor Injection (생성자 주입)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaMailSender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaMailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JavaMailSender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaMailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;javaMailSender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaMailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;redisTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-왜-constructor-injection을-추천하는가&quot;&gt;2. 왜 Constructor Injection을 추천하는가?&lt;/h3&gt;

&lt;p&gt;의존성 주입할 때 생성자 주입을 추천한다. &lt;br /&gt;
깔끔한 코드는 필드 주입인 것 같은데 왜 생성자 주입을 추천할까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Single Responsibility Principle Violation (단일 책임의 원칙 위반)             &lt;br /&gt;
새로운 의존성을 추가하는 것은 매우 쉽다.                        &lt;br /&gt;
여기서 Constructor Injection을 사용하면 다른 Injection 타입에 비해 위기감 같은 걸 느끼게 해준다.                &lt;br /&gt;
Constructor의 파라미터가 많아짐과 동시에 하나의 클래스가 많은 책임을 떠안는다는 걸 알게된다.              &lt;br /&gt;
이러한 것들이 리팩토링을 해야한다는 신호가 될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dependency Hiding              &lt;br /&gt;
DI(Dependency Injection) 컨테이너를 사용한다는 것은 클래스가 자신의 의존성만 책임진다는게 아니다.         &lt;br /&gt;
제공된 의존성 또한 책임진다. 그래서 클래스가 어떤 의존성을 책임지지 않을 때,         &lt;br /&gt;
메서드나 생성자를 통해(Setter나 Contructor) 확실히 커뮤니케이션이 되어야한다.         &lt;br /&gt;
하지만 Field Injection은 숨은 의존성만 제공해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DI 컨테이너의 결합성과 테스트 용이성        &lt;br /&gt;
DI 프레임워크의 핵심 아이디어는 관리되는 클래스가 DI 컨테이너에 의존성이 없어야 한다.            &lt;br /&gt;
즉, 필요한 의존성을 전달하면 독립적으로 인스턴스화 할 수 있는 단순 POJO이어야 한다.                        &lt;br /&gt;
DI 컨테이너 없이도 유닛테스트에서 인스턴스화 시킬 수 있고, 각각 나누어서 테스트도 할 수 있다.                  &lt;br /&gt;
컨테이너의 결합성이 없다면 관리하거나 관리하지 않는 클래스를 사용할 수 있고,                     &lt;br /&gt;
다른 DI 컨테이너로 전환할 수 있다.             &lt;br /&gt;
하지만, Field Injection을 사용하면 필요한 의존성을 가진 클래스를 곧바로 인스턴스화 시킬 수 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;불변성(Immutability)               &lt;br /&gt;
Constructor Injection과 다르게 Field Injection은 final을 선언할 수 없다.     &lt;br /&gt;
그래서 객체가 변할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;순환 의존성    &lt;br /&gt;
Constructor Injection에서 순환 의존성을 가질 경우            &lt;br /&gt;
BeanCurrentlyCreationExeption을 발생시킴으로써 순환 의존성을 알 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vojtechruzicka.com/field-dependency-injection-considered-harmful/&quot;&gt;참고 : https://www.vojtechruzicka.com/field-dependency-injection-considered-harmful/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-13/0413/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-13/0413/</guid>
      </item>
    
      <item>
        <title>JSP, JPA, form data</title>
        <description>&lt;h3 id=&quot;1-jsp-form-데이터-전달&quot;&gt;1. JSP form 데이터 전달&lt;/h3&gt;
&lt;p&gt;회원가입 기능을 구현했는데 jsp form에 입력한 값이 액션 메서드에 전달되지 않았다.       &lt;br /&gt;
form 확장 태그에 modelAttribute, action 등 필요한 속성을 전부 설정했는데,,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-mvc-form-tutorial&quot;&gt;spring-mvc-form-tutorial&lt;/a&gt;      &lt;br /&gt;
여기서 천천히 읽어봤는데 set 메서드명이 path 설정과 같아야 한다는 것을 알았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder&lt;/code&gt;만 있으면 될 거라고 생각했는데 jsp에서 form 데이터 전달을 하기 위해서는 setter이 필요했다.&lt;/p&gt;

&lt;h3 id=&quot;2-jpa-query-language&quot;&gt;2. JPA Query Language&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Modifying&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clearAutomatically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UPDATE User u 
        set u.enabled = true, u.userType='IS_AUTHENTICATED_FULLY' 
        where u.email = :email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateUserType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JPA에서 UPDATE / DELETE 명령인 경우에   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Modifying(clearAutomatically = true)&lt;/code&gt; 어노테이션을 반드시 붙여야 한다.&lt;/p&gt;

&lt;p&gt;또한, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Modifying&lt;/code&gt; 어노테이션이 붙은 메소드를 호출하는 코드를 포함하는 메소드에      &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; 어노테이션을 반드시 붙여야 한다.&lt;/p&gt;

&lt;p&gt;하지만 이번 프로젝트에서는 사용자 정보를 전부 다시 조회해서 다시 저장하는    &lt;br /&gt;
JPA Repository 기본 메서드를 사용하는 방식으로 구현했다.&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-11/0411/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-11/0411/</guid>
      </item>
    
      <item>
        <title>Lombok, Interface, Factory Method</title>
        <description>&lt;h2 id=&quot;1-lombok&quot;&gt;1. Lombok&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROTECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROTECTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserSigninDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 프로젝트에서 사용할 DTO 클래스의 일부입니다.&lt;/p&gt;

&lt;h4 id=&quot;getter&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Getter&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;getter은 userService에서 유저 정보를 조회할 떄 사용된다.&lt;/p&gt;

&lt;h4 id=&quot;builder-는-다음과-같은-장점이-있습니다&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder&lt;/code&gt; 는 다음과 같은 장점이 있습니다.&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;setter는 그 의도가 분명하지 않고 객체를 언제든지 변경할 수 있는 상태가 되어서 객체의 안전성이 보장받기 힘듭니다.    &lt;br /&gt;
setter 메소드가 없으므로 변경 불가능 객체를 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;한 번에 객체를 생성하므로 객체 일관성이 깨지지 않는다.&lt;/li&gt;
  &lt;li&gt;build() 함수가 잘못된 값이 입력되었는지 검증하게 할 수도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;noargsconstructoraccess--accesslevelprotected&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NoArgsConstructor(access = AccessLevel.PROTECTED)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;validation 검사를 위해 필요한 생성자 입니다.&lt;/p&gt;

&lt;h4 id=&quot;allargsconstructoraccess--accesslevelprotected&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AllArgsConstructor(access = AccessLevel.PROTECTED)&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;JPA에서는 프록시를 생성을 위해서 기본 생성자를 반드시 하나를 생성해야합니다.&lt;/p&gt;

&lt;h2 id=&quot;2-interface-추상화&quot;&gt;2. Interface 추상화&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;인터페이스 사용 장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개발 시간을 단축 시킬 수 있습니다.      &lt;br /&gt;
이러한 특징을 가진 인터페이스를 사용하면 다른 개발자들이 각각의 부분을 완성할 때 까지 기다리지 않고   &lt;br /&gt;
서로 규약만 정해두어 각자의 부분만 따로 나눠서 작성된 코드를 컴파일 할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스간 결합도를 낮출 수 있습니다.&lt;br /&gt;
코드의 종속성을 줄이고 유지보수성을 높이도록 해줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;표준화가 가능합니다.&lt;br /&gt;
클래스의 기본틀을 제공하여 정형화된 개발이 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-팩토리-메소드&quot;&gt;3. 팩토리 메소드&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toEntityWithPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROLE_RESTRICTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 프로젝트에서 사용할 DTO 클래스의 일부입니다.&lt;/p&gt;

&lt;p&gt;toEntityWithPasswordEncoder 메소드는 &lt;br /&gt;
UserSignup 모델 객체로부터 User Entity 객체를 생성해서 리턴합니다.  &lt;br /&gt;
비밀번호 암호화와 userType, enabled 등 정해져 있는 값을 넣어 생성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이름을 가질 수 있다.    &lt;br /&gt;
생성자에 넘기는 매개변수와 생성자 자체만으로는 반환될 객체의 특성을 제대로 설명하지 못한다.   &lt;br /&gt;
하지만 팩토리 메소드 이름을 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;간결한 코드 작성이 가능하다. &lt;br /&gt;
반복되는 코드를 줄일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-05/0405/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-05/0405/</guid>
      </item>
    
      <item>
        <title>spring security &amp; validation</title>
        <description>&lt;h2 id=&quot;1-spring-security-로그인-로직&quot;&gt;1. spring security 로그인 로직&lt;/h2&gt;
&lt;p&gt;(1) 사용자가 요청한다. (page)&lt;br /&gt;
(2) 사용자가 요청한 서비스가 로그인이 필요하다. &lt;br /&gt;
(3) spring security는 spring security context에서 &lt;br /&gt;
    Authentication 객채를 찾는다.&lt;br /&gt;
(4) 객체가 존재하지 않으면 login 페이지로 리다이렉트한다. &lt;br /&gt;
(5) 사용자가 로그인 정보를 입력하고 로그인하면    &lt;br /&gt;
사용자가 입력한 ID(email)에 해당하는 UserDetails를 읽어와서   &lt;br /&gt;
사용자가 입력한 정보들과 비교한다. &lt;br /&gt;
(6)로그인에 성공하면 Authentication 객체를 &lt;br /&gt;
spring security context에 담는다.&lt;/p&gt;

&lt;h2 id=&quot;2-validation&quot;&gt;2. validation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hyerin6.github.io/2020-02-14/spring-form-validation/&quot;&gt;spring form validation 공부 자료&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-04/0404/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-04/0404/</guid>
      </item>
    
      <item>
        <title>Naming &amp; Security</title>
        <description>&lt;h3 id=&quot;1-springboot-jpa--hibernate-naming-strategy-네이밍-전략&quot;&gt;1. Springboot jpa &amp;amp; Hibernate Naming Strategy (네이밍 전략)&lt;/h3&gt;

&lt;p&gt;local에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpa.hibernate.ddl-auto&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt;로 설정해놨는데    &lt;br /&gt;
자동 생성된 테이블의 컬럼명을 보니 snake_case로 생성되어 있었다..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;naming&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;physical-strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 설정을 해주면 Entity 클래스의 변수명과 동일하게 생성된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-spring-security&quot;&gt;2. Spring Security&lt;/h3&gt;

&lt;p&gt;회원가입 시 이메일 인증으로 사용자 인증을 하고 인증 완료 여부를 
Role로 구분하려고 spring 표준 권한을 찾아봤다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스프링에서 제공하는 기본 권한(Authority)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ROLE_ANONYMOUS : 모든 사용자&lt;/li&gt;
  &lt;li&gt;IS_AUTHENTICATED_ANONYMOUSLY : 익명 사용자&lt;/li&gt;
  &lt;li&gt;IS_AUTHENTICATED_FULLY : 인증된 사용자&lt;/li&gt;
  &lt;li&gt;IS_AUTHENTICATED_REMEMBERED : REMEMBERED 사용자&lt;/li&gt;
  &lt;li&gt;ROLE_RESTRICTED : 제한된 사용자&lt;/li&gt;
  &lt;li&gt;ROLE_USER : 일반 사용자&lt;/li&gt;
  &lt;li&gt;ROLE_ADMIN : 관리자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번 프로젝트에서 미인증 사용자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROLE_RESTRICTED&lt;/code&gt;로   &lt;br /&gt;
인증 완료 사용자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IS_AUTHENTICATED_FULLY&lt;/code&gt;로 설정하기로 했다.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-04-03/0403/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-03/0403/</guid>
      </item>
    
      <item>
        <title>Garbage Collection(1)</title>
        <description>&lt;h3 id=&quot;1-개념&quot;&gt;1. 개념&lt;/h3&gt;
&lt;h4 id=&quot;1-garbage-collection&quot;&gt;1) garbage collection&lt;/h4&gt;
&lt;p&gt;Java 언어에서 new 연산자를 사용하여 생성된 객체가, 자동으로 제거되는 것을 garbage collection 이라 한다.&lt;br /&gt;
어떤 객체를 참조하는 변수가 하나라도 있다면, 그 객체는 사용되고 있는 것이고,&lt;br /&gt;
반대로 어떤 객체를 참조하는 변수가 하나도 없다면, 그 객체는 사용될 수 없으니 garbage collection 된다.&lt;/p&gt;

&lt;p&gt;garbage collection은 JVM(Java virtual machine)에 의해서 자동으로 실행되는데,    &lt;br /&gt;
(방문해보면서 mark 해놨는데 가리키고 있는게 아무것도 없는데 존재하면 그게 garbage 이다.)  &lt;br /&gt;
이걸 확인하려면 메모리를 다 둘러봐야해서 시간이 꽤 걸리는 작업이기 때문에, 가끔 실행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;stop-the-world   &lt;br /&gt;
garbage collection이 실행될 때, 그 JVM(Java virtual machine)에서 애플리케이션은 모두 정지되고,    &lt;br /&gt;
오로지 garbage collection 작업만 실행된다.      &lt;br /&gt;
즉 application thread는 모두 정지되고, garbage collection thread만 실행된다.       &lt;br /&gt;
성능이 매우 중요한 애플리케이션의 경우에, garbage collection 동안 애플리케이션이 정지되는 것이 문제가 될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;System.gc()    &lt;br /&gt;
garbage collection 작업을 즉시 실행하도록 명령하는 메소드이다.
이 메소드를 호출하지 말자. virtual machine 스스로 garbage collection 할 때를 결정하도록 놔두자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;System은 클래스이다.
gc()는 System 클래스의 static 메소드이다.&lt;/p&gt;

&lt;p&gt;Q. 그렇다면 garbage collection이 자동으로 잘 처리 되도록 하려면 어떻게 해야할까?  &lt;br /&gt;
A. 더 이상 사용하지 않는 객체를 참조하고 있는 변수에 null을 대입하자. &lt;br /&gt;
변수에 의해 참조되지 않는 객체는 자동으로 garbage collection이 되기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-weak-generational-hypothesis&quot;&gt;2) weak generational hypothesis&lt;/h4&gt;
&lt;p&gt;많은 경우에 Java 객체는 다음과 같은 특징을 갖는다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;대부분의 객체는 짧은 시간 안에 garbage가 된다. -&amp;gt; 지역변수&lt;/li&gt;
  &lt;li&gt;오래된 객체의 멤버변수가 젊은 객체를 참조하는 경우는 아주 드물다. -&amp;gt; 영역이 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;대부분의 객체는 짧은 시간 안에 garbage가 된다.&lt;/strong&gt;  &lt;br /&gt;
메소드 내에서 잠깐 사용되고 끝나는 객체가 많다.&lt;br /&gt;
이런 객체는 지역 변수에 대입하여 사용한다.&lt;br /&gt;
메소드가 리턴될 때, 지역 변수가 없어지면, 그 지역 변수에 의해서만 참조되던 객체는 garbage가 되고, garbage collection 대상이 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오래된 객체&lt;/strong&gt;  &lt;br /&gt;
지역 변수가 아니라, 멤버 변수에 의해 참조되는 객체는 일찍 제거되지 않고 꽤 오래 살아남는다. &lt;br /&gt;
static 멤버 변수에 의해 참조되는 객체는 더욱 오래 살아남는다. &lt;br /&gt;
즉 지역 변수가 참조하는 객체들은 금방 garbage collection 되지만, &lt;br /&gt;
멤버 변수가 참조하는 객체들은 꽤 오래 살아남는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오래된 객체의 멤버변수가 젊은 객체를 참조하는 경우는 아주 드물다.&lt;/strong&gt;            &lt;br /&gt;
오래된 객체의 멤버 변수가 참조하는 객체도 오래된 객체일 확률이 높고, 일찍 제거될 객체일 확률은 낮다.&lt;br /&gt;
일찍 제거될 객체는 대부분 지역 변수에 대입되어 사용되기 때문이다.&lt;/p&gt;

&lt;p&gt;위 특징들을 활용하여 Java virtual machine의 garbage collection 기능이 구현되었다.  &lt;br /&gt;
garbage collection의 성능이 좋아진 원인은 이러한 특징을 잘 잡았기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-java-컴파일&quot;&gt;3) Java 컴파일&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HotSpot     &lt;br /&gt;
Oracle이 만든 Java virtual machine의 이름이 Java HotSpot Performance Engine 이다.&lt;br /&gt;
줄여서, HotSpot virtual machine 이라고 부르거나, 그냥 HotSpot 이라고 부른다.&lt;br /&gt;
즉 HotSpot은 Oracle이 만든 Java virtual machine의 제품명이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C/C++ 컴파일&lt;br /&gt;
C/C++ 컴파일러는 C/C++ 소스 코드를 기계어 코드로 변환한다.         &lt;br /&gt;
C/C++ 소스 파일을 컴파일하여 생성된 *.exe 실행 파일에는 기계어 코드가 들어있다.         &lt;br /&gt;
*.exe 파일은 직접 CPU에서 실행된다.         &lt;br /&gt;
실행 파일의 구조는 운영체제에 따라 다르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;표준 Java 컴파일&lt;br /&gt;
표준 Java 컴파일러는 Java 소스 코드를 bytecode로 컴파일한다.         &lt;br /&gt;
*.java 소스 파일을 컴파일하여 생성된 *.class 파일에는 bytecode가 들어있다.         &lt;br /&gt;
Java virtual machine이 *.class 파일을 읽어서 bytecode를 실행한다. &lt;br /&gt;             &lt;br /&gt;
표준 Java 컴파일러 실행 파일은 javac.exe 이다.           &lt;br /&gt;
표준 Java 가상 기계 실행 파일은 java.exe 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bytecode로 컴파일하는 이유       &lt;br /&gt;
기계어 코드로 컴파일 하지 않고 bytecode로 컴파일하는 방식의 장단점은 다음과 같다.   &lt;br /&gt;
&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;단점: 약간 느리다.       &lt;br /&gt;
   CPU가 기계어 코드를 직접 읽어서 실행하는 방식이 가장 빠르다. &lt;br /&gt;             &lt;br /&gt;
   &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;장점: CPU에 독립적이고, 운영체제에 독립적이다.    &lt;br /&gt;
  실행파일에 들어있는 기계어 코드는 CPU마다 다르다.    &lt;br /&gt;
  실행파일 구조는 운영체제마다 다르다.    &lt;br /&gt;
  그래서 Windows 실행파일을 맥에서 실행할 수 없다. &lt;br /&gt;    &lt;br /&gt;
  Java 소스파일을 컴파일하여 생성된 *.class 파일의 구조는 운영체제에 무관하다.       &lt;br /&gt;
  그리고 bytecode도 CPU에 무관하다.       &lt;br /&gt;
  따라서 Java로 개발한 앱은, 특정 운영체제나 CPU에 무관하게 배포될 수 있고,       &lt;br /&gt;
  Java virtual machine만 있으면 실행될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JIT 컴파일 (Just In Time compilation)       &lt;br /&gt;
Java는 JIT 컴파일 방식을 사용한다.       &lt;br /&gt;
JIT 컴파일이란, bytecode를 실행하기 직전에 기계어 코드로 컴파일 하는 방식을 말한다.
Java virtual machine은 실행하기 직전에, bytecode를 기계어 코드로 변환(컴파일)해서 실행한다.           &lt;br /&gt;
bytecode를 해석해서 실행하는 것보다(인터프리터 방식), 기계어 코드로 변환해서 실행하는 쪽이 훨씬 더 빠르기 때문이다.           &lt;br /&gt;
Java virtual machine 내부에는 JIT 컴파일러가 내장되어 있다.           &lt;br /&gt;
이 JIT 컴파일러는 bytecode를 기계어 코드로 변환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JVM JIT 컴파일 방식의 장단점&lt;br /&gt;
JVM(Java virtual machine)
    &lt;ul&gt;
      &lt;li&gt;단점: 변환된 기계어 코드를 따로 저장하지는 않기 때문에, 실행할 때마다 매번 다시 JIT 컴파일 해야 한다.&lt;/li&gt;
      &lt;li&gt;장점: dynamic optimization 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dynamic optimization    &lt;br /&gt;
컴파일러가 소스코드를 컴파일할 때, 소스코드와 동일한 순서로 기계어 코드를 생성하지 않고,    &lt;br /&gt;
좀 더 빠르고 효율적으로 실행될 수 있도록, 실행 순서를 재배치하고 조정하여, 기계어 코드를 생성하는 것을,     &lt;br /&gt;
컴파일러 최적화(compiler optimization)라고 한다. &lt;br /&gt;     &lt;br /&gt;
소스코드를 컴파일할 때가 아니고, 실행하는 시점에, 실행 순서를 재배치하고 조정하여 기계어 코드를 생성하는 것을, 동적 최적화(dynamic optimization)라고 한다.  &lt;br /&gt;
JVM의 JIT 컴파일러는 dynamic optimization을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-process와-virtual-memory&quot;&gt;4) process와 virtual memory&lt;/h4&gt;
&lt;p&gt;애플리케이션이 운영체제 메모리로 로드(load)되어 실행될 때, 이것을 프로세스(process)라고 부른다. &lt;br /&gt;
즉 운영체제 메모리로 로드되어 실행되는 애플리케이션을 프로세스라고 부른다.&lt;/p&gt;

&lt;p&gt;운영체제는 프로세스에게 자원을 제공한다. 제공되는 자원은, 메모리, 파일, 소켓(socket), 세마포어(semaphore), 파이프(pipe) 등이다.  &lt;br /&gt;
운영체제에 의해서, 각각의 프로세스는 서로 격리된다.  &lt;br /&gt;
어떤 프로세스의 메모리나 자원을, 다른 프로세스가 건드릴 수 없다. &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;virtual memory        &lt;br /&gt;
프로세스가 사용하는 메모리 주소는, 실제 메모리의 물리적 주소가 아니고, 가상의 주소이다. (virtual memory 주소) &lt;br /&gt;
이 가상의 주소는, 운영체제와 CPU에 의해서, DRAM 부품의 물리적 주소로 변환되어 실행된다. &lt;br /&gt;
어느 프로세스가 다른 프로세스나 운영체제 커널(kernel)의 물리적 메모리 주소를 사용하는 것은 불가능하다.&lt;br /&gt;
운영체제와 CPU가 그런 주소 변환을 허용하지 않기 때문이다.  &lt;br /&gt;
즉, 어느 프로세스는 자신에게 주어진 virtual memory 주소만 사용할 수 있고, 자신에게 주어진 메모리에만 접근할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel CPU meltdown 결함       &lt;br /&gt;
2017년에 문제가 되었던 인텔 CPU의 meltdown결함은, virtual memory 주소를 물리 주소로 변환하는 인텔 CPU의 기능에 헛점이 있다는 것이다. &lt;br /&gt;
이 결함을 이용하면, 운영체제 커널의 메모리 주소나, 다른 프로세스의 메모리 주소를 알아내고, 그 메모리에 접근하는 것이 가능하게 된다.&lt;br /&gt;
그래서, 결함이 있는 Intel CPU의 주소 변환 기능을 사용하지 않고, CPU가 담당했던 주소 변환까지 운영체제가 수행하도록 수정하는 것이, meltdown 결함 패치(patch)의 내용이다.   &lt;br /&gt;
CPU가 하던 기능을 운영체제 SW가 해야 하므로, 이 패치를 적용하면, 컴퓨터가 조금 느려진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-stack-heap-data-text-segment&quot;&gt;5) stack, heap, data, text segment&lt;/h4&gt;
&lt;p&gt;프로세스에게 주어진 메모리 공간은 세그먼트들로 나눠 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;text segment (code segment)           &lt;br /&gt;
기계어 코드가 위치한 영역을 text segment라 한다.          &lt;br /&gt;
소스코드에 포함된 문자열 상수가 숫자 상수들도 여기에 위치하는 경우도 있는데,           &lt;br /&gt;
특정 컴파일러나 운영체제에서는 다를 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heap segment          &lt;br /&gt;
동적으로 할당되고 반납되는 메모리가 위치한 영역이다.          &lt;br /&gt;
C언어의 malloc/free 함수를 사용하여 할당된 메모리는 heap에 위치한다.          &lt;br /&gt;
Java 언어의 new 연산자를 사용하여 생성한 객체/배열은 heap에 위치한다.          &lt;br /&gt;
Java에서 참조형 값들은 전부 heap에 위치한다.          &lt;br /&gt;
heap 영역에서 불필요한 객체를 찾아 제거하는 작업이 garbage collection 이다.          &lt;br /&gt;
Java의 garbage collection은 JVM에 의해서 자동으로 실행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;data segment          &lt;br /&gt;
프로세스가 시작할 때부터 종료될 때까지 존재하는 변수들이 위치한 영역이다.          &lt;br /&gt;
전역변수, static 지역 변수, static 멤버 변수가 여기에 위치한다. (C/C++ 언어) &lt;br /&gt;            &lt;br /&gt;
Java 언어에는 전역변수, static 지역 변수가 없다.          &lt;br /&gt;
Java 언어는 data segment라고 부르지 않는다.          &lt;br /&gt;
Java 언어의 static 멤버 변수는 metaplace 영역에 위치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stack segment                 &lt;br /&gt;
stack segment는 함수나 메소드 호출 과정에서 사용되는 메모리 영역이다.          &lt;br /&gt;
함수가 호출될 때 생성되는 지역 변수, 파라미터 변수가 stack segment에 생성된다.          &lt;br /&gt;
함수의 리턴 값이나, 함수가 리턴할 때 되돌아갈 기계에 코드의 주소도 여기에 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stack overflow 공격  &lt;br /&gt;
함수가 리턴될 때 되돌아갈 기계에 코드의 주소가 stack segment에 저장되고,&lt;br /&gt;
지역 변수도 stack segment에 저장된다는 점을 노린 해킹 공격이다. &lt;br /&gt;&lt;br /&gt;
공격할 SW의 기계어 코드를 분석하여, 네트워크로 전송된 데이터가 어떤 함수의 지역 변수 배열에 저장되는 경우를 찾는다. &lt;br /&gt;
그 지역 변수 배열의 크기보다 더 큰 데이터를 전송해서, &lt;br /&gt;
데이터가 저장될 때, 배열의 뒤까지 넘치도록(overflow) 한다. &lt;br /&gt;
이렇게 넘쳐서 저장된 데이터가 함수가 리턴 주소가 저장된 곳까지 덮어쓰도록 한다. &lt;br /&gt;
함수가 리턴할 때, overflow 되어 변경된 주소로 리턴하게 된다. &lt;br /&gt;
즉 해커가 원하는 곳으로 리턴하게 되어 해커가 심어 놓은 기계어 코드가 실행하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stack overflow 공격 막기 &lt;br /&gt;
배열에 데이터를 저장하거나 복사할 때, 배열의 범위를 벗어나서 넘치게(overflow) 저장하지 말아야 한다.  &lt;br /&gt;
Java 언어의 경우에는, VM이 이것을 검사하기 때문에, overflow가 가능하지 않다.  &lt;br /&gt;
따라서 Java는 stack overflow 공격에 안전하다. &lt;br /&gt;
배열의 크기를 벗어난 곳에 접근하려 하는 경우에, Java에서는 IndexOutOfBoundsException이 발생한다. &lt;br /&gt;  &lt;br /&gt;
C/C++ 언어에서는 overflow가 가능하므로, 코딩할 때 주의해야 한다.  &lt;br /&gt;
그리고 overflow를 검사하지 않는 표준 함수의 사용을 자제하고 (예: strcpy, strcat, memcpy, sprinf) &lt;br /&gt;
overflow를 검사하는 표준 함수를 사용해야 한다. (예: strncpy, strncat, memcpy, snprintf)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-process와-thread&quot;&gt;6) process와 thread&lt;/h4&gt;
&lt;p&gt;process 내부에 thread가 생성된다.  &lt;br /&gt;
process가 시작될 때, main thread가 자동으로 생성되고,  &lt;br /&gt;
다른 스레드는 스레드 생성 명령을 실행하여 생성해야 한다. &lt;br /&gt;  &lt;br /&gt;
스레드는 stack segment를 따로 소유한다.  &lt;br /&gt;
스레드를 한 개 생성할 때마다, stack segment도 한 개 생성해서, thread에게 할당해야 한다.  &lt;br /&gt;
heap segment, data, text segment는 thread들 사이에 공유된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThreadLocal     &lt;br /&gt;
Java 표준 라이브러리에 ThreadLocal 클래스가 있다.    &lt;br /&gt;
thread들 사이에 공유되지 않는 객체를 생성하기 위해 ThreadLocal 클래스를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;7-hotspot-java-virtual-machine-구조&quot;&gt;7) HotSpot java virtual machine 구조&lt;/h5&gt;
&lt;p&gt;HotSpot JVM의 주요 구성요소는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class Loader      : 클래스 파일(*.class)을 메모리에 불러오는 역할을 담당&lt;/li&gt;
  &lt;li&gt;Runtime Data Area : 데이터를 보관하는 메모리 영역&lt;/li&gt;
  &lt;li&gt;Execution Engine  : 실행 엔진&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;runtime data areas 내부에서    &lt;br /&gt;
&lt;strong&gt;method area&lt;/strong&gt;   &lt;br /&gt;
이영역에서 위치한 항목들은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;method의 bytecode&lt;/li&gt;
  &lt;li&gt;static 멤버 변수&lt;/li&gt;
  &lt;li&gt;constant 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;method area 이름은 자주 사용되는 이름이 아니다. &lt;br /&gt;
이 영역의 대표적인 이름은, permanenet generation 영역이다. (Java7까지)&lt;br /&gt;
Java8 부터 이 영역의 이름이 metaplace로 바뀌었다. (세부 구조도 변경되었다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;heap  &lt;br /&gt;
Java 객체와 배열이 생성되는 영역이다. (heap segment)     &lt;br /&gt;
garbage collection은, 더 이상 사용되지 않는 객체를 메모리에서 삭제하는 작업이다.     &lt;br /&gt;
Java 객체들은 heap 영역에 위치한다. 즉 garbage collection 작업은 heap 영역을 청소하는 작업이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java stack        &lt;br /&gt;
지역 변수와 파라미터 변수가 생성되는 영역이다.      &lt;br /&gt;
Java 메소드가 호출될 때, 그 메소드의 지역 변수와 파라미터 변수가 생성될 공간이 할당되어야 한다.      &lt;br /&gt;
이 공간은, 메소드가 리턴될 때 반납된다. stack segment에 이 공간이 할당된다.      &lt;br /&gt;
Java 메소드가 호출될 때 사용되는 stack segment를 Java stack 이라고 한다. &lt;br /&gt;         &lt;br /&gt;
각 thread 마다 stack segment를 따로 소유한다.       &lt;br /&gt;
즉 새 thread가 생성되면, 그 thread가 사용할 stack segment를 할당해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Program Counter Registers      &lt;br /&gt;
java thread가 현재 실행하고 있는 명령(bytecode)의 주소가 program counter register에 저장된다.      &lt;br /&gt;
CPU 코어(core)의 address register와 유사한 역할을 한다.      &lt;br /&gt;
각 java thread 마다 program counter register를 따로 소유해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native stack      &lt;br /&gt;
Java 표준 라이브러리의 클래스의 메소드들 중에서, Java가 아니고 C로 구현된 메소드도 있다.      &lt;br /&gt;
C로 구현된 메소드를 native method라고 부른다.      &lt;br /&gt;
C로 구현된 메소드가 호출될 때 사용될 stack segment를 Native stack 이라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8-java-thread-와-메모리-영역&quot;&gt;8) Java thread 와 메모리 영역&lt;/h4&gt;
&lt;p&gt;각 Java thread 마다 따로 소유하는 메모리 영역&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Program Counter Register&lt;/li&gt;
  &lt;li&gt;Java Stack (지역 변수, 파라미터 변수)&lt;/li&gt;
  &lt;li&gt;Native Stack&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여러 Java thread들이 공유하는 메모리 영역&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Heap (객체, 배열)&lt;/li&gt;
  &lt;li&gt;Method Area (상수, static 멤버 변수)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-03-23/GC/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-03-23/GC/</guid>
      </item>
    
      <item>
        <title>Garbage Collection(2)</title>
        <description>&lt;h3 id=&quot;2-garbage-collection-과정&quot;&gt;2. garbage collection 과정&lt;/h3&gt;

&lt;h4 id=&quot;1-mark-sweep&quot;&gt;1) mark, sweep&lt;/h4&gt;
&lt;p&gt;garbage collection 과정(알고리즘)은 mark, sweep, compact 작업으로 구성된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mark&lt;br /&gt;
더 이상 변수에 의해 참조되지 않은 객체가 garbage 이다.&lt;br /&gt;
garbage를 찾는 작업이 mark 이다.&lt;br /&gt;
mark 작업은, 모든 변수를 뒤져서, 그 변수가 참조하는 객체에 표시(mark)를 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sweep &lt;br /&gt;
mark 표시가 없는 객체는, 변수에 의해 참조되지 않는 garbage 이다.&lt;br /&gt;
garbage 객체를 삭제하는 작업이 sweep 이다.&lt;br /&gt;
참조 되지 않는 객체 (mark 표시가 없는 객체)를 삭제하면, 빈 공간이 흩어져 있게 된다.     &lt;br /&gt;
새 객체를 생성할 때, 적당한 빈 공간을 찾아야 하는 부담이 있다.   &lt;br /&gt;
객체를 생성하기에는 너무 작은 빈 공간들이, 객체들 사이에 존재하게 되어, 메모리가 낭비된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compact&lt;br /&gt;
mark, sweep은 필수 작업이지만, compact는 필수 작업이 아니다. &lt;br /&gt;&lt;br /&gt;
sweep 작업 결과 삭제되지 않고 살아 남은 객체들은, 메모리에 듬성듬성 위치하게 된다.&lt;br /&gt;
이 객체들을 한쪽으로 몰아서, 객체들이 차지하는 영역과, 비어있는 영역을 구분하여,&lt;br /&gt;
메모리에 빈 영역을 확보하는 작업이 compact 이다.&lt;br /&gt;
새 객체를 생성할 때, 빈공간의 시작 부분에 생성하면 되므로 빠르다. &lt;br /&gt; &lt;br /&gt;
compact 작업에 시간이 걸리지만,&lt;br /&gt;
compact 작업 후에는, 객체 생성이 빠르고, 메모리 낭비가 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-young-generation--old-generation&quot;&gt;2) young generation / old generation&lt;/h4&gt;
&lt;p&gt;예를 들어서, 생성된 java 객체가 시간이 지나면 쓰레기(garbage)가 되어 청소(garbage collection) 대상이 된다고 상상해 보자.  &lt;br /&gt;
생성된 객체의 대부분은 짧은 시간 안에 쓰레기가 된다. -&amp;gt; 이런 특징을 또 이용해서 영역을 나눈다.&lt;/p&gt;

&lt;p&gt;효율적인 쓰레기 청소를 위해서,&lt;br /&gt;
메모리 영역을 young generation 영역과 old generation 영역으로 나눈다.&lt;/p&gt;

&lt;p&gt;객체를 처음 생성할 때 young generation 영역에 생성한다.&lt;br /&gt;
생성된 대부분의 객체는 금방 쓰레기가 되기 때문에, young generation 영역은 자주 청소(garbage collection) 해야 한다.&lt;/p&gt;

&lt;p&gt;young generation 영역에서 정해진 시간 이상 제거되지 않고 오래 살아남은 객체는, &lt;br /&gt;
old generation 영역으로 옮겨 놓는다.&lt;/p&gt;

&lt;p&gt;old generation 영역으로 옮겨진 객체들은, 비교적 오래 생존할 확률이 높다.&lt;br /&gt;
따라서 old generation 영역은 자주 청소할 필요가 없고, 가끔 청소하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-minor-garbage-collection--major-garbage-collection&quot;&gt;3) minor garbage collection / major garbage collection&lt;/h4&gt;
&lt;p&gt;young generation 영역은 자주 청소해야 한다. 이것을 minor garbage collection 이라고 부른다.&lt;/p&gt;

&lt;p&gt;아주 가끔 old generation 영역과 young generation 영역을 전부 대청소 해주어야 한다.&lt;br /&gt;
이것을 major garbage collection 혹은 full garbage collection 이라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-card-table&quot;&gt;4) card table&lt;/h4&gt;
&lt;p&gt;old ganeration 영역의 객체의 멤버 변수가, young generation 영역의 객체를 참조하는 경우는 드물다.&lt;br /&gt;
(오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재하기 때문)&lt;/p&gt;

&lt;p&gt;old ganeration 영역의 객체의 멤버 변수에 의해서 참조되는 객체는, garbage가 아니다.  &lt;br /&gt;
따라서 young generation 영역을 청소할 때, &lt;br /&gt;
old generation generation 영역의 객체의 멤버 변수들도 다 뒤져서 mark 해야 하는데, 이 작업에 시간이 많이 걸린다.&lt;/p&gt;

&lt;p&gt;young generation 영역은 자주 garbage collection 해야 하는데, &lt;br /&gt;
그때마다 old generation 영역의 멤버 변수들을 전부 뒤지는 것은 부담이다.&lt;/p&gt;

&lt;p&gt;그래서 다음과 같은 방법을 사용한다. &lt;br /&gt;
old generation 영역의 멤버 변수가 young generation 영역의 객체를 참조하는 경우에,   &lt;br /&gt;
이 정보를 card table에 기록한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 card table 기록 방법의 장단점은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;단점    &lt;br /&gt;
old generation 영역의 멤버 변수에 young generation 영역의 객체를 대입할 때마다&lt;br /&gt;
card table에 그 정보를 기록해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장점    &lt;br /&gt;
young generation 영역을 청소하기 위해서, mark 할 때, old generation 영역의 멤버 변수를 전부 뒤질 필요 없고, card table 기록만 보면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단점의 손해 보다, 장점의 이익이 훨씬 크기 때문에, card table 기록을 사용하여 garbage collection 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-heap-영역-구조&quot;&gt;5) Heap 영역 구조&lt;/h4&gt;
&lt;p&gt;&lt;img width=&quot;742&quot; alt=&quot;스크린샷 2020-03-25 오후 1 41 48&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77502636-ba6fd200-6e9e-11ea-8aeb-bddd1cd4bc85.png&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Young Generation, Old Generation   &lt;br /&gt;
Heap 영역의 일부이다.  &lt;br /&gt;
여기에는 new 연산자로 생성된 객체들과 배열들이 들어있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Permanent Generation (Metaspace)       &lt;br /&gt;
Permanent Generation에는, 클래스와 메소드에 대한 메타 정보가 저장된다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;클래스 구조에 대한 정보&lt;/li&gt;
      &lt;li&gt;메소드들의 bytecode&lt;/li&gt;
      &lt;li&gt;static 멤버 변수    &lt;br /&gt;  &lt;br /&gt;
Java8 이후부터는 Permanent Generation 영역의 이름이 Metaspace로 바뀌었고,    &lt;br /&gt;
이 공간의 메모리 관리 기능도 개선되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java8 부터는 Metaspace를 Heap 영역의 일부로 보지 않고, 독립된 영역으로 본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-young-generation-영역의-garbage-collection-과정&quot;&gt;3. young generation 영역의 garbage collection 과정&lt;/h3&gt;
&lt;h4 id=&quot;1-eden-영역-survivor-영역&quot;&gt;1) eden 영역, survivor 영역&lt;/h4&gt;
&lt;p&gt;young generation 영역은 한 개의 eden 영역과 두 개의 survivor 영역으로 나뉜다.&lt;br /&gt;
두 survivor 영역을 각각 survivor0, survivor1 라고 하자.&lt;/p&gt;

&lt;p&gt;처음 실행할 때, eden 영역과 두 survivor 영역이 전부 빈 상태이다.&lt;/p&gt;

&lt;p&gt;생성되는 객체는 처음에 eden영역에 위치한다.   &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;before garbage collection &lt;br /&gt; &lt;br /&gt;
&lt;img width=&quot;509&quot; alt=&quot;스크린샷 2020-03-25 오후 1 48 31&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77502831-58639c80-6e9f-11ea-97ae-fb7ce772b150.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;garbage collection #1&lt;br /&gt;
eden 영역이 꽉 차면, young generation 영역 전체를 garbage collection 한다. (mark, sweep)&lt;br /&gt;
(young generation 영역 전체 = eden 영역 + 두 survivor 영역)&lt;br /&gt;
young generation 영역을 garbage collection 하는 것은 minor garbage collection 이라고 부른다.  &lt;br /&gt;      &lt;br /&gt;
&lt;img width=&quot;614&quot; alt=&quot;스크린샷 2020-03-25 오후 1 49 53&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77502896-877a0e00-6e9f-11ea-8154-5f4ad4129063.png&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
garbage collection 하고 난 후, &lt;br /&gt;
eden 영역에서 살아남은 객체들을 전부, survivor0 영역으로 차곡 차곡 옮긴다. (compact)&lt;br /&gt;
survivor0 영역으로 이동된 객체의 살아남은 횟수를 1로 기록한다.  &lt;br /&gt;&lt;br /&gt;
&lt;img width=&quot;370&quot; alt=&quot;스크린샷 2020-03-25 오후 1 51 41&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503002-c740f580-6e9f-11ea-8362-97a9388e7dd4.png&quot; /&gt;&lt;br /&gt;
garbage collection 결과, eden 영역과 survivor1 영역은 빈 공간이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;garbage collection #2  &lt;br /&gt;
객체들이 생성되어 eden 영역이 또 꽉 차면, young generation 영역 전체를 garbage collection 한다.  &lt;br /&gt;
&lt;img width=&quot;597&quot; alt=&quot;스크린샷 2020-03-25 오후 1 52 58&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503045-f3f50d00-6e9f-11ea-8a80-7b1eb7730c79.png&quot; /&gt;&lt;br /&gt;
eden 영역에서 살아남은 객체들을 전부, 비어있던 survivor1 영역으로 옮긴다. &lt;br /&gt;
이 객체들의 살아남은 횟수를 1로 기록한다.&lt;br /&gt;
그리고 survivor0 영역에서 살아남은 객체들도 survivor1 영역으로 옮긴다.&lt;br /&gt;
이 객체들의 살아남은 횟수를 2로 기록한다.   &lt;br /&gt;         &lt;br /&gt;
&lt;img width=&quot;405&quot; alt=&quot;스크린샷 2020-03-25 오후 1 53 52&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503107-20a92480-6ea0-11ea-8307-d022850a2c6b.png&quot; /&gt;&lt;br /&gt;
garbage collection 결과, eden 영역과 survivor0 영역은 빈 공간이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;garbage collection #3&lt;br /&gt;
객체들이 생성되어 eden 영역이 또 꽉 차면, young generation 영역 전체를 garbage collection 한다.  &lt;br /&gt;     &lt;br /&gt;
&lt;img width=&quot;610&quot; alt=&quot;스크린샷 2020-03-25 오후 1 55 16&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503148-47fff180-6ea0-11ea-8b8a-609caba2beee.png&quot; /&gt; &lt;br /&gt;   &lt;br /&gt;
eden 영역에서 살아남은 객체들을 전부, 비어있던 survivor0 영역으로 옮긴다.   &lt;br /&gt;
이 객체들의 살아남은 횟수를 1로 기록한다.  &lt;br /&gt;
그리고 survivor1 영역에서 살아남은 객체들도 survivor0 영역으로 옮긴다.   &lt;br /&gt;
이 객체들의 살아남은 횟수에 1을 더해서 기록한다.    &lt;br /&gt;&lt;br /&gt;
&lt;img width=&quot;661&quot; alt=&quot;스크린샷 2020-03-25 오후 1 57 14&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503259-8f867d80-6ea0-11ea-8379-b87f8895de9f.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-old-generation-영역으로-승진&quot;&gt;2) old generation 영역으로 승진&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;garbage collection #9  &lt;br /&gt;
9번째 garbage collection을 수행하면, 살아남은 횟수가 9인 객체가 존재할 수 있다.&lt;br /&gt;
이 객체들은 old generation 영역으로 이동한다.   &lt;br /&gt;&lt;br /&gt;
&lt;img width=&quot;893&quot; alt=&quot;스크린샷 2020-03-25 오후 2 00 10&quot; src=&quot;https://user-images.githubusercontent.com/33855307/77503459-f86df580-6ea0-11ea-8a0e-ca5080bc2b79.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;old generation 영역의 garbage collection&lt;br /&gt;
old generation 영역을 차지하는 객체의 양이 디폴트 기준을 넘으면,     &lt;br /&gt;
old generation 영역과 young generation 영역 전체에서 garbage collection이 진행된다.  &lt;br /&gt;
full GC, major GC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-copying-collector&quot;&gt;3) copying collector&lt;/h4&gt;
&lt;p&gt;young generation 영역의 garbage collection 작업을 담당하는 엔진을, copying collector 라고 부른다.  &lt;br /&gt;
young generation 영역의 GC는 mark 작업과 copy 작업으로 구성된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mark 작업   &lt;br /&gt;
참조되는 객체과, 참조되지 않는 객체를 식별하게 된다.      &lt;br /&gt;
참조되지 않는 객체가 garbage 이다.    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;copy 작업   &lt;br /&gt;
두 survivor 영역 중 한 곳은 언제나 빈 공간이다.  &lt;br /&gt;
mark 작업에서 식별된 참조되는 객체들을, 이 빈 공간에 차곡 차곡 복사한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-java-garbage-collector-종류&quot;&gt;4. Java Garbage Collector 종류&lt;/h3&gt;
&lt;p&gt;Java VM(Virtual Machine) 내부에서 garbage collection 작업을 수행하는 엔진을 garbage collector라고 부른다.     &lt;br /&gt;
Java VM 내부에 garbage collector가 여러 개 구현되어 있고, &lt;br /&gt;
Java VM을 실행할 때 command line parameter로 garbage collector를 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-serial-garbage-collector&quot;&gt;1) Serial Garbage Collector&lt;/h4&gt;
&lt;p&gt;CPU 코어 수가 1개일 때, serial GC가 사용된다.&lt;br /&gt;
minor GC, magor GC 둘 다 싱글 스레드로 실행된다.&lt;br /&gt;
compact 작업까지 수행한다.&lt;/p&gt;

&lt;p&gt;CPU가 많은 서버에서도 serial GC를 사용하기도 하는데, 서버 한 대에 JVM 여러 개를 동시에 실행하는 경우다.&lt;br /&gt;
서버 운영체제에서 JVM 한 개는, 하나의 운영체제 프로세스(process)로 실행된다.&lt;br /&gt;
하나의 운영체제 프로세스 내부에 스레드가 여러 개 생성될 수 있다.&lt;br /&gt;
즉 서버 한 대에 여러 개의 JVM 프로세스가 실행되는 경우에, 각 JVM 내부에서는 serial GC를 사용하기도 한다.&lt;/p&gt;

&lt;p&gt;JVM 프로세스 뿐만 아니라, 다른 프로세스들도 같이 실행되는 서버에서,&lt;br /&gt;
JVM 프로세스가 CPU 코어를 독점하는 것을 막기 위해, serial GC를 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serial GC의 장점&lt;br /&gt;
Serial GC 작업이 진행되는 동안, 다른 작업들이 멈춰야 하는 대신, GC 작업이 효율적으로 진행된다.&lt;br /&gt;
비유를 하자면, 대청소를 하는 동안, 모든 작업을 중단하고 오로지 청소만 한다면,&lt;br /&gt;
효율적인 청소를 할 수가 있다.&lt;br /&gt;
즉 다른 GC 작업에 비해서, Serial GC 작업에 투입되어야 하는 CPU의 작업 총량이 적다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serial GC를 선택하는 경우 요약
    &lt;ul&gt;
      &lt;li&gt;CPU 코어가 한 개 뿐이다.&lt;/li&gt;
      &lt;li&gt;CPU 코어가 여러 개이지만, JVM 프로세스 혼자 CPU 코어를 독점하면 안된다.&lt;/li&gt;
      &lt;li&gt;Serial GC 작업 동안의 멈춤(stop-the-word) 현상을 허용할 수 있다. (길면 1~2초 정도가 될 수 있다고 함)&lt;/li&gt;
      &lt;li&gt;heap의 크기가 100mega 이하 정도로 작다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command line option  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseSerialGC&lt;/code&gt;   &lt;br /&gt;&lt;br /&gt;
명령의 예:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java -XX:+UseSerialGC -jar demo.jar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-parallel-garbage-collector&quot;&gt;2) Parallel Garbage Collector&lt;/h4&gt;
&lt;p&gt;young generation영역의 garbage collection을 멀티 스레드로 실행한다.&lt;br /&gt;
CPU 코어가 여러 개인 경우에, parallel GC가 디폴트로 선택되고, 코어 수 만큼의 스레드로 GC를 수행한다.&lt;/p&gt;

&lt;p&gt;parallel GC 는 parallel GC 와 parallel Old GC 로 나뉜다.&lt;/p&gt;

&lt;p&gt;young generation 영역의 GC를 멀티 스레드로 실행하는 것은 parallelGC 와 parallelOldGC 에서 공통이다.&lt;br /&gt;
young generation 영역의 GC = mark + copy &lt;br /&gt;
mark + copy 작업은 멀티 스레드로 실행될 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parallel GC
old generation 영역의 GC = 싱글 스레드         &lt;br /&gt;
old generation 영역의 GC = mark + sweep + compact         &lt;br /&gt;
sweep + compact 작업은 멀티 스레드로 실행될 수 없고 싱글 스레드로 수행되어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parallel Old GC   &lt;br /&gt;
old generation 영역의 GC = 멀티 스레드  &lt;br /&gt;
old generation 영역의 GC = mark + summary + compact  &lt;br /&gt;
summary + compact 작업은 멀티 스레드로 실행될 수 있다.   &lt;br /&gt;
Parallel Old GC를 Parallel Compating GC라고 부르기도 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parallel GC를 선택하는 경우 요약
    &lt;ul&gt;
      &lt;li&gt;CPU 코어들을 전부 활용하여 JVM 프로세스의 성능을 최대로 높이자&lt;/li&gt;
      &lt;li&gt;JVM 프로세스가 CPU 코어들을 전부 독점해도 된다.&lt;/li&gt;
      &lt;li&gt;Parallel GC 동안의 멈춤(stop-the-world) 현상을 허용할 수 있다. (Serial GC 경우보다는 짧다)&lt;/li&gt;
      &lt;li&gt;CPU 코어 수가 많고, 메모리 용량도 큰 경우에, parallel GC가 디폴트로 선택된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command line option&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseParallelGC &lt;/code&gt;              &amp;lt;- Parallel GC 선택 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseParallelOldGC&lt;/code&gt;            &amp;lt;- Parallel Old GC 선택 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:ParallelGCThreads=스레드수&lt;/code&gt;     &amp;lt;- Parallel GC가 사용할 스레드 수를 제한하기 위한 선택 옵션&lt;br /&gt;
                                    이 옵션을 지정하지 않으면 CPU 코어 수 만큼의 스레드를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-concurrent-mark-sweep-collector&quot;&gt;3) Concurrent Mark Sweep Collector&lt;/h4&gt;
&lt;p&gt;Concurrent Mark Sweep Collector에서 앞글자만 따서 CMS collector라고 부른다.     &lt;br /&gt;
concurrent low pause collector 라고 부르기도 한다.    &lt;br /&gt;
GC 작업 동안의 정지(stop-the-world) 기간을 최대로 줄이기 위해 선택한다.    &lt;br /&gt;
GC 작업 동안 애플리케이션 스레드도 같이 실행될 수 있도록 고안된 GC 이기 때문에, 정지 기간이 매우 짧다.&lt;/p&gt;

&lt;p&gt;CMS GC는 총 6단계의 작업으로 구성되는데, 이 중에서 2 단계만 애플리케이션이 정지되고,     &lt;br /&gt;
4 단계에서는 애플리케이션 스레드와 GC 스레드가 동시에 실행된다.&lt;/p&gt;

&lt;p&gt;GC 작업이 애플리케이션 스레드와 동시에 진행될 수 있어야 하기 때문에,    &lt;br /&gt;
GC 작업이 약간 비효율적으로 진행된다.    &lt;br /&gt;
이 비효율 때문에, 정해진 시간 동안 처리한 작업 양을 비교하면, CMS GC가 parallel GC 보다 뒤쳐진다.    &lt;br /&gt;
그리고 comat 작업을 포함하지 않아서, 메모리도 낭비된다.&lt;/p&gt;

&lt;p&gt;정해진 시간 동안 처리한 작업 양 = throughput    &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;full stop-the-world collection&lt;br /&gt;
old generation 영역이 가득 찬 경우에는, 애플리케이션 스레드들이 모두 멈춘 상태에서(stop-the-world), &lt;br /&gt;
전체 메모리 영역에 대한 garbage collection이 진행된다. 이 작업의 정지 기간이 꽤 길어진다.&lt;br /&gt;
이때에는 compact 작업도 포함된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장점 &lt;br /&gt;
정지(stop-the-world) 기간이 매우 짧다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;compat 작업을 하지 않기 때문에, 메모리가 낭비된다.&lt;/li&gt;
      &lt;li&gt;정해진 시간 동안 처리한 작업 양(throughput)이 parallel GC 보다 못하다.&lt;/li&gt;
      &lt;li&gt;가끔 full stop-the-world collection 작업이 필요해 질 수 있고, 이때는 정지 기간이 길다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CMS GC를 선택하는 경우 요약
    &lt;ul&gt;
      &lt;li&gt;GC 동안의 멈춤(stop-the-world) 현상을 허용할 수 없고, 애플리케이션이 언제나 즉시 반응해야 한다.&lt;/li&gt;
      &lt;li&gt;JVM 프로세스가 CPU 코어들을 전부 독점해도 된다.&lt;/li&gt;
      &lt;li&gt;heap의 크기가 4GB 이하이다. (heap의 크기가 4GB 이상이면, G1 GC를 사용해야 한다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command line option  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:ParallelCMSThreads=스레드 수&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-g1-garbage-collector&quot;&gt;4) G1 Garbage Collector&lt;/h4&gt;
&lt;p&gt;G1 garbage collector는 Java7 부터 제공된다.&lt;br /&gt;
장기적으로 CMS collection를 대체하려고 개발된 GC이다.&lt;br /&gt;
4GB 이상 크기의 heap에 대한 효율적인 GC를 위해서 개발되었다.&lt;/p&gt;

&lt;p&gt;full stop-the-world collection 작업 필요한 상황의 발생 확률이 CMS GC 보다 낮다.&lt;br /&gt;
CMS GC와는 달리 compat 작업을 포함한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;command line opotion  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseG1GC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-jvm-프로세스-수&quot;&gt;5) JVM 프로세스 수&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;전략#1: JVM 프로세스 한 개&lt;br /&gt;
서버 한 대에 JVM 프로세스 한 개만 실행.&lt;br /&gt;
Java로 구현된 서비스들을 모두 이 프로세스에서 실행.&lt;br /&gt;
서비스를 동시에 여러 개 실행하려면, 많은 메모리가 필요할 테니, JVM의 heap 크기를 4GB 이상으로 설정.
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;서비스들 사이에 직접 메소드 호출할 수 있고, 파라미터나 리턴 값으로 데이터를 전달할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;4GB 보다 큰 heap을 GC 할 때, stop-the-world 시간이 10초 정도로 길어질 수 있다.&lt;br /&gt;
이 단점은 G1 GC를 채택하여 해결할 수 있다.&lt;/li&gt;
          &lt;li&gt;어느 한 서비스에 버그가 있어서 에러가 발생하면, 같은 JVM 에서 실행되는 다른 서비스들에게    &lt;br /&gt;
영향을 줄 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전략#2: JVM 프로세스 여러 개  &lt;br /&gt;
서버 한대에 JVM 프로세스 여러 개를 실행.  &lt;br /&gt;
Java로 구현된 서비스들 각각을 별개의 JVM 프로세스에서 실행.  &lt;br /&gt;
각각의 JVM 프로세스는 서비스를 하나만 실행할 테니, JVM의 heap 크기를 적당한 정도로 제한.
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;각각의 JVM은 상대적으로 작은 크기의 heap을 GC 하기 때문에, stop-the-wolrd 시간이 짧다.&lt;/li&gt;
          &lt;li&gt;어느 한 JVM 프로세스에서 에러가 발생해도, 다른 JVM 프로세스에 영향을 줄 수 없다.&lt;/li&gt;
          &lt;li&gt;서비스 단위로 배포하고 관리하기 편하다. Docker를 이용하면, 더욱 편하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;서비스들 사이에 직접 메소드 호출은 불가능하고, 명령이나 데이터를 주고 받기 위해 네트웍 통신이 필요하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-java-vm-command-line-paramter&quot;&gt;6) Java VM command line paramter&lt;/h4&gt;
&lt;p&gt;Java VM(Virtual Machine)을 실행하기 위한 java.exe 명령의 command line parameter 중에서&lt;br /&gt;
메모리 설정과 관련된 것들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xms숫자&lt;/code&gt;    &lt;br /&gt;
heap 영역의 초기 크기를 설정한다.  &lt;br /&gt;
예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xms6m&lt;/code&gt;       = 6mega로 설정  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xmx숫자&lt;/code&gt;&lt;br /&gt;
heap 영역의 최대 크기를 설정한다.  &lt;br /&gt;
예: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xmx80m&lt;/code&gt;       = 80mega로 설정  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Xmn숫자&lt;/code&gt;&lt;br /&gt;
young generation 영역의 크기를 설정한다.     &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseStringDeduplicationJVM&lt;/code&gt; &lt;br /&gt;
Java8 update20 JVM의 G1 Collector에는 String deduplication 기능이 추가되었다.  &lt;br /&gt;
GC 과정에서, 내용이 동일한 String 객체들을 찾아서, 중복된 부분을 제거해 주는 기능이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-03-23/GC(2)/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-03-23/GC(2)/</guid>
      </item>
    
      <item>
        <title>AOP</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Spring/tree/master/ExpertSpring30/src/main/java&quot;&gt;AOP 예제 코드&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;aop-란&quot;&gt;AOP 란?&lt;/h1&gt;
&lt;p&gt;AOP는 Aspect-Oriented Programming의 약자이고, 이를 번역하면 관점 지향 프로그래밍이 된다.&lt;/p&gt;

&lt;p&gt;스프링 DI가 의존성(new)에 대한 주입이라면 스프링 AOP는 로직(code) 주입이라고 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DB 커넥션 준비 
Statement 객체 준비 

try{
    DB 커넥션 연결 
    Statement 객체 세팅 
    insert / update / delete / select 실행 
} catch ... {
    예외처리 
} catch ...{
    예외처리 
} final {
    DB 자원 반납
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 데이터베이스 연산을 하든 공통적으로 나타나는 코드가 있다. 
이를 바로 횡단 관심사라고 한다. 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert / update / delete / select 실행&lt;/code&gt; 이 부분을 핵심 관심사라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;코드 = 핵심 관심사 + 횡단 관심사&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;핵심 관심사는 모듈별로 다르지만 횡단 관심사는 모듈별로 반복되어 중복해서 나타나는 부분이다. &lt;br /&gt;
반복/중복은 분리해서 한 곳에서 관리하자.     &lt;br /&gt;
그런데 AOP에서는 더욱 진보적인 방법을 사용한다.&lt;/p&gt;

&lt;p&gt;로직을 주입한다면 어디에 주입할 수 있을까?  &lt;br /&gt;
객체지향에서 로직(코드)이 있는 곳은 메소드의 안쪽이다.   &lt;br /&gt;
메소드에 주입할 수 있는 곳은 총 5곳이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Around 메소드 전 구역&lt;/li&gt;
  &lt;li&gt;Before 메소드 시작 전 (시작 직후)&lt;/li&gt;
  &lt;li&gt;After 메소드 종료 후 (종료 직전)&lt;/li&gt;
  &lt;li&gt;AfterReturning 메소드 정상 종료 후&lt;/li&gt;
  &lt;li&gt;AfterThrowing 메소드에서 예외가 발생하면서 종료한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;AOP를 통해 어떻게 횡단 관심사를 분리해 낼 수 있는지,  &lt;br /&gt;
분리된 횡단 관심사(로직)을 어떻게 실행 시간에 메서드에 주입할 수 있는지 알아보자.&lt;/p&gt;

&lt;p&gt;예제 코드 : &lt;a href=&quot;https://github.com/hyerin6/Spring/tree/master/ExpertSpring30/src/main/java/aop002&quot;&gt;https://github.com/hyerin6/Spring/tree/master/ExpertSpring30/src/main/java/aop002&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 예제 코드에서 Boy와 Girl이 Person 인터페이스를 구현하고 스프링 AOP를 적용했다.&lt;/p&gt;

&lt;p&gt;코드가 중복이 되거나 말거나 한 파일에 전부 구현했을 때와 달리   &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runSomething()&lt;/code&gt; 메서드만 AOP로 구현했는데 코드의 양이 상당히 늘어났다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boy.java&lt;/code&gt; 코드를 보면 횡단 관심사는 모두 사라졌고 핵심 관심사만 남았다.   &lt;br /&gt;
Boy를 4개의 파일로 분할해서 개발해야해서 수고스러워 보이지만 &lt;br /&gt;
추가 개발과 유지보수 관점에서 보면 엄청 편한 코드가 된 것이다.&lt;/p&gt;

&lt;p&gt;AOP를 적용하면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boy.java&lt;/code&gt;에 단일 책임 원칙(SRP)을 자연스럽게 적용하게 된 것이다.   &lt;br /&gt;
다른 개발자들은 핵심 관심사만 코딩하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Q1.&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boy.java&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Girl.java&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch-finally&lt;/code&gt; 부분이 사라진 이유는?        &lt;br /&gt;
&lt;em&gt;A.&lt;/em&gt; 횡단 관심사이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Q2.&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements Person&lt;/code&gt; 부분이 생긴 이유는?       &lt;br /&gt;
&lt;em&gt;A.&lt;/em&gt; 스프링 AOP가 interface 기반으로 작동하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Q3.&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyAspect.java&lt;/code&gt; 가 들어온 이유는?             &lt;br /&gt;
&lt;em&gt;A.&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boy.java&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Girl.java&lt;/code&gt;에서 횡단 관심사를 지웠는데     &lt;br /&gt;
결국 누군가는 횡단 관심사항을 처리해줘야 한다.    &lt;br /&gt;
그것을 Aspect라고 부르고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyAspect.java&lt;/code&gt;가 그 역할을 담당하는 것이다.&lt;/p&gt;

&lt;p&gt;마지막으로 그럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;aop:aspectj-autoproxy /&amp;gt;&lt;/code&gt;는 뭘까?          &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boy.java&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Girl.java&lt;/code&gt;에서 구현한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runSomething()&lt;/code&gt;은   &lt;br /&gt;
Pserson 인터페이스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runSomething()&lt;/code&gt;메서드를 오버라이딩한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boy.runSomething()&lt;/code&gt;을 호출하면 그 앞에 proxy가 그 요청을 받아 진짜 boy 객체에게 요청을 전달하게 된다.    &lt;br /&gt;
결론적으로 중간에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runSomething()&lt;/code&gt;을 감시하거나 조작할 수 있게되었다.    &lt;br /&gt;
Spring AOP 는 바로 이렇게 Proxy를 사용하게 되어 호출하는 쪽(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boy.runSomething()&lt;/code&gt; 메소드 호출)에서나 &lt;br /&gt;
호출당하는 쪽(boy 객체), 그 누구도 Proxy가 존재하는지 조차 모른다.  &lt;br /&gt;
스프링 프레임워크만이 그 존재를 알게 되는 것이다.&lt;/p&gt;

&lt;p&gt;즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;aop:aspectj-autoproxy /&amp;gt;&lt;/code&gt;는 Spring Framework에게 AOP Proxy를 자동(auto)으로 사용하라고 알려주는 지시자이다.&lt;/p&gt;

&lt;p&gt;스프링 AOP의 핵심은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 AOP는 인터페이스 기반이다.&lt;/li&gt;
  &lt;li&gt;스프링 AOP는 프록시 기반이다.&lt;/li&gt;
  &lt;li&gt;스프링 AOP는 런타임 기반이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;용어-정리&quot;&gt;용어 정리&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Aspect 관점, 측면, 양상&lt;/li&gt;
  &lt;li&gt;Advisior 조언자, 고문&lt;/li&gt;
  &lt;li&gt;Adivice 조언, 충고&lt;/li&gt;
  &lt;li&gt;JoinPoint 결합점&lt;/li&gt;
  &lt;li&gt;Pointcut 자르는점&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-pointcut---aspect-적용-위치-지정자&quot;&gt;1. Pointcut - Aspect 적용 위치 지정자&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Before(&quot;execution(* runSomething())&quot;)&lt;/code&gt; 의 의미는 뭘까?&lt;br /&gt;
지금 선언하고 있는 메소드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* runSomething()&lt;/code&gt;가 실행되기 전에 실행하라는 의미이다. &lt;br /&gt;
여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public void before&lt;/code&gt;는 횡단 관심사를 실행하는 메소드가 된다.&lt;/p&gt;

&lt;p&gt;결국 Pointcut이라고 하는 것은 횡단 관심사를 적용할 타깃 메소드를 선택하는 지시자(메소드 선택 필터)인 것이다. &lt;br /&gt;
이를 줄여서 표현하면 “타깃 클래스의 타깃 메소드 지정자”라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링 AOP만 보자면 Aspect를 메소드에만 적용할 수 있으니 타깃 메소드 지정자라는 말이 틀리지 않다. &lt;br /&gt;
다른 AOP 프레임워크에서는 메소드뿐만 아니라 속성 등에도 Aspect를 적용할 수 있기 때문에 그것까지 고려한다면 &lt;br /&gt;
Aspect 적용 위치 지정자(지시자)가 맞는 표현이다. &lt;br /&gt;
Pointcut을 메소드 선정 알고리즘이라고도 한다.&lt;/p&gt;

&lt;p&gt;타깃 메소드 지정자에는 정규식과 AspectJ 표현식 등을 사용할 수 있다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[접근제한자패턴] 리턴타입패턴 [패키지&amp;amp;클래스패턴.]메소드이름패턴(파라미터패턴) [throws 예외패턴]&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-joinpoint---연결-가능한-지점&quot;&gt;2. JoinPoint - 연결 가능한 지점&lt;/h4&gt;
&lt;p&gt;Pointcut은 JoinPoint의 부분 집합이다. &lt;br /&gt;
스프링 AOP는 인터페이스를 기반으로 한다고 설명했는데 그럼 인터페이스는 뭘까?&lt;br /&gt;
인터페이스는 추상 메소드의 집합체이다. 그럼 삼단 논법에 의해 스프링 AOP는 메소드에만 적용 가능하다는 결론에 도달한다.&lt;/p&gt;

&lt;p&gt;JoinPoint란 “Aspect 적용이 가능한 모든 지점을 말한다.”라고 결론 지을 수 있다.&lt;/p&gt;

&lt;p&gt;스프링 AOP에서 JoinPoint란 스프링 프레임워크가 관리하는 빈의 모든 메소드에 해당한다.  &lt;br /&gt;
이것이 광의의 JoinPoint다. 협의의 JoinPoint는 코드 상에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;romeo.runSomething()&lt;/code&gt; 메소드를 호출한 상태라면 JoinPoint는 romeo 객체의 runSomething() 메소드가 된다. &lt;br /&gt;
JoinPoint 파라미터를 이용하면 실행 시점에 실제 호출된 메소드가 무엇인지, 실제 호출된 메소드를 소유한 객체가 무엇인지, &lt;br /&gt;
또 호출된 메소드의 파라미터는 무엇인지 등의 정보를 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;광의의 JoinPoint란 Aspect 적용이 가능한 모든 지점&lt;/li&gt;
  &lt;li&gt;협의의 JoinPoint란 호출된 객체의 메소드&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-advice---조언-언제-무엇을&quot;&gt;3. Advice - 조언? 언제, 무엇을&lt;/h4&gt;
&lt;p&gt;Advice는 Pointcut에 적용할 로직, 즉 메소드를 의미한다. 여기에 언제라는 개념까지 포함하고 있다. &lt;br /&gt;
Advice란 Pointcut에 언제, 무엇을 적용할지 정의한 메소드다.&lt;/p&gt;

&lt;h4 id=&quot;4-aspect---advice의-집합체&quot;&gt;4. Aspect - Advice의 집합체&lt;/h4&gt;
&lt;p&gt;AOP에서 Aspect는 여러 개의 Advice와 여러 개의 Pointcut의 결합체를 의미하는 용어다. &lt;br /&gt;
&lt;strong&gt;Aspect = Advice들 + Pointcut들&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Advice - 언제, 무엇을&lt;br /&gt;
Pointcut - 어디에  &lt;br /&gt;
Aspect - 언제, 어디에, 무엇을&lt;/p&gt;

&lt;h4 id=&quot;5-advisor---어디서-언제-무엇을&quot;&gt;5. Advisor - 어디서, 언제, 무엇을&lt;/h4&gt;
&lt;p&gt;Advisor은 다음과 같다. &lt;br /&gt;
&lt;strong&gt;Advisor = 한 개의 Adivice + 한 개의 Pointcut&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Advisor는 스프링 AOP에서만 사용하는 용어이며 다른 AOP 프레임워크에서는 사용하지 않는다. &lt;br /&gt;
또 스프링 버전이 올라가면서 이제는 쓰지 말라고 권고하는 기능이기도 하다. &lt;br /&gt;
Aspect가 나왔기 때문에 하나의 Advice와 하나의 Pointcut만을 결합하는 Advisor를 사용할 필요가 없어졌기 때문이다.&lt;/p&gt;

&lt;h1 id=&quot;pojo와-xml-기반-aop&quot;&gt;POJO와 XML 기반 AOP&lt;/h1&gt;
&lt;p&gt;@ 어노테이션 기반 - MyAspect.java가 스프링 프레임워크에 종속 &lt;br /&gt;
POJO &amp;amp; XML 기반 - 스프링 프레임워크에 종속되지 않음&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-14/spring-AOP/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-14/spring-AOP/</guid>
      </item>
    
      <item>
        <title>spring form validation</title>
        <description>&lt;h1 id=&quot;spring-form-validation-1&quot;&gt;Spring Form Validation 1&lt;/h1&gt;

&lt;h3 id=&quot;1-배경지식&quot;&gt;1. 배경지식&lt;/h3&gt;
&lt;h4 id=&quot;1-spring-form-validation&quot;&gt;(1) spring form validation&lt;/h4&gt;
&lt;p&gt;입력폼에 입력된 내용의 오류를 spring이 자동으로 검사해주는 기능이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;입력폼 submit 과정 #1&lt;/strong&gt;                       &lt;br /&gt;
spring web mvc로 구현한 입력폼의 submit 과정은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 웹 브라우저에서 입력폼에 데이터를 입력하고 submit 버튼을 누른다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버의 url이 요청된다. (http request)            &lt;br /&gt;
입력폼에 입력된 데이터도 이 요청에 같이 담겨 전송된다. (request parameter)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;spring web mvc 엔진이 그 요청을 받아서 요청된 url과 일치하는 액션메소드를 찾는다.&lt;/p&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;studentEdit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;studentEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@valid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;nc&quot;&gt;BingingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;spring form validation 기능을 구현하기 위해, &lt;br /&gt;
@valid 어노테이션과 BindingResult 객체가 추가되었다.   &lt;br /&gt;
검사결과를 bindingResult에 채워진 후에 액션 메소드가 호출된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;위 액션메소드의 파라미터가 객체이기 때문에 spring web mvc 엔진이 아래의 일들을 자동으로 처리한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Student 객체 생성&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStudentNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;201732017&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 생성된 객체에 request parameter 데이터를 채운다.  &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 객체를 model 객체에 등록한다.   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Student 객체에 채워진 데이터에 문제가 없는지 검사한다.    &lt;br /&gt;
데이터를 검사할 규칙이 Student 클래스에 등록되어 있어야 한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt; 
 &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;Stirng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
 &lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;spring form validation 기능을 구현하기 위해 @NotEmpty, @Size 어노테이션이 추가되었다.         &lt;br /&gt;
Student 객체에 채워진 데이터가 이 어노테이션 규칙이 부합하는지 spring web mvc 엔진이 검사한다.   &lt;br /&gt;
검사결과가 BindingResult 객체에 등록한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;액션메소드가 호출된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;studentEdit(student, model, bindingResult)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-모델-클래스model&quot;&gt;(2) 모델 클래스(model)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;request parametet 데이터를 채우기 위한 객체    &lt;br /&gt;
앞에서 설명한 입력폼 submit 과정에서 사용된 Student 클래스 처럼,            &lt;br /&gt;
request parameter 데이터를 채우기 위한 클래스를 모델 클래스라고 부른다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;model 객체에 채워져 뷰에 전달되기 위한 객체      &lt;br /&gt;
spring form validation 규칙을 설정하기 위한 어노테이션을 model 클래스에 추가해야 하는데,     &lt;br /&gt;
그 어노테이션들은 Entity 클래스에서는 사용할 수 없다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DTO - 데이터를 채워서 전달&lt;/strong&gt;         &lt;br /&gt;
&lt;strong&gt;model - 입력 받은 값을 view에서 controller에 전달&lt;/strong&gt;              &lt;br /&gt;
&lt;strong&gt;Entity - DB 테이블 구조 그대로&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-엔터티-클래스&quot;&gt;(3) 엔터티 클래스&lt;/h4&gt;
&lt;p&gt;JPA 프로그래밍에서 구현하게 되는 @Entity 어노테이션이 붙은 클래스를 엔터티 클래스라고 부른다.       &lt;br /&gt;
엔터티 객체는 JPA Repository의 조회결과 데이터를 리턴할 때 사용되는 객체이다.      &lt;br /&gt;
JPA Repository의 save 메소드를 호출하여 데이터를 저장할 때도 엔터티 객체를 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;4-모델-클래스와-엔터티-클래스&quot;&gt;(4) 모델 클래스와 엔터티 클래스&lt;/h4&gt;
&lt;p&gt;예를들어, 학생 테이블의 경우에 아래의 클래스들을 따로 구현한다.        &lt;br /&gt;
모델 클래스 - StudentModel.java     &lt;br /&gt;
엔터티 클래스 - Student.java&lt;/p&gt;

&lt;p&gt;spring form validation 기능을 구현하기 위해서는 엔터티 클래스와 모델 클래스를 구별해서 따로 구현해야 한다.     &lt;br /&gt;
spring form validation 기능을 구현하려면 @NotEmpty, @Size 어노테이션을 사용해야 하는데,    &lt;br /&gt;
이 어노테이션들을 엔터티 클래스에 붙이는 것은 바람직하지 않기 때문이다. (중복이 많아지면 상속해서 구현한다.)&lt;/p&gt;

&lt;h4 id=&quot;5-객체지향-설계&quot;&gt;(5) 객체지향 설계&lt;/h4&gt;
&lt;p&gt;객체지향적으로 바람직한 구조를 만들기 위한 설계 원칙 중 하나는, 클래스들의 역할을 분명히 구분하는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;컨트롤러의 역할  &lt;br /&gt;
컨트롤러의 역할은 이름 그대로 지휘 통제하는 것이다.     &lt;br /&gt;
지휘 통제 역할만 해야 한다. 구체적으로 작업을 하는 것은 바람직하지 않다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DAO(Data Access Object) 클래스의 역할       &lt;br /&gt;
DAO의 역할은 데이터베이스 테이블에 SELECT/INSERT/UPDATE/DELETE 하는 작업을 하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Service 클래스의 역할     &lt;br /&gt;
DAO 작업을 제외한 나머지 작업들은 서비스 클래스에 구현되어야 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-컨트롤러-클래스-구현&quot;&gt;7. 컨트롤러 클래스 구현&lt;/h3&gt;
&lt;h4 id=&quot;1-usercontrollerjava&quot;&gt;(1) UserController.java&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestMapping(value=&quot;register&quot;, method=RequestMethod.GET)&lt;/code&gt;      &lt;br /&gt;
회원가입 입력폼이 처음 실행될 때, GET 방식의 register 액션 메소드가 실행된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model.addAttribute(&quot;departments&quot;, departmentService.findAll());&lt;/code&gt;     &lt;br /&gt;
user/register.jsp 뷰 파일을 실행할 때, 학과 목록이 출력되어야 하기 때문에     &lt;br /&gt;
학과 목록이 모델이 들어있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestMapping(value=&quot;register&quot;, method=RequestMethod.POST)&lt;/code&gt;          &lt;br /&gt;
submit 버튼을 눌렀을 때, POST 방식의 register 액션 메소드가 실행된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;departments&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;departmentService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user/register&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;userModel 모델 객체에 채워진 데이터에 오류가 있다면, if문이 true가 된다.     &lt;br /&gt;
회원가입 입력 항목에 에러가 있기 때문에 회원가입 입력폼이 다시 화면에 나타나야 한다.        &lt;br /&gt;
그래서 “user/register” 뷰 이름을 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:registerSuccess&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;데이터가 오류가 없으면, UserRegistrationModel 객체에 입력된 데이터를 user 테이블에 저장한다.       &lt;br /&gt;
그리고 회원가입 성공 화면으로 리다이렉트한다.&lt;/p&gt;

&lt;h3 id=&quot;8-뷰-구현&quot;&gt;8. 뷰 구현&lt;/h3&gt;
&lt;h4 id=&quot;1-userregisterjsp&quot;&gt;(1) user/register.jsp&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form:form method=&quot;post&quot; modelAttribute=&quot;userRegistrationModel&quot;&amp;gt;
	...
	&amp;lt;form:errors path=&quot;userid&quot; class=&quot;error&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;userid 데이터 항목과 관련된 에러 메시지가 자동으로 여기에 표시된다.&lt;/p&gt;

&lt;h2 id=&quot;코드-분석&quot;&gt;코드 분석&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; user/register.jsp 뷰 파일은 어떤 메소드의 뒤에 이어서 실행되는가?     &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; register GET, POST 방식 메소드&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; GET 방식 액션 메소드에서 userRegistrationModel 객체를 모델에 어떻게 등록하였는가?       &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; userRegistrationModel 객체를 파라미터로 받아,      &lt;br /&gt;
spring web mvc 엔진이 객체 생성 객체에 전달받은 파라미터 값 저장, model에 등록을 자동을 해준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; POST 방식 액션 메소드에서 userRegistrationModel 객체를 모델에 어떻게 등록하였는가?   &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; 파라미터로 객체를 전달받으면 자동으로 model에 등록된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; GET 방식 액션 메소드에서 departments 객체를 모델에 어떻게 등록하였는가?       &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; Model 객체에 addAttribute() 메소드를 이용하여 등록할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; POST 방식 액션 메소드에서 departments 객체를 모델에 어떻게 등록하였는가?     &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; Model 객체에 addAttribute() 메소드를 이용하여 등록할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;11-사용자-아이디-중복-검사-기능-구현&quot;&gt;11. 사용자 아이디 중복 검사 기능 구현&lt;/h3&gt;
&lt;p&gt;user 테이블의 userid 필드    &lt;br /&gt;
이 필드는 primary key 가 아니다. 이 필드로 unique index를 만들지도 않았다.               &lt;br /&gt;
그렇기 때문에 동일한 값이 INSERT 되어도 에러가 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;중복 방지를 위해 unique index를 만들어 주는게 좋다. 하지만 DB에 삽입하기 전에 먼저 검사해서      &lt;br /&gt;
입력폼에서 에러를 표시해 주는 것이 바람직하다.&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;spring-form-validation-2&quot;&gt;Spring Form Validation 2&lt;/h1&gt;

&lt;h3 id=&quot;1-validation-message-수정&quot;&gt;1. validation message 수정&lt;/h3&gt;
&lt;h4 id=&quot;1-목표&quot;&gt;(1) 목표&lt;/h4&gt;

&lt;p&gt;&lt;img width=&quot;536&quot; alt=&quot;스크린샷 2019-12-03 오후 11 17 42&quot; src=&quot;https://user-images.githubusercontent.com/33855307/70058923-29d96180-1623-11ea-9632-bb2190683411.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 화면에서 자동으로 출력된 에러 메시지 문구를 수정하자.&lt;/p&gt;

&lt;p&gt;각 validation annotation에 대한 에러 메시지를 ValidationMessage.properties 파일에 등록해 주면 된다.&lt;/p&gt;

&lt;h3 id=&quot;2-validationmessageproperties-생성&quot;&gt;(2) ValidationMessage.properties 생성&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javax.validation.constraints.Size.message=크기가 {min} 이상 {max} 이하이어야 합니다.
org.hibernate.validator.constraints.Email.message=이메일 주소가 바르지 않습니다.
org.hibernate.validator.constraints.NotEmpty.message=필수 입력항목입니다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;javax.validation.constraints.Size.message 는 @Size 어노테이션 클래스의 경로명                 &lt;br /&gt;
org.hibernate.validator.constraints.Email.message 는 @Email 어노테이션 클래스의 경로명         &lt;br /&gt;
org.hibernate.validator.constraints.NotEmpty.message 는 @NotEmpty 어노테이션 클래스의 경로명&lt;/p&gt;

&lt;h3 id=&quot;2-개별-항목에-대한-에러-메시지-등록&quot;&gt;2. 개별 항목에 대한 에러 메시지 등록&lt;/h3&gt;
&lt;h4 id=&quot;1-목표-1&quot;&gt;(1) 목표&lt;/h4&gt;
&lt;p&gt;@NotEmpty 어노테이션에 위배되는 모든 항목에 “필수 입력 항목입니다.” 에러메시지가 동일하게 출력된다.    &lt;br /&gt;
항목에 따라서 다른 에러 메시지가 표시되어야 하는 경우에는       &lt;br /&gt;
@NotEmpty 어노테이션에 message 애트리뷰트 값으로 에러 메시지를 등록하면 된다.&lt;/p&gt;

&lt;h4 id=&quot;2-message-애트리뷰트&quot;&gt;(2) message 애트리뷰트&lt;/h4&gt;
&lt;p&gt;어떤 항목의 @NotEmpty 에러 메시지를 다른 것으로 바꾸려면,    &lt;br /&gt;
이 어노테이션에 message 애트리뷰트 값으로 에러 메시지를 등록하면 된다.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;학번을 입력하세요&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6 자리 이상 12 자리 이하이어야 합니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;양의 정수를 입력하세요&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Min(1)&lt;/code&gt;   &lt;br /&gt;
위와같이 값이 한개인 어노테이션에서 그 값 한개인 애트리뷰트 이름은 value이다.     &lt;br /&gt;
애트리뷰트 값이 하나 뿐일 때, value 이름을 생략할 수 있다.    &lt;br /&gt;
하지만, 값이 여러개 일 때는 애트리뷰트 이름을 생략할 수 없다. -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Min(value=1, message=&quot;error message&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-로직-에러-처리하기&quot;&gt;3. 로직 에러 처리하기&lt;/h3&gt;
&lt;h4 id=&quot;1-목표-2&quot;&gt;(1) 목표&lt;/h4&gt;
&lt;p&gt;validation annotation에 의해서 자동으로 검사되기 힘든 에러들도 있다.   &lt;br /&gt;
예를들어, 사용자 아이디 중복을 검사하려면 DB의 user 테이블을 조회해야 한다.    &lt;br /&gt;
입력된 두 비밀번호가 일치하는지 검사하려면, 두 멤버변수를 비교해야 한다.     &lt;br /&gt;
이런 에러 검사는 validation annotation으로 구현하기 힘들고 따로 직접 구현해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로직 에러 처리하기 절차&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(1) spring form validation 에러가 있다면, 회원가입 뷰 이름을 리턴한다.  &lt;br /&gt;
회원가입 뷰 이름이 리턴되면 웹 브라우저 창에 회원가입 화면이 다시 출력된다.&lt;/p&gt;

&lt;p&gt;(2) 입력된 두 비밀번호가 일치하는지 검사한다.&lt;/p&gt;

&lt;p&gt;(3) 일치하지 않으면 비밀번호 불일치 에러이다. &lt;br /&gt;
 	(3-1) bindingResult 객체에 비밀번호 불일치 에러메시지를 등록한다. &lt;br /&gt;
 	(3-2) 회원가입 뷰 이름을 리턴한다.&lt;/p&gt;

&lt;p&gt;(4) 입력된 사용자 아이디로 DB의 사용자 테이블에서 조회한다.&lt;/p&gt;

&lt;p&gt;(5) 조회결과가 null이 아니면, 사용자 아이디 중복 에러이다. &lt;br /&gt;
 	(5-1) bindingResult 객체에 사용자 아이디 중복 에러 메시지를 등록한다. &lt;br /&gt;
 	(5-2) 회원가입 뷰 이름을 리턴한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bindingResult 객체에 에러 메시지 등록하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bindingResult.rejectValue(&quot;password2&quot;, null, &quot;비밀번호가 일치하지 않습니다.&quot;);&lt;/code&gt;&lt;br /&gt;
rejectValue 메소드를 호출하여 에러 메시지를 등록한다.&lt;/p&gt;

&lt;p&gt;첫번째 파라미터 : 에러가 발생한 멤버변수 이름  &lt;br /&gt;
세번쨰 파라미터 : 에러 메시지&lt;/p&gt;

&lt;p&gt;bindingResult에 위 에러가 등록되면, 아래 태그에 그 에러 메시지가 출력된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;form:errors path=&quot;password2&quot; class=&quot;error&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-userservicejava&quot;&gt;(2) UserService.java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserRegistrationModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-usercontrollerjava&quot;&gt;(3) UserController.java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user/register&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; 아까 입력했던 내용이 view에 어떻게 나타나는걸까?  &lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; 액션 메소드의 파라미터가 객체일 때, 자동으로 일어나는 일은    &lt;br /&gt;
userModel이 model에 자동으로 addAttribute 된다. (userRegistration이라는 이름으로)&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-14/spring-form-validation/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-14/spring-form-validation/</guid>
      </item>
    
      <item>
        <title>세션(session)</title>
        <description>&lt;p&gt;최범균의 JPS 2.3 웹프로그래밍 참고..&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;서버 세션을 사용하면 클라이언트의 상태를 저장할 수 있다.  &lt;br /&gt;
쿠키와의 차이점은 세션은 웹 브라우저가 아니라 서버에 값을 저장한다는 점이다. &lt;br /&gt;
서버는 세션을 사용해서 클라이언트 상태를 유지할 수 있기 때문에, 로그인한 사용자 정보를 유지하기 위한 &lt;br /&gt;
목적으로 세션을 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;1-세션-사용하기--session-기본-객체&quot;&gt;1. 세션 사용하기 : session 기본 객체&lt;/h3&gt;
&lt;p&gt;웹 브라우저에 정보를 보관할 때 쿠키를 사용한다면, 세션은 웹 컨테이너에 정보를 보관할 때 사용한다.  &lt;br /&gt;
세션은 오직 서버에만 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1155&quot; alt=&quot;스크린샷 2020-02-06 오후 6 42 13&quot; src=&quot;https://user-images.githubusercontent.com/33855307/73924794-67eb4e00-4910-11ea-97d1-5e3c9fe4165a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 컨테이너는 기본적으로 한 웹 브라우저마다 한 세션을 생성한다. &lt;br /&gt;
즉, 같은 JSP 페이지라도 웹 브라우저에 따라 서로 다른 세션을 사용한다.&lt;/p&gt;

&lt;p&gt;웹 브라우저마다 세션이 따로 존재하기 때문에, 세션은 웹 브라우저와 관련된 정보를 저장하기에 알맞은 저장소이다. &lt;br /&gt;
즉, 쿠키가 클라이언트 측의 데이터 보관소라면 세션은 서버 측의 데이터 보관소인 것이다.&lt;/p&gt;

&lt;p&gt;만료 시간을 정할 수 있지만 메모리에 저장하기 때문에 브라우저가 종료되면 사라지게 된다.&lt;/p&gt;

&lt;h3 id=&quot;2-세션-생성-속성-사용-종료-등&quot;&gt;2. 세션 생성, 속성 사용, 종료 등&lt;/h3&gt;
&lt;p&gt;세션 사용 방법은 책 참고!&lt;/p&gt;

&lt;h3 id=&quot;3-세션을-사용한-로그인-상태-유지&quot;&gt;3. 세션을 사용한 로그인 상태 유지&lt;/h3&gt;
&lt;p&gt;세션을 사용해서 로그인을 처리하는 방식은 쿠키를 사용한 방식과 비슷하다. &lt;br /&gt;
(1) 로그인에 성공하면 session 기본 객체의 특정 속성에 데이터를 기록한다. &lt;br /&gt;
(2) 이후로 session 기본 객체의 특정 속성이 존재하면 로그인한 것으로 간주한다. &lt;br /&gt;
(3) 로그아웃할 경우 session.invalidate() 메소드를 호출하여 세션을 종료한다.&lt;/p&gt;

&lt;h3 id=&quot;4-서블릿-컨텍스트와-세션&quot;&gt;4. 서블릿 컨텍스트와 세션&lt;/h3&gt;
&lt;p&gt;예제로 설명! &lt;br /&gt;
webapp 폴더에 chap10 폴더와 chap10_2 폴더를 만들면 &lt;br /&gt;
다음 두 URL을 사용해서 view.jsp를 실행할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://localhost:8080/chap10/view.jsp&lt;/li&gt;
  &lt;li&gt;http://localhost:8080/chap10_2/view.jsp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSESSIONID 쿠키를 서버에 전송한다고 했을 때,&lt;/p&gt;

&lt;p&gt;같은 서버에서 /chap10 경로와 /chap10_2 경로가 서로 다른 JSESSIONID 값을 사용하는 이유는 &lt;br /&gt;
두 경로가 서로 다른 웹 어플리케이션이기 때문이다. &lt;br /&gt;
세션 ID를 보관할 때 사용할 JSESSIONID 쿠키의 경로로 웹 어플리케이션의 컨텍스트 경로를 사용한다. &lt;br /&gt;
즉, 웹 어플리케이션의 컨텍스트 경로가 /chap10인 쿠키는 URL이 /chap10 경로로 시작하는 경우에만 전송되므로, &lt;br /&gt;
/chap10 웹 어플리케이션에서 생성한 JSESSIONID 쿠키는 /chap10 웹 어플리케이션에서만 사용한다.   &lt;br /&gt;
/chap10_2도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;서로 다른 두 웹 어플리케이션이 다른 세션 ID를 사용하고 다른 JSESSIONID 쿠키를 사용한다는 것은,     &lt;br /&gt;
다시 말하면 서로 다른 웹 어플리케이션이 세션을 공유하지 않음을 의미한다.     &lt;br /&gt;
즉, 같은 웹 브라우저라 하더라도 /chap10 어플리케이션에서 사용하는 session 기본 객체와   &lt;br /&gt;
/chap10_2 어플리케이션에서 사용하는 session 기본 객체가 다르다.&lt;/p&gt;

&lt;h3 id=&quot;5-server-side-관점의-세션&quot;&gt;5. server-side 관점의 세션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;서버에 저장하기 때문에 관리하기 편하고 효율적이다.&lt;/li&gt;
      &lt;li&gt;쿠키 보다는 보안에 유리하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;서버에 부하를 초래할 수 있다.&lt;/li&gt;
      &lt;li&gt;로드 밸런싱(load balancing) 시스템 효율성 별로&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세션 단점 해결 방법
    &lt;ul&gt;
      &lt;li&gt;load-balancing 문제
        &lt;ul&gt;
          &lt;li&gt;세션 정보를 하나의 저장장치에 공유하는 것 ex) Redis&lt;/li&gt;
          &lt;li&gt;sticky session : 각각의 클라이언트를 다른 서버에 binding하는 방법&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서버 부하
        &lt;ul&gt;
          &lt;li&gt;memory기반의 저장장치를 사용 ex) Redis&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-client-side-관점의-세션&quot;&gt;6. client-side 관점의 세션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서버에 많은 양의 정보를 저장하지 않고 상태를 유지하기 위해 암호화가 적용된 쿠키를 사용&lt;/li&gt;
  &lt;li&gt;클라이언트에 저장된 쿠키가 데이터가 소프트웨어나 다른 사용자에 의해 손상될 경우도 있다.&lt;/li&gt;
  &lt;li&gt;클라이언트 세션은 기밀성과 무결성이 보장되어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;보장되어야 하는 것&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Confidentiality : 서버이외에는 어느 누구도 세션데이터를 해석할 수 없어야 한다.&lt;/li&gt;
  &lt;li&gt;Data integrity : 서버와 별개로 세션 데이터를 조작해서는 안된다.&lt;/li&gt;
  &lt;li&gt;Authenticity : 서버를 제외하고는 올바른 세션을 시작할 수 없어야 한다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 06 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-06/session/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-06/session/</guid>
      </item>
    
      <item>
        <title>쿠키(cookie)</title>
        <description>&lt;p&gt;최범균의 JPS 2.3 웹프로그래밍 참고..&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;쿠키란&quot;&gt;쿠키란&lt;/h3&gt;
&lt;p&gt;쿠키는 웹 브라우저가 보관하는 데이터이다. 웹 브라우저는 웹 서버에 요청을 보낼 때 쿠키를 함께 전송하며, &lt;br /&gt;
웹 서버는 웹 브라우저가 전송한 쿠키를 사용해서 필요한 데이터를 읽을 수 있다. &lt;br /&gt;
쿠키는 웹 서버와 웹 브라우저 양쪽에서 생상헐 수 있는데, JSP에서 생성하는 쿠키는 웹 서버에서 생성하는 쿠키이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;쿠키 동작 방식&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;591&quot; alt=&quot;스크린샷 2020-02-06 오후 5 39 57&quot; src=&quot;https://user-images.githubusercontent.com/33855307/73920415-aed54580-4908-11ea-9841-43f460567673.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) 쿠키 생성 단계 &lt;br /&gt;
쿠키를 사용하려면 먼저 쿠키를 생성해야 한다. JSP 프로그래밍에서 쿠키는 웹 서버 측에서 생성한다. &lt;br /&gt;
생성한 쿠키를 응답 데이터의 헤더에 저장해서 웹 브라우저에 전송한다.&lt;/p&gt;

&lt;p&gt;(2) 쿠키 저장 단계 &lt;br /&gt;
웹 브라우저는 응답 데이터에 포함된 쿠키를 쿠키 저장소에 보관한다. &lt;br /&gt;
쿠키의 종류에 따라 메모리나 파일에 저장한다.&lt;/p&gt;

&lt;p&gt;(3) 쿠키 전송 단계 &lt;br /&gt;
웹 브라우저는 저장한 쿠키를 요청이 있을 때마다 웹 서버에 전송한다. &lt;br /&gt;
웹 서버는 웹 브라우저가 전송한 쿠키를 사용해서 필요한 작업을 수행한다.&lt;/p&gt;

&lt;p&gt;웹 브라우저에 쿠키가 저장되면, 웹 브라우저는 쿠키가 삭제되기 전까지 웹 서버에 쿠키를 전송한다.   &lt;br /&gt;
따라서 웹 어플리케이션을 사용하는 동안 지속적으로 유지해야 하는 정보는 쿠키를 사용해서 저장하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트에 저장하기 때문에 서버에 요청 시 빠르다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;쿠키에 대한 정보를 매 헤더(Http Header)에 추가하여 보내기 때문에 상당한 트랙픽을 발생시킵니다.&lt;/li&gt;
  &lt;li&gt;결제정보등을 쿠키에 저장하였을때 쿠키가 유출되면 보안에 대한 문제점도 발생할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;저장 용량에 제한이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-쿠키의-구성&quot;&gt;1. 쿠키의 구성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이름 : 각각의 쿠키를 구성하는 데 사용되는 이름&lt;/li&gt;
  &lt;li&gt;값 : 쿠키의 이름과 관련된 값&lt;/li&gt;
  &lt;li&gt;유효시간 : 쿠키의 유지 시간&lt;/li&gt;
  &lt;li&gt;도메인 : 쿠키를 전송할 도메인&lt;/li&gt;
  &lt;li&gt;경로 : 쿠키를 전송할 요청 경로&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나의 웹 브라우저는 여러 개의 쿠키를 가질 수 있는데, 각 쿠키를 구분할 때 이름을 사용한다. &lt;br /&gt;
각 쿠키는 값을 가지고 서버는 이 값을 이용해서 원하는 작업을 한다.&lt;/p&gt;

&lt;p&gt;유효시간을 사용하면 웹 브라우저가 쿠키를 얼마 동안 보관할지를 지정할 수 있다. &lt;br /&gt;
예를 들어 쿠키 유효 시간을 1시간으로 지정하면 1시간 뒤에 웹 브라우저가 해당 쿠키를 삭제하고 &lt;br /&gt;
별도의 유효 시간을 지정하지 않으면 웹 브라우저를 종료할 때 쿠키를 함께 삭제한다.   &lt;br /&gt;
유효 시간에 따라 브라우저를 종료해도 계속 남아 있을 수 있다. &lt;br /&gt;
또한, 지정한 도메인이나 경로로만 쿠키를 전송하도록 제한할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;2-쿠키의-종류&quot;&gt;2. 쿠키의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Session Cookie : 보통 만료시간(Expire date) 설정하고 메모리에만 저장되며 브라우저 종료시 쿠키를 삭제&lt;/li&gt;
  &lt;li&gt;Persistent Cookie	: 장기간 유지되는 쿠키(예를 들어 Max-Age 1년), 파일로 저장되어 브라우저 종료와 관계없이 사용&lt;/li&gt;
  &lt;li&gt;Secure Cookie : HTTPS에서만 사용, 쿠키 정보가 암호화 되어 전송&lt;/li&gt;
  &lt;li&gt;Third-Party Cookie : 방문한 도메인과 다른 도메인의 쿠키 보통 광고 베너 등을 관리할 때 유입 경로를 추적하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-쿠키-생성-변경-삭제-등&quot;&gt;3. 쿠키 생성, 변경, 삭제 등&lt;/h3&gt;
&lt;p&gt;쿠키 사용 방법은 책 참고!&lt;/p&gt;

&lt;h3 id=&quot;4-쿠키를-사용한-로그인-상태-유지&quot;&gt;4. 쿠키를 사용한 로그인 상태 유지&lt;/h3&gt;
&lt;p&gt;쿠키를 이용하면 다음과 같은 방법으로 로그인 상태를 유지할 수 있다.  &lt;br /&gt;
(1) 로그인에 성공하면 특정 이름을 갖는 쿠키를 생성한다. &lt;br /&gt;
(2) 해당 쿠키가 존재하면 로그인한 상태라고 판단한다.  &lt;br /&gt;
(3) 로그아웃하면 해당 쿠키를 삭제한다.&lt;/p&gt;

&lt;p&gt;예를 들어, 로그인에 성공하면 “AUTH”라는 쿠키를 생성하고,  &lt;br /&gt;
“AUTH” 쿠키가 존재하면 로그인한 상태라고 인식하는 것이다.&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-06/cookie/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-06/cookie/</guid>
      </item>
    
      <item>
        <title>Lombok이란</title>
        <description>&lt;h2 id=&quot;lombok-이란&quot;&gt;Lombok 이란?&lt;/h2&gt;
&lt;p&gt;자바에서 DTO, VO 등에서 반복적으로 사용되는 코드를 annotation을 통해 쉽게 작성할 수 있게 도와주는 라이브러리&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;동작 원리&lt;/strong&gt;&lt;br /&gt;
롬복 어노테이션이 붙은 자바 소스를 컴파일할 때 annotation processor로 등록된 lombok processor가 
어노테이션을 확인하고 그에 맞는 코드를 자동으로 생성해서 바이트코드로 변환 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사용 방법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;의존성 설정&lt;/li&gt;
  &lt;li&gt;plugin 설정&lt;/li&gt;
  &lt;li&gt;compile 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;설정은 lombok.config 파일에서&lt;/strong&gt; &lt;br /&gt;
세부적인 설정이 가능한데 기본적으로 disable로 설정되어있는 어노테이션은 flagUsage를 ALLOW로 설정해야 사용이 가능해진다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lombok.---.flagUsage = ALLOW&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lombok-annotation&quot;&gt;Lombok annotation&lt;/h2&gt;
&lt;h4 id=&quot;val&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lombok.var.flagUsage = ALLOW&lt;/code&gt; &lt;br /&gt;
위와 같은 설정이 필요하다.&lt;/p&gt;

&lt;h4 id=&quot;nonnul&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NonNul&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;null 값이 될 수 없다는 것을 명시한다.  &lt;br /&gt;
null이 전달되면 예외를 던지는데 설정을 통해 던져지는 예외를 IllegalArgumentException으로도 설정할 수 있다.   &lt;br /&gt;
lombok.config 파일에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lombok.nonNull.exceptionType = IllegalArgumentException&lt;/code&gt;   &lt;br /&gt;
이렇게 설정해주면 IllegalArgumentException으로 catch할 수 있고 NullPointException에 대한 대비책이 될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;cleanup&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Cleanup&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;try-with-resource 구문과 비슷한 효과를 가진다. &lt;br /&gt;
구문이 종료될 때 AutoCloseable 인터페이스의 close()가 호출되는 try-with-resource와 달리 Scope가 종료될 때 close()가 호출된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 이 메소드가 종료될 때 scanner.close()가 호출된다.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAndPrint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Cleanup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;setter--getter&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Setter&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Getter&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;필드의 setter/getter를 만든다.  &lt;br /&gt;
어노테이션의 파라미터로 AccessLevel을 이용해 setter/getter의 접근제한자를 설정할 수 있다.&lt;br /&gt;
private final로 선언된 필드는 @Getter의 파라미터 중 lazy를 true로 설정할 수 있는데, &lt;br /&gt;
lazy를 true로 설정할 경우 해당 필드의 getter가 호출 될 때 필드의 값을 설정한다.&lt;/p&gt;

&lt;h4 id=&quot;tostring&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ToString&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;toString() 메소드를 생성한다. @ToString(exclude={“제외할 값”}) 처럼 원하지 않는 속성은 제외할 수 있다.  &lt;br /&gt;
includeFieldNames로 필드명을 생략할지 포함할지 여부, callSuper로 상위 클래스의 toString()을 호출할지 여부를 설정할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;equalsandhashcode&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EqualsAndHashCode&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;해당 객체의 equals()와 hashCode() 메소드를 생성한다.&lt;/p&gt;

&lt;h4 id=&quot;noargsconstructor--allargsconstructor--requiredargsconstructor&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NoArgsConstructor&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AllArgsConstructor&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequiredArgsConstructor&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;클래스의 생성자를 만들어준다. 
세 종류를 중복해서 사용할 수 있다. &lt;br /&gt;
세 가지 어노테이션 모두 객체를 만드는 static 메소드의 이름을 입력받는 staticName, 생성자의 접근제한자를 설정하는 access를 파라미터로 입력할 수 있다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NoArgsConstructor&lt;/code&gt; - 파라미터가 없는 생성자&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@AllArgsConstructor&lt;/code&gt; - 모든 필드를 파라미터로 가지는 생성자&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequiredArgsConstructor&lt;/code&gt; - 기본 값이 없고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NonNull&lt;/code&gt; 어노테이션이 붙은 필드를 파라미터로 입력받는 생성자&lt;/p&gt;

&lt;h4 id=&quot;data&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Data&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ToString&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EqualsAndHashCode&lt;/code&gt;,&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Getter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Setter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequiredArgsConstructor&lt;/code&gt;를 합쳐 둔 어노테이션이다.&lt;/p&gt;

&lt;p&gt;하지만 세부 설정을 하려면 각각의 어노테이션을 붙여야 한다는 점, &lt;br /&gt;
@RequiredArgsConstructor 어노테이션으로 만들어지는 생성자는 다른 생성자가 없을 때에만 만들어진다는 점을 주의해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;value&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Data&lt;/code&gt; 어노테이션과 비슷하지만 필드를 변경할 수 없는 ‘불변 객체’가 만들어진다.   &lt;br /&gt;
필드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Wither&lt;/code&gt; 어노테이션을 이용하면 with필드명(값) 메소드가 만들어지는데, &lt;br /&gt;
이 메소드를 이용하면 값을 변경한 새로운 객체를 만들어준다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt; 어노테이션은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; 어노테이션을 사용하기 때문에&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; 어노테이션이 사용가능한 상태에서만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Value&lt;/code&gt; 어노테이션도 사용이 가능하다.&lt;/p&gt;

&lt;h4 id=&quot;builder&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;빌더 패턴을 적용한 객체 생성 메소드/클래스를 만들어준다.   &lt;br /&gt;
&lt;strong&gt;builderClassName&lt;/strong&gt; 파라미터로 nested(중첩) 빌더 클래스의 이름을 (클래스명Builder가 기본),    &lt;br /&gt;
&lt;strong&gt;builderMethodName&lt;/strong&gt;으로 빌더 클래스를 반환하는 static 메소드의 이름을 (builder()가 기본),       &lt;br /&gt;
&lt;strong&gt;buildMethodName&lt;/strong&gt;으로 객체를 반환하는 빌드 메소드의 이름 (build()가 기본)을 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;필드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Builder.Default&lt;/code&gt; 어노테이션을 붙여 기본 값을 설정할 수 있고,&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Singular&lt;/code&gt; 어노테이션을 붙여 빈 collection을 자동으로 만들 수 있다.&lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Singluar&lt;/code&gt; 어노테이션은 파라미터로 builder에서 값을 추가할 때 사용되는 메소드의 이름을 입력받는다.  &lt;br /&gt;
 또,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Singular&lt;/code&gt; 어노테이션으로 만들어진 collection은 수정할 수 없다.&lt;/p&gt;

&lt;h4 id=&quot;sneakythrows&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@SneakyThrows&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;메소드 선언부에 사용되는 throws 키워드 대신 사용하는 어노테이션으로 예외 클래스를 파라미터로 입력받는다.&lt;br /&gt;
예외 발생 시 Throwable 타입으로 반환한다.&lt;/p&gt;

&lt;h4 id=&quot;syncronized&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Syncronized&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;메소드에 사용되는 어노테이션으로 기본적으로 지원되는 synchronized 키워드보다 더 세세한 설정이 가능한 어노테이션이다.   &lt;br /&gt;
synchronized 키워드는 static 혹은 instance 단위로 락을 걸지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Synchronized&lt;/code&gt; 어노테이션은 파라미터로 입력받는 Object 단위로 락을 건다.   &lt;br /&gt;
파라미터로 아무 것도 입력하지 않으면 어노테이션이 사용된 메소드 단위로 락을 건다.&lt;/p&gt;

&lt;h4 id=&quot;log&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Log&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;클래스 상단에 항상 선언하는 static final log 필드를 자동으로 생성해준다.    &lt;br /&gt;
지원되는 Logger에 따라 다른 어노테이션이 사용된다.&lt;/p&gt;

&lt;h2 id=&quot;주의할-점&quot;&gt;주의할 점&lt;/h2&gt;
&lt;h4 id=&quot;data를-조심&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Data&lt;/code&gt;를 조심!&lt;/h4&gt;
</description>
        <pubDate>Tue, 04 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-04/lombok/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-04/lombok/</guid>
      </item>
    
      <item>
        <title>Redis 사용해보자!</title>
        <description>&lt;h4 id=&quot;1-redis란&quot;&gt;1. Redis란?&lt;/h4&gt;
&lt;p&gt;in-memory 기반의 data structure 저장 기술로 데이터베이스 서버, 데이터 캐싱 등이 가능한 시스템이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;오픈소스 소프트웨어&lt;/li&gt;
  &lt;li&gt;디스크가 아닌 메모리 기반의 데이터 저장소&lt;/li&gt;
  &lt;li&gt;NoSQL&amp;amp;Cache 솔루션이며, 메모리 기반으로 구성된다.&lt;/li&gt;
  &lt;li&gt;명시적으로 삭제, expire를 설정하지 않으면 데이터는 삭제되지 않는다.&lt;/li&gt;
  &lt;li&gt;여러개의 서버 구성이 가능하다.&lt;/li&gt;
  &lt;li&gt;데이터베이스로 사용할 수 있으며 Cache로도 사용될 수 있는 기술이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용 가능한 데이터형&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;List&lt;/li&gt;
  &lt;li&gt;Set&lt;/li&gt;
  &lt;li&gt;Sorted set&lt;/li&gt;
  &lt;li&gt;Hash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리스트, 배열과 같은 데이터 처리에 유용&lt;/li&gt;
  &lt;li&gt;메모리를 사용하면서 영속적인 데이터 보존이 가능&lt;/li&gt;
  &lt;li&gt;Redis server는 1개의 싱글 스레드로 수행되기 떄문에 서버 하나에 여러 서버를 띄울 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-redis-설치-및-spring-boot-에서-사용&quot;&gt;2. Redis 설치 및 spring boot 에서 사용&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;docker 이용해서 설치 및 접속&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 최신 이미지 가져오기, 레디스 서버 실행 
docker pull redis 
docker run --name redis -d -p 6379:6379 redis

# Docker의 redis-cli로 접속  
docker run -it --link redis:redis --rm redis redis-cli -h redis -p 6379 

# Redis-cli로 직접 접속하기: 연결된 6379 포트를 사용
redis-cli -p 6379

# Shell로 Docker 리눅스에 접속 
docker exec -it redis /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;의존성 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;application.yml 설정 정보 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-nexters16-프로젝트에서-redis-사용하기&quot;&gt;3. Nexters16 프로젝트에서 Redis 사용하기&lt;/h4&gt;
&lt;p&gt;회원끼리 편지를 주고 받는 기능을 위해 우리는 회원가입 시 사용자에게 전화번호를 받고 인증까지 진행하기로 했다.    &lt;br /&gt;
전화번호 인증을 하려면 인증 코드도 저장해야 하고 인증 결과도 저장해야 하는데 &lt;br /&gt;
redis를 이용해서 몇가지 데이터를 key-value 형태로 저장하는게 좋겠다는 회의 결과가 나왔다!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로젝트에서 redis 사용&lt;/strong&gt; &lt;br /&gt;
Java의 redis client는 크게 jedis와 lettuce 2가지가 있는데, 우리는 lettuce를 사용하고 있다. &lt;br /&gt;
spring boot 2.0에서 lettuce가 기본 클라이언트가 되서 사용해보기 시작했는데 
어떤 점에서 lettuce가 더 좋을지 알아보자!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Jedis &lt;br /&gt;
여러 스레드에서 Jedis 인스턴스를 공유하려 할 때 jedis는 스레드에 안전하지 않다. 따라서 멀티 스레드 환경에서 고려할 상황이 생긴다. &lt;br /&gt;
안전한 방법은 pooling(Thread-pool)과 같은 jedis-pool을 사용하는 것이지만 물리적인 비용의 증가가 따른다.  &lt;br /&gt;
(connection할 인스턴스를 미리 만들어놓고 대기하는 연결비용의 증가)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Spring Boot 2.0에서는 기본 의존성인 lettuce를 제거하고 Jedis를 등록해야 한다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lettuce&lt;br /&gt;
Lettuce는 Netty(비동기 이벤트 기반 고성능 네트워크 프레임워크) &lt;br /&gt;
기반의 레디스 클라이언트이다. Thread-safe!     &lt;br /&gt;
비동기로 요청을 처리하기 때문에 고성능을 자랑한다.     &lt;br /&gt;
Jedis에 비해 몇배 이상의 성능과 하드웨어 자원 절약이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;connection 인스턴스의 공유라는 점에서 Thread-safe인 lettuce를 사용해야 겠다는 생각이 들지만   &lt;br /&gt;
Single-Thread의 레디스에 데이터에 접근할 때? 혹은 다른 관점에서는 어떨지 더 알아보면 좋을 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;일단 지금 진행중인 프로젝트에서&lt;/p&gt;
&lt;전화번호-인증코드&gt; 이런 방식으로 redis에 저장하고      
인증이 완료되면 session을 통해 redis에 인증 여부를 저장하려고 하는데    
session에 대한 개념이 부족해 더 공부해봐야 할 것 같다!    

&lt;/전화번호-인증코드&gt;
</description>
        <pubDate>Sun, 02 Feb 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-02-02/spring-boot-redis/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-02/spring-boot-redis/</guid>
      </item>
    
      <item>
        <title>Spring IoC &amp; DI</title>
        <description>&lt;p&gt;토비의 스프링 읽으면서 공부,,&lt;/p&gt;

&lt;hr /&gt;

&lt;details&gt;  
&lt;summary&gt;스프링 IoC의 용어 정리&lt;/summary&gt;  
&lt;div&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;빈(bean)&lt;br /&gt;
빈 또는 빈 오브젝트는 스프링이 IoC 방식으로 관리하는 오브젝트라는 뜻이다. 관리되는 오브젝트라고 부르기도 한다.  &lt;br /&gt;
스프링을 사용하는 애플리케이션에서 만들어지는 모든 오브젝트가 다 빈은 아니다.  &lt;br /&gt;
그중에서 스프링이 직접 생성과 제어를 담당하는 오브젝트만을 빈이라고 부른다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;빈 팩토리(bean factory)&lt;br /&gt;
스프링의 IoC를 담당하는 핵심 컨테이너를 가리킨다. 빈을 등록, 생성, 조회, 돌려주는 등의 부가적인 빈을 관리하는 기능을 담당한다. &lt;br /&gt;
보통은 이 빈 팩토리를 바로 사용하지 않고 이를 확장한 애플리케이션 컨텍스트를 이용한다. &lt;br /&gt;
BeanFactory라고 붙여쓰면 빈 팩토리가 구현하고 있는 가장 기본적인 인터페이스의 이름이 된다. 이 인터페이스에 getBean()과 같은 메소드가 정의되어 있다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;애플리케이션 컨텍스트(application context)&lt;br /&gt;
빈 팩토리를 확장한 IoC 컨테이너이다. 빈을 등록하고 관리하는 기본적인 기능은 빈 팩토리와 동일하다. &lt;br /&gt;
ApplicationContext라고 적으면 애플리케이션 컨텍스트가 구현해야 하는 기본 인터페이스를 가리키는 것이다. &lt;br /&gt;
ApplicationContext는 BeanFactory를 상속한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;설정정보/설정 메타정보(configuration metadata) &lt;br /&gt;
스프링의 설정정보란 애플리케이션 컨텍스트 또는 빈 팩토리가 IoC를 적용하기 위해 사용하는 메타정보를 말한다. &lt;br /&gt;
설정정보는 보통 IoC 컨테이너에 의해 관리되는 애플리케이션 오브젝트를 생성하고 구성할 때 사용된다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너 또는 IoC 컨테이너 &lt;br /&gt;
IoC 방식으로 빈을 관리한다는 의미에서 애플리케이션 컨텍스트나 빈 팩토리를 컨테이너 또는 IoC 컨테이너라고도 한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;스프링 프레임워크 &lt;br /&gt;
스프링 프레임워크는 IoC 컨테이너, 애플리케이션 컨텍스트를 포함해서 스프링이 제공하는 모든 기능을 통틀어 말할 때 주로 사용한다.  &lt;br /&gt;
그냥 스프링이라고 줄여서 말하기도 한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

  &lt;/div&gt;  
&lt;/details&gt;

&lt;h3 id=&quot;제어권의-이전을-통한-제어관계-역전&quot;&gt;제어권의 이전을 통한 제어관계 역전&lt;/h3&gt;
&lt;p&gt;일반적으로 main() 메서드와 같이 프로그램이 시작되는 시검에서 다음에 사용할 오브젝트를 결정하고 &lt;br /&gt;
결정한 오브젝트를 생성, 메소드 호출, 그 오브젝트 메소드에서 사용할 것을 결정 등의 작업이 반복된다.  &lt;br /&gt;
이런 프로그램 구조에서 각 오브젝트는 프로그램 흐름을 결정하거나 사용할 오브젝트를 구성하는 작업에 능동적으로 참여한다. &lt;br /&gt;
제어의 역전이란 이런 제어 흐름의 개념을 거꾸로 뒤집는 것이다. &lt;br /&gt;
제어의 역전에서는 오브젝트가 자신이 사용할 오브젝트를 스스로 선택하지 않는다. 생성하지도 않는다. &lt;br /&gt;
또 자신이 어떻게 만들어지고 사용되는지를 알 수 없다. 모든 제어 권한을 다른 대상에게 위임하기 때문이다.&lt;/p&gt;

&lt;p&gt;제어의 역전 개념은 이미 폭넓게 적용되어 있다. 서블릿을 생각해보면, &lt;br /&gt;
서블릿을 개발해서 서버에 배포할 수는 있지만 그 실행을 개발자가 직접 제어할 수 있는 방법은 없다. &lt;br /&gt;
서블릿 안에 main() 메소드가 있어서 직접 실행할 수 있는 것도 아니다. &lt;br /&gt;
대신 서블릿에 대한 제어 권한을 가진 컨테이너가 적절한 시점에 서블릿 클래스의 오브젝트를 만들고 그 안의 메소드를 호출한다.&lt;/p&gt;

&lt;h3 id=&quot;애플리케이션-컨텍스트의-동작방식&quot;&gt;애플리케이션 컨텍스트의 동작방식&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;이 붙은 클래스는 이 애플리케이션 컨텍스트가 활용하는 IoC 설정정보다. &lt;br /&gt;
애플리케이션 컨텍스트는 클래스를 설정정보로 등록해두고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;이 붙은 메소드의 이름을 가져와 빈 목록을 만들어둔다. &lt;br /&gt;
클라이언트가 애플리케이션 컨텍스트의 getBean()을 호출하면 자신의 빈 목록에서 요청한 이름이 있는지 찾고,&lt;br /&gt;
있가면 빈을 생성하는 메소드를 호출해서 오브젝트를 생성시킨 후 클라이언트에 돌려준다.&lt;/p&gt;

&lt;h3 id=&quot;애플리케이션-컨텍스트를-사용할-때의-장점&quot;&gt;애플리케이션 컨텍스트를 사용할 때의 장점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트는 구체적인 팩토리 클래스를 알 필요가 없다.&lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트는 종합 IoC 서비스를 제공해준다.&lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트는 빈을 검색하는 다양한 방법을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;싱글톤-레지스트리로서의-애플리케이션-컨텍스트&quot;&gt;싱글톤 레지스트리로서의 애플리케이션 컨텍스트&lt;/h3&gt;
&lt;p&gt;애플리케이션 컨텍스트는 IoC 컨테이너이자 동시에 싱글톤을 저장하고 관리하는 싱글톤 레지스트리이기도 하다. &lt;br /&gt;
스프링은 별다른 설정이 없으면 내부에서 생성하는 빈 오브젝트를 모두 싱글톤으로 만든다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;왜 스프링은 싱글톤으로 빈을 만들까?&lt;/strong&gt;        &lt;br /&gt;
스프링이 주로 적용되는 대상이 자바 엔터프라이즈 기술을 사용하는 서버 환경이기 때문이다. &lt;br /&gt;
즉, 사용자가 많다는 말이다. 매번 클라이언트 요청이 올 때마다 각 로직을 담당하는 오브젝트를 새로 만들어서 사용한다고 생각해보자. &lt;br /&gt;
아무리 자바의 오브젝트 생성과 가비지 컬렉션이 좋아졌어도 서버가 감당하기 힘들다. &lt;br /&gt;
그래서 기본적으로 싱글톤으로 객체의 갯수를 제한한다.&lt;/p&gt;

&lt;h3 id=&quot;싱글톤-레지스트리&quot;&gt;싱글톤 레지스트리&lt;/h3&gt;
&lt;p&gt;스프링은 서버환경에서 싱글톤이 만들어져서 서비스 오브젝트 방식으로 사용되는 것은 적극 지지! &lt;br /&gt;
하지만 자바의 기본적인 싱글톤 패턴은 여러 가지 단점이 있다..&lt;br /&gt;
그래서 스프링은 직접 싱글톤 형태의 오브젝트를 마늗ㄹ고 관리하는 기능을 제공한다. 이것을 싱글톤 레지스트리라고 한다. &lt;br /&gt;
스프링 컨테이너는 싱글톤 관리 컨테이너이도 하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;싱글톤 레지스트리 장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;static 메서드와 private 생성자를 사용해야 하는게 아니라 평범한 자바 클래스를 싱글톤으로 활용하게 해준다.   &lt;br /&gt;
오브젝트 생성에 관한 모든 권한은 IoC 기능을 제공하는 애플리케이션 컨텍스트에게 있기 때문이다.&lt;/li&gt;
  &lt;li&gt;싱글톤 방식으로 사용될 어플리케이션 클래스라도 public 생성자를 가질 수 있다. &lt;br /&gt;
싱글톤으로 사용해야 하는 환경이 아니라면 간단히 오브젝트를 생성해서 사용할 수 있다.   &lt;br /&gt;
따라서 테스트 환경에서 자유롭게 오브젝트를 만들 수 있고, 목 오브젝트로 대체하는 것도 간단하다.  &lt;br /&gt;
생성자 파라미터를 이용해서 사용할 오브젝트를 넣어주게 할 수도 있다.&lt;/li&gt;
  &lt;li&gt;싱글톤 패턴과 달리 스프링이 지지하는 객체지향 설계 방식과 원칙, 디자인 패턴 등을 적용하는 데 제약이 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링은 IoC 컨테이너일 뿐만 아니라, 
고전적인 싱글톤 패턴을 대신해서 싱글톤을 만들고 관리해주는 싱글톤 레지스트리라는 점을 기억해두자!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;싱글톤으로 만들어지기 때문에 주의해야 할 점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;싱글톤이 멀티스레드 환경에서 서비스 형태의 오브젝트로 사용되는 경우에는 상태정보를 내부에 갖고 있지 않은 
무상태 방식(stateless)으로 만들어져야 한다.     &lt;br /&gt;
서로 값을 덮어쓰고 자신이 저장하지 않은 값을 읽어올 수 있기 때문에 싱글톤은 기본적으로 &lt;br /&gt;
인스턴스 필드의 값을 변경하고 유지하는 상태유지 방식(stateful)으로 만들지 않는다.
    &lt;blockquote&gt;
      &lt;p&gt;이를 지키지 않고 서버에 배포하면 여러 사용자가 동시에 접속했을 때 데이터가 엉망이 될 수 있다. 
읽기전용의 값이라면 초기화 시점에서 인스턴스 변수에 저장해두고 공유하는 것은 아무런 문제가 없다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;스프링의 싱글톤 빈으로 사용되는 클래스를 만들 때는 바뀌는 정보는 로컬 변수로 정의하거나, 파라미터로 주고받으면서 사용하게 해야 한다. &lt;br /&gt;
초기에 설정해서 바뀌지 않는 읽기전용 인스턴스 변수는 문제가 없지만, 매번 새로운 값으로 바뀌는 인스턴스 변수는 심각한 문제가 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;무상태 방식이란?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체에 인스턴스 필드가 없으면 stateless 이다.  &lt;br /&gt;
final 키워드를 사용한 상수는 괜찮다.           &lt;br /&gt;
다음과 같은 형태이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stateless&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// immutable   &lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;스프링-빈의-스코프&quot;&gt;스프링 빈의 스코프&lt;/h3&gt;
&lt;p&gt;스프링이 관리하는 오브젝트, 즉 빈이 생성되고, 존재하고, 적용되는 범위에 대해 알아보자! &lt;br /&gt;
스프링에서 이것을 빈의 스코프라고 한다. 스프링 빈의 기본 스코프는 싱글톤이다.  &lt;br /&gt;
싱글톤 스코프는 컨테이너 내에 한 개의 오브젝트만 만들어져서, 강제로 제거 하지 않는 한 스프링 컨테이너가 존재하는 동안 계속 유지된다.&lt;/p&gt;

&lt;p&gt;경우에 따라 싱글톤 외의 스코프를 가질 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로토타입 스코프 : 싱글톤 스코프와는 다르게 컨테이너에 빈을 요청할 때마다 매번 새로운 오브젝트를 만든다.&lt;/li&gt;
  &lt;li&gt;리퀘스트 스코프 : 웹을 통해 새로운 HTTP 요청이 생길때마다 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로그래밍에서-의존성이란&quot;&gt;프로그래밍에서 의존성이란?&lt;/h3&gt;
&lt;p&gt;스프링의 IoC(Inversion of Control / 제어의 역전)라고도 하는 DI(Dependency Injection / 의존성 주입)을 알아보기 전에 &lt;br /&gt;
자바에서의 의존성이 무엇인지도 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Car();&lt;/code&gt;&lt;br /&gt;
Car 객체 생성자에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Tire();&lt;/code&gt;   &lt;br /&gt;
의존성을 단순하게 정의해서 new라고 하자.    &lt;br /&gt;
new를 실행하는 Car와 Tire사이에서 Car가 Tire에 의존한다.&lt;/p&gt;

&lt;p&gt;결론적으로 전체가 부분에 의존한다고 할 수 있다. 
의존하는 객체(전체)와 의존되는 객체(부분) 사이에 집합 관계와 구성 관계로 구분할 수도 있다. &lt;br /&gt;
일단 전체가 부분에 의존한다는 것과 프로그래밍에서 의존 관계는 new로 표현된다는 것만 기억하자!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;집합 관계 : 부분이 전체와 다른 생명 주기를 가질 수 있다. 예) 집 vs. 냉장고 &lt;br /&gt;
구성 관계 : 부분은 전체와 같은 생명 주기를 갖는다. 예) 사람 vs. 심장&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(1) 스프링 없이 의존성 주입하기 1 - 생성자를 통한 의존성 주입  &lt;br /&gt;
(2) 스프링 없이 의존성 주입하기 2 - 속성을 통한 의존성 주입  &lt;br /&gt;
(3) 스프링을 통한 의존성 주입 1 - XML 파일 사용  &lt;br /&gt;
(4) 스프링을 통한 의존성 주입 2 - 스프링 설정 파일(XML)에서 속성 주입  &lt;br /&gt;
(5) 스프링을 통한 의존성 주입 3 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 통한 속성 주입  &lt;br /&gt;
(6) 스프링을 통한 의존성 주입 4 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Resource&lt;/code&gt;를 통한 속성 주입&lt;/p&gt;

</description>
        <pubDate>Fri, 31 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-31/spring-DI-IoC/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-31/spring-DI-IoC/</guid>
      </item>
    
      <item>
        <title>Spring Boot Profile 설정</title>
        <description>&lt;p&gt;Spring Boot를 이용하면 보다 손쉽게 profile을 설정할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;환경&quot;&gt;환경&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;local   &lt;br /&gt;
내 컴퓨터 환경&lt;/li&gt;
  &lt;li&gt;develop    &lt;br /&gt;
개발 서버 환경&lt;/li&gt;
  &lt;li&gt;production  &lt;br /&gt;
실제 운영 서버 환경&lt;/li&gt;
  &lt;li&gt;test   &lt;br /&gt;
테스트 서버 환경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-applicationproperties&quot;&gt;1) application.properties&lt;/h3&gt;
&lt;p&gt;application-{profile}.properties 형식으로 파일을 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;application-default.properties
application-dev.properties
application-prod.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;jpa application.properties 설정에서..&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예를들어, 엔터티 클래스의 studentNumber 속성에 자동으로 연결될 데이터베이스 필드 명이  &lt;br /&gt;
studentNumber 형태이면 이 설정이 필요하다. (camel case)&lt;br /&gt;
student_number 형태이면 이 설정이 필요없다. (snake case)  &lt;br /&gt;
camel case의 예: departmentManagerOfficeNumber   &lt;br /&gt;
snake case의 예: department_manager_office_number&lt;/p&gt;

&lt;h3 id=&quot;2-applicationyml&quot;&gt;2) application.yml&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;한 파일에 profile 설정이 가능&lt;/li&gt;
  &lt;li&gt;spring.profiles.active로 profile 설정이 가능하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;---&lt;/code&gt; 로 나누면 다른 파일에서 불러온 것처럼 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;profiles를 설정해주지 않으면 기본 default로 동작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  profiles:
    active: local
  jpa:
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
    generate-ddl: true
    database: mysql
    show-sql: true

--- #Production 
spring:
  profiles: production
  datasource:
    url:
    username: 
    password: 

--- #local
spring:
  profiles: local
  datasource:
    url: 
    username: 
    password: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;지금 프로젝트에서는 젠킨스 자동 배포를 사용하고 있기 때문에 DB 관련 설정 파일을 분리해서 배포하는 경우,      &lt;br /&gt;
default 파일의 active를 push 전에 production으로 다시 설정해줘야 하는 번거로움이 생긴다.        &lt;br /&gt;
그래서 application.yml 파일을 하나로 관리하면서 서버에는 production으로 설정해놓고 git에 있는 코드를 clone(or pull) 해서 개발할 때는 각자
applicaiton.yml 파일을 만들고 슬랙으로 공유하는 게 좋은 것 같다 !&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-19/spring-boot-profile-%EC%84%A4%EC%A0%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-19/spring-boot-profile-%EC%84%A4%EC%A0%95/</guid>
      </item>
    
      <item>
        <title>Design Patterns in Spring Framework</title>
        <description>&lt;p&gt;디자인 패턴은 객체 지향의 특성 중   &lt;br /&gt;
상속(extends), 인터페이스(interface/implements), 합성(객체를 속성으로 사용)을 이용한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#어댑터-패턴&quot;&gt;01 어댑터 패턴(Adapter Pattern)&lt;/a&gt;    &lt;br /&gt;
&lt;a href=&quot;#프록시-패턴&quot;&gt;02 프록시 패턴(Proxy Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#데코레이터-패턴&quot;&gt;03 데코레이터 패턴(Decorator Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#싱글턴-패턴&quot;&gt;04 싱글턴 패턴(Singleton Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#템플릿-메서드-패턴&quot;&gt;05 템플릿 메서드 패턴(Template Method Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#팩토리-메서드-패턴&quot;&gt;06 팩토리 메서드 패턴(Factory Method Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#전략-패턴(Strategy Pattern)&quot;&gt;07 전략 패턴(Strategy Pattern)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#템플릿-콜백-패턴&quot;&gt;08 템플릿 콜백 패턴(Template Callback Pattern - 견본/회신 패턴)&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;#그-외-다른-패턴들&quot;&gt;09 그 외&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/hyerin6/data-structure/tree/master/designPattern/src/designPattern&quot;&gt;예제 코드&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스프링 프레임워크를 설명하는 공식적인 정의는 다음과 같다.  &lt;br /&gt;
&lt;strong&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바 객체지향의 원리와 이해의 저자는 다음과 같이 정의했다. &lt;br /&gt;
&lt;strong&gt;OOP 프레임워크&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 객체지향의 특성과 설계 원칙을 적용한 프레임워크이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체 자향과 설계 패턴의 주요 목적은 유지보수성 향상이다.&lt;/p&gt;

&lt;p&gt;유지보수가 필요한 이유는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;불충분한 요구사항 정의&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기능 추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설계 결함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기술 환경의 변화&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;어댑터-패턴&quot;&gt;어댑터 패턴&lt;/h2&gt;
&lt;p&gt;어댑터를 번역하면 변환기라고 할 수 있다. 변환기의 역할은 서로 다른 두 인터페이스 사이에 통신이 가능하게 하는 것이다, &lt;br /&gt;
자바 언어의 구조를 보면 플랫폼별 JRE에 대해 얘기가 나오는데 이를 어댑터 패턴이라고 할 수 있고, 어댑터 패턴은 개방 폐쇄 원칙을 활용한 설계 패턴이라고 할 수 있다.   &lt;br /&gt;
JRE가 어댑터의 역할을 수행하고 있는 것이다.&lt;/p&gt;

&lt;p&gt;어댑터 패턴은 합성, 즉 객체를 속성으로 만들어서 참조하는 디자인 패턴으로 한 문장으로 정리하면&lt;br /&gt;
→ 호출당하는 쪽의 메서드를 호출하는 쪽의 코드에 대응하도로 중간에 변환기를 통해 호출하는 패턴&lt;/p&gt;

&lt;p&gt;문제 해결을 위해 어탭터 패턴을 사용한다면, &lt;br /&gt;
재사용 하려는 클래스와 공통 부모 클래스 사이에 adapter 클래스를 끼워넣는다. &lt;br /&gt;
클라이언트의 호출은 adapter 클래스가 받는다.&lt;/p&gt;

&lt;p&gt;어떤 클래스에 대한 다른 사용법을 제공하기 위해 끼어들어가는 클래스를 wrapper class 라고 부른다. &lt;br /&gt;
재사용을 위해 가져온 클래스를 공통 인터페이스 규격에 맞추기 위해 중간에 wrapper를 끼워 넣는 구조가   &lt;br /&gt;
adapter 패턴이다.&lt;/p&gt;

&lt;p&gt;다형성으로 구현된 공통 인터페이스 구격에 맞추기 위한 목적의 구조가 아니라면 &lt;br /&gt;
adapter 패턴이라고 부르지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기존에 있는 시스템에 새로운 코드가 들어가거나 교체되어야 하는 경우 코드의 재사용성을 높이기 위한 방법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음은 어댑터 패턴의 구조이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100749503-14f70000-3428-11eb-9c91-f58b9d118f4b.png&quot; alt=&quot;스크린샷 2020-12-01 오후 10 53 04&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client : 서드파티 라이브러리나 외부 시스템을 사용하려는 쪽&lt;/li&gt;
  &lt;li&gt;Adaptee : 서드파티 라이브러리나 외부 시스템&lt;/li&gt;
  &lt;li&gt;Target Interface : Adapter가 구현하는 인터페이스이다.   &lt;br /&gt;
클라이언트는 Target Interface를 통해 Adaptee인 서드파티 라이브러리를 사용하게 된다.&lt;/li&gt;
  &lt;li&gt;Adapter : Client와 Adaptee 중간에서 호환성이 없는 둘을 연결시켜주는 역할이다.   &lt;br /&gt;
클라이언트는 Target Interface를 통해 어댑터에 요청을 보낸다.    &lt;br /&gt;
어댑터는 클라이언트의 요청을 Adapter가 이해할 수 있는 방법으로 전달하고 처리는 Adaptee가 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라이언트에서는 Target Interface 를 호출하는 것 처럼 보인다.   &lt;br /&gt;
하지만 클라이언트의 요청을 전달받은 (Target Interface 를 구현한) Adapter 는 자신이 감싸고 있는 Adaptee 에게 실질적인 처리를 위임한다.   &lt;br /&gt;
Adapter 가 Adaptee 를 감싸고 있는 것 때문에 Wrapper 패턴이라고도 불린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;프록시-패턴&quot;&gt;프록시 패턴&lt;/h2&gt;
&lt;p&gt;프록시는 대리자, 대변인이라는 뜻을 가진 단어다. 프록시 패턴의 경우 실제 서비스 객체가 가진 메서드왁 같은 이름의 메서드를 사용하는데, 이를 위해 인터페이스를 사용한다. &lt;br /&gt;
인터페이스를 사용하면 서비스 객체가 들어갈 자리에 대리자 객체를 대신 투입해 클라이너트 쪽에서는 실제 서비스 객체를 통해 &lt;br /&gt;
메서드를 호출하고 반환값을 받는지, 대리자 객테를 통해 메서드를 호출하고 반환값을 받는지 전혀 모르게 처리할 수도 있다.&lt;/p&gt;

&lt;p&gt;다음은 프록시 패턴을 사용한 클래스 다이어그램이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/33855307/100968694-30235600-3575-11eb-8ca2-8dd814476ef6.png&quot; alt=&quot;스크린샷 2020-12-03 오후 2 38 00&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client는 프록시를 사용하여 원하는 서비스 메서드를 호출한다.&lt;/li&gt;
  &lt;li&gt;Service는 실제 서비스를 구현하고 있다. (IService 인터페이스 구현)&lt;/li&gt;
  &lt;li&gt;Proxy는 IService 인터페이스를 구현하고 (실제 서비스 참조 변수 사용) 실제 메서드를 호출한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 프록시 패턴의 중요 포인트이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;대리자는 실제 서비스와 같은 이름의 메서드를 구현한다. 이때 인터페이스를 사용한다.&lt;/li&gt;
  &lt;li&gt;대리자는 실제 서비스에 대한 참조 변수를 갖는다. (합성)&lt;/li&gt;
  &lt;li&gt;대리자는 실제 서비스와 같은 이름을 가진 메서드를 호출하고 그 값을 클라이언트에게 돌려준다.&lt;/li&gt;
  &lt;li&gt;대리자는 실제 서비스의 메서드 호출 전후에 별도의 로직을 수행할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프록시 패턴은 실제 서비스 메서드의 반환 값에 가감하는 것을 목적으로 하지 않고 &lt;strong&gt;제어의 흐름을 변경&lt;/strong&gt;하거나 &lt;strong&gt;다른 로직을 수행&lt;/strong&gt;하기 위해 사용한다. &lt;br /&gt;
→ 프록시 패턴은 제어 흐름을 조정하기 위한 목적으로 중간에 대리자를 두는 패턴이고 개방 폐쇄 원칙과 의존 역전 원칙이 적용된 설계 패턴이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;데코레이터-패턴&quot;&gt;데코레이터 패턴&lt;/h2&gt;
&lt;p&gt;데코레이터 패턴은 프록시 패턴과 구현 방법이 같다. 다만 프록시 패턴은 클라이언트가 최종적으로 돌려 받는 반환값을 조작하지 않고 그대로 전달하는 반면 &lt;br /&gt;
데코레이터 패턴은 클라이언트가 받는 반환값에 장식을 덧입힌다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장식자는 실제 서비스와 같은 이름의 메서드를 구현한다. 이때 인터페이스를 사용한다.&lt;/li&gt;
  &lt;li&gt;장식자는 실제 서비스에 대한 참조 변수를 갖는다. (합성)&lt;/li&gt;
  &lt;li&gt;장식자는 실제 서비스와 같은 이름을 가진 메서드를 호출하고, 그 반환값에 장식을 더해 클라이언트에게 돌려준다.&lt;/li&gt;
  &lt;li&gt;장식자는 실제 서비스의 메서드 호출 전후에 별도의 로직을 수행할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ 메서드 호출의 반환값에 변화를 주기 위해 중간에 장식자를 두는 패턴  &lt;br /&gt;
개방 폐쇄 원칙(OCP)과 의존 역전 원칙(DIP)이 적용된 설계 패턴임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;싱글턴-패턴&quot;&gt;싱글턴 패턴&lt;/h2&gt;
&lt;p&gt;싱글턴 패턴이란 인스턴스를 하나만 만들어 사용하기 위한 패턴이다. 
커넥션 풀, 스레드 풀, 디바이스 설정 객체 등과 같은 경우 인스턴스를 여러 개 만들게 되면 불필요한 자원을 사용하게 되고, &lt;br /&gt;
또 프로그램이 예상치 못한 결과를 낳을 수 있다. 싱글턴 패턴은 오직 인스턴스 하나만 만들고 그것을 계속해서 재사용 한다. &lt;br /&gt;
이를 구현하려면 객테 생성을 위한 new에 제약을 걸어야 하고, 만들어진 단일 객체를 반환할 수 있는 메서드가 필요하다.&lt;br /&gt;
따라서 다음 세 가지 요소가 반드시 필요하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;new를 실행할 수 없도록 생성자에 private 접근 제어자를 지정한다.&lt;/li&gt;
  &lt;li&gt;유일한 단일 객체를 반환할 수 있는 정적 메서드가 필요하다.&lt;/li&gt;
  &lt;li&gt;유일한 단일 객체를 참조할 정적 참조 변수가 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단일 객체인 경우 결국 공유 객체로 사용되기 때문에 속성을 갖지 않게 하는 것이 정석이다. 다만 읽기 전용 속성을 갖는 것은 문제가 되지 않는다. &lt;br /&gt;
→ 클래스의 인스턴스, 즉 객체를 하나만 만들어 사용하는 패턴&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;템플릿-메서드-패턴&quot;&gt;템플릿 메서드 패턴&lt;/h2&gt;
&lt;p&gt;상위 클래스에 공통 로직을 수행하는 템플릿 메소드와 하위 클래스에 오버라이딩을 강제하는 추상 메서드 또는   &lt;br /&gt;
선택적으로 오버라이딩할 수 있는 훅(Hook) 메서드를 두는 패턴을 템플릿 메서드 패턴이라고 한다.&lt;/p&gt;

&lt;p&gt;→ 상위 클래스의 견본 메서드에서 하위 클래스가 오버라이딩한 메서드를 호출하는 패턴 &lt;br /&gt;
예제 코드를 보면 의존 역전 원칙(DIP)을 활용하고 있음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;팩토리-메서드-패턴&quot;&gt;팩토리 메서드 패턴&lt;/h2&gt;
&lt;p&gt;팩토리 메서드는 객체를 생성 반환하는 메서드를 말한다. &lt;br /&gt;
여기에 패턴을 붙이면 하위 클래스에서 팩토리 메서드를 오버라이딩해서 객체를 반환하게 하는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;→ 오버라이드된 메서드가 객체를 반환하는 패턴 &lt;br /&gt;
예제 코드를 보면 의존 역전 원칙(DIP)을 활용하고 있음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;전략-패턴&quot;&gt;전략 패턴&lt;/h2&gt;
&lt;p&gt;전략 패턴을 구성하는 세 요소는 꼭 기억해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;전략 메서드를 가진 전략 객체&lt;/li&gt;
  &lt;li&gt;전략 객체를 사용하는 컨텍스트(전략 객체의 사용자/소비자)&lt;/li&gt;
  &lt;li&gt;전략 객체를 생성해 컨텍스트에 주입하는 클라이언트(제 3자, 전략 객체의 공급자)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상속을 이용하는 템플릿 메서드 패턴과 객체 주입을 통한 전략 메서드 패턴 중에서 선택/적용할 수 있다. &lt;br /&gt;
단일 상속만이 가능한 자바 언어에서는 상속이라는 제한이 있는 템플릿 메서드 패턴보다는 전략 패턴이 더 많이 활용된다.&lt;/p&gt;

&lt;p&gt;→ 클라이언트가 전략을 생성해 전략을 실행할 컨텍스트에 주입하는 패턴   &lt;br /&gt;
예제 코드를 보면 개발 폐쇄 원칙(OCP)과 의존 역전 원칙(DIP)이 적용된 것을 짐작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;템플릿-콜백-패턴&quot;&gt;템플릿 콜백 패턴&lt;/h2&gt;
&lt;p&gt;템플릿 콜백 패턴은 전략 패턴과 모든 것이 동일한데 전략을 익명 내부 클래스로 정의해서 사용한다는 특징이 있다.&lt;/p&gt;

&lt;p&gt;→ 전략을 익명 내부 클래스로 구현한 전략 패턴  &lt;br /&gt;
전략 패턴의 일종이므로 개발 폐쇄 원칙(OCP)과 의존 역전 원칙(DIP)이 적용된 설계 패턴이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그-외-다른-패턴들&quot;&gt;그 외 다른 패턴들&lt;/h2&gt;
&lt;p&gt;스프링은 다양한 디자인 패턴을 활용하고 있다. 특히 스프링 MVC의 경우 프론트 컨트롤러 패턴과 MVC 패턴을 활용하고 있다.&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-16/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-16/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</guid>
      </item>
    
      <item>
        <title>JPA 식별자 자동 생성</title>
        <description>&lt;h4 id=&quot;jpa가-제공하는-데이터베이스-기본-키-생성-전략&quot;&gt;JPA가 제공하는 데이터베이스 기본 키 생성 전략&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;직접 할당 : 기본 키를 어플리케이션에서 직접 할당한다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt; 만 사용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자동 생성 : 대리 키 사용 방식
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Id&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@GeneratedValue&lt;/code&gt;를 함께 사용한다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;IDENTITY : 기본 키 생성을 데이터베이스에 위임한다.&lt;/li&gt;
      &lt;li&gt;SEQUENCE : 데이터베이스 시퀀스를 사용해서 기본 키를 할당한다.&lt;/li&gt;
      &lt;li&gt;TABLE : 키 생성 테이블을 사용한다.&lt;/li&gt;
      &lt;li&gt;AUTO : 데이터베이스에 관계없이 식별자를 자동 생성하라는 의미, DB가 변경되더라도 수정할 필요 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-generationtypeauto&quot;&gt;1. GenerationType.AUTO&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Id 
@GeneratedValue // @GeneratedValue(strategy=GenerationType.AUTO) 와 동일 
protected Long id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;JPA 공급자에 따라 기본 설정이 다르다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Oracle을 사용할 경우 SEQUENCE가 기본&lt;/li&gt;
  &lt;li&gt;MS SQL Server의 경우 IDENTITY가 기본&lt;/li&gt;
  &lt;li&gt;(Hibernate 5.0부터) MySQL의 AUTO는 IDENTITY가 아닌 TABLE을 기본 시퀀스 전략으로 선택된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot는 Hibernate의 id 생성 전략을 그대로 따라갈지 말지를 결정하는
useNewIdGeneratorMappings 설정이 있다.&lt;/p&gt;

&lt;p&gt;1.5에선 기본값이 false, 2.0부터는 true
Hibernate 5.0부터 MySQL의 AUTO는 IDENTITY가 아닌 TABLE을 기본 시퀀스 전략으로 선택된다.&lt;/p&gt;

&lt;p&gt;즉, 1.5에선 Hibernate 5를 쓰더라도 AUTO를 따라가지 않기 때문에 IDENTITY가 선택되고
2.0에선 true이므로 Hibernate 5를 그대로 따라가기 때문에 TABLE이 선택되었다.
(Hibernate 6.0에서 다시 IDENTITY로 돌아간다고 한다.)&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-14/Spring-Data-JPA/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-14/Spring-Data-JPA/</guid>
      </item>
    
      <item>
        <title>JUnit Test란?</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-배경지식&quot;&gt;1. 배경지식&lt;/h2&gt;
&lt;h4 id=&quot;1-테스트-구현이-필요한-이유&quot;&gt;1) 테스트 구현이 필요한 이유&lt;/h4&gt;
&lt;p&gt;버그를 잡기위한 효과적인 수단은 테스트와 로그 메시지다. &lt;br /&gt;
사람이 직접 테스트를 실행하는 것은 대부분 너무 많은 시간이 필요하다.&lt;/p&gt;

&lt;p&gt;아까까지 잘 돌아갔던 기능인데, 소스코드를 수정한 후 갑자기 에러가 발생하는 경우가 많다.&lt;br /&gt;
그래서 소스코드를 수정할 때 마다, 모든 기능들을 전부 다시 테스트 해야 안전한다.&lt;br /&gt;
사람의 수작업 없이 자동 테스트 할 수 있도록 테스트를 구현하는 것이 필수다.&lt;/p&gt;

&lt;p&gt;출력된 값을 눈으로 확인해 보는 것도 시간이 걸린다.&lt;br /&gt;
결과 같이 정상인지 아닌지 확인해 보는 기능까지 테스트 코드에 구현해야 한다.&lt;br /&gt;
그래서 테스트 결과 정상인지 아닌지만 보고되어야 한다.&lt;/p&gt;

&lt;p&gt;JUnit 테스트를 열심히 구현하지 않는 프로그래머는 버그 때문에 고생할 확률이 높다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-단위-테스트&quot;&gt;2) 단위 테스트&lt;/h4&gt;
&lt;p&gt;클래스를 하나씩 따로 테스트 하는 것이 단위 테스트(Unit Test)이다. &lt;br /&gt;
프로젝트 전체를 실행하면서 테스트하면 에러가 발생했을 경우에 문제의 원인이 어디에 있는지 알기 어려운 경우가 종종 있다. &lt;br /&gt;
클래스 하나 메소드 하나씩 따로 테스트하면, 에러를 찾고 수정하기 쉽다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-통합-테스트&quot;&gt;3) 통합 테스트&lt;/h4&gt;
&lt;p&gt;단위 테스트를 통과한 클래스들의 객체를 서로 연결하여 같이 테스트 하는 것이 통합 테스트이다.&lt;br /&gt;
예를들어, StudentMapper 클래스를 따로 단위 테스트하고 StudentService 클래스를 따로 단위 테스트하고, &lt;br /&gt;
이들 객체를 연결(@Autowired)하여 같이 테스트하는 것이 통합 테스트이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-테스트-mock&quot;&gt;4) 테스트 Mock&lt;/h4&gt;
&lt;p&gt;StudentService 클래스는 StudentMapper 클래스의 메소드를 호출한다. &lt;br /&gt;
따라서 StudentService 클래스의 단위 테스트를 하려면 StudentMapper 클래스가 있어야 한다. &lt;br /&gt;
그런데 StudentService 객체와 StudentMapper 객체를 연결하여 같이 테스트하는 것은 통합 테스트이지 단위 테스트가 아니다. &lt;br /&gt;
StudentService 클래스를 단위 테스트할 때는 테스트용 가짜 StudentMapper 클래스를 만들어서 StudentService 객체에 연결하여 테스트 해야 한다. &lt;br /&gt;
이렇게 테스트용으로 만드는 가짜 클래스를 테스트 Mock 클래스라고 부른다. &lt;br /&gt;
Spring boot 앱에는 Mockito 프레임워크 라이브러리가 포함되어 있다.&lt;br /&gt;
Mockito를 이용해서 Mock을 구현해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-junit-라이브러리&quot;&gt;5) JUnit 라이브러리&lt;/h4&gt;
&lt;p&gt;Java 언어로 단위 테스트를 규현하기 위한 표준 라이브러리가 JUint이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-import-static&quot;&gt;6) import static&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;class import&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Arrays;         

. . .

int[] a = new int[]{2, 3, 1, 6, 5, 7};
Arrays.sort(a);        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arrays 클래스가 import 되었기 때문에 Arrays.sort 메소드를 호출할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;static method import &lt;br /&gt;
클래스가 아니고 클래스의 static method를 import 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import static java.util.Arrays.sort;

. . .       

int[] a = new int[]{2, 3, 1, 6, 5, 7};
sort(a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arrays 클래스의 sort 메소드가 import 되었기 때문에 Arrays 클래스를 생략하고 &lt;br /&gt;
바로 sort 메소드를 호출해도 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assert 클래스 &lt;br /&gt;
JUnit 클래스를 구현할 때, 값이 맞는지 확인하기 위해 Assert 클래스의 static 메소드를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import static org.junit.Assert;

. . .          

Assert.assertEquals(s1, s2);
Assert.assertNotNull(s1);
Assert.assertNull(s2);
Assert.assertTrue(s1.equals(s2));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;static import&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

. . .          

assertEquals(s1, s2);
assertNotNull(s1);
assertNull(s2);
assertTrue(s1.equals(s2));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assert.&lt;/code&gt; 을 생략할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-test1-프로젝트&quot;&gt;2. test1 프로젝트&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hyerin6/Spring/tree/master/test1&quot;&gt;전체 코드 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Student.java&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import lombok.Data;

. . .

@Data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lombok에 의해서 get/set 메소드 뿐만 아니라, equals 메소드와 hashcode 메소드도 자동으로 재정의된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StudentMapperTests.java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertEquals(student1, student2);&lt;/code&gt;   &lt;br /&gt;
student1, student2 값을 화면에 출력하고, 그 값이 동일한지 눈으로 확인하는 것은 바람직하지 않다.    &lt;br /&gt;
값이 동일한지 확인하는 코드를 구현하는 것이 바람직하다.    &lt;br /&gt;
Assert 클래스의 assertEquals 메소드는 두 객체의 값이 동일한지 검사하는 메소드이다.   &lt;br /&gt;
동일하면 테스트 통과이고, 동일하지 않으면 테스트 실패이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt;    &lt;br /&gt;
테스트 클래스에 @Transactional을 붙여주면,    &lt;br /&gt;
@Test 어노테이션이 붙은 테스트 메소드에서 실행한 DB insert/update/delete 작업은, &lt;br /&gt;
그 메소드가 리턴될 때 모두 자동으로 취소(rollback) 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/</guid>
      </item>
    
      <item>
        <title>Jenkins</title>
        <description>&lt;p&gt;우리가 지금 사용하고 있는 &lt;a href=&quot;https://github.com/NEXTERS16-phoneLetter/server&quot;&gt;git repository&lt;/a&gt;의 특정 branch(dev)에 push하면 &lt;br /&gt;
자동으로 배포되도록 젠킨스를 사용하여 자동 배포 환경을 만들어봤다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;젠킨스란&quot;&gt;젠킨스란?&lt;/h4&gt;
&lt;p&gt;서버에 올릴 수 있는 상태로 만드는 것을 빌드라고 하는데 젠킨스는 빌드를 자동화 해주는 툴이다.&lt;/p&gt;

&lt;h4 id=&quot;nexters16-프로젝트에서-젠킨스-사용하기&quot;&gt;Nexters16 프로젝트에서 젠킨스 사용하기&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;프로젝트를 배포할 서버에 docker로 젠킨스를 설치&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;젠킨스에 maven, jdk 설정&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git 연동 &lt;br /&gt;
&lt;img width=&quot;846&quot; alt=&quot;스크린샷 2020-01-31 오후 11 18 46&quot; src=&quot;https://user-images.githubusercontent.com/33855307/73547058-9638db80-4481-11ea-81be-0a11980a1abe.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배포를 위한 shell 작성하기  &lt;br /&gt;
&lt;img width=&quot;733&quot; alt=&quot;스크린샷 2020-01-31 오후 11 21 30&quot; src=&quot;https://user-images.githubusercontent.com/33855307/73547152-bcf71200-4481-11ea-8333-8a71db0ceca4.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 10 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-10/jenkins/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-10/jenkins/</guid>
      </item>
    
      <item>
        <title>Spring Security</title>
        <description>&lt;h3 id=&quot;1-spring-security&quot;&gt;1. Spring Security&lt;/h3&gt;
&lt;h4 id=&quot;1-authentication-authorization&quot;&gt;1) authentication authorization&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;authentication&lt;/strong&gt; &lt;br /&gt;
사용자의 신원을 식별하는 기능이다. 쉽게 말해서 로그인 기능, 로그인 아이디와 비밀번호를 사용하여 사용자 신원을 확인하는 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;authorization&lt;/strong&gt;  &lt;br /&gt;
권한 관리 기능이다. &lt;br /&gt;
현재 사용자가 어떤 권한을 가지고 있는지 이 기능을 실행할 수 있는 권한은 무엇인지의 정보를 바탕으로 권한 관리 및 통제를 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;role&lt;/strong&gt; &lt;br /&gt;
authorization 에서 권한을 역할(role) 이라고 부르기도 한다.  &lt;br /&gt;
예) 관리자 권한 = 관리자 역할 &lt;br /&gt;
spring security 에서 권한(역할)은 다음과 같이 표현하는 것이 관례이다. &lt;br /&gt;
예) ROLE_ADMIN, ROLE_STUDENT&lt;/p&gt;

&lt;h4 id=&quot;2-spring-security&quot;&gt;2) Spring Security&lt;/h4&gt;
&lt;p&gt;authentication 기능, authorization 기능, 보안 공격에 대한 보호 기능 등이 잘 구현된 프레임워크이다. &lt;br /&gt;
spring security 를 이용해서 로그인 기능과 권한관리 기능을 구현하는 것이 바람직하다.&lt;/p&gt;

&lt;h4 id=&quot;3-spring-security-확장-태그&quot;&gt;3) Spring Security 확장 태그&lt;/h4&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;taglib&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uri=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/security/tags&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prefix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sec&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;spring security 확장 태그를 사용하기 위한 선언이다. JSP 파일의 선두에 이 선언이 있어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:authorize &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authenticated&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
   . . .
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sec:authorize&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;spring security 확장 태그이다. &lt;br /&gt;
현재 사용자가 로그인한 사용자인 경우에만 이 태그 사이의 내용이 출력된다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:authentication &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.loginId&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 로그인된 사용자 객체의 loginId 속성값을 출력한다.     &lt;br /&gt;
즉 User 객체의 getLoginId() 메소드 리턴값이 출력된다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:authentication &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.name&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 로그인된 사용자 객체의 name 속성값을 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:authentication &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user.email&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 로그인된 사용자 객체의 email 속성값을 출력한다.&lt;/p&gt;

&lt;h4 id=&quot;4-spring-security-권한-검사&quot;&gt;4) Spring Security 권한 검사&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;@Secured(“ROLE_ADMINISTRATOR”)&lt;/strong&gt;  &lt;br /&gt;
이 어노테이션을 액션 메소드에 붙이면 그 액션 메소드는 “ROLE_ADMINISTRATOR” 권한을 가진 사용자만 실행할 수 있다. &lt;br /&gt;
이 권한이 없는 사용자가 실행하면 에러가 발생한다. 클래스에 붙였을 때도 권한이 없는 사용자가 실행하면 마찬가지로 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;request.IsUserInRole(String role)&lt;/strong&gt; &lt;br /&gt;
Java 코드에서 현재 사용자 권한을 검사할 때, 이 메소드를 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/index.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUserInRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLE_PROFESSOR&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:professor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUserInRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLE_ADMINISTRATOR&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:adminostrator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;뷰에서 사용자 권한을 검사할 때&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-jsp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:authorize &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;access=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hasRole('ROLE_ADMINISTRATOR')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   . . .
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sec:authorize&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 사용자가 ROLE_ADMINISTRATOR 권한일 경우에 이 태그와 사이 내용을 출력한다.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-09/spring-security/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-09/spring-security/</guid>
      </item>
    
      <item>
        <title>객체 지향 설계 5원칙 - SOLID</title>
        <description>&lt;ul&gt;
  &lt;li&gt;SRP(Single Responsibility Principle) 단일 책임 원칙&lt;/li&gt;
  &lt;li&gt;OCP(Open Closed Principle) 개방 폐쇄 원칙&lt;/li&gt;
  &lt;li&gt;LSP(Liskov Substitution Principle) 리스코프 치환 원칙&lt;/li&gt;
  &lt;li&gt;ISP(Interface Segregation Principle) 인터페이스 분리 원칙&lt;/li&gt;
  &lt;li&gt;DIP(Dependency Inversion Principle) 의존 역전 원칙&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;높은-응집도와-낮은-결합도&quot;&gt;높은 응집도와 낮은 결합도&lt;/h1&gt;
&lt;p&gt;개방 폐쇄 원칙은 높은 응집도와 낮은 결합도라는 소프트웨어 개발의 원리로 설명이 가능하다. &lt;br /&gt;
응집도가 높다는 것은 하나의 모듈, 클래스가 하나의 책임 또는 관심사에만 집중되어 있다는 뜻이다.  &lt;br /&gt;
불필요하거나 직접 관련이 없는 외부의 관심과 책임이 얽혀 있지 않으며, 하나의 공통 관심사는 한 클래스에 모여 있다. &lt;br /&gt;
높은 응집도는 클래스 레벨뿐 아니라 패키지, 컴포넌트, 모듈에 이르기까지 그 대상의 크기가 달라도 동일한 원리로 적용될 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;높은 응집도 &lt;br /&gt;
응집도가 높다는 것은 하나의 모듈, 클래스가 하나의 책임 또는 관심사에만 집중되어 있다는 뜻 &lt;br /&gt;
혹은, 변화가 일어날 때 해당 모듈에서 변하는 부분이 크다는 것으로도 설명할 수 있다.   &lt;br /&gt;
불필요하거나 직접 관련이 없는 외부의 관심과 책임이 얽혀 있지 않으며, 하나의 공통 관심사는 한 클래스에 모여 있다. &lt;br /&gt;
즉 변경이 일어날 때 모듈의 많은 부분이 함께 바뀐다면 응집도가 높다는 것이다. &lt;br /&gt;
만약 모듈의 일부분에만 변경이 일어나도 된다면, 모듈 전체에서 어떤 부분이 바뀌어야 하는지 파악해야 하고, 
또 그 변경으로 인해 바뀌지 않는 부분에는 다른 영향을 미치지는 않는지 확인해야 하는 이중의 부담이 생기다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;낮은 결합도 &lt;br /&gt;
책임과 관심사가 다른 오브젝트 또는 모듈과는 낮은 결합도, 즉 느슨하게 연결된 형태를 유지하는 것이 바람직하다.  &lt;br /&gt;
느슨한 연결은 관계를 유지하는 데 꼭 필요한 최소한의 방법만 간접적인 형태로 제공하고, 나머지는 서로 독집적이고 알 필요도 없게 만들어주는 것이다.    &lt;br /&gt;
결합도가 낮아지면 변화에 대응하는 속도가 높아지고, 구성이 깔끔해진다. 또한 확장하기에도 매우 편리하다. &lt;br /&gt;
여기서 결합도란 ‘하나의 오브젝트가 변경이 일어날 때에 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도’라고 설명할 수 있다. &lt;br /&gt;
낮은 결합도란 결국, 하나의 변경이 발생할 때 여타 모듈과 객체로 변경에 대한 요구가 전파되지 않는 상태를 말한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결합도와 응집도 &lt;br /&gt;
좋은 소프트웨어 설계를 위해서는 결합도는 낮추고 응집도는 높이는 것이 바람직하다. &lt;br /&gt;
결합도는 모듈(클래스) 간의 상호 의존 정도로서 결합도가 낮으면 모듈 간의 상호 의존성이 줄어들어 객체의 재사용이나 수정, 유지보수가 용이하다. &lt;br /&gt;
응집도는 하나의 모듈 내부에서 존재하는 구성 요소들의 기능적 관련성으로, 응집도가 높은 모듈은 하나의 책임에 집중하고 독립성이 높아져 &lt;br /&gt;
재사용이나 기능의 수정, 유지보수가 용이하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-srp---단일-책임-원칙&quot;&gt;1. SRP - 단일 책임 원칙&lt;/h3&gt;
&lt;p&gt;“어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다.”&lt;/p&gt;

&lt;p&gt;역할(책임)을 분리하라는 것이 단일 책임 원칙이다. &lt;br /&gt;
단일 책임 원칙은 속성, 메서드, 패키지, 모듈, 컴포넌트, 프레임워크 등에도 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;단일 책임 원칙은 잘된 경우보다 잘못된 경우를 살펴보는 게 이해하는 데 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;속성이 단일 책임 원칙을 지키기 못한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여자는 반드시 대학교에 가고 남자는 절대로 가지 못하며 사람 클래스에 학번 속성이 있다고 가정하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class 사람 {  
    String 학번;  
}  

사람 여자 = new 사람();  
사람 남자 = new 남자();  

남자.학번 = &quot;201732017&quot;;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사람형 참조 변수 남자가 가진 학번 속성에 값을 할당하거나 읽어 오는 코드를 제제할 방법이 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하나의 속성이 여러 의미를 갖는 경우도 단일 책임 원칙을 지키지 못하는 경우이며 if문을 여기저기 사용해야 할 수도 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메서드가 단일 책임 원칙을 지키지 못한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;강아지 클래스를 만들고 소변보다() 메서드를 구현했다고 해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class 강아지 {  

    final static Boolean 암컷 = ture;  
    final static Boolean 수컷 = false;  

    void 소변보다() {  
        if(this.성별 == 수컷) {   
            // 한쪽 다리를 들고 소변을 본다.   
        } else {  
            // 다리를 들고 소변을 보지 않는다.     
        }  
    }  

}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;강아지가 암컷이냐 수컷이냐에 따라서 소변보다() 메서드에서 분기 처리가 진행된다. &lt;br /&gt;
소변보다() 메서드가 암컷과 수컷 강아지의 행위를 전부 구현하려고 하기 때문에 단일 책임 원칙을 위배하고 있는 것이다. &lt;br /&gt;
메서드가 단일 책임 원칙을 지키지 않을 경우 나타나는 대표적인 상황이 &lt;strong&gt;분기 처리를 위한 if문&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;단일 책임 원칙과 객체 지향 4대 특성은 어떻게 결부돼 있을까?  &lt;br /&gt;
단일 책임 원칙과 가장 관계가 깊은 것은 바로 모델링 과정을 담당하는 추상화임을 알 수 있다.   &lt;br /&gt;
애플리케이션의 경계를 정하고 추상화를 통해 클래스들을 선별하고 속성과 메서드를 설계할 때 반드시 단일 책임 원칙을 고려하는 습관을 들이자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-ocp---개방-폐쇄-원칙&quot;&gt;2. OCP - 개방 폐쇄 원칙&lt;/h3&gt;
&lt;p&gt;“소프트웨어 엔티티(클래스, 모듈, 함수 등)는 확장에 대해서는 열려 있어야 하지만 변경에 대해서는 닫혀 있어야 한다.”&lt;br /&gt;
→ 자신의 확장에는 열려 있고, 주변의 변화에 대해서는 닫혀 있어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            자바 애플리케이션    
                ^   
            JDBC 인터페이스    
                ^   
JDBC 드라이버(오라클), JDBC 드라이버(MySQL), JDBC 드라이버(MS-SQL)    
                ^     
        오라클, MySQL, MS-SQL    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JDBC를 사용하는 클라이언트는 데이터베이스가 오라클에서 MySQL로 바뀌더라도 Connection을 설정하는 부분 외에는 따로 수정할 필요가 없다.       &lt;br /&gt;
자바 애플리케이션은 JDBC 인터페이스라고 하는 완충 장치로 인해 변화에 영향을 받지 않는다.   &lt;br /&gt;
데이터베이스라고 하는 &lt;strong&gt;주변의 변화에 닫혀&lt;/strong&gt; 있는 것이다. 데이터베이스를 교체한다는 것은 데이터베이스가 &lt;strong&gt;자신의 확장에는 열려&lt;/strong&gt; 있다는 것이다.&lt;/p&gt;

&lt;p&gt;개방 폐쇄 원칙을 무시하고 프로그램을 작성하면 객체 지향 프로그래밍의 가장 큰 장점인 유연성, 재사용성, 유지보수성 등을 얻을 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-lsp---리스코프-치환-원칙&quot;&gt;3. LSP - 리스코프 치환 원칙&lt;/h3&gt;
&lt;p&gt;“서브 타입은 언제나 자신의 기반 타입으로 교체할 수 있어야 한다.”&lt;/p&gt;

&lt;p&gt;객체 지향에서의 상속은 조직도나 계층도가 아닌 뷴류도가 되어야 한다. &lt;br /&gt;
객체 지향의 상속은 다음의 조건을 만족해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하위 클래스 is a kind of 상위 클래스 → 하위 분류는 상위 분류의 한 종류이다.&lt;/li&gt;
  &lt;li&gt;구현 클래스 is able to 인터페이스 → 구현 분류는 인터페이스할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;“하위 클래스의 인스턴스는 상위형 객체 참조 변수에 대입해 상위 클래스의 인스턴스 역할을 하는 데 문제가 없어야 한다.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;리스코프 치환 원칙&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하위형에서 선행 조건은 강화될 수 없다.&lt;/li&gt;
  &lt;li&gt;하위형에서 후행 조건은 약화될 수 없다.&lt;/li&gt;
  &lt;li&gt;하위형에서 상위형의 불변 조건은 반드시 유지돼야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-isp---인터페이스-분리-원칙&quot;&gt;4. ISP - 인터페이스 분리 원칙&lt;/h3&gt;
&lt;p&gt;“클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안 된다.”&lt;/p&gt;

&lt;p&gt;단일 책임 원칙에서 제시한 해결책은 클래스를 토막내서 하나의 역할(책임)만 하는 다수의 클래스로 분할하는 것이었다. &lt;br /&gt;
그런데 꼭 그 방법뿐일까? 다른 선택 방법은 바로 ISP 즉, 인터페이스 분할 원칙이다. &lt;br /&gt;
결론적으로 단일 책임 원칙(SRP)과 인터페이스 분할 원칙(ISP)은 같은 문제에 대한 두 가지 다른 해결책이라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;인터페이스 분할 원칙을 이야기할 때 등장하는 원칙 중 하나로 인터페이스 최소주의 원칙이라는 것이 있다.   &lt;br /&gt;
인터페이스를 통해 메서드를 외부에 제공할 떄는 최소한의 메서드만 제공하라는 것이다. &lt;br /&gt;
상위 클래스는 풍성할수록 좋고, 인터페이스는 작을수록 좋다고 했다. 그 이유를 살펴보자.&lt;/p&gt;

&lt;p&gt;리스코프 치환 원칙(LSP)에 따라 하위 객체는 상위 객체인 척 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빈약한 상위 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class 사람 {
    String 이름;
    void 먹다() { . . . }
}

Class 학생 extends 사람 {
    String 생일;
    String 주민등록번호;
    String 학번;

    void 자다() { . . . }
    void 공부하다() { . . . }
}

Class 군인 extends 사람 {
    String 생일;
    String 주민등록번호;
    String 군번;

    void 자다() { . . . }
    void 훈련하다() { . . . }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;풍성한 상위 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class 사람 {
    String 이름;
    String 생일;
    String 주민등록번호;

    void 먹다() { . . . }
    void 자다() { . . . }
} 

Class 학생 extends 사람 {
    String 학번;

    void 공부하다() { . . . }
}

Class 군인 extends 사람 {
    String 군번;

    void 훈련하다() { . . . }
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;빈약한 상위 클래스를 이용하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    사람 김학생 = new 학생( . . . );
    사람 이군인 = new 군인( . . . );

    System.out.println(김학생.생일); // 사용불가
    System.out.println(이군인.생일); // 사용불가 

    System.out.println((학생)김학생.생일); // 캐스팅 필요 
    System.out.println((군인)이군인.생일); // 캐스팅 필요 

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈약한 상위 클래스를 이용한 경우 여기저기 형변환이 발생하면서 상속의 혜택을 제대로 누리지 못하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풍성한 상위 클래스를 이용하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    사람 김학생 = new 학생( . . . );
    사람 이군인 = new 군인( . . . );

    System.out.println(김학생.생일); 
    System.out.println(이군인.생일); 
  
    (학생)김학생.공부하다(); // 캐스팅 필요     
    (군인)이군인.훈련하다(); // 캐스팅 필요      
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;학생과 군인이 자는 행위가 똑같다고 볼 수는 없다. 하지만 기능은 둘 다 필요하다.   &lt;br /&gt;
이 경우 사용할 수 있는 객체 지향 기법이 바로 추상 메서드다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-dip---의존-역전-원칙&quot;&gt;5. DIP - 의존 역전 원칙&lt;/h3&gt;

&lt;p&gt;“고차원 모듈은 저차원 모듈에 의존하면 안 된다. 두 모듈 모두 다른 추상화된 것에 의존해야 한다.”   &lt;br /&gt;
“추상화된 것은 구체적인 것에 의존하면 안 된다. 구체적인 것이 추상화된 것에 의존해야 한다.”  &lt;br /&gt;
“자주 변경되는 구체(Concrete) 클래스에 의존하지 마라.”&lt;/p&gt;

&lt;p&gt;자동차와 스노우타이어 사이에 다음과 같은 의존 관계가 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;자동차 -&amp;gt; 스노우 타이어&lt;/code&gt;  &lt;br /&gt;
자동차가 타이어에 의존한다.&lt;/p&gt;

&lt;p&gt;그런데 자동차가 일반 타이어로 교체해야 한다고 가정해보자. &lt;br /&gt;
이런 경우 스노우 타이어를 일반 타이어로 교체할 때 자동차는 그 영향에 노출돼 있음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;자동차는 자기 자신보다 더 자주 변하는 스노우타이어에 의존하는 나쁜 관계를 갖고 있다.   &lt;br /&gt;
다음과 같이 개선해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;자동차 --------&amp;gt; &amp;lt;&amp;lt;interface&amp;gt;&amp;gt; 타이어 
                        ^ 
          [스노우타이어][일반타이어][광폭타이어]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자동차가 &lt;strong&gt;구체적인 타이어&lt;/strong&gt;들이 아닌 &lt;strong&gt;추상화된 타이어 인터페이스&lt;/strong&gt;에만 의존하게 함으로써 자동차는 이제 타이어에 &lt;strong&gt;영향을 받지 않는 형태로 구성&lt;/strong&gt;되었다.  &lt;br /&gt;
이 설명은 바로 개방 폐쇄 원칙(OCP)에서도 나온 설명이다.&lt;/p&gt;

&lt;p&gt;기존에는 스노우타이어가 그 무엇에도 의존하지 않는 클래스였는데   &lt;br /&gt;
추상적인 것인 타이어 인터페이스에 의존하게 됐다. 이를 의존의 방향이 역전되었다고 한다.     &lt;br /&gt;
자신보다 변하기 쉬운 것에 의존하던 것을 추상화된 인터페이스나 상위 클래스를 두어   &lt;br /&gt;
변하기 쉬운 것의 변화에 영향받지 않게 하는 것이 의존 역전 원칙이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-정리&quot;&gt;6. 정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SRP(단일 책임 원칙) : 어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다.&lt;/li&gt;
  &lt;li&gt;OCP(개방 폐쇄 원칙) : 자신의 확장에는 열려 있고, 주변의 변화에 대해서는 닫혀 있어야 한다.&lt;/li&gt;
  &lt;li&gt;LSP(리스코프 치환 원칙) : 서브 타입은 언제나 자신의 기반 타입으로 교체할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;ISP(인터페이스 분리 원칙) : 클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안 된다.&lt;/li&gt;
  &lt;li&gt;DIP(역전 의존 원칙) : 자신보다 변하기 쉬운 것에 의존하지 마라.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 08 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020-01-08/solid/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-08/solid/</guid>
      </item>
    
  </channel>
</rss>
