I"jG<p><br /></p>

<ul>
  <li>ElasticSearch란? : <a href="https://hyerin6.github.io/2021-09-17/es/">https://hyerin6.github.io/2021-09-17/es/</a></li>
  <li>ELK : <a href="https://hyerin6.github.io/2021-09-22/log-slack/">https://hyerin6.github.io/2021-09-22/log-slack/</a></li>
  <li>엘라스틱서치 검색기능 구현 방법 : <a href="https://github.com/hyerin6/TIL/blob/main/Mentoring/2021-09-23.md">https://github.com/hyerin6/TIL/blob/main/Mentoring/2021-09-23.md</a></li>
</ul>

<p><br /></p>

<h2 id="high-level-rest-client-란">High Level Rest Client 란?</h2>

<p>ElasticSearch를 사용하는 자바 애플리케이션을 만들기 위한 client api이다.</p>

<p><br /></p>

<h3 id="1-의존성">(1) 의존성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">elasticsearch</span><span class="err">'</span>
</code></pre></div></div>

<p>Spring Data Elasticsearch를 사용하여 Spring 애플리케이션에서 Elasticsearch 인덱싱, 검색 및 쿼리를 사용할 수 있다.</p>

<p>또한, Spring Data Elasticsearch 에서 제공 하는 ElasticsearchRepository 인터페이스를 확장하는 저장소 인터페이스를 정의하면
해당 문서 클래스에 대한 CRUD 작업이 기본적으로 사용 가능하다.</p>

<p><br />
<br /></p>

<h3 id="2-환경-설정">(2) 환경 설정</h3>

<ul>
  <li>ElasticSearchConfig</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableElasticsearchRepositories</span><span class="o">(</span><span class="s">"..."</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElasticSearchConfig</span> <span class="o">{</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${...}"</span><span class="o">)</span>
	<span class="nc">String</span> <span class="n">elasticHost</span><span class="o">;</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">RestHighLevelClient</span> <span class="nf">restHighLevelClient</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">RestHighLevelClient</span><span class="o">(</span><span class="nc">RestClient</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="nc">HttpHost</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">elasticHost</span><span class="o">)));</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li>application.yml</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">elasticsearch</span><span class="pi">:</span>
    <span class="na">rest</span><span class="pi">:</span>
      <span class="na">uris</span><span class="pi">:</span> <span class="s">http://localhost:9200</span>
</code></pre></div></div>

<p><br /></p>

<p>ElasticSearch는 여러 노드를 등록할 수 있으며 HttpHost를 추가해주면 된다.</p>

<p>HttpHost의 파라미터로는 hostname, port 그리고 http 또는 https 사용의 스키마가 들어간다.</p>

<p><br />
<br /></p>

<h3 id="3-인덱스-생성">(3) 인덱스 생성</h3>

<ul>
  <li>PostIndex</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ToString</span>
<span class="nd">@Builder</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Document</span><span class="o">(</span><span class="n">indexName</span> <span class="o">=</span> <span class="s">"post"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostIndex</span> <span class="o">{</span>

	<span class="nd">@Id</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Text</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Date</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">ZonedDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Date</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">ZonedDateTime</span> <span class="n">updatedAt</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Document</code> 어노테이션으로 인덱스 이름을 지정한다.</li>
  <li>각 필드는 <code class="language-plaintext highlighter-rouge">@Field</code> 어노테이션으로 설정한다.</li>
  <li>createdAt, updatedAt을 <code class="language-plaintext highlighter-rouge">ZonedDateTime</code>으로 선언한 것을 기억하자.</li>
</ul>

<p><br /></p>

<ul>
  <li>PostIndexRepository</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PostIndexRepository</span> <span class="kd">extends</span> <span class="nc">ElasticsearchRepository</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">&gt;</span> <span class="nf">findByContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ElasticsearchRepository를 상속받았다.</p>

<p>JpaRepository와 사용이 유사하다.</p>

<p><br /></p>

<ul>
  <li>PostService</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostService</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">PostRepository</span> <span class="n">postRepository</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">ImageService</span> <span class="n">imageService</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">PostIndexRepository</span> <span class="n">postIndexRepository</span><span class="o">;</span>

	<span class="nd">@Transactional</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">,</span> <span class="nc">CreatePostRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="nc">Post</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
			<span class="o">.</span><span class="na">user</span><span class="o">(</span><span class="n">user</span><span class="o">)</span>
			<span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContent</span><span class="o">())</span>
			<span class="o">.</span><span class="na">build</span><span class="o">();</span>

		<span class="nc">Post</span> <span class="n">savedPost</span> <span class="o">=</span> <span class="n">postRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>

		<span class="c1">// imageService.create(post, request.getImages());</span>

		<span class="nc">PostIndex</span> <span class="n">postIndex</span> <span class="o">=</span> <span class="nc">PostIndex</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
			<span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">savedPost</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span>
			<span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContent</span><span class="o">())</span>
			<span class="o">.</span><span class="na">createdAt</span><span class="o">(</span><span class="n">savedPost</span><span class="o">.</span><span class="na">getCreatedAt</span><span class="o">().</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Asia/Seoul"</span><span class="o">)))</span>
			<span class="o">.</span><span class="na">updatedAt</span><span class="o">(</span><span class="n">savedPost</span><span class="o">.</span><span class="na">getUpdatedAt</span><span class="o">().</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Asia/Seoul"</span><span class="o">)))</span>
			<span class="o">.</span><span class="na">build</span><span class="o">();</span>

		<span class="n">postIndexRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">postIndex</span><span class="o">);</span>
	<span class="o">}</span>


	<span class="o">.</span> <span class="o">.</span> <span class="o">.</span>


<span class="o">}</span>
</code></pre></div></div>

<p>검색을 하기 위해 Post 객체를 저장할 때</p>

<p>PostIndex도 함께 저장해줘야 한다.</p>

<p>DB에 데이터를 저장하듯 IndexRepository를 이용하여 저장하면 엘라스틱서치에 데이터가 저장된다.</p>

<p><br /></p>

<ul>
  <li>검색 테스트 코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">getAllIndex</span><span class="o">()</span> <span class="o">{</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MultipartFile</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">CreatePostRequest</span><span class="o">&gt;</span> <span class="n">requests</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우주의 이야기"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우유의 이야기"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우기의 사랑"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우리 은행"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우리"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우리나라"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우주"</span><span class="o">,</span> <span class="n">images</span><span class="o">),</span>
		<span class="k">new</span> <span class="nf">CreatePostRequest</span><span class="o">(</span><span class="s">"우주의 나라"</span><span class="o">,</span> <span class="n">images</span><span class="o">)</span>
	<span class="o">);</span>

	<span class="k">for</span> <span class="o">(</span><span class="nc">CreatePostRequest</span> <span class="n">p</span> <span class="o">:</span> <span class="n">requests</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">postService</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">&gt;</span> <span class="n">index</span> <span class="o">=</span> <span class="n">postService</span><span class="o">.</span><span class="na">getAllIndex</span><span class="o">(</span><span class="s">"우주의"</span><span class="o">);</span>

	<span class="k">for</span> <span class="o">(</span><span class="nc">PostIndex</span> <span class="n">i</span> <span class="o">:</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h3 id="결과">결과</h3>

<p><img src="https://user-images.githubusercontent.com/33855307/136330118-9ef56fb1-4dd5-4a2a-988c-4f7a97ca61d3.jpeg" alt="인덱스생성" /></p>

<p>노란색 부분을 보면 <code class="language-plaintext highlighter-rouge">@Document</code> 어노테이션으로 설정한 Indexname으로 post가 생성되어 저장된 것을 확인할 수 있다.</p>

<p><br />
<br /></p>

<h2 id="elasticsearch">ElasticSearch</h2>

<p>엘라스틱 서치에 대해 처음 학습하면서 역색인 방식으로 텍스트를 저장하기 때문에</p>

<p>엘라스틱 서치의 검색이 빠르다는 것으로 게시글을 마쳤는데</p>

<p>엘라스틱 서치에 대해 조금 더 알아보자.</p>

<p><br /></p>

<h3 id="1-elasticsearch-vs-relational-db">(1) Elasticsearch vs. Relational DB</h3>

<p><img width="820" alt="vs" src="https://user-images.githubusercontent.com/33855307/136330364-e0b09989-7525-4177-8180-e45b5b699c9d.png" /></p>

<p>Elasticsearch는 키워드가 어떤 Document에 있다고 저장하는 방식이다.</p>

<p>해쉬 테이블과 같이 big-o 표기법에 따르면 검색 시 O(1)의 효과를 낸다.</p>

<p>Relational DB는 텍스트 검색 시 문서 개수만큼 연산이 수행되기 때문에 O(N)이다.</p>

<p><br /></p>

<p>Elasticsearch에 다음과 같이 저장된다.</p>

<p><img width="807" alt="el" src="https://user-images.githubusercontent.com/33855307/136335277-caca5242-8091-4b4f-8bfc-5240a651de3d.png" /></p>

<p><br />
<br /></p>

<h3 id="2-mapping">(2) Mapping</h3>

<p>매핑은 스키마라고 보면 된다.</p>

<p>엘라스틱 서치 매핑을 하지 않으면 모두 문자열로 저장되기 때문에 데이터를 시각화할 때 불편한 상황이 발생할 수 있다.</p>

<p>때문에 실무에서 매핑없이 데이터를 넣는 것은 위험하다.</p>

<p><br /></p>

<p>Spring Data Elasticsearch를 사용했기 때문에 인덱스 매니저의 Mapping에 들어가보면</p>

<p>다음과 같이 각 필드가 잘 매핑되어 있는 것을 확인할 수 있다.</p>

<p><img width="1191" alt="매핑" src="https://user-images.githubusercontent.com/33855307/136335429-b6516a65-2063-4110-a4d3-930b02cdf17e.png" /></p>

<p><br />
<br /></p>

<h3 id="참고">참고</h3>

<p><code class="language-plaintext highlighter-rouge">Minsuk Heo 허민석</code>의 유튜브 강의</p>

<p><a href="https://youtube.com/playlist?list=PLVNY1HnUlO24LCsgOxR_eK2Yi4sOgH9Pg">https://youtube.com/playlist?list=PLVNY1HnUlO24LCsgOxR_eK2Yi4sOgH9Pg</a></p>

<p><br /></p>

:ET