I"	.<p><br /></p>

<h1 id="텍스트-분석">텍스트 분석</h1>

<p>“엘라스틱서치는 루씬을 기반으로 구축된 텍스트 기반 검색엔진이다.”</p>

<p>일반적으로 특정 단어가 포함된 문서를 찾으려면 검색어로 찾을 단어를 입력하면 될 것이라 생각하겠지만</p>

<p>엘라스틱 서치의 기본 분석기는 내가 생각한대로 동작하지 않았다.</p>

<p>별도의 설정 없이 “엘라스틱서치”나 “텍스트”라고 입력해도 위 문장이 검색되지 않는다는 것이다.</p>

<p><br /></p>

<p>엘라스틱서치는 문서를 색인하기 전에 해당 문서의 필드 타입이 무엇인지 확인하고</p>

<p>텍스트 타입이면 분석기 이용해 분석한다.</p>

<p>텍스트가 분석되면 텀(term)으로 나눠서 형태소 형태로 분석된다.</p>

<p>해당 형태소는 특정 원칙에 의해 필터링되어 단어가 삭제되거나</p>

<p>추가, 수정되고 최종적으로 역색인된다.</p>

<p><br />
<br /></p>

<h3 id="1-역색인-구조">1) 역색인 구조</h3>

<p>역색인 구조는 다음과 같이 요약할 수 있다.</p>

<ul>
  <li>모든 문서가 가지는 단어의 고유 단어 목록</li>
  <li>해당 단어가 어떤 문서에 속해 있는지에 대한 정보</li>
  <li>전체 문서에 각 단어가 몇 개 들어있는지에 대한 정보</li>
  <li>하나의 문서에 단어가 몇 번씩 출현했는지에 대한 빈도</li>
</ul>

<p><br /></p>

<p>색인 파일들에 들어간 토큰만 변경되어 저장되고 실제 문서의 내용은 변함없이 저장된다.</p>

<p>색인할 때 특정한 규칙과 흐름에 의해 텍스트를 변경하는 과정을 분석(Analyze)이라고 하고 해당 처리는 분석기(Analyzer)라는 모듈을 조합해서 이루어진다.</p>

<p><br />
<br /></p>

<h3 id="2-분석기-구조">2) 분석기 구조</h3>

<p>분석기는 기본적으로 다음과 같은 프로세스로 동작한다.</p>

<ul>
  <li>문장을 특정한 규칙에 의해 수정한다.</li>
  <li>수정한 문자를 개별 토큰으로 분리한다.</li>
  <li>개별 토큰을 특정한 규칙에 의해 변경한다.</li>
</ul>

<p><br /></p>

<ul>
  <li>CHARACTER FILTER</li>
</ul>

<p>문장을 분석하기 전에 입력 텍스트에 대해 특정한 단어를 변경하거나 HTML과 같은 태그를 제거하는 역할을 하는 필터</p>

<p>해당 내용은 텍스트를 개별 토큰화하기 전의 전처리 과정이며,</p>

<p><code class="language-plaintext highlighter-rouge">ReplaceAll()</code> 함수처럼 패턴으로 텍스트를 변경하거나 사용자가 정의한 필터를 적용할 수 있습니다.</p>

<p><br /></p>

<ul>
  <li>TOKENIZER FILTER</li>
</ul>

<p>TOKENIZER FILTER는 분석기를 구성할 때 하나만 사용할 수 있으며 텍스트를 어떻게 나눌 것인지를 정의한다.</p>

<p>한글을 분해할 때는 한글 형태소 분석기의 TOKENIZER를 사용하고,</p>

<p>영문을 분석할 때는 영문 형태소 분석기의 TOKENIZER를 사용하는 등 상황에 맞게 적절한 TOKENIZER를 사용하면 된다.</p>

<p><br /></p>

<ul>
  <li>TOKEN FILTER</li>
</ul>

<p>토큰화된 단어를 하나씩 필터링해서 사용자가 원하는 토큰으로 변환한다.</p>

<p>Token Filter는 여러 단계가 순차적으로 이뤄지며 순서를 어떻게 지정하느냐에 따라 검색의 질이 달라질 수 있습니다.</p>

<p><br /></p>

<p>전체적인 프로세스는 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Character Filter → Tokenizer Filter → Token Filter → Index 
                                           ↕️
                                          사전 
</code></pre></div></div>

<p><br />
<br />
<br /></p>

<h1 id="부분-검색-기능을-위한-설정">부분 검색 기능을 위한 설정</h1>

<h3 id="1-postindex">1) PostIndex</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setting</span><span class="o">(</span><span class="n">settingPath</span> <span class="o">=</span> <span class="s">"/tokenizer/setting.json"</span><span class="o">)</span>
<span class="nd">@ToString</span>
<span class="nd">@Builder</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Document</span><span class="o">(</span><span class="n">indexName</span> <span class="o">=</span> <span class="s">"post"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostIndex</span> <span class="o">{</span>

	<span class="nd">@Id</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Text</span><span class="o">,</span> <span class="n">analyzer</span> <span class="o">=</span> <span class="s">"word_analyzer"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Date</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">ZonedDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

	<span class="nd">@Field</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FieldType</span><span class="o">.</span><span class="na">Date</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">ZonedDateTime</span> <span class="n">updatedAt</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Setting(settingPath = "/tokenizer/setting.json")</code> 이 부분은 프로젝트 <code class="language-plaintext highlighter-rouge">resource/**</code> 경로의 파일을 찾는다.</p>

<p><br />
<br /></p>

<h3 id="2-resourcestokenizersettingjson">2) /resources/tokenizer/setting.json</h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"index"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"max_ngram_diff"</span><span class="p">:</span><span class="w"> </span><span class="s2">"10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"analysis"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"analyzer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"word_analyzer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"tokenizer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"text_tokenizer"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"filter"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"lowercase"</span><span class="w">
          </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"tokenizer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"text_tokenizer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ngram"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"min_gram"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
          </span><span class="nl">"max_gram"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
          </span><span class="nl">"token_chars"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"letter"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"digit"</span><span class="w">
          </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>해당 파일에 사용할 분석기, 필터 등을 설정하면 인덱스 생성시에 적용된다.</p>

<ul>
  <li>letter tokenizer: 글자가 아닌 문자를 만날 때마다 텍스트를 용어로 나눈다.</li>
  <li>token_chars: 토큰에 포함되어야 할 문자 종류. Elasticsearch는 지정된 종류에 속하지 않은 문자를 분할한다. 기본값은 []</li>
  <li>
    <p>ngram: 지정된 문자 목록 중 하나를 만날 때마다 텍스트를 먼저 단어로 분리</p>

    <ul>
      <li>예) cat → cat, ca, at, c, a, t</li>
    </ul>
  </li>
  <li>filter lowercase: 소문자로 변환</li>
</ul>

<p><br />
<br /></p>

<h3 id="3-postindexrepository">3) PostIndexRepository</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PostIndexRepository</span> <span class="kd">extends</span> <span class="nc">ElasticsearchRepository</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">&gt;</span> <span class="nf">findByContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">);</span>

	<span class="nd">@Query</span><span class="o">(</span><span class="s">"{\"match\": {\"content\": \"?0\"}}"</span><span class="o">)</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostIndex</span><span class="o">&gt;</span> <span class="nf">searchByContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<p>위와 같이 jpql도 사용이 가능하다.</p>

<p><br />
<br /></p>

<h3 id="참고">참고</h3>

<ul>
  <li>Elastic 가이드 북: <a href="https://esbook.kimjmin.net/06-text-analysis">https://esbook.kimjmin.net/06-text-analysis</a></li>
</ul>

<p><br /></p>
:ET