I"}C<p><br /></p>

<p>CQRS와 Message Queue에 대해서 알아보면서</p>

<p>RabbitMQ를 이용해 요청에 대한 성능을 개선했었다.</p>

<p><a href="https://hyerin6.github.io/2021-11-08/rabbitmq/">https://hyerin6.github.io/2021-11-08/rabbitmq/</a></p>

<p>이후 SNS 특성상 Insert 요청보다 Read 요청이 훨씬 많기 때문에</p>

<p>어떻게 Cache를 적용할지 많은 고민을 했다.</p>

<p><br /></p>

<p>특히 타임라인 조회는 내가 팔로우하고 있는 사용자들이 작성한 게시글을 조회하는 것이기 때문에</p>

<p>User, Post, Follow 테이블이 전부 관련되어 있고 N+1 문제 등을 해결하면서</p>

<p>Join 연산으로 타임라인을 조회하기로 결정했기 때문에 Cache를 적용하는게 적합한지 의문이었다.</p>

<p><br /></p>

<p>우선 데이터의 변경이 적고 조회가 많은 <code class="language-plaintext highlighter-rouge">특정 게시글 1개 조회</code>, <code class="language-plaintext highlighter-rouge">특정 사용자의 게시글 목록</code>에 적용했고</p>

<p>팔로우 목록, 댓글, 타임라인 조회에도 캐싱을 적용해 놓은 상태지만</p>

<p>테스트를 해보면서 캐싱하는게 적절한지 확인해 볼 필요가 있을 것 같다.</p>

<p><br /></p>

<h3 id="spring-boot-redis-cache-적용">Spring Boot Redis Cache 적용</h3>

<ul>
  <li>application.yml</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">session</span><span class="pi">:</span>
      <span class="na">host</span><span class="pi">:</span> 
      <span class="na">port</span><span class="pi">:</span> 
      <span class="na">password</span><span class="pi">:</span> 
    <span class="na">cache</span><span class="pi">:</span>
      <span class="na">host</span><span class="pi">:</span> 
      <span class="na">port</span><span class="pi">:</span> 
      <span class="na">password</span><span class="pi">:</span>
</code></pre></div></div>

<p>JWT 토큰을 redis에 저장하고 있었기 때문에 session과 cache로 분리하여 설정했다.</p>

<p><br /></p>

<ul>
  <li>RedisConfig</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.session.port}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">redisPort</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.session.host}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">redisHost</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.session.password}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">redisPassword</span><span class="o">;</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">RedisConnectionFactory</span> <span class="nf">redisConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">RedisStandaloneConfiguration</span> <span class="n">redisStandaloneConfiguration</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisStandaloneConfiguration</span><span class="o">();</span>
		<span class="n">redisStandaloneConfiguration</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">redisPassword</span><span class="o">);</span>
		<span class="n">redisStandaloneConfiguration</span><span class="o">.</span><span class="na">setHostName</span><span class="o">(</span><span class="n">redisHost</span><span class="o">);</span>
		<span class="n">redisStandaloneConfiguration</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">redisPort</span><span class="o">);</span>
		<span class="nc">LettuceConnectionFactory</span> <span class="n">lettuceConnectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LettuceConnectionFactory</span><span class="o">(</span><span class="n">redisStandaloneConfiguration</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">lettuceConnectionFactory</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"redisTemplate"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">StringRedisTemplate</span> <span class="nf">redisTemplate</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringRedisTemplate</span> <span class="n">stringRedisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringRedisTemplate</span><span class="o">();</span>
		<span class="n">stringRedisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">());</span>
		<span class="k">return</span> <span class="n">stringRedisTemplate</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Lettuce는 Netty (비동기 이벤트 기반 고성능 네트워크 프레임워크) 기반의 Redis 클라이언트이다.</p>

<p>비동기로 요청을 처리하기 때문에 Jedis에 비해 몇배 이상의 성능과 하드웨어 자원 절약이 가능하다.</p>

<p>자세한 정보는 이 블로그에 정리되어 있다.</p>

<p><a href="https://jojoldu.tistory.com/418">https://jojoldu.tistory.com/418</a></p>

<p><br /></p>

<ul>
  <li>CacheConfig</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableCaching</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CacheConfig</span> <span class="o">{</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.cache.host}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">redisHost</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.cache.port}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">redisPort</span><span class="o">;</span>

	<span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"redisCacheConnectionFactory"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">RedisConnectionFactory</span> <span class="nf">redisCacheConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">LettuceConnectionFactory</span> <span class="n">lettuceConnectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LettuceConnectionFactory</span><span class="o">(</span><span class="n">redisHost</span><span class="o">,</span>
			<span class="n">redisPort</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">lettuceConnectionFactory</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">CacheManager</span> <span class="nf">cacheManager</span><span class="o">(</span>
		<span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"redisCacheConnectionFactory"</span><span class="o">)</span> <span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">RedisCacheManager</span><span class="o">.</span><span class="na">RedisCacheManagerBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="nc">RedisCacheManager</span><span class="o">.</span><span class="na">RedisCacheManagerBuilder</span>
			<span class="o">.</span><span class="na">fromConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>
		<span class="nc">RedisCacheConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="nc">RedisCacheConfiguration</span><span class="o">.</span><span class="na">defaultCacheConfig</span><span class="o">()</span>
			<span class="o">.</span><span class="na">serializeKeysWith</span><span class="o">(</span><span class="nc">RedisSerializationContext</span><span class="o">.</span><span class="na">SerializationPair</span><span class="o">.</span><span class="na">fromSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">()))</span>
			<span class="o">.</span><span class="na">serializeValuesWith</span><span class="o">(</span>
				<span class="nc">RedisSerializationContext</span><span class="o">.</span><span class="na">SerializationPair</span><span class="o">.</span><span class="na">fromSerializer</span><span class="o">(</span>
					<span class="k">new</span> <span class="nf">GenericJackson2JsonRedisSerializer</span><span class="o">(</span><span class="n">objectMapper</span><span class="o">())))</span>
			<span class="o">.</span><span class="na">entryTtl</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofMinutes</span><span class="o">(</span><span class="mi">3L</span><span class="o">));</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">cacheDefaults</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="nc">ObjectMapper</span> <span class="nf">objectMapper</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">PolymorphicTypeValidator</span> <span class="n">ptv</span> <span class="o">=</span> <span class="nc">BasicPolymorphicTypeValidator</span>
			<span class="o">.</span><span class="na">builder</span><span class="o">()</span>
			<span class="o">.</span><span class="na">allowIfSubType</span><span class="o">(</span><span class="nc">Object</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
			<span class="o">.</span><span class="na">build</span><span class="o">();</span>
		<span class="nc">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
		<span class="n">mapper</span><span class="o">.</span><span class="na">disable</span><span class="o">(</span><span class="nc">SerializationFeature</span><span class="o">.</span><span class="na">WRITE_DATES_AS_TIMESTAMPS</span><span class="o">);</span>
		<span class="n">mapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="k">new</span> <span class="nc">JavaTimeModule</span><span class="o">());</span>
		<span class="n">mapper</span><span class="o">.</span><span class="na">activateDefaultTyping</span><span class="o">(</span><span class="n">ptv</span><span class="o">,</span> <span class="nc">ObjectMapper</span><span class="o">.</span><span class="na">DefaultTyping</span><span class="o">.</span><span class="na">NON_FINAL</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">mapper</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>ObjectMapper는 LocalDateTime 직렬화/역직렬화를 위해 추가한 bean이다.</p>

<p>모듈은 ObjectMapper에게 LocalDateTime으로 작업하는 방법을 가르치고,</p>

<p>매개변수 <code class="language-plaintext highlighter-rouge">WRITE_DATES_AS_TIMESTAMPS</code>는 JSON에서 LocalDateTime을 문자열로 표시하도록한다.</p>

<p>스프링 부트를 사용하면 ObjectMapper는 Bean 형태로 주입하여 제공한다.</p>

<p>이 설정이 없으면 다음 링크에서 말하는 에러와 동일한 에러가 발생한다.</p>

<p><a href="https://stackoverflow.com/questions/27952472/serialize-deserialize-java-8-java-time-with-jackson-json-mapper">https://stackoverflow.com/questions/27952472/serialize-deserialize-java-8-java-time-with-jackson-json-mapper</a></p>

<p><br /></p>

<ul>
  <li>PostSerevice</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 데이터를 조회할 때 레디스 캐시에 저장된다. </span>
<span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"post"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Post</span> <span class="nf">getPost</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ResponseException</span> <span class="o">{</span>
	<span class="k">return</span> <span class="n">postRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
		<span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nc">NotFoundException</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 데이터 변경이 있을 때 캐시가 삭제된다.</span>
<span class="nd">@CacheEvict</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"post"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">ModifyPostRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ResponseException</span> <span class="o">{</span>
	<span class="nc">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="n">postRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
		<span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nc">NotFoundException</span><span class="o">.</span><span class="na">POST</span><span class="o">);</span>

	<span class="n">post</span><span class="o">.</span><span class="na">modifyContent</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h3 id="redis에-캐싱되는지-확인">Redis에 캐싱되는지 확인</h3>

<p>redis-cli에 접속해서 확인해본 결과 원하는대로 캐싱되었다.</p>

<p><img src="https://user-images.githubusercontent.com/33855307/141317412-c51aa74a-98c4-450e-80d6-d25ba791e39a.png" alt="스크린샷 2021-11-11 오후 7 22 47" /></p>

<p>위와 같이 redis에 데이터가 들어간걸 확인할 수 있다.</p>

<p><br />
<br /></p>

<h3 id="캐시-적용-전후-조회-시간-차이">캐시 적용 전후 조회 시간 차이</h3>

<p><strong>DB에서 조회</strong> 
<img src="https://user-images.githubusercontent.com/33855307/141317840-f1a1a5c2-b6ca-4de8-8cd1-37575b28cd0f.png" alt="스크린샷 2021-11-11 오후 7 25 28" /></p>

<p><br /></p>

<p><strong>캐싱된 데이터 조회</strong><br />
<img src="https://user-images.githubusercontent.com/33855307/141317831-04f4fedd-4f1c-4181-abb7-bd16f68ac9b1.png" alt="스크린샷 2021-11-11 오후 7 25 47" /></p>

<p>postman으로 테스트해본 결과 조회하는데 소요되는 시간이 개선된 것을 확인할 수 있었다.</p>

<p><br /></p>

:ET