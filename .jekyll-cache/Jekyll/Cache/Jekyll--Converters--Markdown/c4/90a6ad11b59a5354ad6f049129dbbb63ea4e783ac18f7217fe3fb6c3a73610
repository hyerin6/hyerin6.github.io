I"\<p>클래스와 인터페이스를 쓰기 편하고, 견고하며 유연하게 만드는 방법을 알아보자.</p>

<p><br /></p>

<h2 id="15-클래스와-멤버의-접근-권한을-최소화하라">15. 클래스와 멤버의 접근 권한을 최소화하라.</h2>

<p>어설프게 설계된 컴포넌트와 잘 설계된 컴포넌트의 가장 큰 차이는?        <br />
클래스 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터 얼마나 잘 숨겼느냐다.</p>

<p>잘 설계된 컴포넌트는 모든 내부 구현을 완벽히 숨겨 구현과 API를 깔끔히 분리한다.    <br />
이는 정보은닉, 혹은 캡슐화라고 하는 개념이기도 하다.</p>

<ul>
  <li>캡슐화: 특정 목적을 위해 연관있는 데이터와 메서드를 묶어서 추상화하는 것</li>
  <li>정보 은닉: 캡술화된 데이터와 메서드를 외부에 노출시키지 않고 내부에 숨기는 것</li>
</ul>

<p><br /></p>

<h3 id="정보-은닉의-장점">정보 은닉의 장점</h3>

<p>1) 시스템 개발 속도를 높인다.    <br />
   여러 컴포넌트를 병렬로 개발할 수 있기 때문이다.   <br />
   <br />  <br />
2) 시스템 관리 비용을 낮춘다.    <br />
   각 컴포넌트를 빠르게 파악할 수 있고 교체 부담이 감소한다.  <br />
   <br />
3) 정보 은닉 자체가 성능을 높여주지는 않지만 성능 최적에 도움이 된다.     <br />
   완성된 시스템을 프로파일링해 최적화할 컴포넌트를 정해   <br />
   다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만 최적화할 수 있기 때문이다.      <br />
   <br />
4) 소프트웨어 재사용성을 높인다.  <br />
   <br />
5) 큰 시스템을 제적하는 난이도를 낮춘다.         <br />
   시스템 전체가 완성되지 않아도 개별 컴포넌트의 동작을 검증할 수 있기 때문이다.</p>

<p><br /></p>

<p>정보 은닉을 위해 자바가 제공하는 다양한 장치 중 <strong>접근 제어 메커니즘</strong>의 기본 원칙은 <br />
모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다는 것이다.</p>

<p>(가장 바깥) 탑레벨 클래스와 인터페이스에 부여할 수 있는 접근 수준은     <br />
package-private와 public이다.</p>

<ul>
  <li>package-private : 해당 패키지에서만 이용할 수 있다.       <br />
package-private으로 선언하면 API가 아닌 내부 구현이 되어 언제든 수정할 수 있다.  <br />
즉, 클라이언트에 아무런 피해 없이 다음 릴리스에서 수정, 교체, 제거할 수 있다.  <br />
<br /></li>
  <li>public : API가 되므로 하위 호환을 위해 영원히 관리해줘야만 한다.</li>
</ul>

<p><br /></p>

<p>한 클래스에서만 사용하는 package-private 탑레벨 클래스나 인터페이스는    <br />
이를 사용하는 클래스 안에 private static으로 중첩시켜보자.     <br />
탑레벨로 두면 같은 패키지의 모든 클래스가 접근할 수 있지만 private static으로 중첩시키면   <br />
바깥 클래스 하나에서만 접근할 수 있다.</p>

<p>이보다 더 중요한 것은 <strong>public일 필요가 없는 클래스의 접근 수준을 package-private 탑레벨 클래스로 좁히는 일</strong>이다.  <br />
public 클래스는 그 패키지의 API인 반면, package-private 탑레벨 클래스는 내부 구현에 속하기 때문이다.</p>

<p><br /></p>

<h3 id="접근-제어자">접근 제어자</h3>

<p>멤버(필드, 메서드, 중첩 클래스, 중첩 인터페이스)에 부여할 수 있는 접근 수준은 네 가지다.</p>

<ul>
  <li>
    <p>private: 멤버를 선언한 탑레벨 클래스에서만 접근할 수 있다.</p>
  </li>
  <li>
    <p>package-private: 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다.           <br />
접근 제한자를 명시하지 않았을 때 적용되는 패키지 접근 수준이다.           <br />
(단, 인터페이스의 멤버는 기본적으로 public이 적용된다.)</p>
  </li>
  <li>
    <p>protected: package-private의 접근 범위를 포함하며,       <br />
이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다.          <br />
(제약이 조금 따름)</p>
  </li>
  <li>
    <p>public: 모든 곳에서 접근할 수 있다.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="주의할-점">주의할 점</h3>
<ul>
  <li>public일 필요가 없는 클래스의 접근 수준을 package-private 탑레벨 클래스로 좁힌다.</li>
  <li>public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다.</li>
  <li>클래스에서 public static final 배열 필드를 두거나 이 필드를 반환하는 접근자 메서드를 제공하면 안 된다. <br />
길이가 0이 아닌 배열은 모두 변경 가능하기 때문이다.</li>
</ul>

<p><br />  <br />
<br /></p>

<h2 id="16-public-클래스에서는-public-필드가-아닌-접근자-메서드를-사용하라">16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라.</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="n">x</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="n">y</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이런 클래스는 데이터 필드에 직접 접근할 수 있으니 캡슐화의 이점을 제공하지 못한다.</p>

<ul>
  <li>API를 수정하지 않고는 내부 표현을 바꿀 수 없고 불변식을 보장할 수 없다.</li>
  <li>외부에서 필드에 접근할 때 부수 작업을 수행할 수 없다.</li>
</ul>

<p>이를 private으로 바꾸고 public 접근자를 추가한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">double</span> <span class="n">x</span><span class="o">;</span>

<span class="kd">public</span> <span class="kt">double</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>
</code></pre></div></div>

<p>패키지 바깥에서 접근할 수 있는 클래스라면 접근자를 제공함으로써      <br />
클래스 내부 표현 방식을 언제든 바꿀 수 있는 유연성을 얻을 수 있다.    <br />
public 클래스가 필드를 공개하려면 이를 사용하는 클라이언트가 생기므로  <br />
내부 표현 방식을 마음대로 바꿀 수 없게 된다.     <br />
<br /></p>

<p><strong>package-private 클래스</strong> 혹은 <strong>private 중첩 클래스</strong>라면 데이터 필드를 노출한다 해도 하등의 문제가 없다.      <br />
클라이언트 코드가 이 클래스 내부 표현에 묶이긴 하나,       <br />
클라이언트도 어차피 이 클래스를 포함하는 패키지 안에서 동작하는 코드일 뿐이다.         <br />
따라서 패키지 바깥 코드는 전혀 손대지 않고도 데이터 표현 방식을 바꿀 수 있다.      <br />
<br /></p>

<p>public 클래스의 필드가 불변이라면 직접 노출할 때의 단점이 조금은 줄어들지만 좋은 생각은 아니다.  <br />
API를 변경하지 않고는 표현 방식을 바꿀 수 없고  <br />
필드를 읽을 때 부수 작업을 수행할 수 없다는 단점이 여전하다.      <br />
단, 불변식은 보장됨</p>

<p><strong>ex.</strong> 불변 필드를 노출한 public 클래스</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Time</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">;</span>
    
    <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
    
<span class="o">}</span>
</code></pre></div></div>

<p><br />     <br />
<br /></p>

<h2 id="17-변경-가능성을-최소화하라">17. 변경 가능성을 최소화하라.</h2>

<p>불변 클래스란 그 인스턴스의 내부 값을 수정할 수 없는 클래스다.    <br />
불변 클래스는 가변 클래스보다 설계하고 구현, 사용하기 쉬우며 오류 발생 확률도 적고 훨씬 안전하다.</p>

<p>자바 플랫폼 라이브러리에도 다양한 불변 클래스가 있다.</p>

<ul>
  <li>String</li>
  <li>기본 타입의 박싱된 클래스들</li>
  <li>BigInteger</li>
  <li>BigDecimal</li>
</ul>

<p><br /></p>

<h3 id="불변-클래스를-만드는-5가지-규칙">불변 클래스를 만드는 5가지 규칙</h3>

<ol>
  <li>
    <p>객체의 상태를 변경하는 메서드를 제공하지 않는다.</p>
  </li>
  <li>
    <p>클래스를 확장할 수 없도록 한다.</p>
  </li>
  <li>
    <p>모든 필드를 final로 선언한다.</p>
  </li>
  <li>
    <p>모든 필드를 private으로 선언한다.</p>
  </li>
  <li>
    <p>자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.</p>
  </li>
</ol>

<p><br /></p>

<h3 id="상속하지-못하게-하는-방법">상속하지 못하게 하는 방법</h3>
<p>자신을 상속하지 못하게 하는 가장 쉬운 방법은 final 클래스로 선언하는 것이지만, 더 유연한 방법이 있다.    <br />
모든 생성자를 private 혹은 package-private 으로 만들고 public 정적 팩토리를 제공하는 방법이다.     <br />
package-private 구현 클래스를 원하는 만큼 만들어 활용할 수 있으니 훨씬 유연하다.</p>

<p><br />   <br />
<br /></p>

<h2 id="18-상속보다는-컴포지션을-사용하라">18. 상속보다는 컴포지션을 사용하라.</h2>

<p>상속은 코드를 재사용하는 강력한 수단이지만, 항상 최선은 아니다.     <br />
(지금 이야기하는 ‘상속’은 클래스가 다른 클래스를 확장하는 구현 상속을 말한다.)</p>

<p>메서드 호출과 달리 상속은 캡슐화를 깨뜨린다.  <br />
→ 상위 클래스가 어떻게 구현되느냐에 따라 하위 클래스의 동작에 이상이 생길 수 있다.</p>

<p><br /></p>

<h3 id="상속의-문제점">상속의 문제점</h3>
<p>(1) 자신의 다른 부분을 사용하는 ‘자기 사용(self-use)’ 여부는 해당 클래스의 내부 구현 방식에 해당하며, <br />
다음 릴리스에서도 유지될지는 알 수 없다.</p>

<p>(2) 상위 클래스의 메서드 동작을 다시 구현하는 방식은 어렵고, <br />
시간이 더 들며 오류를 내거나 성능을 떨어뜨릴 수도 있다.</p>

<p>(3) 다음 릴리스에서 상위 클래스에 새로운 메서드를 추가한다고 가정하면, <br />
특정 조건을 만족해야만 한다면 모든 메서드를 재정의해 필요한 검증을 추가해야 한다.  <br />
하지만 이 방식은 상위 클래스에 또 다른 추가 메서드가 만들어지기 전까지만 통한다.</p>

<p>위 문제점은 모두 메서드 재정의가 원인이다. <br />
위 문제를 모두 피해가는 방법이 있는데 기존 클래스를 확장하는 대신, <br />
새로운 클래스를 만들고 private 필드로 기존 클래스의 인스턴스를 참조하게 하는 것이다.</p>

<p>이러한 설계를 컴포지션(composition)이라 한다. <br />
새 클래스의 인스턴스 메서드들은 (private 필드로 참조하는) 기존 클래스의 대응하는 메소드를 호출해 그 결과를 반환한다. <br />
이 방식을 전달(forwarding)이라 한다.  <br />
새로운 클래스는 기존 클래스의 내부 구현 방식의 영향에서 벗어나며, <br />
기존 클래스에 새로운 메서드가 추가되더라도 전혀 영향을 받지 않는다.</p>

<p><br /></p>

<h3 id="예-instrumentedset-컴포지션과-전달방식으로-구현">예) InstrumentedSet 컴포지션과 전달방식으로 구현</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 래퍼 클래스 </span>
<span class="kd">public</span> <span class="n">clas</span> <span class="nc">InstrumentedSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">ForwardingSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">InstrumentedSet</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="kd">super</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">}</span> 
<span class="o">}</span>

<span class="c1">// 재사용할 수 있는 전달 클래스 </span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForwardingSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">ForwardingSet</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다른 Set 인스턴스를 감싸고 있다는 뜻에서 InstrumentedSet 같은 클래스를 래퍼 클래스라고 하며,  <br />
Set에 기능을 덧씌운다는 뜻에서 데코레이터 패턴이라고 한다.</p>

<p>래퍼 클래스는 단점이 거의 없다. <br />
래퍼 클래스가 콜백(Callback) 프레임워크와는 어울리지 않는다는 점만 주의하면 된다.     <br />
(콜백 프레임워크: 자기 자신의 참조를 다른 객체에 넘겨서 다음 호출 때 사용하도록 한다.)</p>

<p>내부 객체는 자신을 감싸고 있는 래퍼의 존재를 모르니 대신 자신(this)의 참조를 넘기고, <br />
콜백 때는 래퍼가 아닌 내부 객체를 호출하게 된다. 이를 SELF 문제라고 한다. <br />
실전에서 재사용할 수 있는 전달 클래스를 인터페이스당 하나씩만 만들어주면 원하는 기능을 덧씌우는 전달 클래스들을 쉽게 구현할 수 있다.</p>

<p>상속은 반드시 하위 클래스가 상위 클래스의 ‘진짜’ 하위 타입인 상황에서만 쓰여야 한다.    <br />
컴포지션을 써야 할 상황에서 상속을 사용하는 건 내부 구현을 불필요하게 노출하는 꼴이다.     <br />
API가 내부 구현에 묶이고 그 클래스의 성능도 영원히 제한된다. <br />
또한 클라이언트가 노출된 내부에 직접 접근하 수도 있다.</p>

<p><br />    <br />
<br /></p>

<h2 id="19-상속을-고려해-설계하고-문서화하라-그러지-않았다면-상속을-금지하라">19. 상속을 고려해 설계하고 문서화하라. 그러지 않았다면 상속을 금지하라.</h2>
<p>상속용 클래스는 재정의할 수 있는 메서드들을 내부적으로 어떻게 사용하는지 문서로 남겨야 한다. <br />
내부 매커니즘을 문서로 남기는 것만이 상속을 위한 설계의 전부는 아니다.     <br />
효율적인 하위 클래스를 만들 수 있게 하려면 클래스의 내부 동작 과정 중간에 끼어들 수 있는 훅(hook)을 잘 선별하여      <br />
protected 메서드 형태로 공개해야 할 수도 있다.</p>

<p>Q. 상속용 클래스를 설계할 때 어떤 메서드를 protected로 노출해야 할지는 어떻게 결정할까?                 <br />
A. 직접 하위 클래스를 만들어보는 것이 유일하다.</p>

<p>상속을 허용하는 클래스가 지켜야할 제약이 더 남았있다.        <br />
상속용 클래스의 생성자는 직접적으로든 간접적으로든 재정의 가능 메서드를 호출해서는 안 된다. <br />
상위 클래스의 생성자가 하위 클래스의 생성자보다 먼저 실행되므로 <br />
하위 클래스에서 재정의한 메서드가 하위 클래스의 생성자보다 먼저 호출된다.    <br />
이때 재정의한 메서드가 하위 클래스의 생성자에서 초기화하는 값에 의존한다면 의도대로 동작하지 않을 것이다.</p>

<p><br /></p>

<h3 id="예-생성자가-재정의-가능-메서드를-호출">예) 생성자가 재정의 가능 메서드를 호출</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Super</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Super</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">overrideMe</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">overrideMe</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Sub</span> <span class="kd">extends</span> <span class="nc">Super</span> <span class="o">{</span>

    <span class="c1">// 초기화되지 않은 final 필드, 생성자에서 초기화한다. </span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Instant</span> <span class="n">instant</span><span class="o">;</span>
    
    <span class="nc">Sub</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">instant</span> <span class="o">=</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="c1">// 재정의 가능 메서드, 상위 클래스의 생성자가 호출한다. </span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">overrideMe</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
    <span class="o">}</span>
   
<span class="o">}</span>
</code></pre></div></div>

<p>Sub 클래스 객체를 생성하고 <code class="language-plaintext highlighter-rouge">overrideMe()</code> 메서드를 호출하면 <br />
instant를 두 번 출력할 것으로 기대하지만 첫번째는 null을 출력한다.  <br />
상위 클래스의 생성자는 하위 클래스의 생성자가 인스턴스 필드를 초기화하기도 전에 overrideMe를 호출하기 때문이다.  <br />
(private, final, static 메서드는 재정의가 불가능하기 때문에 생성자에서 안심하고 호출해도 된다.)</p>

<p>Cloneable과 Serializable 인터페이스는 상속용 설계의 어려움을 한층 더해준다. <br />
상속용 클래스에서 Cloneable이나 Serializable을 구현할지 정해야 한다면, 제약은 생성자와 비슷하다. <br />
즉 clone과 readObject 모두 직접적으로든 간접적으로든 재정의 가능 메서드를 호출해서는 안 된다.  <br />
하위 클래스의 상태가 미완성인데 재정의한 메서드부터 호출하게 된다.</p>

<p>Serializable을 구현한 상속용 클래스가 readResolve나 writeReplace 메서드를 갖는다면 <br />
이 메서드들은 private이 아닌 protected로 선언해야 한다. <br />
private으로 선언하면 하위 클래스에서 무시되기 때문이다.</p>

<p>이 문제를 해결하는 가장 좋은 방법은 상속용으로 설계하지 않은 클래스는 상속을 금지하는 것이다. <br />
(1) 클래스를 final로 선언   <br />
(2) 모든 생성자를 private이나 package-private로 선언하고 public 정적 팩토리로 만든다.</p>

<p><br />        <br />
<br /></p>

<h2 id="20-추상-클래스보다는-인터페이스를-우선하라">20. 추상 클래스보다는 인터페이스를 우선하라.</h2>

<p>자바가 제공하는 다중 구현 매커니즘은 <strong>인터페이스</strong>와 <strong>추상 클래스</strong>다.       <br />
자바 8부터 인터페이스도 디폴트 메서드를 제공할 수 있게 되어 두 메커니즘 모두 인스턴스 메서드를 구현 형태로 제공할 수 있다.         <br />
둘의 가장 큰 차이는 <strong>추상 클래스가 정의한 타입을 구현하는 클래스는 반드시 추상 클래스의 하위 클래스가 되어야 한다</strong>는 점이다.      <br />
자바는 단일 상속만 지원하므로 추상 클래스 방식은 <strong>새로운 타입을 정의하는 데 커다란 제약</strong>을 갖고 있는 것이다.</p>

<p>반면 기존 클래스 위에 새로운 추상 클래스를 끼워넣기는 어려운 게 일반적이다.   <br />
두 클래스가 같은 추상 클래스를 확장하길 원한다면, 그 추상 클래스는 계층구조상 두 클래스의 공통 조상이어야 한다.      <br />
이 방식은 클래스 계층구조에 혼란을 일으킨다.</p>

<p><br /></p>

<p>인터페이스는 믹스인(mixin) 정의에 안성맞춤이다.     <br />
<strong>믹스인이란 클래스가 구현할 수 있는 타입</strong>으로 믹스인을 구현한 클래스에     <br />
원래의 ‘주된 타입’ 외에도 <strong>특정 선택적 행위를 제공한다고 선언하는 효과</strong>를 준다.       <br />
예) Comparable은 자신을 구현한 클래스의 인스턴스들끼리는 순서를 정할 수 있다고 선언하는 믹스인 인터페이스이다.</p>

<p>추상 클래스로는 믹스인을 정의할 수 없다.  <br />
이유는 앞서와 같이, 기존 클래스에 덧씌울 수 없기 때문이다.        <br />
클래스는 두 부모를 둘 수 없고 클래스 계층구조에는 믹스인을 삽입하기에 합리적인 위치가 없기 때문이다.</p>

<p>mixin에 대해 더 알아보기 : <a href="https://hyerin6.github.io/2021-06-21/mixin/">https://hyerin6.github.io/2021-06-21/mixin/</a></p>

<p><br /></p>

<p>인터페이스로는 계층구조가 없는 타입 프레임워크를 만들 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Singer</span> <span class="o">{</span>
    <span class="nc">AudioClip</span> <span class="nf">sing</span><span class="o">(</span><span class="nc">Song</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SongWriter</span> <span class="o">{</span>
    <span class="nc">Song</span> <span class="nf">compose</span><span class="o">(</span><span class="kt">int</span> <span class="n">chartPosition</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위와 같은 가수 인터페이스와 작곡가 인터페이스가 있다.       <br />
우리 주변에 작곡도 하는 가수가 제법있는데,  <br />
타입을 인터페이스로 정의하면 가수 클래스가 Singer와 Songwriter 모두를 구현해도 문제가 없다.    <br />
Singer와 Songwriter 모두를 확장하고 새로운 메서드까지 추가한 제 3의 인터페이스를 정의할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Singer와 Songwriter 모두 구현 </span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">People</span> <span class="kd">implements</span> <span class="nc">Singer</span><span class="o">,</span> <span class="nc">SongWriter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Sing</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Compose</span><span class="o">(</span><span class="kt">int</span> <span class="n">chartPosition</span><span class="o">)</span> <span class="o">{</span>

    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Singer와 Songwriter 모두 확장, 새로운 메서드까지 추가한 제 3의 인터페이스 정의 </span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SingerSongWriter</span> <span class="kd">extends</span> <span class="nc">Singer</span><span class="o">,</span> <span class="nc">Songwriter</span> <span class="o">{</span>
        <span class="nc">AudioClip</span> <span class="nf">strum</span><span class="o">();</span>
        <span class="kt">void</span> <span class="nf">actSensitive</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>위와 같은 구조를 클래스로 만들려면?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Singer</span> <span class="o">{</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">sing</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">SongWriter</span> <span class="o">{</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">compose</span><span class="o">(</span><span class="kt">int</span> <span class="n">chartPosition</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">SingerSongWriter</span> <span class="o">{</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">strum</span><span class="o">();</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">actSensitive</span><span class="o">();</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">Compose</span><span class="o">(</span><span class="kt">int</span> <span class="n">chartPosition</span><span class="o">);</span>
    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">sing</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>가능한 조합 전부를 각각의 클래스로 정의한 고도비만 계층구조가 만들어질 것이다.      <br />
추상 클래스로 만들었기 때문에 Singer 클래스와 SongWriter 클래스를 둘다 상속할 수 없어     <br />
다음과 같은 SingerSongWriter라는 또 다른 추상 클래스를 만들어서 클래스 계층을 표현할 수 밖에 없다.    <br />
매개변수 타입만 다른 메서드들을 수없이 많이 가진 거대한 클래스를 낳을 수 있다. <br />
이는 조합 폭발(combinato-rial explosion)이라고 부르는 현상이다.</p>

<p><br /></p>

<p><strong>래퍼 클래스 관용구와 함께 사용하면 인터페이스는 기능을 향상 시키는 안전하고 강력한 수단이 된다.</strong> <br />
타입을 추상 클래스로 정의해두면 그 타입에 기능을 추가하는 방법은 상속뿐이다.     <br />
상속해서 만든 클래스는 래퍼 클래스보다 활용도가 떨어지고 깨지기는 더 쉽다.   <br />
<br /></p>

<p>인터페이스 메서드 중 구현 방법이 명백한 것이 있다면, 그 구현을 디폴트 메서드로 제공할 수 있다.  <br />
그런데 디폴트 메서드에도 제약은 있다.</p>

<p>1) Object의 equals, hashcode 같은 메서드는 디폴트 메서드로 제공해서는 안된다.</p>

<p>2) public이 아닌 정적 멤버도 가질 수 없다.</p>

<p>3) 본인이 만들지 않은 인터페이스에는 디폴트 메서드를 추가할 수 없다.</p>

<p><br /></p>

<p>인터페이스와 추상 골격 구현 (skeletal implementation) 클래스를 함께 제공하는 식으로  <br />
인터페이스와 추상 클래스의 장점을 가질 수 있다.  <br />
인터페이스로 타입 정의, 필요한 디폴트 메서드 구현     <br />
추상 골격 구현 클래스는 나머지 메서드까지 구현   <br />
이렇게 골격 구현을 확장하는 것만으로 이 인터페이스를 구현하는데 필요한 일이 대부분 완료된다.  <br />
이는 템플릿 메서드 패턴과 같다.</p>

<p>예) 컬렉션 프레임워크의 AbstractList, AbstractSet 클래스   <br />
두 추상 클래스는 각각 List, Set 인터페이스의 추상 골격 구현 클래스이다.</p>

<p><br /></p>

<p>추상 골격 구현 클래스는 아래 게시물에서 더 알아보자.<br />
<a href="https://hyerin6.github.io/2021-06-20/skeletal_implementation/">https://hyerin6.github.io/2021-06-20/skeletal_implementation/</a></p>

<p>위 게시물에서 예제로 인터페이스의 디폴트 메소드를 사용하지 않고 추상 골격 구현 클래스를 만들어 중복을 제거했다.      <br />
그런데 Vending을 구현하는 구현 클래스가 VendingManuFacturer라는 제조사 클래스를 상속받아야해서  <br />
추상 골격 구현을 확장하지 못하는 상황일 땐 어떻게 해야할까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VendingManuFacturer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printManufacturerName</span><span class="o">()</span> <span class="o">{</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 상속받아야 하는 클래스를 구현체가 상속받는다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SnackVending</span> <span class="kd">extends</span> <span class="nc">VendingManufacturer</span> <span class="kd">implements</span> <span class="nc">Vending</span> <span class="o">{</span>
    <span class="nc">InnerAbstractVending</span> <span class="n">innerAbstractVending</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InnerAbstractVending</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">innerAbstractVending</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">chooseProduct</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">innerAbstractVending</span><span class="o">.</span><span class="na">chooseProduct</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">innerAbstractVending</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">printManufacturerName</span><span class="o">();</span>
        <span class="n">innerAbstractVending</span><span class="o">.</span><span class="na">process</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">InnerAbstractVending</span> <span class="kd">extends</span> <span class="nc">AbstractVending</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">chooseProduct</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"choose product"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"chocolate"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"cracker"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>인터페이스를 구현한 클래스에서 해당 골격 구현을 확장한 private 내부 클래스를 정의하고      <br />
<strong>각 메소드 호출을 내부 클래스의 인스턴스에 전달하여 골격 구현 클래스를 우회적으로 이용</strong>하는 방식을      <br />
<strong>시뮬레이트한 다중 상속</strong>(simulated multiple inheritance)이라고 한다.</p>

<p><br /></p>

<h3 id="단순-구현simple-implementation">단순 구현(simple implementation)</h3>

<p>단순 구현은 골격 구현의 작은 변종이다.    <br />
단순 구현도 골격 구현과 같이 상속을 위해 인터페이스를 구현한 것이지만,    <br />
추상 클래스가 아니란 점이 다르다.  <br />
이러한 단순 구현은 그대로 써도 되고 필요에 맞게 확장해도 된다.    <br />
예) AbstractMap.SimpleEntry</p>

<p><br />           <br />
<br /></p>

<h2 id="21-인터페이스는-구현하는-쪽을-생각해-설계하라">21. 인터페이스는 구현하는 쪽을 생각해 설계하라.</h2>

<p>자바 8전에 기존 구현체를 깨뜨리지 않고는 인터페이스에 메서드를 추가할 방법이 없었다.        <br />
자바 8에서 기존 인터페이스에 메서드를 추가할 수 있도록 디폴트 메서드를 소개했지만,     <br />
위험이 완전히 사라진 것은 아니다.</p>

<p>디폴트 메서드를 선언하면 그 인터페이스를 구현한 후   <br />
디폴트 메서드를 재정의하지 않은 모든 클래스에서 디폴트 구현이 쓰이게 된다.    <br />
그러나 모든 기존 구현체들과 매끄럽게 연동되리라는 보장은 없다.  <br />
디폴트 메서드는 구현 클래스에 대해 아무것도 모른 채 합의 없이 삽입될 뿐이다.</p>

<p>자바 8에서 핵심 컬렉션 인터페이스들에 다수의 디폴트 메서드가 추가되었다.  <br />
주로 람다를 활용하기 위해서다.  <br />
하지만 생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하기란 어렵다.</p>

<h3 id="자바-8에서-추가된-collection-인터페이스-추가된-removeif-메서드">자바 8에서 추가된 Collection 인터페이스 추가된 removeIf 메서드</h3>

<p>반복자를 이용해 순회하면서 각 원소를 인수로 넣어 predicate를 호출해서,   <br />
predicate가 true를 반환하면 iterator의 <code class="language-plaintext highlighter-rouge">remove()</code> 메서드를 호출해 원소를 제거 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">default</span> <span class="kt">boolean</span> <span class="nf">removeIf</span><span class="o">(</span><span class="nc">Predivate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">filter</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
    <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">();</span> <span class="n">it</span><span class="o">.</span><span class="na">hashNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">filter</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">()))</span> <span class="o">{</span>
            <span class="n">it</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 Collection에 새롭게 들어간 디폴드 메서는 과연 모든 Collection에 대해 정상작동 할까?</p>

<p><br /></p>

<h3 id="apache가-만든-synchronizedcollection">apache가 만든 SynchronizedCollection</h3>

<p>이 클래스는 스레드 안정성을 위해서 동기화가 되어있는 List의 wrapper 클래스이다.        <br />
다음과 같이 코드를 보면 동기화 코드가 있는걸 확인할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="kd">final</span> <span class="no">E</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">decorated</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>그러나 이 클래스는 removeIf 메서드를 재정의하지 않는다.          <br />
즉 자바8과 함께 쓴다면 <strong>스레드 안전성</strong>을 갖지 못한다.</p>

<blockquote>
  <p>removeIf의 구현은 동기화에 대해 아무것도 모르기 때문에 락 객체를 사용할 수 없다.  <br />
SynchronizedCollection 인스턴스를 여러 스레드가 공유하는 환경에서 한 스레드가 removeIf를 호출하면  <br />
ConcurrentModificationException이 발생하거나 다른 예기치 못한 결과로 이루어 질 수 있다.</p>
</blockquote>

<p>JDK에서 이런 문제를 예방하기 위해 구현 클래스에서 removeIf() 디폴트 메서드를 재정의했다.</p>

<h3 id="collectionssynchronizedcollection-클래스의-removeif">Collections.synchronizedCollection 클래스의 removeIf()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">removeIf</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">filter</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mutex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">c</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>하지만 JDK에 속하지 않은 제 3의 기존 컬렉션 구현체들은 이런 언어 차원의 인터페이스에 맞춰 수정될 기회가 없다.</p>

<p><br /></p>

<h3 id="해결-방법은">해결 방법은?</h3>

<ul>
  <li>기존 인터페이스에 디폴트 메서드로 새 메서드를 추가하는 일은 꼭 필요한 경우가 아니면 피해야 한다.   <br />
<br /></li>
  <li>새로운 인터페이스를 만드는 경우라면 표준적인 메서드 구현을 제공하는 데 아주 유용한 수단이다.     <br />
<br /></li>
  <li>디폴트 메서드는 인터페이스로부터 메서드를 제거하거나 기존 메서드의 시그니처를 수정하는 용도가 아님을 명심        <br />
<br /></li>
  <li>디폴트 메서드라는 도구가 생겼어도 인터페이스 설계는 세심하게  <br />
<br /></li>
  <li>새로운 인터페이스는 릴리스 전에 반드시 테스트를 거쳐야 한다.  <br />
<br /></li>
  <li>인터페이스를 릴리스한 후라도 결함을 수정하는게 가능한 경우도 있겠지만, 절대 그 가능성에 기대서는 안된다.</li>
</ul>

<p><br />       <br />
<br /></p>

<h2 id="22-인터페이스는-타입을-정의하는-용도로만-사용하라">22. 인터페이스는 타입을 정의하는 용도로만 사용하라.</h2>

<ul>
  <li>인터페이스 : 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할</li>
  <li>인터페이스 구현 : 자신의 인스턴스로 무엇을 할 수 있는지 클라이언트에게 얘기해주는 것    <br />
<br /></li>
</ul>

<p>예) 상수 인터페이스  <br />
메서드 없이 상수를 뜻하는 static final 필드만 갖고 있는 인터페이스  <br />
정규화된 이름을(qualified name) 쓰는 것을 피하고자 이 인터페이스를 구현한다.</p>

<p>상수는 내부 구현에 해당한다.     <br />
상수 인터페이스 구현     <br />
-&gt; 내부 구현을 클래스의 API로 노출하는 행위        <br />
-&gt; 클라이언트 코드가 내부 구현에 해당하는 이 상수들에 종속</p>

<p><br />   <br />
<br /></p>

<h2 id="23-태그-달린-클래스보다는-클래스-계층구조를-활용하라">23. 태그 달린 클래스보다는 클래스 계층구조를 활용하라.</h2>

<p>두 가지 이상의 의미를 표현할 수 있으며,    <br />
그중 현재 표현하는 의미를 태그 값으로 알려주는 클래스가 있다.     <br />
<br /></p>

<h3 id="예-원과-사각형을-표현할-수-있는-클래스">예) 원과 사각형을 표현할 수 있는 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Figure</span> <span class="o">{</span>
    <span class="kd">enum</span> <span class="nc">Shape</span> <span class="o">{</span> <span class="no">RECTANGLE</span><span class="o">,</span> <span class="no">CIRCLE</span> <span class="o">};</span>
    
    <span class="c1">// 태그 필드 - 현재 모양을 나타낸다.   </span>
    <span class="kd">final</span> <span class="nc">Shape</span> <span class="n">shape</span><span class="o">;</span>
    
    <span class="c1">// 다음 필드들은 모양이 사각형일 때만 쓰인다. (RECTANGLE)</span>
    <span class="kt">double</span> <span class="n">length</span><span class="o">;</span>
    <span class="kt">double</span> <span class="n">width</span><span class="o">;</span>
    
    <span class="c1">// 다음 필드는 모양이 원일 때만 쓰인다. (CIRCLE)   </span>
    <span class="kt">double</span> <span class="n">radius</span><span class="o">;</span>
    
    <span class="c1">// 사각형 생성자   </span>
    <span class="nc">Figure</span><span class="o">(</span><span class="kt">double</span> <span class="n">length</span><span class="o">,</span> <span class="kt">double</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">}</span>
    
    <span class="c1">// 원 생성자 </span>
    <span class="nc">Figure</span><span class="o">(</span><span class="kt">double</span> <span class="n">radius</span><span class="o">)</span> <span class="o">{</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">}</span>
    
    <span class="kt">double</span> <span class="nf">area</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">shape</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
        <span class="o">}</span>
    <span class="o">}</span>
     
<span class="o">}</span>
</code></pre></div></div>

<p>태그 달린 클래스에는 단점이 한가득이다.</p>

<ul>
  <li>열거 타입 선언</li>
  <li>태그 필드</li>
  <li>switch</li>
  <li>가독성</li>
  <li>다른 의미를 위한 코드로 인한 메모리 낭비</li>
  <li>필드를 final로 선언하려면 해당 의미에 쓰이지 않는 필드도 생성자에서 초기화해야함</li>
  <li>또 다른 의미를 추가하면 코드 수정 (ex. switch 문을 찾아 새 의미 처리 코드 추가)</li>
  <li>인스턴스의 타입만으로 현재 나타내는 의미를 알 수 없다.</li>
</ul>

<p>태그 달린 클래스는 장황하고, 오류를 내기 쉽고 비효율적이다.</p>

<p><br /></p>

<p>객체 지향 언어는 타입 하나로 다양한 의미의 객체를 표현하는 훨씬 나은 수단을 제공한다. <br />
-&gt; 클래스 계층구조를 활용하는 <strong>서브 타이핑(subtyping)</strong> 이다.  <br />
<br /></p>

<h3 id="태그-달린-클래스를-클래스-계층구조로-바꾸는-방법">태그 달린 클래스를 클래스 계층구조로 바꾸는 방법</h3>

<p>(1) 가장 먼저 계층 구조의 <strong>루트(root)가 될 추상 클래스</strong> 정의    <br />
(2) 태그 값에 따라 동작이 달라지는 메서드는 추상 메서드로 선언    <br />
(3) 태그 값에 상관없는 동작이 일정한 메서드는 루트 클래스에 일반 메서드로 추가     <br />
(4) 모든 하위 클래스에서 공통으로 사용하는 데이터 필드들도 전부 루트 클래스에 올림    <br />
(5) 루트 클래스를 확장한 구체 클래스를 의미별로 하나씩 정의한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Figure.java </span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Figure</span> <span class="o">{</span>
    <span class="kd">abstract</span> <span class="kt">double</span> <span class="nf">area</span><span class="o">();</span>
<span class="o">}</span>

<span class="c1">// Circle.java </span>
<span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="nc">Figure</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">double</span> <span class="n">radius</span><span class="o">;</span>

    <span class="nc">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">radius</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="n">radius</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Override</span> 
    <span class="kt">double</span> <span class="nf">area</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">PI</span> <span class="o">*</span> <span class="o">(</span><span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="o">);</span> <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Rectangle.java</span>
<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="nc">Figure</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">double</span> <span class="n">length</span><span class="o">;</span>
    <span class="kd">final</span> <span class="kt">double</span> <span class="n">width</span><span class="o">;</span>

    <span class="nc">Rectangle</span><span class="o">(</span><span class="kt">double</span> <span class="n">length</span><span class="o">,</span> <span class="kt">double</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">length</span> <span class="o">=</span> <span class="n">length</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">width</span>  <span class="o">=</span> <span class="n">width</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span> 
    <span class="kt">double</span> <span class="nf">area</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">length</span> <span class="o">*</span> <span class="n">width</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Square.java</span>
<span class="kd">class</span> <span class="nc">Square</span> <span class="kd">extends</span> <span class="nc">Rectangle</span> <span class="o">{</span>
    <span class="nc">Square</span><span class="o">(</span><span class="kt">double</span> <span class="n">side</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">side</span><span class="o">,</span> <span class="n">side</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>루트 클래스 : Figure</li>
  <li>태그 값에 따라 동작이 달라지는 구현체 : Square, Rectangle <br />
<br /></li>
</ul>

<p>(1) 루트 클래스를 건드리지 않고 다른 개발자들이 독립적으로 계층구조 사용, 확장 가능</p>

<p>(2) 타입이 의미별로 존재</p>

<ul>
  <li>변수 의미를 명시하거나 제한 가능</li>
  <li>특정 의미만 매개변수로 받기 가능</li>
</ul>

<p>(3) 타입 사이의 자연스러운 계층 관계를 반영할 수 있어    <br />
유연성과 컴파일타임 타입 검사 능력이 높아짐</p>

<p><br />      <br />
<br /></p>

<h2 id="24-멤버-클래스는-되도록-static으로-만들자">24. 멤버 클래스는 되도록 static으로 만들자.</h2>

<p>중첩 클래스는 자신을 감싼 바깥 클래스에서만 쓰여야 하며,  <br />
그 외에 쓰임새가 있다면 톱레벨 클래스로 만들어야 한다.</p>

<ul>
  <li>정적 멤버 클래스</li>
  <li>(비정적) 멤버 클래스</li>
  <li>익명 클래스</li>
  <li>지역 클래스</li>
</ul>

<p><br /></p>

<h3 id="정적-멤버-클래스">정적 멤버 클래스</h3>

<p>정적 멤버 클래스는 바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하면 일반 클래스와 똑같다.</p>

<ul>
  <li>private으로 선언하면 바깥 클래스에서만 접근할 수 있다.</li>
  <li>바깥 클래스의 private 멤버에도 접근할 수 있다.</li>
  <li>private으로 선언하면 바깥 클래스에서만 접근할 수 있다.</li>
  <li>private 정적 멤버 클래스는 바깥 클래스가 표현하는 객체의 한 부분(구성요소)을 나타낼 때 쓴다.</li>
</ul>

<p><br /></p>

<h3 id="비정적-멤버-클래스">비정적 멤버 클래스</h3>

<p>비정적 멤버 클래스의 인스턴스는 바깥 클래스의 인스턴스와 암묵적으로 연결된다.</p>

<ul>
  <li>바깥 인스턴스 없이는 생성할 수 없다.</li>
  <li>바깥 인스턴스 사이의 관계는 멤버 클래스가 인스턴스화될 때 확립되며, 더 이상 변경할 수 없다.</li>
  <li>바깥 클래스의 인스턴스에서 정규화된 this를 사용해 바깥 인스턴스의 호출이나 참조가 가능하다.</li>
  <li>드물게 직접 <code class="language-plaintext highlighter-rouge">바깥_인스턴스_클래스.new MemberClass(args)</code>를 호출해 수동으로 만들기도 하는데,   <br />
이 관계 정보는 비정적 멤버 클래스 인스턴스의 안에 만들어져 메모리 공간을 차지하며 생성 시간도 더 걸린다.</li>
</ul>

<p><br /></p>

<h3 id="멤버-클래스에서-바깥-인스턴스에-접근할-일이-없으면-무조건-static을-붙여서-정적-멤버-클래스로-만들자">멤버 클래스에서 바깥 인스턴스에 접근할 일이 없으면 무조건 static을 붙여서 정적 멤버 클래스로 만들자.</h3>
<p>static을 생략하면 바깥 인스턴스의 숨은 외부 참조를 갖게 된다.  <br />
이 참조를 저장하려면 시간과 공간이 소비된다.  <br />
더 심각한 문제는 가비지 컬렉션이 바깥 클래스의 인스턴스를 수거하지 못하는 메모리 누수가 생길 수 있다는 점이다.</p>

<p><br /></p>

<h3 id="static--non-static-객체-생성">static / non-static 객체 생성</h3>

<ul>
  <li>정적 내부 클래스의 경우 다음과 같이 객체 생성이 가능하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
    <span class="no">A</span><span class="o">.</span><span class="na">B</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="no">B</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">static</code> 예약어가 있음으로 인해 독립적으로 생성할 수 있다.  <br />
<br /></p>

<ul>
  <li>비정적 내부 클래스인 경우 다음과 같이 생성해야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">foo</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// ex1</span>
    <span class="no">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A</span><span class="o">();</span>
    <span class="no">A</span><span class="o">.</span><span class="na">B</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">new</span> <span class="nf">B</span><span class="o">();</span>
    
    <span class="c1">// ex2</span>
    <span class="no">A</span><span class="o">.</span><span class="na">B</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A</span><span class="o">().</span><span class="na">new</span> <span class="no">B</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>반드시 A 객체를 생성한 뒤 A 객체를 이용해서 생성해야 한다.   <br />
즉 비정적 내부 클래스는 바깥 클래스에 대한 참조가 필요하다는 것이다.</p>

<p><br /></p>

<h3 id="static--non-static-메모리-누수-가능성">static / non-static 메모리 누수 가능성</h3>

<p>비정적 내부 클래스의 경우 바깥 클래스에 대한 참조를 가지고 있기 때문에 메모리 누수가 발생할 여지가 있다.   <br />
바깥 클래스는 더 이상 사용되지 않지만 내부 클래스의 참조로 인해 GC가 수거하지 못해      <br />
바깥 클래스의 메모리 해제를 하지 못하는 경우가 발생할 수 있다.</p>

<p>정적 내부 클래스의 경우 바깥 클래스에 대한 참조 값을 가지고 있지 않기 때문에 메모리 누수가 발생하지 않는다.</p>

<p><br /></p>

<h3 id="static--non-static-사용-시기">static / non-static 사용 시기</h3>

<p>메모리 누수가 발생할 수 있는 문제점이 있기 때문에     <br />
내부 클래스가 독립적으로 사용된다면 정적 클래스로 선언하여 사용하는 것이 좋다.    <br />
<br /></p>

<ul>
  <li>비정적 멤버 클래스    <br />
비정적 클래스를 어댑터 패턴을 이용하여 <strong>바깥 클래스를 다른 클래스로 제공할 때</strong> 사용하면 좋다.    <br />
예) HashSet의 <code class="language-plaintext highlighter-rouge">keySet()</code> : Map의 key에 해당하는 값들을 Set으로 반환     <br />
어댑터 패턴을 이용해서 Map을 Set으로 제공한다.    <br />
<br /></li>
  <li>정적 멤버 클래스       <br />
바깥 클래스가 표현하는 객체의 한 부분(구성 요소)을 나타낼 때 쓴다.    <br />
예) Map 구현체의 <code class="language-plaintext highlighter-rouge">키-값</code> 쌍을 표현하는 엔트리 객체      <br />
엔트리 선언 시 static을 빠뜨려도 맵은 동작하겠지만    <br />
모든 엔트리가 바깥 Map으로 참조를 갖게 되어 공간과 시간이 낭비된다.</li>
</ul>

<p><br /></p>

<h3 id="static--non-static-멤버-클래스가-public이나-protected-멤버라면">static / non-static 멤버 클래스가 public이나 protected 멤버라면?</h3>

<p>공개된 클래스의 public이나 protected 멤버라면 정적이냐 아니냐는 두 배로 중요해진다.   <br />
멤버 클래스 역시 공개 API가 되기 때문에 향후 릴리스에서 static을 붙이면 하위 호환성이 떨어진다.</p>

<p><br /></p>

<h3 id="익명-클래스-anonymous-inner-class">익명 클래스 (Anonymous Inner Class)</h3>

<ul>
  <li>
    <p>이름이 없다.</p>
  </li>
  <li>
    <p>바깥 클래스의 멤버도 아니다.</p>
  </li>
  <li>
    <p>멤버와 달리 쓰리는 시점에 동시에 인스턴스가 만들어진다.</p>
  </li>
  <li>
    <p>오직 비정적인 문맥에서 사용될 때만 바깥 클래스의 인스턴스를 참조할 수 있다.</p>
  </li>
  <li>
    <p>정적 문맥에서라도 상수 변수 이외의 정적 멤버는 가질 수 있다.</p>
  </li>
</ul>

<p>즉, 상수 표현을 위해 초기화된 final 기본 타입과 문자열 필드만 가질 수 있음  <br />
<br /></p>

<p>익명 클래스는 응용하는 데 제약이 많은 편이다.</p>

<ul>
  <li>
    <p>선언한 지점에서만 인스턴스를 만들 수 있다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">instanceof</code> 검사나 클래스의 이름이 필요하 작업은 수행 불가</p>
  </li>
  <li>
    <p>여러 인터페이스를 구현할 수 없다.</p>
  </li>
  <li>
    <p>인터페이스를 구현하는 동시에 다른 클래스를 상속할 수 없다.</p>
  </li>
  <li>
    <p>익명 클래스를 사용하는 클라이언트는 그 익명 클래스가 상위 타입에서 상속한 멤버 외에는 호출할 수 없다.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인터페이스 사용</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Monster</span><span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getName</span><span class="o">();</span>
<span class="o">}</span> 

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">Monster</span> <span class="n">monster</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Monster</span><span class="o">(){</span>
        <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span>
            <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">monster</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="o">}</span>


<span class="c1">// 클래스 상속 사용 </span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pet</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"부모 클래스"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span>
            <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">Pet</span> <span class="n">pet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pet</span><span class="o">(){</span>
            <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"익명 내부 클래스"</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span>
                <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
            <span class="o">}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> <span class="c1">// 결과 : 익명 내부 클래스</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Pet 익명 클래스는 Pet 클래스는 아니다.                    <br />
생성된 인스턴스의 클래스 이름 확인 <code class="language-plaintext highlighter-rouge">instance.getClass().getName</code>                <br />
<code class="language-plaintext highlighter-rouge">Pet + $ + n(생성된 몇번 째)</code> 이런식의 클래스 이름이 나온다.             <br />
인터페이스로 선언된 익명 클래스는 현재 main에 속해있는 클래스 이름을 반환한다.           <br />
즉 자바에서는 이 서로 두개의 클래스를 같은 클래스로 보고 있지 않다는 것이다.</p>

<p><br /></p>

<h4 id="사용-시기">사용 시기</h4>

<ul>
  <li>
    <p>자바가 람다를 지원하기 전에 즉석에서 작은 함수 객체나 처리 객체를 만드는 데 <br />
익명 클래스를 주로 사용했다.</p>
  </li>
  <li>
    <p>정적 팩토리 메서드를 구현할 때 사용한다.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="지역-클래스">지역 클래스</h3>

<p>네 가지 중첩 클래스 중 가장 드물게 사용된다.</p>

<p>지역 클래스는 지역 변수처럼 메소드 내부에 정의되는 클래스를 말한다.</p>

<ul>
  <li>지역 클래스 지역 변수를 선언할 수 있는 곳이면 실질적으로 어디서든 선언할 수 있고,    <br />
유효 범위도 지역 변수와 같다. <br />
<br /></li>
  <li>멤버 클래스처럼 이름이 있고 반복해서 사용할 수 있다.   <br />
<br /></li>
  <li>익명 클래스처럼 비정적 문맥에서 사용될 때만 바깥 인스턴스를 참조할 수 있으며 <br />
정적 멤버는 가질 수 없다.</li>
</ul>

<p><br /></p>

<h3 id="핵심-정리">핵심 정리</h3>

<ul>
  <li>메서드 밖에서도 사용해야 하거나 메서드 안에 정의하기엔 너무 길다면 멤버 클래스로 만든다.         <br />
<br /></li>
  <li>멤버 클래스의 인스턴스 각각이 바깥 인스턴스를 참조한다면 비정적으로,        <br />
그렇지 않으면 정적으로 만든다.      <br />
<br /></li>
  <li>중첩 클래스가 한 메서드 안에서만 쓰인다면 그 인스턴스를 생성하는 시점이 단 한 곳이고         <br />
해당 타입으로 쓰기에 적합한 클래스나 인터페이스가 이미 있다면 익명 클래스로 만든다.        <br />
그렇지 않으면 지역 클래스로 만든다.</li>
</ul>

<p><br />   <br />
<br /></p>

<h2 id="25-톱레벨-클래스는-한-파일에-하나만-담으라">25. 톱레벨 클래스는 한 파일에 하나만 담으라.</h2>

<p>소스 파일 하나에 톱레벨 클래스를 여러 개 선언하더라도 자바 컴파일러가 불평하지는 않지만      <br />
아무런 이득 없이 위험을 감수해야 하는 행위다.</p>

<p>한 클래스를 여러 가지로 정의할 수 있지만 어느 소스 파일을 먼저 컴파일하냐에 따라 달라진다.
<br /></p>

<p>예) 집기(Utensil)와 디저트(Dessert) 클래스를 담은 Utensil.java</p>

<ul>
  <li>Main.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Utensil</span><span class="o">.</span><span class="na">Name</span> <span class="o">+</span> <span class="nc">Dessert</span><span class="o">.</span><span class="na">Name</span><span class="o">);</span>       
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Utensil.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Utensil</span> <span class="o">{</span> 
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"pan"</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Dessert</span> <span class="o">{</span> 
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"cake"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Dessert.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Utensil</span> <span class="o">{</span> 
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"pot"</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Dessert</span> <span class="o">{</span> 
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NAME</span> <span class="o">=</span> <span class="s">"pie"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>이때 우연히 똑같은 두 클래스를 담은 Dessert.java 파일을 만들었다고 해보자.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">javac Main.java Dessert.java</code> 명령으로 컴파일한다면?     <br />
컴파일 오류가 나고 클래스 중복 정의했다고 알려줄 것이다.    <br />
<br /></li>
  <li><code class="language-plaintext highlighter-rouge">javac Main.java</code>나 <code class="language-plaintext highlighter-rouge">javac Main.java Utensil.java</code> 명령으로 컴파일하면?  <br />
pancake를 출력한다.   <br />
<br /></li>
  <li><code class="language-plaintext highlighter-rouge">javac Main.java Dessert.java</code> 명령으로 컴파일하면? <br />
potpie를 출력한다. <br />
<br /></li>
</ul>

<p>컴파일러에 어느 소스 파일을 먼저 건네느냐에 따라 동작이 달라지므로 반드시 바로 잡아야 하는 문제다.    <br />
<br /></p>

<p>해결책은 톱레벨 클래스들을 서로 소스 파일로 분리하면 그만이다.  <br />
다른 클래스에 딸린 부차적인 클래스라면 정적 멤버 클래스를 사용하는 방법을 고민해볼 수 있다.</p>

<p>정적 멤버 클래스로 만들면 읽기 좋고, private으로 선언하면 접근 범위도 최소로 관리할 수 있다.</p>

<p><br /></p>
:ET