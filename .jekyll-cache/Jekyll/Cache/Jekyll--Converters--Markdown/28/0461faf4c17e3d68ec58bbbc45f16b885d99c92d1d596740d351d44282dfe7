I"NO<p><br /></p>

<h2 id="다이나믹-프로그래밍">다이나믹 프로그래밍</h2>
<p>메모리 공간을 약간 더 사용하면 연산 속도를 비약적으로 증가시킬 수 있는 방법이 있다.      <br />
대표적인 방법이 다이나믹 프로그래밍 기법으로 동적 게획법이라고 표현하기도 한다.</p>

<p>다이나믹 프로그래밍으로 해결할 수 있는 대표적인 예시로 피보나치 수열이 있다.</p>
<ul>
  <li>n번째 피보나치 수 = (n-1)번째 피보나치 수 + (n-2)번째 피보나치 수</li>
  <li>단 1번째, 2번째 피보나치 수 = 1</li>
</ul>

<p><br /></p>

<p>위 식을 프로그래밍으로 표현하려면 재귀 함수를 사용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">def</span> <span class="nf">fibo</span><span class="o">(</span><span class="n">x</span><span class="o">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="n">or</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">2</span><span class="o">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nf">fibo</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibo</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="o">)</span>

<span class="n">print</span><span class="o">(</span><span class="n">fibo</span><span class="o">(</span><span class="mi">4</span><span class="o">))</span>
</code></pre></div></div>

<p>그러나 <code class="language-plaintext highlighter-rouge">fibo(n)</code> 함수에서 n이 커지면 커질수록 수행 시간이 기하급수적으로 늘어나기 때문에 심각한 문제가 생길 수 있다.     <br />
호출되는 함수를 생각해보면 동일한 함수가 반복적으로 호촐되는 것을 알 수 있다.</p>

<p><br /></p>

<p>이러한 문제는 다이나믹 프로그래밍을 사용하면 효율적으로 해결할 수 있다.   <br />
다만 항상 사용할 수는 없고 다음 조건을 만족할 때 사용할 수 있다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 큰 문제를 작은 문제로 나눌 수 있다. 
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
</code></pre></div></div>

<p><br /></p>

<p>이 문제를 메모제이션 기법을 사용해 해결할 수 있다.  <br />
한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d = [0] * 100 

def fibo(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]
    
print(fibo(99))
</code></pre></div></div>

<p>다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.</p>

<p><br />
<br /></p>

<h2 id="탑다운top-down--보텀업bottom-up-방식">탑다운(top-down) &amp; 보텀업(bottom-up) 방식</h2>

<ul>
  <li>탑다운 방식(메모제이션): 재귀 함수를 이용해 큰 문제를 해결하기 위해 작은 문제를 호출하는 것</li>
  <li>보텀업 방식: 반복문을 이용해 작은 문제를 차근차근 답을 도출하는 것</li>
</ul>

<p><br />
<br /></p>

<h2 id="문제-1로-만들기">문제: 1로 만들기</h2>

<p><img width="600" src="https://user-images.githubusercontent.com/33855307/146565704-a9e89a34-be16-4f3d-abd7-8f46f886ed99.jpg" /></p>

<p>점화식: <code class="language-plaintext highlighter-rouge">min(Ai-1, Ai/2, Ai/3, Ai/5) + 1</code><br />
1을 더해주는 이유는 함수의 호출 횟수를 구해야 하기 때문이다.   <br />
1을 빼는 연산을 제외하고 해당 수로 나누어떨어질 때만 더 작은 수를 비교하면 된다.</p>

<p><br /></p>

<h2 id="풀이-코드">풀이 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
	
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">5</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="문제-개미-전사">문제: 개미 전사</h2>

<p><img width="600" src="https://user-images.githubusercontent.com/33855307/146627198-dd956cc2-82db-4992-af11-eec82fe2233c.jpg" /></p>

<p>i번째 식량창고에 대해서 털지 안털지의 여부를 결정할 때, 2가지 경우만 비교하면 된다.</p>

<p><img width="450" src="https://user-images.githubusercontent.com/33855307/146627546-d33680ee-cbc7-49df-b656-6bce465b4efe.jpg" /></p>

<p>(1) <code class="language-plaintext highlighter-rouge">i-1</code>번째 식량창고를 털기로 결정한 경우 현재의 식량창고를 털 수 없다.    <br />
(2) <code class="language-plaintext highlighter-rouge">i-2</code>번째 식량창고를 텅ㅇ기로 결정한 경우 현재의 식량창고를 털 수 있다.</p>

<p>한 칸 이상 떨어진 식량창고는 항상 털 수 있기 때문에 <code class="language-plaintext highlighter-rouge">i-3</code>번째 이하의 식량창고에 대해서는 고려할 필요가 없다.</p>

<p>더 많은 식량을 털 수 있는 경우를 선택하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">]+</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="풀이-코드-1">풀이 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
<span class="n">d</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="n">d</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]);</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="문제-바닥-공사">문제: 바닥 공사</h2>

<p><img width="600" src="https://user-images.githubusercontent.com/33855307/146627655-ac9eb75f-c2da-4fcc-b0af-b48168515511.jpg" /></p>

<p><img width="500" src="https://user-images.githubusercontent.com/33855307/146628315-0200f66d-0057-4bca-b004-b51be3674350.jpg" /></p>

<p><br /></p>

<h2 id="풀이-코드-2">풀이 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">d</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">d</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">d</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="o">])</span> <span class="o">%</span> <span class="mi">796796</span><span class="o">;</span>
<span class="o">}</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">[</span><span class="n">n</span><span class="o">]);</span>
</code></pre></div></div>

<p><br />
<br /></p>

<h2 id="문제-효율적인-화폐-구성">문제: 효율적인 화폐 구성</h2>

<p><img width="600" src="https://user-images.githubusercontent.com/33855307/146628377-ea19dbe8-0dd3-481e-bc79-3be41ea71d1f.jpg" /></p>

<p>화폐 단위가 큰 단위가 작은 단위의 배수가 아니기 때문에      <br />
매번 가장 큰 화폐 단위로부터 처리하는 방법으로는 해결할 수 없고 다이나믹 프로그래밍을 이용해야 한다.</p>

<p>금액 i를 만들 수 있는 최소한의 화폐 개수를 ai, 화폐의 단위를 k라고 했을 때     <br />
(<code class="language-plaintext highlighter-rouge">ai-k</code>는 금액 <code class="language-plaintext highlighter-rouge">i-k</code>를 만들 수 있는 최소한의 화폐 개수를 의미)</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ai-k</code>를 만드는 방법이 존재하는 경우, <code class="language-plaintext highlighter-rouge">ai = min(ai, ai-k + 1)</code></li>
  <li><code class="language-plaintext highlighter-rouge">ai-k</code>를 만드는 방법이 존재하지 않는 경우, <code class="language-plaintext highlighter-rouge">ai = 10001</code></li>
</ul>

<p><br /></p>

<h2 id="풀이-코드-3">풀이 코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">coin</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
	<span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">dp</span><span class="o">,</span> <span class="mi">10001</span><span class="o">);</span>

	<span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">!=</span> <span class="mi">10001</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">dp</span><span class="o">));</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">==</span> <span class="mi">10001</span><span class="o">)</span> <span class="o">{</span> 
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">m</span><span class="o">]);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

:ET