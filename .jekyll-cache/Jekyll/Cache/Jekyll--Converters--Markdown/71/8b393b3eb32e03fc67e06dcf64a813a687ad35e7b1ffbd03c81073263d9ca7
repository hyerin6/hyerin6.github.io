I" <h1 id="연관관계-매핑-기초">연관관계 매핑 기초</h1>

<p>엔티티들은 대부분 다른 엔티티와 연관관계가 있다. <br />
그런데 객체는 참조(주소)를 사용해서 관계를 맺고 테이블은 외래키를 사용해서 관계를 맺는다.</p>

<ul>
  <li>방향
    <ul>
      <li>단방향 : 한 쪽만 참조</li>
      <li>양방향 : 양쪽 모두 서로 참조<br />
방향은 객체 관계에서만 존재하고 테이블 관계에서는 항상 양방향이다.</li>
    </ul>
  </li>
  <li>
    <p>다중성    <br />
다대일, 일대다, 일대일, 다대다 다중성이 있다.</p>
  </li>
  <li>연관관계의 주인   <br />
객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야 한다.</li>
</ul>

<h2 id="1-단방향-연관관계">1. 단방향 연관관계</h2>
<h3 id="1-1-다대일n1-단방향-관계">1-1 다대일(N:1) 단방향 관계</h3>
<p>예) Member —(N, 1)— Team</p>

<ul>
  <li>
    <p>객체 연관관계와 테이블 연관관계의 가장 큰 차이  <br />
참조를 통한 연관관계는 언제나 단방향이다. 객체간에 연관관계를 양방향으로 만들고 싶으면 <br />
반대쪽에도 필드를 추가해서 참조를 보관해야 한다. 결국 연관관계를 하나 더 만들어야 한다. <br />
하지만 이는 서로 다른 반방향 관계 2개라고 할 수 있다. <br />          <br />
반면에 테이블은 외래키 하나로 양방향으로 조인할 수 있다.</p>
  </li>
  <li>
    <p>객체 연관관계 vs 테이블 연관관계            <br />
객체 연관관계는 데이터를 조회할 때       <br />
객체는 참조(주소)를 사용하지만 테이블은 조인(JOIN)을 사용한다.   <br /></p>

    <ul>
      <li>참조를 사용하는 객체의 연관관계는 단방향이다.</li>
      <li>객체를 양방향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다.   <br />       <br />
  A -&gt; B (a.b)  <br />     <br />
  B -&gt; A (b.a)  <br /></li>
      <li>외래 키를 사용하는 테이블의 연관관계는 양방향이다.   <br />                       <br />
  <code class="language-plaintext highlighter-rouge">A JOIN B</code> 가 가능하면 반대로 <code class="language-plaintext highlighter-rouge">B JOIN A</code> 도 가능하다.</li>
    </ul>
  </li>
  <li>
    <p>예제 코드</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java   </span>
<span class="nd">@ManyToOne</span> 
<span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"TEAM_ID"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>

<span class="c1">// Team.java </span>
<span class="nd">@OneToMany</span> 
<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span><span class="o">;</span>
</code></pre></div></div>

<h5 id="manytoone"><code class="language-plaintext highlighter-rouge">@ManyToOne</code></h5>
<p>다대일 관계라는 매핑 정보이다.  <br />
연관관계를 매핑할 때 이렇게 다중성을 나타내는 어노테이션을 필수로 사용해야 한다.</p>

<h5 id="joincolumnnameteam_id"><code class="language-plaintext highlighter-rouge">@JoinColumn(name="TEAM_ID")</code></h5>
<p>조인 컬럼은 외래 키를 매핑할 때 사용한다. <br />
<code class="language-plaintext highlighter-rouge">name</code> 속성에는 매핑할 외래 키 이름을 지정한다. <br />
이 어노테이션은 생략할 수 있다.</p>

<h2 id="2-양방향-연관관계">2. 양방향 연관관계</h2>
<p>회원에서 팀으로 접근하고 반대 방향인 팀에서도 회원으로 접근할 수 있도록 양방향 연관관계로 매핑해보자.</p>

<h4 id="객체-연관관계">객체 연관관계</h4>
<p>일대다 관계는 여러 건과 연관관계를 맺을 수 있으므로 컬렉션을 사용해야 한다.  <br />
<code class="language-plaintext highlighter-rouge">Team.members</code>를 List 컬렉션으로 추가할 수 있다.</p>

<p>객체 연관관계를 정리하면 다음과 같다.</p>
<ul>
  <li>회원 -&gt; 팀 (Member.team)</li>
  <li>팀 -&gt; 회원 (Team.members)</li>
</ul>

<h4 id="테이블-연관관계">테이블 연관관계</h4>
<p>데이터베이스 테이블은 외래 키 하나로 양방향으로 조회할 수 있다.</p>

<ul>
  <li>예제 코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java   </span>
<span class="nd">@ManyToOne</span> 
<span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"TEAM_ID"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTeam</span><span class="o">(</span><span class="nc">Team</span> <span class="n">team</span><span class="o">){</span> <span class="c1">// 연관관계 설정   </span>
    <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="n">team</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// Team.java </span>
<span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"team"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;();</span>
</code></pre></div></div>

<p>팀과 회원은 일대다 관계이기 때문에 팀 엔티티에 컬렉션인 <code class="language-plaintext highlighter-rouge">List&lt;Member&gt; members</code>를 추가했다.  <br />
<code class="language-plaintext highlighter-rouge">mappedBy</code> 속성은 양방향 매핑일 때 사용하는데 반대쪽 매핑의 필드 이름을 값으로 주면 된다.</p>

<p>이렇게 양방향 매핑을 완료하면 팀에서 회원 컬렉션으로 객체 그래프를 탐색할 수 있다.</p>

<h2 id="3-연관관계의-주인">3. 연관관계의 주인</h2>
<p>`mappedBy’는 왜 필요할까?</p>

<p>객체에는 양방향 연관관계라는 것이 없다.    <br />
테이블 연관관계는 다음과 같이 양방향 연관관계가 가능하다.  <br />
<strong>회원 &lt;-&gt; 팀</strong></p>

<p>엔티티를 양방향 연관관계로 설정하면 객체의 참조는 둘인데 외래 키는 하나다. <br />
그렇다면 둘 중 어떤 관계를 사용해서 외래 키를 관리해야 할까?     <br />
=&gt; 둘 사이에 차이가 발생</p>

<p>JPA에서는 두 객체 연관관계 중 하나를 정해서 테이블의 외래 키를 관리해야 하는데         <br />
이것을 연관관계의 주인이라고 한다.</p>

<h4 id="1-양방향-매핑의-규칙--연관관계의-주인">(1) 양방향 매핑의 규칙 : 연관관계의 주인</h4>
<ul>
  <li>방향 연관관계 매핑 시 지켜야할 규칙
    <ul>
      <li>두 연관관계 중 하나를 연관관계의 주인으로 정해야 한다.</li>
      <li>주인만이 데이터베이스 연관관계와 매핑되고 외래 키를 관리(등록, 수정, 삭제)할 수 있다.</li>
      <li>주인이 아닌 쪽은 읽기만 가능하다.</li>
      <li>주인이 아닌 쪽에서 <code class="language-plaintext highlighter-rouge">mappedBy</code> 속성을 사용해서 연관관계의 주인을 지정한다.</li>
      <li>주인은 <code class="language-plaintext highlighter-rouge">mappedBy</code> 속성을 사용하지 않는다.</li>
    </ul>
  </li>
</ul>

:ET