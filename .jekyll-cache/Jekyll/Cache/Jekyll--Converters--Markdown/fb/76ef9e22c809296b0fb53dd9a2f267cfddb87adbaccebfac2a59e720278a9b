I"~-<p><br /></p>

<h4 id="junit-관련-포스팅-참고">JUnit 관련 포스팅 참고</h4>

<ul>
  <li><a href="https://hyerin6.github.io/2020-01-13/Junit-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B5%AC%ED%98%84/">JUnit Test란?</a></li>
  <li><a href="https://hyerin6.github.io/2021-05-22/JUnit5/">JUnit5 시작하기</a></li>
</ul>

<p><br /><br />
<br /></p>

<p>테스트 코드를 작성하려다 BDDMockito 라이브러리에 대해 알게 되었고</p>

<p>라이브러리를 활용하여 테스트를 작성하는 법을 알아봤다.
<br /></p>

<p>먼저 개발하면서 자주 듣는 TDD와 BDD가 뭔지 알아보자.</p>

<p><br />
<br /></p>

<h1 id="tdd-란">TDD 란?</h1>

<p>TDD (Test Driven Development) 는 테스트가 개발을 주도한다는 의미이다.</p>

<p>테스트를 먼저 만들고 통과하는 기능을 개발한다.</p>

<p><br />
<br /></p>

<h1 id="bdd-란">BDD 란?</h1>

<p>BDD (Behavior Driven Development) 는 Danial Terhorst-North와 Charis Matts가 착안한</p>

<p><a href="https://dannorth.net/introducing-bdd/">BDD Introducing - Dan north &amp; associates</a> 방법론으로 BDD의 모든 근간은 TDD에서 착안되었기 때문에</p>

<p>TDD가 추구하는 가치와 크게 다르지 않다.</p>

<p><br /></p>

<p>Danial Terhorst-North는 TDD를 작성하다가 코드 분석과 복잡성으로 인해</p>

<p>누군가 나에게 “이 코드는 ~하게 짜여진 코드야” 라고 말해줬으면 좋겠다고 생각했다고 한다.</p>

<p><br /></p>

<p>그래서 행동 중심 개발, 행동에 기반하여 TDD를 수행하기로 생각한 것이다.</p>

<p>간단하게 말하면 BDD는 애플리케이션이 어떻게 행동해야 하는지에 대한 공통된 이해를 구성하는 방법이다.</p>

<p><br /></p>

<p>TDD, BDD 많은 내용이 있지만 테스트 작성을 위해 BDDMockito 라이브러리 사용법이 대해 자세히 알아보자.</p>

<p><br />
<br /></p>

<h2 id="bdd-행동">BDD 행동</h2>

<p>(1) Narrative (논리적인 일련의 사건)</p>

<p>(2) Given/When/Then</p>

<p><br /></p>

<p>모든 테스트 문장은 Narrative 하게 되어야 한다.</p>

<p>즉 코드보다 인간의 언어와 유사하게 구성되어야 한다.</p>

<p><br /></p>

<p>모든 테스트 문장은 Given/When/Then 으로 나눠서 작성할 수 있어야 한다.</p>

<p><br /></p>

<ul>
  <li>Given
    <ul>
      <li>테스트를 위해 주어진 상태</li>
      <li>테스트 대상에게 주어진 조건</li>
      <li>테스트가 동작하기 위해 주어진 환경</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>When
    <ul>
      <li>테스트 대상에게 가해진 어떠한 상태</li>
      <li>테스트 대상에게 주어진 어떤 조건</li>
      <li>테스트 대상의 상태를 변경시키기 위한 환경</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>Then
    <ul>
      <li>앞선 과정의 결과</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>어떤 상태에서 출발 (given)하여 어떤 상태의 변화를 가했을 때 (when)</p>

<p>기대하는 어떤 상태가 되어야 한다.</p>

<p><br />
<br /></p>

<h2 id="bddmockito를-이용한-bdd">BDDMockito를 이용한 BDD</h2>

<p>주석을 이용하여 Given/When/Then 구조를 나눈 테스트 코드를 많이 봤는데</p>

<p>BDDMockito를 사용하는 방법도 있다.</p>

<p><br /></p>

<p>BDDMockito란 Mockito 라이브러리 내에 존재하는 BDDMockito 클래스를 말하며</p>

<p>BDD 지향적인 개발을 mockito에서 API 형태로 제공한다.</p>

<p><br /> <br />
<br /></p>

<h2 id="mockito-vs-bddmockito">Mockito vs. BDDMockito</h2>

<p>순수 Mockito에서 BDD의 Given/When/Then을 위해서</p>

<p>다음과 같이 <code class="language-plaintext highlighter-rouge">When()</code> 메서드와 <code class="language-plaintext highlighter-rouge">thenReturn()</code>을 이용하고 <code class="language-plaintext highlighter-rouge">verify()</code> 구문을 이용해 검증한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LinkedList</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="nc">LinkedList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// stubbing</span>
<span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">"first"</span><span class="o">);</span>
<span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">());</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">// first</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// Runtime exception 발생</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span> <span class="c1">// null</span>

<span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<p>위와 같이 특정 상황에 대한(when) 가짜로 결과를 만들어 주는 것을
Stubbing(스터빙)이라 한다.</p>

<p>가짜로 수행할 객체를 넣어주는 것이다.</p>

<p><br /></p>

<p>일련의 BDD의 Stubbing 과정인데 뭔가 맞지 않는 부분이 있다.</p>

<ul>
  <li>when()</li>
  <li>thenReturn()</li>
  <li>verify()</li>
</ul>

<p><br /></p>

<p>위 코드에 존재하는 3가지 행동 과정인데
개념적으로 Given에 해당하는 Mockito의
<code class="language-plaintext highlighter-rouge">when(mockedList.get(0))</code>의 이름이 when이라 헷갈린다.</p>

<p><br /> <br />
<br /></p>

<h2 id="bddmockito의-given-메서드">BDDMockito의 <code class="language-plaintext highlighter-rouge">given()</code> 메서드</h2>

<p>위와 같이 헷갈리는 문제를 <code class="language-plaintext highlighter-rouge">given()</code>으로</p>

<p>더 정확한 의미를 전달하는 것으로 해결할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>given(someClass.method(any())).willReturn()
</code></pre></div></div>

<p><br /></p>

<h3 id="given-메서드"><code class="language-plaintext highlighter-rouge">given()</code> 메서드</h3>

<p><code class="language-plaintext highlighter-rouge">given()</code>은 BDD의 given을 내포하고 있다.</p>

<p><code class="language-plaintext highlighter-rouge">given()</code>의 파라미터를 이용해서 어떤 상황에,</p>

<p>즉 어떤 메서드가 실행되었을 때의 테스트를 위한 상황 설정이 가능하다.</p>

<p><br /></p>

<p>위의 Stubbing 문장에서 3가지 의미를 담고 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">someClass.method()</code> : Mocking 할 메서드</li>
  <li><code class="language-plaintext highlighter-rouge">any()</code> : 메소드 파라미터</li>
  <li><code class="language-plaintext highlighter-rouge">willReturn()</code> : 메소드 반환 값</li>
</ul>

<p><br /> <br />
<br /></p>

<h3 id="mocking-할-메소드">Mocking 할 메소드</h3>

<p>Mocking 할 메소드라는 말이 무슨 뜻일까?</p>

<p>UserService를 테스트한다고 가정해보자.</p>

<p><br /></p>

<p>Unit Test에서 가장 중요한 것은 테스트 하려는 대상의 고립이다.</p>

<p>테스트 대상을 고립한다는 것은 테스트 대상에 연관된 다른 객체들은 관여하지 않도록</p>

<p>개발자가 가짜 객체를 넣어줘야 한다는 소리와 비슷하다.</p>

<p><br /></p>

<p>테스트 대상을 고립하기 위해서 Mockito의 <code class="language-plaintext highlighter-rouge">mock()</code>을 이용했고,</p>

<p>테스트 대상이 특정 결과를 수행하기 위해 연관된 객체의 연상을 주입해주면 된다.</p>

<p><br /></p>

<p>ex) UserService에는 현재 isExistByEmail 이라는 메서드가 존재한다.</p>

<p>해당 메서드 내부에 UserRepository 인스턴스가 existsByEmail 연산을 수행하고 있으므로</p>

<p>개발자는 UserRepository의 existsByEmail을 가짜로 주입해주면 된다.</p>

<p><br /><br />
<br /></p>

<h3 id="해당-메서드의-파라미터">해당 메서드의 파라미터</h3>

<p>해당 메서드는 예제에서 existsByEmail 메서드를 의미한다.</p>

<p>String으로 email을 받는 메서드다.</p>

<p><br /></p>

<p>다음과 같은 선택지가 존재한다.</p>

<ul>
  <li>모든 값을 받았을 때의 행동 정의 : <code class="language-plaintext highlighter-rouge">any()</code></li>
  <li>특정 값을 받았을 때의 행동 정의 : <code class="language-plaintext highlighter-rouge">eq()</code></li>
</ul>

<p><br />
<br /></p>

<h3 id="해당-메서드-수행했을-때-반환하는-값">해당 메서드 수행했을 때 반환하는 값</h3>

<p>행동을 반환할 때, 크게 3가지 방법이 존재한다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">willReturn()</code> : 반환 값을 명시</li>
</ul>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">willThrow()</code> : 예외를 던진다.</li>
</ul>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">will()</code> + invocation
<code class="language-plaintext highlighter-rouge">will()</code>은 <code class="language-plaintext highlighter-rouge">willReturn()</code>과는 조금 다르다.
willReturn은 고정된 값을 반환하는데, will에서는 invocation을 통해서
새로운 객체를 반환하거나 아예 새로운 행동을 반환할 수 있다.</li>
</ul>

<p><br />
<br /></p>

<h3 id="참고">참고</h3>
<ul>
  <li>
    <p><a href="https://dannorth.net/introducing-bdd/">https://dannorth.net/introducing-bdd/</a></p>
  </li>
  <li>
    <p><a href="https://wonit.tistory.com/493">https://wonit.tistory.com/493</a></p>
  </li>
  <li>
    <p><a href="https://mingule.tistory.com/43">https://mingule.tistory.com/43</a></p>
  </li>
  <li>
    <p><a href="https://yorr.tistory.com/26">https://yorr.tistory.com/26</a></p>
  </li>
  <li>
    <p><a href="https://dannorth.net/introducing-bdd/">https://dannorth.net/introducing-bdd/</a></p>
  </li>
</ul>

<p><br /></p>
:ET