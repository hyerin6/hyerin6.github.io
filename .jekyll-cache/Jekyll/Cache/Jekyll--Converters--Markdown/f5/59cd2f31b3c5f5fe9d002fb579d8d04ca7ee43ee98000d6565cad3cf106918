I"w.<p><br /></p>

<h2 id="loggingfilter로-로그-남기기">LoggingFilter로 로그 남기기</h2>

<p>Elasticsearch에 대해 알아보면서 ELK 스택도 함께 알게 되었고</p>

<p>ELK(ElasticSearch Logstash Kibana) 스택으로 로깅을 구현해보기로 했다.</p>

<p><a href="https://hyerin6.github.io/2021-09-17/es/">Elasticsearch란?</a></p>

<p><br /></p>

<p>구현 방법과 함께 어떤 모습으로 로그가 쌓이는지 확인해보고</p>

<p>Slack에 ERROR 로그 알람을 보내는 것까지 구현해보자.</p>

<p><br /> 
<br /></p>

<h3 id="1-logbackxml">1. <code class="language-plaintext highlighter-rouge">Logback.xml</code></h3>

<p>Spring에서 기본적으로 제공하는 로그가 있지만 Logstash에 로그를 쌓아</p>

<p>엘라스틱서치로 보내고 싶기 때문에 resource 에 다음 파일을 추가했다.</p>

<p><code class="language-plaintext highlighter-rouge">logback.xml</code> 파일을 따로 생성해 설정해주지 않으면</p>

<p>스프링이 설정해둔 로그가 찍힌다.</p>

<p><img src="https://user-images.githubusercontent.com/33855307/133736279-23f9e389-3863-4cfe-98f9-31f7f1e408b1.jpeg" alt="logging" /></p>

<p><br /><br />
<br /></p>

<h3 id="2-gradle">2. Gradle</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
</code></pre></div></div>

<p>logstash 사용을 위해 위 의존성을 추가한다.</p>

<p><br /> 
<br /></p>

<h3 id="3-loggingfilterjava">3. <code class="language-plaintext highlighter-rouge">LoggingFilter.java</code></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggingFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
		<span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="nc">ContentCachingRequestWrapper</span> <span class="n">requestWrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContentCachingRequestWrapper</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
		<span class="nc">ContentCachingResponseWrapper</span> <span class="n">responseWrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContentCachingResponseWrapper</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>

		<span class="k">try</span> <span class="o">{</span>
			<span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">requestWrapper</span><span class="o">,</span> <span class="n">responseWrapper</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
			<span class="nc">LoggingRequest</span> <span class="n">loggingRequest</span> <span class="o">=</span> <span class="n">getLoggingRequest</span><span class="o">(</span><span class="n">requestWrapper</span><span class="o">);</span>
			<span class="nc">String</span> <span class="n">log</span> <span class="o">=</span> <span class="nc">JsonUtils</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">loggingRequest</span><span class="o">);</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">log</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="n">responseWrapper</span><span class="o">.</span><span class="na">copyBodyToResponse</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="nc">LoggingRequest</span> <span class="nf">getLoggingRequest</span><span class="o">(</span><span class="nc">ContentCachingRequestWrapper</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
		<span class="nc">String</span> <span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LoggingRequest</span><span class="o">(</span><span class="n">requestURI</span><span class="o">,</span> <span class="n">method</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">OncePerRequestFilter</code>는 모든 서블릿에 일관된 요청을 처리하기 위해 만들어진 필터이다.</p>

<p>이 추상 클래스를 구현한 필터는 사용자의 한번에 요청 당 딱 한번만 실행되는 필터를 만들 수 있다.</p>

<p>필터에 대한 자세한 이야기는 다른 포스팅에서 해보자.</p>

<p>필터에서 <code class="language-plaintext highlighter-rouge">logger</code> 로그를 남기면 kibana에서 로그를 확인할 수 있다.</p>

<p><br />
<br /></p>

<h3 id="4-docker-compose">4. docker-compose</h3>

<p><a href="https://github.com/deviantony/docker-elk">https://github.com/deviantony/docker-elk</a></p>

<p>위 repository를 clone 받아서 설정을 마치고
<code class="language-plaintext highlighter-rouge">docker-compose up</code> 명령으로 elk를 띄운다.</p>

<p><br /></p>

<p><strong>설정해야 하는 부분</strong></p>

<ul>
  <li>유료 기능인 X-Pack이 포함되어 있기 때문에 주석처리하거나 없애야 한다.</li>
  <li>logstash &gt; pipeline &gt; logstash.conf</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input {
	tcp {
		port =&gt; 5000
		codec =&gt; json_lines
	}
}

filter {
	json {
		source =&gt; "message"
		remove_field =&gt; ["message"]
	}
}

output {
	elasticsearch {
		hosts =&gt; "elasticsearch:9200"
	}
}
</code></pre></div></div>

<p><br /></p>

<p><strong>기본 포트</strong></p>

<ul>
  <li>5044: Logstash 비트 입력</li>
  <li>5000: Logstash TCP 입력</li>
  <li>9600: Logstash 모니터링 API</li>
  <li>9200: 엘라스틱서치 HTTP</li>
  <li>9300: Elasticsearch TCP 전송</li>
  <li>5601: 키바나</li>
</ul>

<p><br />
<br /></p>

<h2 id="error-로그-slack으로-알림-받기">Error 로그 Slack으로 알림 받기</h2>

<p>ELK 스택으로 로깅을 구현했다.</p>

<p>슬랙으로 알림을 받는건 더 쉽게 구현할 수 있다.</p>

<p><br /><br />
<br /></p>

<h3 id="1-logbackxml-1">1. <code class="language-plaintext highlighter-rouge">Logback.xml</code></h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"SLACK"</span> <span class="na">class=</span><span class="s">"com.github.maricn.logback.SlackAppender"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;webhookUri&gt;</span>${webhook-uri}<span class="nt">&lt;/webhookUri&gt;</span>
    <span class="nt">&lt;layout</span> <span class="na">class=</span><span class="s">"ch.qos.logback.classic.PatternLayout"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;pattern&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} %msg %n<span class="nt">&lt;/pattern&gt;</span>
    <span class="nt">&lt;/layout&gt;</span>
    <span class="nt">&lt;colorCoding&gt;</span>true<span class="nt">&lt;/colorCoding&gt;</span>
<span class="nt">&lt;/appender&gt;</span>

<span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"ASYNC_SLACK"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.classic.AsyncAppender"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"SLACK"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">"ch.qos.logback.classic.filter.ThresholdFilter"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;level&gt;</span>WARN<span class="nt">&lt;/level&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>
<span class="nt">&lt;/appender&gt;</span>

<span class="nt">&lt;logger</span> <span class="na">name=</span><span class="s">"com.example.loggingslack"</span> <span class="na">level=</span><span class="s">"ALL"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"ASYNC_SLACK"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/logger&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>위에서 먼저 설정한 logstash 설정과 함께 <code class="language-plaintext highlighter-rouge">Logback.xml</code>에 작성해주면 된다.</p>

<p><br /></p>

<ul>
  <li>ASYNC_SLACK
현재 추천하는 방식으로 appender를 비동기 방식으로 사용하는걸 권장하고 있다.</li>
</ul>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;filter&gt;</code>
레벨을 설정하는 부분이다.</li>
</ul>

<p><br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;webhookUri&gt;</code>
SLACK webhookUri를 넣는 부분이다. <code class="language-plaintext highlighter-rouge">application.yml</code>에서 값을 가져오고 있다.</li>
</ul>

<p><br />
<br /></p>

<h3 id="2-incoming-webhooks">2. Incoming Webhooks</h3>

<p>슬랙 채널에서 Incoming Webhooks을 추가하여 원하는 형태로 설정하고</p>

<p>webhookUri를 복사해서 <code class="language-plaintext highlighter-rouge">Logback.xml</code> 에 넣어준다.</p>

<p><img src="https://user-images.githubusercontent.com/33855307/134321054-d1bc8331-8de7-48c3-8cbb-2c121712fa41.png" alt="slack1" /></p>

<p><br />
<br /></p>

<h3 id="3-gradle">3. Gradle</h3>

<p>salck 알람을 위해 다음 의존성을 추가해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="s">"com.github.maricn:logback-slack-appender:1.4.0"</span>
</code></pre></div></div>

<p><br />
<br /></p>

<p>위 모든 설정이 끝나면 ERROR 로그가 찍힐 때마다</p>

<p>다음과 같이 내가 설정한 슬랙 채널에 알람이 온다.</p>

<p><img src="https://user-images.githubusercontent.com/33855307/134321855-110adc8e-d167-4131-add5-83615e4fd87b.png" alt="slack" /></p>

<p><br /></p>

<p>지금 전송된 알람은 테스트한 것이기 때문에 “ERROR” 라는 메시지만 전송되었지만</p>

<p>에러가 발생한 원인과 원하는 메시지가 전송되도록 설정해놓으면 된다.</p>

<p><br /></p>

:ET